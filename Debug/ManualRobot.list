
ManualRobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096fc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  080098ac  080098ac  000198ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009948  08009948  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  08009948  08009948  00019948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009950  08009950  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009950  08009950  00019950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009954  08009954  00019954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08009958  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020180  2**0
                  CONTENTS
 10 .bss          00004558  20000180  20000180  00020180  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200046d8  200046d8  00020180  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00019838  00000000  00000000  000201f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003afb  00000000  00000000  00039a2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000015a0  00000000  00000000  0003d528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000010c6  00000000  00000000  0003eac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026d80  00000000  00000000  0003fb8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00019d06  00000000  00000000  0006690e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e6bc2  00000000  00000000  00080614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005dfc  00000000  00000000  001671d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0016cfd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000180 	.word	0x20000180
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009894 	.word	0x08009894

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000184 	.word	0x20000184
 80001ec:	08009894 	.word	0x08009894

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2iz>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d215      	bcs.n	8000ad2 <__aeabi_d2iz+0x36>
 8000aa6:	d511      	bpl.n	8000acc <__aeabi_d2iz+0x30>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d912      	bls.n	8000ad8 <__aeabi_d2iz+0x3c>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	4240      	negne	r0, r0
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad6:	d105      	bne.n	8000ae4 <__aeabi_d2iz+0x48>
 8000ad8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	bf08      	it	eq
 8000ade:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b970 	b.w	8000de4 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9e08      	ldr	r6, [sp, #32]
 8000b22:	460d      	mov	r5, r1
 8000b24:	4604      	mov	r4, r0
 8000b26:	460f      	mov	r7, r1
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d14a      	bne.n	8000bc2 <__udivmoddi4+0xa6>
 8000b2c:	428a      	cmp	r2, r1
 8000b2e:	4694      	mov	ip, r2
 8000b30:	d965      	bls.n	8000bfe <__udivmoddi4+0xe2>
 8000b32:	fab2 f382 	clz	r3, r2
 8000b36:	b143      	cbz	r3, 8000b4a <__udivmoddi4+0x2e>
 8000b38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b3c:	f1c3 0220 	rsb	r2, r3, #32
 8000b40:	409f      	lsls	r7, r3
 8000b42:	fa20 f202 	lsr.w	r2, r0, r2
 8000b46:	4317      	orrs	r7, r2
 8000b48:	409c      	lsls	r4, r3
 8000b4a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b4e:	fa1f f58c 	uxth.w	r5, ip
 8000b52:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b56:	0c22      	lsrs	r2, r4, #16
 8000b58:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b5c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b60:	fb01 f005 	mul.w	r0, r1, r5
 8000b64:	4290      	cmp	r0, r2
 8000b66:	d90a      	bls.n	8000b7e <__udivmoddi4+0x62>
 8000b68:	eb1c 0202 	adds.w	r2, ip, r2
 8000b6c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b70:	f080 811c 	bcs.w	8000dac <__udivmoddi4+0x290>
 8000b74:	4290      	cmp	r0, r2
 8000b76:	f240 8119 	bls.w	8000dac <__udivmoddi4+0x290>
 8000b7a:	3902      	subs	r1, #2
 8000b7c:	4462      	add	r2, ip
 8000b7e:	1a12      	subs	r2, r2, r0
 8000b80:	b2a4      	uxth	r4, r4
 8000b82:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b86:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b8a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b8e:	fb00 f505 	mul.w	r5, r0, r5
 8000b92:	42a5      	cmp	r5, r4
 8000b94:	d90a      	bls.n	8000bac <__udivmoddi4+0x90>
 8000b96:	eb1c 0404 	adds.w	r4, ip, r4
 8000b9a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b9e:	f080 8107 	bcs.w	8000db0 <__udivmoddi4+0x294>
 8000ba2:	42a5      	cmp	r5, r4
 8000ba4:	f240 8104 	bls.w	8000db0 <__udivmoddi4+0x294>
 8000ba8:	4464      	add	r4, ip
 8000baa:	3802      	subs	r0, #2
 8000bac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bb0:	1b64      	subs	r4, r4, r5
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	b11e      	cbz	r6, 8000bbe <__udivmoddi4+0xa2>
 8000bb6:	40dc      	lsrs	r4, r3
 8000bb8:	2300      	movs	r3, #0
 8000bba:	e9c6 4300 	strd	r4, r3, [r6]
 8000bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0xbc>
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	f000 80ed 	beq.w	8000da6 <__udivmoddi4+0x28a>
 8000bcc:	2100      	movs	r1, #0
 8000bce:	e9c6 0500 	strd	r0, r5, [r6]
 8000bd2:	4608      	mov	r0, r1
 8000bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd8:	fab3 f183 	clz	r1, r3
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	d149      	bne.n	8000c74 <__udivmoddi4+0x158>
 8000be0:	42ab      	cmp	r3, r5
 8000be2:	d302      	bcc.n	8000bea <__udivmoddi4+0xce>
 8000be4:	4282      	cmp	r2, r0
 8000be6:	f200 80f8 	bhi.w	8000dda <__udivmoddi4+0x2be>
 8000bea:	1a84      	subs	r4, r0, r2
 8000bec:	eb65 0203 	sbc.w	r2, r5, r3
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	4617      	mov	r7, r2
 8000bf4:	2e00      	cmp	r6, #0
 8000bf6:	d0e2      	beq.n	8000bbe <__udivmoddi4+0xa2>
 8000bf8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bfc:	e7df      	b.n	8000bbe <__udivmoddi4+0xa2>
 8000bfe:	b902      	cbnz	r2, 8000c02 <__udivmoddi4+0xe6>
 8000c00:	deff      	udf	#255	; 0xff
 8000c02:	fab2 f382 	clz	r3, r2
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	f040 8090 	bne.w	8000d2c <__udivmoddi4+0x210>
 8000c0c:	1a8a      	subs	r2, r1, r2
 8000c0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c12:	fa1f fe8c 	uxth.w	lr, ip
 8000c16:	2101      	movs	r1, #1
 8000c18:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c1c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c20:	0c22      	lsrs	r2, r4, #16
 8000c22:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c26:	fb0e f005 	mul.w	r0, lr, r5
 8000c2a:	4290      	cmp	r0, r2
 8000c2c:	d908      	bls.n	8000c40 <__udivmoddi4+0x124>
 8000c2e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c32:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x122>
 8000c38:	4290      	cmp	r0, r2
 8000c3a:	f200 80cb 	bhi.w	8000dd4 <__udivmoddi4+0x2b8>
 8000c3e:	4645      	mov	r5, r8
 8000c40:	1a12      	subs	r2, r2, r0
 8000c42:	b2a4      	uxth	r4, r4
 8000c44:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c48:	fb07 2210 	mls	r2, r7, r0, r2
 8000c4c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c50:	fb0e fe00 	mul.w	lr, lr, r0
 8000c54:	45a6      	cmp	lr, r4
 8000c56:	d908      	bls.n	8000c6a <__udivmoddi4+0x14e>
 8000c58:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c60:	d202      	bcs.n	8000c68 <__udivmoddi4+0x14c>
 8000c62:	45a6      	cmp	lr, r4
 8000c64:	f200 80bb 	bhi.w	8000dde <__udivmoddi4+0x2c2>
 8000c68:	4610      	mov	r0, r2
 8000c6a:	eba4 040e 	sub.w	r4, r4, lr
 8000c6e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c72:	e79f      	b.n	8000bb4 <__udivmoddi4+0x98>
 8000c74:	f1c1 0720 	rsb	r7, r1, #32
 8000c78:	408b      	lsls	r3, r1
 8000c7a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c82:	fa05 f401 	lsl.w	r4, r5, r1
 8000c86:	fa20 f307 	lsr.w	r3, r0, r7
 8000c8a:	40fd      	lsrs	r5, r7
 8000c8c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c90:	4323      	orrs	r3, r4
 8000c92:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c96:	fa1f fe8c 	uxth.w	lr, ip
 8000c9a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c9e:	0c1c      	lsrs	r4, r3, #16
 8000ca0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ca4:	fb08 f50e 	mul.w	r5, r8, lr
 8000ca8:	42a5      	cmp	r5, r4
 8000caa:	fa02 f201 	lsl.w	r2, r2, r1
 8000cae:	fa00 f001 	lsl.w	r0, r0, r1
 8000cb2:	d90b      	bls.n	8000ccc <__udivmoddi4+0x1b0>
 8000cb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cbc:	f080 8088 	bcs.w	8000dd0 <__udivmoddi4+0x2b4>
 8000cc0:	42a5      	cmp	r5, r4
 8000cc2:	f240 8085 	bls.w	8000dd0 <__udivmoddi4+0x2b4>
 8000cc6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cca:	4464      	add	r4, ip
 8000ccc:	1b64      	subs	r4, r4, r5
 8000cce:	b29d      	uxth	r5, r3
 8000cd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000cd8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cdc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ce0:	45a6      	cmp	lr, r4
 8000ce2:	d908      	bls.n	8000cf6 <__udivmoddi4+0x1da>
 8000ce4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cec:	d26c      	bcs.n	8000dc8 <__udivmoddi4+0x2ac>
 8000cee:	45a6      	cmp	lr, r4
 8000cf0:	d96a      	bls.n	8000dc8 <__udivmoddi4+0x2ac>
 8000cf2:	3b02      	subs	r3, #2
 8000cf4:	4464      	add	r4, ip
 8000cf6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfa:	fba3 9502 	umull	r9, r5, r3, r2
 8000cfe:	eba4 040e 	sub.w	r4, r4, lr
 8000d02:	42ac      	cmp	r4, r5
 8000d04:	46c8      	mov	r8, r9
 8000d06:	46ae      	mov	lr, r5
 8000d08:	d356      	bcc.n	8000db8 <__udivmoddi4+0x29c>
 8000d0a:	d053      	beq.n	8000db4 <__udivmoddi4+0x298>
 8000d0c:	b156      	cbz	r6, 8000d24 <__udivmoddi4+0x208>
 8000d0e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d12:	eb64 040e 	sbc.w	r4, r4, lr
 8000d16:	fa04 f707 	lsl.w	r7, r4, r7
 8000d1a:	40ca      	lsrs	r2, r1
 8000d1c:	40cc      	lsrs	r4, r1
 8000d1e:	4317      	orrs	r7, r2
 8000d20:	e9c6 7400 	strd	r7, r4, [r6]
 8000d24:	4618      	mov	r0, r3
 8000d26:	2100      	movs	r1, #0
 8000d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2c:	f1c3 0120 	rsb	r1, r3, #32
 8000d30:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d34:	fa20 f201 	lsr.w	r2, r0, r1
 8000d38:	fa25 f101 	lsr.w	r1, r5, r1
 8000d3c:	409d      	lsls	r5, r3
 8000d3e:	432a      	orrs	r2, r5
 8000d40:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d44:	fa1f fe8c 	uxth.w	lr, ip
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d50:	0c11      	lsrs	r1, r2, #16
 8000d52:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d56:	fb00 f50e 	mul.w	r5, r0, lr
 8000d5a:	428d      	cmp	r5, r1
 8000d5c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x258>
 8000d62:	eb1c 0101 	adds.w	r1, ip, r1
 8000d66:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d6a:	d22f      	bcs.n	8000dcc <__udivmoddi4+0x2b0>
 8000d6c:	428d      	cmp	r5, r1
 8000d6e:	d92d      	bls.n	8000dcc <__udivmoddi4+0x2b0>
 8000d70:	3802      	subs	r0, #2
 8000d72:	4461      	add	r1, ip
 8000d74:	1b49      	subs	r1, r1, r5
 8000d76:	b292      	uxth	r2, r2
 8000d78:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d7c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d84:	fb05 f10e 	mul.w	r1, r5, lr
 8000d88:	4291      	cmp	r1, r2
 8000d8a:	d908      	bls.n	8000d9e <__udivmoddi4+0x282>
 8000d8c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d90:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d94:	d216      	bcs.n	8000dc4 <__udivmoddi4+0x2a8>
 8000d96:	4291      	cmp	r1, r2
 8000d98:	d914      	bls.n	8000dc4 <__udivmoddi4+0x2a8>
 8000d9a:	3d02      	subs	r5, #2
 8000d9c:	4462      	add	r2, ip
 8000d9e:	1a52      	subs	r2, r2, r1
 8000da0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000da4:	e738      	b.n	8000c18 <__udivmoddi4+0xfc>
 8000da6:	4631      	mov	r1, r6
 8000da8:	4630      	mov	r0, r6
 8000daa:	e708      	b.n	8000bbe <__udivmoddi4+0xa2>
 8000dac:	4639      	mov	r1, r7
 8000dae:	e6e6      	b.n	8000b7e <__udivmoddi4+0x62>
 8000db0:	4610      	mov	r0, r2
 8000db2:	e6fb      	b.n	8000bac <__udivmoddi4+0x90>
 8000db4:	4548      	cmp	r0, r9
 8000db6:	d2a9      	bcs.n	8000d0c <__udivmoddi4+0x1f0>
 8000db8:	ebb9 0802 	subs.w	r8, r9, r2
 8000dbc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	e7a3      	b.n	8000d0c <__udivmoddi4+0x1f0>
 8000dc4:	4645      	mov	r5, r8
 8000dc6:	e7ea      	b.n	8000d9e <__udivmoddi4+0x282>
 8000dc8:	462b      	mov	r3, r5
 8000dca:	e794      	b.n	8000cf6 <__udivmoddi4+0x1da>
 8000dcc:	4640      	mov	r0, r8
 8000dce:	e7d1      	b.n	8000d74 <__udivmoddi4+0x258>
 8000dd0:	46d0      	mov	r8, sl
 8000dd2:	e77b      	b.n	8000ccc <__udivmoddi4+0x1b0>
 8000dd4:	3d02      	subs	r5, #2
 8000dd6:	4462      	add	r2, ip
 8000dd8:	e732      	b.n	8000c40 <__udivmoddi4+0x124>
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e70a      	b.n	8000bf4 <__udivmoddi4+0xd8>
 8000dde:	4464      	add	r4, ip
 8000de0:	3802      	subs	r0, #2
 8000de2:	e742      	b.n	8000c6a <__udivmoddi4+0x14e>

08000de4 <__aeabi_idiv0>:
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop

08000de8 <kinematikM>:
 */
#include "4kinematik.h"

double out[4];

void kinematikM(int x, int y, int th, double nos) {
 8000de8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000dec:	b086      	sub	sp, #24
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6178      	str	r0, [r7, #20]
 8000df2:	6139      	str	r1, [r7, #16]
 8000df4:	60fa      	str	r2, [r7, #12]
 8000df6:	ed87 0b00 	vstr	d0, [r7]
	out[0] = nos*2*(-sin(d2r(135))*x + cos(d2r(135))*y + 0.25*th);
 8000dfa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000dfe:	4602      	mov	r2, r0
 8000e00:	460b      	mov	r3, r1
 8000e02:	f7ff f9fb 	bl	80001fc <__adddf3>
 8000e06:	4602      	mov	r2, r0
 8000e08:	460b      	mov	r3, r1
 8000e0a:	4614      	mov	r4, r2
 8000e0c:	461d      	mov	r5, r3
 8000e0e:	6978      	ldr	r0, [r7, #20]
 8000e10:	f7ff fb40 	bl	8000494 <__aeabi_i2d>
 8000e14:	a38c      	add	r3, pc, #560	; (adr r3, 8001048 <kinematikM+0x260>)
 8000e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e1a:	f7ff fba5 	bl	8000568 <__aeabi_dmul>
 8000e1e:	4602      	mov	r2, r0
 8000e20:	460b      	mov	r3, r1
 8000e22:	4690      	mov	r8, r2
 8000e24:	4699      	mov	r9, r3
 8000e26:	6938      	ldr	r0, [r7, #16]
 8000e28:	f7ff fb34 	bl	8000494 <__aeabi_i2d>
 8000e2c:	a380      	add	r3, pc, #512	; (adr r3, 8001030 <kinematikM+0x248>)
 8000e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e32:	f7ff fb99 	bl	8000568 <__aeabi_dmul>
 8000e36:	4602      	mov	r2, r0
 8000e38:	460b      	mov	r3, r1
 8000e3a:	4640      	mov	r0, r8
 8000e3c:	4649      	mov	r1, r9
 8000e3e:	f7ff f9dd 	bl	80001fc <__adddf3>
 8000e42:	4602      	mov	r2, r0
 8000e44:	460b      	mov	r3, r1
 8000e46:	4690      	mov	r8, r2
 8000e48:	4699      	mov	r9, r3
 8000e4a:	68f8      	ldr	r0, [r7, #12]
 8000e4c:	f7ff fb22 	bl	8000494 <__aeabi_i2d>
 8000e50:	f04f 0200 	mov.w	r2, #0
 8000e54:	4b7a      	ldr	r3, [pc, #488]	; (8001040 <kinematikM+0x258>)
 8000e56:	f7ff fb87 	bl	8000568 <__aeabi_dmul>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	4640      	mov	r0, r8
 8000e60:	4649      	mov	r1, r9
 8000e62:	f7ff f9cb 	bl	80001fc <__adddf3>
 8000e66:	4602      	mov	r2, r0
 8000e68:	460b      	mov	r3, r1
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	4629      	mov	r1, r5
 8000e6e:	f7ff fb7b 	bl	8000568 <__aeabi_dmul>
 8000e72:	4602      	mov	r2, r0
 8000e74:	460b      	mov	r3, r1
 8000e76:	4973      	ldr	r1, [pc, #460]	; (8001044 <kinematikM+0x25c>)
 8000e78:	e9c1 2300 	strd	r2, r3, [r1]
	out[1] = nos*2*(-sin(d2r(225))*x + cos(d2r(225))*y + 0.25*th);
 8000e7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000e80:	4602      	mov	r2, r0
 8000e82:	460b      	mov	r3, r1
 8000e84:	f7ff f9ba 	bl	80001fc <__adddf3>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	460b      	mov	r3, r1
 8000e8c:	4614      	mov	r4, r2
 8000e8e:	461d      	mov	r5, r3
 8000e90:	6978      	ldr	r0, [r7, #20]
 8000e92:	f7ff faff 	bl	8000494 <__aeabi_i2d>
 8000e96:	a35e      	add	r3, pc, #376	; (adr r3, 8001010 <kinematikM+0x228>)
 8000e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e9c:	f7ff fb64 	bl	8000568 <__aeabi_dmul>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	4690      	mov	r8, r2
 8000ea6:	4699      	mov	r9, r3
 8000ea8:	6938      	ldr	r0, [r7, #16]
 8000eaa:	f7ff faf3 	bl	8000494 <__aeabi_i2d>
 8000eae:	a35a      	add	r3, pc, #360	; (adr r3, 8001018 <kinematikM+0x230>)
 8000eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb4:	f7ff fb58 	bl	8000568 <__aeabi_dmul>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	460b      	mov	r3, r1
 8000ebc:	4640      	mov	r0, r8
 8000ebe:	4649      	mov	r1, r9
 8000ec0:	f7ff f99c 	bl	80001fc <__adddf3>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	4690      	mov	r8, r2
 8000eca:	4699      	mov	r9, r3
 8000ecc:	68f8      	ldr	r0, [r7, #12]
 8000ece:	f7ff fae1 	bl	8000494 <__aeabi_i2d>
 8000ed2:	f04f 0200 	mov.w	r2, #0
 8000ed6:	4b5a      	ldr	r3, [pc, #360]	; (8001040 <kinematikM+0x258>)
 8000ed8:	f7ff fb46 	bl	8000568 <__aeabi_dmul>
 8000edc:	4602      	mov	r2, r0
 8000ede:	460b      	mov	r3, r1
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	f7ff f98a 	bl	80001fc <__adddf3>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	460b      	mov	r3, r1
 8000eec:	4620      	mov	r0, r4
 8000eee:	4629      	mov	r1, r5
 8000ef0:	f7ff fb3a 	bl	8000568 <__aeabi_dmul>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	4952      	ldr	r1, [pc, #328]	; (8001044 <kinematikM+0x25c>)
 8000efa:	e9c1 2302 	strd	r2, r3, [r1, #8]
	out[2] = nos*2*(-sin(d2r(315))*x + cos(d2r(315))*y + 0.25*th);
 8000efe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f02:	4602      	mov	r2, r0
 8000f04:	460b      	mov	r3, r1
 8000f06:	f7ff f979 	bl	80001fc <__adddf3>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	4614      	mov	r4, r2
 8000f10:	461d      	mov	r5, r3
 8000f12:	6978      	ldr	r0, [r7, #20]
 8000f14:	f7ff fabe 	bl	8000494 <__aeabi_i2d>
 8000f18:	a341      	add	r3, pc, #260	; (adr r3, 8001020 <kinematikM+0x238>)
 8000f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f1e:	f7ff fb23 	bl	8000568 <__aeabi_dmul>
 8000f22:	4602      	mov	r2, r0
 8000f24:	460b      	mov	r3, r1
 8000f26:	4690      	mov	r8, r2
 8000f28:	4699      	mov	r9, r3
 8000f2a:	6938      	ldr	r0, [r7, #16]
 8000f2c:	f7ff fab2 	bl	8000494 <__aeabi_i2d>
 8000f30:	a33d      	add	r3, pc, #244	; (adr r3, 8001028 <kinematikM+0x240>)
 8000f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f36:	f7ff fb17 	bl	8000568 <__aeabi_dmul>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	4640      	mov	r0, r8
 8000f40:	4649      	mov	r1, r9
 8000f42:	f7ff f95b 	bl	80001fc <__adddf3>
 8000f46:	4602      	mov	r2, r0
 8000f48:	460b      	mov	r3, r1
 8000f4a:	4690      	mov	r8, r2
 8000f4c:	4699      	mov	r9, r3
 8000f4e:	68f8      	ldr	r0, [r7, #12]
 8000f50:	f7ff faa0 	bl	8000494 <__aeabi_i2d>
 8000f54:	f04f 0200 	mov.w	r2, #0
 8000f58:	4b39      	ldr	r3, [pc, #228]	; (8001040 <kinematikM+0x258>)
 8000f5a:	f7ff fb05 	bl	8000568 <__aeabi_dmul>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	460b      	mov	r3, r1
 8000f62:	4640      	mov	r0, r8
 8000f64:	4649      	mov	r1, r9
 8000f66:	f7ff f949 	bl	80001fc <__adddf3>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	4620      	mov	r0, r4
 8000f70:	4629      	mov	r1, r5
 8000f72:	f7ff faf9 	bl	8000568 <__aeabi_dmul>
 8000f76:	4602      	mov	r2, r0
 8000f78:	460b      	mov	r3, r1
 8000f7a:	4932      	ldr	r1, [pc, #200]	; (8001044 <kinematikM+0x25c>)
 8000f7c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	out[3] = nos*2*(-sin(d2r(45))*x + cos(d2r(45))*y + 0.25*th);
 8000f80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f84:	4602      	mov	r2, r0
 8000f86:	460b      	mov	r3, r1
 8000f88:	f7ff f938 	bl	80001fc <__adddf3>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	460b      	mov	r3, r1
 8000f90:	4614      	mov	r4, r2
 8000f92:	461d      	mov	r5, r3
 8000f94:	6978      	ldr	r0, [r7, #20]
 8000f96:	f7ff fa7d 	bl	8000494 <__aeabi_i2d>
 8000f9a:	a325      	add	r3, pc, #148	; (adr r3, 8001030 <kinematikM+0x248>)
 8000f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa0:	f7ff fae2 	bl	8000568 <__aeabi_dmul>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	4690      	mov	r8, r2
 8000faa:	4699      	mov	r9, r3
 8000fac:	6938      	ldr	r0, [r7, #16]
 8000fae:	f7ff fa71 	bl	8000494 <__aeabi_i2d>
 8000fb2:	a321      	add	r3, pc, #132	; (adr r3, 8001038 <kinematikM+0x250>)
 8000fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb8:	f7ff fad6 	bl	8000568 <__aeabi_dmul>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	4640      	mov	r0, r8
 8000fc2:	4649      	mov	r1, r9
 8000fc4:	f7ff f91a 	bl	80001fc <__adddf3>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	460b      	mov	r3, r1
 8000fcc:	4690      	mov	r8, r2
 8000fce:	4699      	mov	r9, r3
 8000fd0:	68f8      	ldr	r0, [r7, #12]
 8000fd2:	f7ff fa5f 	bl	8000494 <__aeabi_i2d>
 8000fd6:	f04f 0200 	mov.w	r2, #0
 8000fda:	4b19      	ldr	r3, [pc, #100]	; (8001040 <kinematikM+0x258>)
 8000fdc:	f7ff fac4 	bl	8000568 <__aeabi_dmul>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	4649      	mov	r1, r9
 8000fe8:	f7ff f908 	bl	80001fc <__adddf3>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	4620      	mov	r0, r4
 8000ff2:	4629      	mov	r1, r5
 8000ff4:	f7ff fab8 	bl	8000568 <__aeabi_dmul>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	4911      	ldr	r1, [pc, #68]	; (8001044 <kinematikM+0x25c>)
 8000ffe:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8001002:	bf00      	nop
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800100c:	f3af 8000 	nop.w
 8001010:	667f3bcc 	.word	0x667f3bcc
 8001014:	3fe6a09e 	.word	0x3fe6a09e
 8001018:	667f3bce 	.word	0x667f3bce
 800101c:	bfe6a09e 	.word	0xbfe6a09e
 8001020:	667f3bce 	.word	0x667f3bce
 8001024:	3fe6a09e 	.word	0x3fe6a09e
 8001028:	667f3bcb 	.word	0x667f3bcb
 800102c:	3fe6a09e 	.word	0x3fe6a09e
 8001030:	667f3bcc 	.word	0x667f3bcc
 8001034:	bfe6a09e 	.word	0xbfe6a09e
 8001038:	667f3bcd 	.word	0x667f3bcd
 800103c:	3fe6a09e 	.word	0x3fe6a09e
 8001040:	3fd00000 	.word	0x3fd00000
 8001044:	200001a0 	.word	0x200001a0
 8001048:	667f3bcd 	.word	0x667f3bcd
 800104c:	bfe6a09e 	.word	0xbfe6a09e

08001050 <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* CAN 통신 초기화  */
int CANSPI_Initialize(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b088      	sub	sp, #32
 8001054:	af00      	add	r7, sp, #0
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;

  /* Rx Mask values 초기화 */
  RXM0reg.RXM0SIDH = 0x00;
 8001056:	2300      	movs	r3, #0
 8001058:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 800105a:	2300      	movs	r3, #0
 800105c:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 800105e:	2300      	movs	r3, #0
 8001060:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 8001062:	2300      	movs	r3, #0
 8001064:	71fb      	strb	r3, [r7, #7]

  RXM1reg.RXM1SIDH = 0x00;
 8001066:	2300      	movs	r3, #0
 8001068:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 800106a:	2300      	movs	r3, #0
 800106c:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 800106e:	2300      	movs	r3, #0
 8001070:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 8001072:	2300      	movs	r3, #0
 8001074:	70fb      	strb	r3, [r7, #3]

  /* Rx Filter values 초기화 */
  RXF0reg.RXF0SIDH = 0x00;
 8001076:	2300      	movs	r3, #0
 8001078:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 800107a:	2300      	movs	r3, #0
 800107c:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 800107e:	2300      	movs	r3, #0
 8001080:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 8001082:	2300      	movs	r3, #0
 8001084:	77fb      	strb	r3, [r7, #31]

  RXF1reg.RXF1SIDH = 0x00;
 8001086:	2300      	movs	r3, #0
 8001088:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 800108a:	2308      	movs	r3, #8
 800108c:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 800108e:	2300      	movs	r3, #0
 8001090:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 8001092:	2300      	movs	r3, #0
 8001094:	76fb      	strb	r3, [r7, #27]

  RXF2reg.RXF2SIDH = 0x00;
 8001096:	2300      	movs	r3, #0
 8001098:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 800109a:	2300      	movs	r3, #0
 800109c:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 800109e:	2300      	movs	r3, #0
 80010a0:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 80010a2:	2300      	movs	r3, #0
 80010a4:	75fb      	strb	r3, [r7, #23]

  RXF3reg.RXF3SIDH = 0x00;
 80010a6:	2300      	movs	r3, #0
 80010a8:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 80010aa:	2300      	movs	r3, #0
 80010ac:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 80010ae:	2300      	movs	r3, #0
 80010b0:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 80010b2:	2300      	movs	r3, #0
 80010b4:	74fb      	strb	r3, [r7, #19]

  RXF4reg.RXF4SIDH = 0x00;
 80010b6:	2300      	movs	r3, #0
 80010b8:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 80010ba:	2300      	movs	r3, #0
 80010bc:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 80010be:	2300      	movs	r3, #0
 80010c0:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 80010c2:	2300      	movs	r3, #0
 80010c4:	73fb      	strb	r3, [r7, #15]

  RXF5reg.RXF5SIDH = 0x00;
 80010c6:	2300      	movs	r3, #0
 80010c8:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 80010ca:	2308      	movs	r3, #8
 80010cc:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 80010ce:	2300      	movs	r3, #0
 80010d0:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 80010d2:	2300      	movs	r3, #0
 80010d4:	72fb      	strb	r3, [r7, #11]

  /* MCP2515 초기화, SPI 통신 상태 확인 */
  if(!MCP2515_Initialize())
 80010d6:	f000 f945 	bl	8001364 <MCP2515_Initialize>
 80010da:	4603      	mov	r3, r0
 80010dc:	f083 0301 	eor.w	r3, r3, #1
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d002      	beq.n	80010ec <CANSPI_Initialize+0x9c>
    return -1;
 80010e6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ea:	e060      	b.n	80011ae <CANSPI_Initialize+0x15e>

  /* Configuration 모드로 설정 */
  if(!MCP2515_SetConfigMode())
 80010ec:	f000 f95c 	bl	80013a8 <MCP2515_SetConfigMode>
 80010f0:	4603      	mov	r3, r0
 80010f2:	f083 0301 	eor.w	r3, r3, #1
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d002      	beq.n	8001102 <CANSPI_Initialize+0xb2>
    return -2;
 80010fc:	f06f 0301 	mvn.w	r3, #1
 8001100:	e055      	b.n	80011ae <CANSPI_Initialize+0x15e>

  /* Filter & Mask 값 설정 */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	461a      	mov	r2, r3
 8001106:	2123      	movs	r1, #35	; 0x23
 8001108:	2020      	movs	r0, #32
 800110a:	f000 f9f1 	bl	80014f0 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 800110e:	463b      	mov	r3, r7
 8001110:	461a      	mov	r2, r3
 8001112:	2127      	movs	r1, #39	; 0x27
 8001114:	2024      	movs	r0, #36	; 0x24
 8001116:	f000 f9eb 	bl	80014f0 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 800111a:	f107 031c 	add.w	r3, r7, #28
 800111e:	461a      	mov	r2, r3
 8001120:	2103      	movs	r1, #3
 8001122:	2000      	movs	r0, #0
 8001124:	f000 f9e4 	bl	80014f0 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 8001128:	f107 0318 	add.w	r3, r7, #24
 800112c:	461a      	mov	r2, r3
 800112e:	2107      	movs	r1, #7
 8001130:	2004      	movs	r0, #4
 8001132:	f000 f9dd 	bl	80014f0 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	461a      	mov	r2, r3
 800113c:	210b      	movs	r1, #11
 800113e:	2008      	movs	r0, #8
 8001140:	f000 f9d6 	bl	80014f0 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 8001144:	f107 0310 	add.w	r3, r7, #16
 8001148:	461a      	mov	r2, r3
 800114a:	2113      	movs	r1, #19
 800114c:	2010      	movs	r0, #16
 800114e:	f000 f9cf 	bl	80014f0 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 8001152:	f107 030c 	add.w	r3, r7, #12
 8001156:	461a      	mov	r2, r3
 8001158:	2117      	movs	r1, #23
 800115a:	2014      	movs	r0, #20
 800115c:	f000 f9c8 	bl	80014f0 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 8001160:	f107 0308 	add.w	r3, r7, #8
 8001164:	461a      	mov	r2, r3
 8001166:	211b      	movs	r1, #27
 8001168:	2018      	movs	r0, #24
 800116a:	f000 f9c1 	bl	80014f0 <MCP2515_WriteByteSequence>

  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 800116e:	2104      	movs	r1, #4
 8001170:	2060      	movs	r0, #96	; 0x60
 8001172:	f000 f999 	bl	80014a8 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 8001176:	2101      	movs	r1, #1
 8001178:	2070      	movs	r0, #112	; 0x70
 800117a:	f000 f995 	bl	80014a8 <MCP2515_WriteByte>
  */

  //settingan speed tapi belum paham

  /* 00(SJW 1tq) 000000 */
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 800117e:	2100      	movs	r1, #0
 8001180:	202a      	movs	r0, #42	; 0x2a
 8001182:	f000 f991 	bl	80014a8 <MCP2515_WriteByte>

  /* 1 1 100(5tq) 101(6tq) */
  MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
 8001186:	21e5      	movs	r1, #229	; 0xe5
 8001188:	2029      	movs	r0, #41	; 0x29
 800118a:	f000 f98d 	bl	80014a8 <MCP2515_WriteByte>

  /* 1 0 000 011(4tq) */
  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 800118e:	2183      	movs	r1, #131	; 0x83
 8001190:	2028      	movs	r0, #40	; 0x28
 8001192:	f000 f989 	bl	80014a8 <MCP2515_WriteByte>

  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 8001196:	f000 f925 	bl	80013e4 <MCP2515_SetNormalMode>
 800119a:	4603      	mov	r3, r0
 800119c:	f083 0301 	eor.w	r3, r3, #1
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d002      	beq.n	80011ac <CANSPI_Initialize+0x15c>
    return -3;
 80011a6:	f06f 0302 	mvn.w	r3, #2
 80011aa:	e000      	b.n	80011ae <CANSPI_Initialize+0x15e>

  return 1;
 80011ac:	2301      	movs	r3, #1
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3720      	adds	r7, #32
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <CANSPI_Receive>:
  return (returnValue);
}

/* CAN 메시지 수신 */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b088      	sub	sp, #32
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	77fb      	strb	r3, [r7, #31]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;

  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 80011c2:	f000 f9bf 	bl	8001544 <MCP2515_GetRxStatus>
 80011c6:	4603      	mov	r3, r0
 80011c8:	733b      	strb	r3, [r7, #12]

  /* 버퍼에 수신된 메시지가 있는지 확인 */
  if (rxStatus.rxBuffer != 0)
 80011ca:	7b3b      	ldrb	r3, [r7, #12]
 80011cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d066      	beq.n	80012a4 <CANSPI_Receive+0xee>
  {
    /* 어떤 버퍼에 메시지가 있는지 확인 후 처리 */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 80011d6:	7b3b      	ldrb	r3, [r7, #12]
 80011d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b40      	cmp	r3, #64	; 0x40
 80011e0:	bf0c      	ite	eq
 80011e2:	2301      	moveq	r3, #1
 80011e4:	2300      	movne	r3, #0
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	7b3b      	ldrb	r3, [r7, #12]
 80011ea:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2bc0      	cmp	r3, #192	; 0xc0
 80011f2:	bf0c      	ite	eq
 80011f4:	2301      	moveq	r3, #1
 80011f6:	2300      	movne	r3, #0
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	4313      	orrs	r3, r2
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d007      	beq.n	8001212 <CANSPI_Receive+0x5c>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8001202:	f107 0310 	add.w	r3, r7, #16
 8001206:	220d      	movs	r2, #13
 8001208:	4619      	mov	r1, r3
 800120a:	2090      	movs	r0, #144	; 0x90
 800120c:	f000 f92a 	bl	8001464 <MCP2515_ReadRxSequence>
 8001210:	e00c      	b.n	800122c <CANSPI_Receive+0x76>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 8001212:	7b3b      	ldrb	r3, [r7, #12]
 8001214:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b80      	cmp	r3, #128	; 0x80
 800121c:	d106      	bne.n	800122c <CANSPI_Receive+0x76>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 800121e:	f107 0310 	add.w	r3, r7, #16
 8001222:	220d      	movs	r2, #13
 8001224:	4619      	mov	r1, r3
 8001226:	2094      	movs	r0, #148	; 0x94
 8001228:	f000 f91c 	bl	8001464 <MCP2515_ReadRxSequence>
    }

    /* Extended 타입 */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 800122c:	7b3b      	ldrb	r3, [r7, #12]
 800122e:	f003 0318 	and.w	r3, r3, #24
 8001232:	b2db      	uxtb	r3, r3
 8001234:	2b10      	cmp	r3, #16
 8001236:	d10c      	bne.n	8001252 <CANSPI_Receive+0x9c>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2202      	movs	r2, #2
 800123c:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 800123e:	7cb8      	ldrb	r0, [r7, #18]
 8001240:	7cf9      	ldrb	r1, [r7, #19]
 8001242:	7c3a      	ldrb	r2, [r7, #16]
 8001244:	7c7b      	ldrb	r3, [r7, #17]
 8001246:	f000 f832 	bl	80012ae <convertReg2ExtendedCANid>
 800124a:	4602      	mov	r2, r0
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	e00b      	b.n	800126a <CANSPI_Receive+0xb4>
    }
    else
    {
      /* Standard 타입 */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2201      	movs	r2, #1
 8001256:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8001258:	7c3b      	ldrb	r3, [r7, #16]
 800125a:	7c7a      	ldrb	r2, [r7, #17]
 800125c:	4611      	mov	r1, r2
 800125e:	4618      	mov	r0, r3
 8001260:	f000 f863 	bl	800132a <convertReg2StandardCANid>
 8001264:	4602      	mov	r2, r0
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	605a      	str	r2, [r3, #4]
    }

    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 800126a:	7d3a      	ldrb	r2, [r7, #20]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 8001270:	7d7a      	ldrb	r2, [r7, #21]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 8001276:	7dba      	ldrb	r2, [r7, #22]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 800127c:	7dfa      	ldrb	r2, [r7, #23]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 8001282:	7e3a      	ldrb	r2, [r7, #24]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 8001288:	7e7a      	ldrb	r2, [r7, #25]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	735a      	strb	r2, [r3, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 800128e:	7eba      	ldrb	r2, [r7, #26]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	739a      	strb	r2, [r3, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 8001294:	7efa      	ldrb	r2, [r7, #27]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	73da      	strb	r2, [r3, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 800129a:	7f3a      	ldrb	r2, [r7, #28]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	741a      	strb	r2, [r3, #16]

    returnValue = 1;
 80012a0:	2301      	movs	r3, #1
 80012a2:	77fb      	strb	r3, [r7, #31]
  }

  return (returnValue);
 80012a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3720      	adds	r7, #32
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* Register 저장값을 Extended ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 80012ae:	b490      	push	{r4, r7}
 80012b0:	b086      	sub	sp, #24
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	4604      	mov	r4, r0
 80012b6:	4608      	mov	r0, r1
 80012b8:	4611      	mov	r1, r2
 80012ba:	461a      	mov	r2, r3
 80012bc:	4623      	mov	r3, r4
 80012be:	71fb      	strb	r3, [r7, #7]
 80012c0:	4603      	mov	r3, r0
 80012c2:	71bb      	strb	r3, [r7, #6]
 80012c4:	460b      	mov	r3, r1
 80012c6:	717b      	strb	r3, [r7, #5]
 80012c8:	4613      	mov	r3, r2
 80012ca:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;

  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 80012d4:	793b      	ldrb	r3, [r7, #4]
 80012d6:	f003 0303 	and.w	r3, r3, #3
 80012da:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 80012dc:	793b      	ldrb	r3, [r7, #4]
 80012de:	095b      	lsrs	r3, r3, #5
 80012e0:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 80012e2:	797b      	ldrb	r3, [r7, #5]
 80012e4:	00db      	lsls	r3, r3, #3
 80012e6:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 80012e8:	7bbb      	ldrb	r3, [r7, #14]
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4413      	add	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	4413      	add	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	021b      	lsls	r3, r3, #8
 8001302:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4413      	add	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	021b      	lsls	r3, r3, #8
 8001310:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 8001312:	79bb      	ldrb	r3, [r7, #6]
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	4413      	add	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	617b      	str	r3, [r7, #20]
  return (returnValue);
 800131e:	697b      	ldr	r3, [r7, #20]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bc90      	pop	{r4, r7}
 8001328:	4770      	bx	lr

0800132a <convertReg2StandardCANid>:

/* Register 저장값을 Standard ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 800132a:	b480      	push	{r7}
 800132c:	b085      	sub	sp, #20
 800132e:	af00      	add	r7, sp, #0
 8001330:	4603      	mov	r3, r0
 8001332:	460a      	mov	r2, r1
 8001334:	71fb      	strb	r3, [r7, #7]
 8001336:	4613      	mov	r3, r2
 8001338:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;

  ConvertedID = (tempRXBn_SIDH << 3);
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 8001344:	79bb      	ldrb	r3, [r7, #6]
 8001346:	095b      	lsrs	r3, r3, #5
 8001348:	b2db      	uxtb	r3, r3
 800134a:	461a      	mov	r2, r3
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	4413      	add	r3, r2
 8001350:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	60fb      	str	r3, [r7, #12]

  return (returnValue);
 8001356:	68fb      	ldr	r3, [r7, #12]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* MCP2515 초기화 */
bool MCP2515_Initialize(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();
 800136a:	2201      	movs	r2, #1
 800136c:	2140      	movs	r1, #64	; 0x40
 800136e:	480c      	ldr	r0, [pc, #48]	; (80013a0 <MCP2515_Initialize+0x3c>)
 8001370:	f003 fc7e 	bl	8004c70 <HAL_GPIO_WritePin>

  uint8_t loop = 10;
 8001374:	230a      	movs	r3, #10
 8001376:	71fb      	strb	r3, [r7, #7]

  do {
    /* SPI Ready 확인 */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 8001378:	480a      	ldr	r0, [pc, #40]	; (80013a4 <MCP2515_Initialize+0x40>)
 800137a:	f004 fe57 	bl	800602c <HAL_SPI_GetState>
 800137e:	4603      	mov	r3, r0
 8001380:	2b01      	cmp	r3, #1
 8001382:	d101      	bne.n	8001388 <MCP2515_Initialize+0x24>
      return true;
 8001384:	2301      	movs	r3, #1
 8001386:	e006      	b.n	8001396 <MCP2515_Initialize+0x32>

    loop--;
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	3b01      	subs	r3, #1
 800138c:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d1f1      	bne.n	8001378 <MCP2515_Initialize+0x14>

  return false;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40021400 	.word	0x40021400
 80013a4:	20000460 	.word	0x20000460

080013a8 <MCP2515_SetConfigMode>:

/* MCP2515 를 설정모드로 전환 */
bool MCP2515_SetConfigMode(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
  /* CANCTRL Register Configuration 모드 설정 */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 80013ae:	2180      	movs	r1, #128	; 0x80
 80013b0:	200f      	movs	r0, #15
 80013b2:	f000 f879 	bl	80014a8 <MCP2515_WriteByte>

  uint8_t loop = 10;
 80013b6:	230a      	movs	r3, #10
 80013b8:	71fb      	strb	r3, [r7, #7]

  do {
    /* 모드전환 확인 */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 80013ba:	200e      	movs	r0, #14
 80013bc:	f000 f830 	bl	8001420 <MCP2515_ReadByte>
 80013c0:	4603      	mov	r3, r0
 80013c2:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80013c6:	2b80      	cmp	r3, #128	; 0x80
 80013c8:	d101      	bne.n	80013ce <MCP2515_SetConfigMode+0x26>
      return true;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e006      	b.n	80013dc <MCP2515_SetConfigMode+0x34>

    loop--;
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	3b01      	subs	r3, #1
 80013d2:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1ef      	bne.n	80013ba <MCP2515_SetConfigMode+0x12>

  return false;
 80013da:	2300      	movs	r3, #0
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <MCP2515_SetNormalMode>:

/* MCP2515 를 Normal모드로 전환 */
bool MCP2515_SetNormalMode(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
  /* CANCTRL Register Normal 모드 설정 */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 80013ea:	2100      	movs	r1, #0
 80013ec:	200f      	movs	r0, #15
 80013ee:	f000 f85b 	bl	80014a8 <MCP2515_WriteByte>

  uint8_t loop = 10;
 80013f2:	230a      	movs	r3, #10
 80013f4:	71fb      	strb	r3, [r7, #7]

  do {
    /* 모드전환 확인 */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 80013f6:	200e      	movs	r0, #14
 80013f8:	f000 f812 	bl	8001420 <MCP2515_ReadByte>
 80013fc:	4603      	mov	r3, r0
 80013fe:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d101      	bne.n	800140a <MCP2515_SetNormalMode+0x26>
      return true;
 8001406:	2301      	movs	r3, #1
 8001408:	e006      	b.n	8001418 <MCP2515_SetNormalMode+0x34>

    loop--;
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	3b01      	subs	r3, #1
 800140e:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1ef      	bne.n	80013f6 <MCP2515_SetNormalMode+0x12>

  return false;
 8001416:	2300      	movs	r3, #0
}
 8001418:	4618      	mov	r0, r3
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* 1바이트 읽기 */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;

  MCP2515_CS_LOW();
 800142a:	2200      	movs	r2, #0
 800142c:	2140      	movs	r1, #64	; 0x40
 800142e:	480c      	ldr	r0, [pc, #48]	; (8001460 <MCP2515_ReadByte+0x40>)
 8001430:	f003 fc1e 	bl	8004c70 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ);
 8001434:	2003      	movs	r0, #3
 8001436:	f000 f8a1 	bl	800157c <SPI_Tx>
  SPI_Tx(address);
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	4618      	mov	r0, r3
 800143e:	f000 f89d 	bl	800157c <SPI_Tx>
  retVal = SPI_Rx();
 8001442:	f000 f8c1 	bl	80015c8 <SPI_Rx>
 8001446:	4603      	mov	r3, r0
 8001448:	73fb      	strb	r3, [r7, #15]

  MCP2515_CS_HIGH();
 800144a:	2201      	movs	r2, #1
 800144c:	2140      	movs	r1, #64	; 0x40
 800144e:	4804      	ldr	r0, [pc, #16]	; (8001460 <MCP2515_ReadByte+0x40>)
 8001450:	f003 fc0e 	bl	8004c70 <HAL_GPIO_WritePin>

  return retVal;
 8001454:	7bfb      	ldrb	r3, [r7, #15]
}
 8001456:	4618      	mov	r0, r3
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40021400 	.word	0x40021400

08001464 <MCP2515_ReadRxSequence>:

/* Sequential Bytes 읽기 */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	6039      	str	r1, [r7, #0]
 800146e:	71fb      	strb	r3, [r7, #7]
 8001470:	4613      	mov	r3, r2
 8001472:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8001474:	2200      	movs	r2, #0
 8001476:	2140      	movs	r1, #64	; 0x40
 8001478:	480a      	ldr	r0, [pc, #40]	; (80014a4 <MCP2515_ReadRxSequence+0x40>)
 800147a:	f003 fbf9 	bl	8004c70 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	4618      	mov	r0, r3
 8001482:	f000 f87b 	bl	800157c <SPI_Tx>
  SPI_RxBuffer(data, length);
 8001486:	79bb      	ldrb	r3, [r7, #6]
 8001488:	4619      	mov	r1, r3
 800148a:	6838      	ldr	r0, [r7, #0]
 800148c:	f000 f8ac 	bl	80015e8 <SPI_RxBuffer>

  MCP2515_CS_HIGH();
 8001490:	2201      	movs	r2, #1
 8001492:	2140      	movs	r1, #64	; 0x40
 8001494:	4803      	ldr	r0, [pc, #12]	; (80014a4 <MCP2515_ReadRxSequence+0x40>)
 8001496:	f003 fbeb 	bl	8004c70 <HAL_GPIO_WritePin>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40021400 	.word	0x40021400

080014a8 <MCP2515_WriteByte>:

/* 1바이트 쓰기 */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	460a      	mov	r2, r1
 80014b2:	71fb      	strb	r3, [r7, #7]
 80014b4:	4613      	mov	r3, r2
 80014b6:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 80014b8:	2200      	movs	r2, #0
 80014ba:	2140      	movs	r1, #64	; 0x40
 80014bc:	480b      	ldr	r0, [pc, #44]	; (80014ec <MCP2515_WriteByte+0x44>)
 80014be:	f003 fbd7 	bl	8004c70 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 80014c2:	2002      	movs	r0, #2
 80014c4:	f000 f85a 	bl	800157c <SPI_Tx>
  SPI_Tx(address);
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f000 f856 	bl	800157c <SPI_Tx>
  SPI_Tx(data);
 80014d0:	79bb      	ldrb	r3, [r7, #6]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f000 f852 	bl	800157c <SPI_Tx>

  MCP2515_CS_HIGH();
 80014d8:	2201      	movs	r2, #1
 80014da:	2140      	movs	r1, #64	; 0x40
 80014dc:	4803      	ldr	r0, [pc, #12]	; (80014ec <MCP2515_WriteByte+0x44>)
 80014de:	f003 fbc7 	bl	8004c70 <HAL_GPIO_WritePin>
}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40021400 	.word	0x40021400

080014f0 <MCP2515_WriteByteSequence>:

/* Sequential Bytes 쓰기 */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	603a      	str	r2, [r7, #0]
 80014fa:	71fb      	strb	r3, [r7, #7]
 80014fc:	460b      	mov	r3, r1
 80014fe:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8001500:	2200      	movs	r2, #0
 8001502:	2140      	movs	r1, #64	; 0x40
 8001504:	480e      	ldr	r0, [pc, #56]	; (8001540 <MCP2515_WriteByteSequence+0x50>)
 8001506:	f003 fbb3 	bl	8004c70 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 800150a:	2002      	movs	r0, #2
 800150c:	f000 f836 	bl	800157c <SPI_Tx>
  SPI_Tx(startAddress);
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	4618      	mov	r0, r3
 8001514:	f000 f832 	bl	800157c <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 8001518:	79ba      	ldrb	r2, [r7, #6]
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	b2db      	uxtb	r3, r3
 8001520:	3301      	adds	r3, #1
 8001522:	b2db      	uxtb	r3, r3
 8001524:	4619      	mov	r1, r3
 8001526:	6838      	ldr	r0, [r7, #0]
 8001528:	f000 f83a 	bl	80015a0 <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 800152c:	2201      	movs	r2, #1
 800152e:	2140      	movs	r1, #64	; 0x40
 8001530:	4803      	ldr	r0, [pc, #12]	; (8001540 <MCP2515_WriteByteSequence+0x50>)
 8001532:	f003 fb9d 	bl	8004c70 <HAL_GPIO_WritePin>
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40021400 	.word	0x40021400

08001544 <MCP2515_GetRxStatus>:
  return retVal;
}

/* MCP2515 RxStatus 레지스터 확인 */
uint8_t MCP2515_GetRxStatus(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 800154a:	2200      	movs	r2, #0
 800154c:	2140      	movs	r1, #64	; 0x40
 800154e:	480a      	ldr	r0, [pc, #40]	; (8001578 <MCP2515_GetRxStatus+0x34>)
 8001550:	f003 fb8e 	bl	8004c70 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_RX_STATUS);
 8001554:	20b0      	movs	r0, #176	; 0xb0
 8001556:	f000 f811 	bl	800157c <SPI_Tx>
  retVal = SPI_Rx();
 800155a:	f000 f835 	bl	80015c8 <SPI_Rx>
 800155e:	4603      	mov	r3, r0
 8001560:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 8001562:	2201      	movs	r2, #1
 8001564:	2140      	movs	r1, #64	; 0x40
 8001566:	4804      	ldr	r0, [pc, #16]	; (8001578 <MCP2515_GetRxStatus+0x34>)
 8001568:	f003 fb82 	bl	8004c70 <HAL_GPIO_WritePin>

  return retVal;
 800156c:	79fb      	ldrb	r3, [r7, #7]
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40021400 	.word	0x40021400

0800157c <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx Wrapper 함수 */
static void SPI_Tx(uint8_t data)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 8001586:	1df9      	adds	r1, r7, #7
 8001588:	230a      	movs	r3, #10
 800158a:	2201      	movs	r2, #1
 800158c:	4803      	ldr	r0, [pc, #12]	; (800159c <SPI_Tx+0x20>)
 800158e:	f004 f95e 	bl	800584e <HAL_SPI_Transmit>
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000460 	.word	0x20000460

080015a0 <SPI_TxBuffer>:

/* SPI Tx Wrapper 함수 */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);
 80015ac:	78fb      	ldrb	r3, [r7, #3]
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	230a      	movs	r3, #10
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	4803      	ldr	r0, [pc, #12]	; (80015c4 <SPI_TxBuffer+0x24>)
 80015b6:	f004 f94a 	bl	800584e <HAL_SPI_Transmit>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000460 	.word	0x20000460

080015c8 <SPI_Rx>:

/* SPI Rx Wrapper 함수 */
static uint8_t SPI_Rx(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 80015ce:	1df9      	adds	r1, r7, #7
 80015d0:	230a      	movs	r3, #10
 80015d2:	2201      	movs	r2, #1
 80015d4:	4803      	ldr	r0, [pc, #12]	; (80015e4 <SPI_Rx+0x1c>)
 80015d6:	f004 fa76 	bl	8005ac6 <HAL_SPI_Receive>
  return retVal;
 80015da:	79fb      	ldrb	r3, [r7, #7]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000460 	.word	0x20000460

080015e8 <SPI_RxBuffer>:

/* SPI Rx Wrapper 함수 */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	460b      	mov	r3, r1
 80015f2:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 80015f4:	78fb      	ldrb	r3, [r7, #3]
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	230a      	movs	r3, #10
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	4803      	ldr	r0, [pc, #12]	; (800160c <SPI_RxBuffer+0x24>)
 80015fe:	f004 fa62 	bl	8005ac6 <HAL_SPI_Receive>
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000460 	.word	0x20000460

08001610 <handleData0Buttons>:

#include "ds4.h"

int data0_buttons[] = {L1_KANAN_BIT, R1_BAWAH_BIT, L3_ATAS_BIT, R3_KIRI_BIT, SHARE_KOTAK_BIT, OPTIONS_SILANG_BIT, PS_BULAT_BIT, TPAD_SEGITIGA_BIT};

void handleData0Buttons(uint8_t data0) {
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	71fb      	strb	r3, [r7, #7]
	   // Set nilai awal
	    kanan = 0;
 800161a:	4b33      	ldr	r3, [pc, #204]	; (80016e8 <handleData0Buttons+0xd8>)
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
	    bawah = 0;
 8001620:	4b32      	ldr	r3, [pc, #200]	; (80016ec <handleData0Buttons+0xdc>)
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
	    atas = 0;
 8001626:	4b32      	ldr	r3, [pc, #200]	; (80016f0 <handleData0Buttons+0xe0>)
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
	    kiri = 0;
 800162c:	4b31      	ldr	r3, [pc, #196]	; (80016f4 <handleData0Buttons+0xe4>)
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
	    kotak = 0;
 8001632:	4b31      	ldr	r3, [pc, #196]	; (80016f8 <handleData0Buttons+0xe8>)
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
	    silang = 0;
 8001638:	4b30      	ldr	r3, [pc, #192]	; (80016fc <handleData0Buttons+0xec>)
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
	    bulat = 0;
 800163e:	4b30      	ldr	r3, [pc, #192]	; (8001700 <handleData0Buttons+0xf0>)
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
	    segitiga = 0;
 8001644:	4b2f      	ldr	r3, [pc, #188]	; (8001704 <handleData0Buttons+0xf4>)
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < sizeof(data0_buttons) / sizeof(data0_buttons[0]); i++) {
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	e040      	b.n	80016d2 <handleData0Buttons+0xc2>
        if (data0 & data0_buttons[i]) {
 8001650:	79fa      	ldrb	r2, [r7, #7]
 8001652:	492d      	ldr	r1, [pc, #180]	; (8001708 <handleData0Buttons+0xf8>)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800165a:	4013      	ands	r3, r2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d035      	beq.n	80016cc <handleData0Buttons+0xbc>
            // Tombol aktif, lakukan sesuatu
            switch (i) {
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2b07      	cmp	r3, #7
 8001664:	d832      	bhi.n	80016cc <handleData0Buttons+0xbc>
 8001666:	a201      	add	r2, pc, #4	; (adr r2, 800166c <handleData0Buttons+0x5c>)
 8001668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800166c:	0800168d 	.word	0x0800168d
 8001670:	08001695 	.word	0x08001695
 8001674:	0800169d 	.word	0x0800169d
 8001678:	080016a5 	.word	0x080016a5
 800167c:	080016ad 	.word	0x080016ad
 8001680:	080016b5 	.word	0x080016b5
 8001684:	080016bd 	.word	0x080016bd
 8001688:	080016c5 	.word	0x080016c5
                case 0: kanan = 1; break;
 800168c:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <handleData0Buttons+0xd8>)
 800168e:	2201      	movs	r2, #1
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	e01b      	b.n	80016cc <handleData0Buttons+0xbc>
                case 1: bawah = 1; break;
 8001694:	4b15      	ldr	r3, [pc, #84]	; (80016ec <handleData0Buttons+0xdc>)
 8001696:	2201      	movs	r2, #1
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	e017      	b.n	80016cc <handleData0Buttons+0xbc>
                case 2: atas = 1; break;
 800169c:	4b14      	ldr	r3, [pc, #80]	; (80016f0 <handleData0Buttons+0xe0>)
 800169e:	2201      	movs	r2, #1
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	e013      	b.n	80016cc <handleData0Buttons+0xbc>
                case 3: kiri = 1; break;
 80016a4:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <handleData0Buttons+0xe4>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	e00f      	b.n	80016cc <handleData0Buttons+0xbc>
                case 4: kotak = 1; break;
 80016ac:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <handleData0Buttons+0xe8>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	e00b      	b.n	80016cc <handleData0Buttons+0xbc>
                case 5: silang = 1; break;
 80016b4:	4b11      	ldr	r3, [pc, #68]	; (80016fc <handleData0Buttons+0xec>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	e007      	b.n	80016cc <handleData0Buttons+0xbc>
                case 6: bulat = 1; break;
 80016bc:	4b10      	ldr	r3, [pc, #64]	; (8001700 <handleData0Buttons+0xf0>)
 80016be:	2201      	movs	r2, #1
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	e003      	b.n	80016cc <handleData0Buttons+0xbc>
                case 7: segitiga = 1; break;
 80016c4:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <handleData0Buttons+0xf4>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	bf00      	nop
    for (int i = 0; i < sizeof(data0_buttons) / sizeof(data0_buttons[0]); i++) {
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	3301      	adds	r3, #1
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2b07      	cmp	r3, #7
 80016d6:	d9bb      	bls.n	8001650 <handleData0Buttons+0x40>
            }
        }
    }
}
 80016d8:	bf00      	nop
 80016da:	bf00      	nop
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	20000714 	.word	0x20000714
 80016ec:	20000710 	.word	0x20000710
 80016f0:	2000070c 	.word	0x2000070c
 80016f4:	20000718 	.word	0x20000718
 80016f8:	2000071c 	.word	0x2000071c
 80016fc:	20000720 	.word	0x20000720
 8001700:	20000724 	.word	0x20000724
 8001704:	20000728 	.word	0x20000728
 8001708:	20000000 	.word	0x20000000

0800170c <handleData1Buttons>:

void handleData1Buttons(uint8_t data1) {
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	71fb      	strb	r3, [r7, #7]
	// Set nilai awal
	    l1 = 0;
 8001716:	4b33      	ldr	r3, [pc, #204]	; (80017e4 <handleData1Buttons+0xd8>)
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
	    r1 = 0;
 800171c:	4b32      	ldr	r3, [pc, #200]	; (80017e8 <handleData1Buttons+0xdc>)
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
	    l3 = 0;
 8001722:	4b32      	ldr	r3, [pc, #200]	; (80017ec <handleData1Buttons+0xe0>)
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
	    r3 = 0;
 8001728:	4b31      	ldr	r3, [pc, #196]	; (80017f0 <handleData1Buttons+0xe4>)
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
	    share = 0;
 800172e:	4b31      	ldr	r3, [pc, #196]	; (80017f4 <handleData1Buttons+0xe8>)
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
	    options = 0;
 8001734:	4b30      	ldr	r3, [pc, #192]	; (80017f8 <handleData1Buttons+0xec>)
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
	    ps = 0;
 800173a:	4b30      	ldr	r3, [pc, #192]	; (80017fc <handleData1Buttons+0xf0>)
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
	    tpad = 0;
 8001740:	4b2f      	ldr	r3, [pc, #188]	; (8001800 <handleData1Buttons+0xf4>)
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < sizeof(data0_buttons) / sizeof(data0_buttons[0]); i++) {
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	e040      	b.n	80017ce <handleData1Buttons+0xc2>
        if (data1 & data0_buttons[i]) {
 800174c:	79fa      	ldrb	r2, [r7, #7]
 800174e:	492d      	ldr	r1, [pc, #180]	; (8001804 <handleData1Buttons+0xf8>)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001756:	4013      	ands	r3, r2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d035      	beq.n	80017c8 <handleData1Buttons+0xbc>
            // Tombol aktif, lakukan sesuatu
            switch (i) {
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2b07      	cmp	r3, #7
 8001760:	d832      	bhi.n	80017c8 <handleData1Buttons+0xbc>
 8001762:	a201      	add	r2, pc, #4	; (adr r2, 8001768 <handleData1Buttons+0x5c>)
 8001764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001768:	08001789 	.word	0x08001789
 800176c:	08001791 	.word	0x08001791
 8001770:	08001799 	.word	0x08001799
 8001774:	080017a1 	.word	0x080017a1
 8001778:	080017a9 	.word	0x080017a9
 800177c:	080017b1 	.word	0x080017b1
 8001780:	080017b9 	.word	0x080017b9
 8001784:	080017c1 	.word	0x080017c1
                case 0: l1 = 1; break;
 8001788:	4b16      	ldr	r3, [pc, #88]	; (80017e4 <handleData1Buttons+0xd8>)
 800178a:	2201      	movs	r2, #1
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	e01b      	b.n	80017c8 <handleData1Buttons+0xbc>
                case 1: r1 = 1; break;
 8001790:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <handleData1Buttons+0xdc>)
 8001792:	2201      	movs	r2, #1
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	e017      	b.n	80017c8 <handleData1Buttons+0xbc>
                case 2: l3 = 1; break;
 8001798:	4b14      	ldr	r3, [pc, #80]	; (80017ec <handleData1Buttons+0xe0>)
 800179a:	2201      	movs	r2, #1
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	e013      	b.n	80017c8 <handleData1Buttons+0xbc>
                case 3: r3 = 1; break;
 80017a0:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <handleData1Buttons+0xe4>)
 80017a2:	2201      	movs	r2, #1
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	e00f      	b.n	80017c8 <handleData1Buttons+0xbc>
                case 4: share = 1; break;
 80017a8:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <handleData1Buttons+0xe8>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	e00b      	b.n	80017c8 <handleData1Buttons+0xbc>
                case 5: options = 1; break;
 80017b0:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <handleData1Buttons+0xec>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	e007      	b.n	80017c8 <handleData1Buttons+0xbc>
                case 6: ps = 1; break;
 80017b8:	4b10      	ldr	r3, [pc, #64]	; (80017fc <handleData1Buttons+0xf0>)
 80017ba:	2201      	movs	r2, #1
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	e003      	b.n	80017c8 <handleData1Buttons+0xbc>
                case 7: tpad = 1; break;
 80017c0:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <handleData1Buttons+0xf4>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	bf00      	nop
    for (int i = 0; i < sizeof(data0_buttons) / sizeof(data0_buttons[0]); i++) {
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	3301      	adds	r3, #1
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2b07      	cmp	r3, #7
 80017d2:	d9bb      	bls.n	800174c <handleData1Buttons+0x40>
            }
        }
    }
}
 80017d4:	bf00      	nop
 80017d6:	bf00      	nop
 80017d8:	3714      	adds	r7, #20
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	2000072c 	.word	0x2000072c
 80017e8:	20000730 	.word	0x20000730
 80017ec:	20000734 	.word	0x20000734
 80017f0:	20000738 	.word	0x20000738
 80017f4:	2000073c 	.word	0x2000073c
 80017f8:	20000740 	.word	0x20000740
 80017fc:	20000744 	.word	0x20000744
 8001800:	20000748 	.word	0x20000748
 8001804:	20000000 	.word	0x20000000

08001808 <ds4>:

void ds4(){
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
	if (CANSPI_Receive(&rxMessage)){
 800180c:	4819      	ldr	r0, [pc, #100]	; (8001874 <ds4+0x6c>)
 800180e:	f7ff fcd2 	bl	80011b6 <CANSPI_Receive>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d02b      	beq.n	8001870 <ds4+0x68>
		if(rxMessage.frame.id == 0x36){
 8001818:	4b16      	ldr	r3, [pc, #88]	; (8001874 <ds4+0x6c>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2b36      	cmp	r3, #54	; 0x36
 800181e:	d127      	bne.n	8001870 <ds4+0x68>
			handleData0Buttons(rxMessage.frame.data0);
 8001820:	4b14      	ldr	r3, [pc, #80]	; (8001874 <ds4+0x6c>)
 8001822:	7a5b      	ldrb	r3, [r3, #9]
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff fef3 	bl	8001610 <handleData0Buttons>
			handleData1Buttons(rxMessage.frame.data1);
 800182a:	4b12      	ldr	r3, [pc, #72]	; (8001874 <ds4+0x6c>)
 800182c:	7a9b      	ldrb	r3, [r3, #10]
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff ff6c 	bl	800170c <handleData1Buttons>
			l2 = rxMessage.frame.data2;
 8001834:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <ds4+0x6c>)
 8001836:	7adb      	ldrb	r3, [r3, #11]
 8001838:	461a      	mov	r2, r3
 800183a:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <ds4+0x70>)
 800183c:	601a      	str	r2, [r3, #0]
			r2 = rxMessage.frame.data3;
 800183e:	4b0d      	ldr	r3, [pc, #52]	; (8001874 <ds4+0x6c>)
 8001840:	7b1b      	ldrb	r3, [r3, #12]
 8001842:	461a      	mov	r2, r3
 8001844:	4b0d      	ldr	r3, [pc, #52]	; (800187c <ds4+0x74>)
 8001846:	601a      	str	r2, [r3, #0]
			lx = rxMessage.frame.data4;
 8001848:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <ds4+0x6c>)
 800184a:	7b5b      	ldrb	r3, [r3, #13]
 800184c:	461a      	mov	r2, r3
 800184e:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <ds4+0x78>)
 8001850:	601a      	str	r2, [r3, #0]
			lxs = rxMessage.frame.data5;
 8001852:	4b08      	ldr	r3, [pc, #32]	; (8001874 <ds4+0x6c>)
 8001854:	7b9b      	ldrb	r3, [r3, #14]
 8001856:	461a      	mov	r2, r3
 8001858:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <ds4+0x7c>)
 800185a:	601a      	str	r2, [r3, #0]
			lys = rxMessage.frame.data6;
 800185c:	4b05      	ldr	r3, [pc, #20]	; (8001874 <ds4+0x6c>)
 800185e:	7bdb      	ldrb	r3, [r3, #15]
 8001860:	461a      	mov	r2, r3
 8001862:	4b09      	ldr	r3, [pc, #36]	; (8001888 <ds4+0x80>)
 8001864:	601a      	str	r2, [r3, #0]
			ly = rxMessage.frame.data7;
 8001866:	4b03      	ldr	r3, [pc, #12]	; (8001874 <ds4+0x6c>)
 8001868:	7c1b      	ldrb	r3, [r3, #16]
 800186a:	461a      	mov	r2, r3
 800186c:	4b07      	ldr	r3, [pc, #28]	; (800188c <ds4+0x84>)
 800186e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}
 8001874:	200007e4 	.word	0x200007e4
 8001878:	20000754 	.word	0x20000754
 800187c:	20000758 	.word	0x20000758
 8001880:	2000074c 	.word	0x2000074c
 8001884:	2000075c 	.word	0x2000075c
 8001888:	20000760 	.word	0x20000760
 800188c:	20000750 	.word	0x20000750

08001890 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	4a07      	ldr	r2, [pc, #28]	; (80018bc <vApplicationGetIdleTaskMemory+0x2c>)
 80018a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	4a06      	ldr	r2, [pc, #24]	; (80018c0 <vApplicationGetIdleTaskMemory+0x30>)
 80018a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2280      	movs	r2, #128	; 0x80
 80018ac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80018ae:	bf00      	nop
 80018b0:	3714      	adds	r7, #20
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	200001c0 	.word	0x200001c0
 80018c0:	20000260 	.word	0x20000260

080018c4 <map>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uCAN_MSG txMessage;
uCAN_MSG rxMessage;

int map(int value, int fromLow, int fromHigh, int toLow, int toHigh) {
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
 80018d0:	603b      	str	r3, [r7, #0]
    return (int) (value - fromLow) * (toHigh - toLow) / (fromHigh - fromLow) + toLow;
 80018d2:	68fa      	ldr	r2, [r7, #12]
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	69b9      	ldr	r1, [r7, #24]
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	1a8a      	subs	r2, r1, r2
 80018de:	fb03 f202 	mul.w	r2, r3, r2
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	1acb      	subs	r3, r1, r3
 80018e8:	fb92 f2f3 	sdiv	r2, r2, r3
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	4413      	add	r3, r2
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <mode_padi>:

int _write(int file, char *ptr, int len){
	HAL_UART_Transmit_IT(&huart3, (uint8_t*)ptr, len);
	return len;
}
void mode_padi(){
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
	lsflag_6=HAL_GPIO_ReadPin(LS_6_GPIO_Port, LS_6_Pin);
 8001900:	2180      	movs	r1, #128	; 0x80
 8001902:	489f      	ldr	r0, [pc, #636]	; (8001b80 <mode_padi+0x284>)
 8001904:	f003 f99c 	bl	8004c40 <HAL_GPIO_ReadPin>
 8001908:	4603      	mov	r3, r0
 800190a:	461a      	mov	r2, r3
 800190c:	4b9d      	ldr	r3, [pc, #628]	; (8001b84 <mode_padi+0x288>)
 800190e:	601a      	str	r2, [r3, #0]
	lsflag_7=HAL_GPIO_ReadPin(LS_7_GPIO_Port, LS_7_Pin);
 8001910:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001914:	489c      	ldr	r0, [pc, #624]	; (8001b88 <mode_padi+0x28c>)
 8001916:	f003 f993 	bl	8004c40 <HAL_GPIO_ReadPin>
 800191a:	4603      	mov	r3, r0
 800191c:	461a      	mov	r2, r3
 800191e:	4b9b      	ldr	r3, [pc, #620]	; (8001b8c <mode_padi+0x290>)
 8001920:	601a      	str	r2, [r3, #0]
	p4 = HAL_GPIO_ReadPin(PISTON_D_GPIO_Port, PISTON_D_Pin);
 8001922:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001926:	489a      	ldr	r0, [pc, #616]	; (8001b90 <mode_padi+0x294>)
 8001928:	f003 f98a 	bl	8004c40 <HAL_GPIO_ReadPin>
 800192c:	4603      	mov	r3, r0
 800192e:	461a      	mov	r2, r3
 8001930:	4b98      	ldr	r3, [pc, #608]	; (8001b94 <mode_padi+0x298>)
 8001932:	601a      	str	r2, [r3, #0]
	p5 = HAL_GPIO_ReadPin(PISTON_PADI_GPIO_Port, PISTON_PADI_Pin);
 8001934:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001938:	4895      	ldr	r0, [pc, #596]	; (8001b90 <mode_padi+0x294>)
 800193a:	f003 f981 	bl	8004c40 <HAL_GPIO_ReadPin>
 800193e:	4603      	mov	r3, r0
 8001940:	461a      	mov	r2, r3
 8001942:	4b95      	ldr	r3, [pc, #596]	; (8001b98 <mode_padi+0x29c>)
 8001944:	601a      	str	r2, [r3, #0]
	l=1;
 8001946:	4b95      	ldr	r3, [pc, #596]	; (8001b9c <mode_padi+0x2a0>)
 8001948:	2201      	movs	r2, #1
 800194a:	601a      	str	r2, [r3, #0]
	if (kanan==1){//nutup manual 1, buka -1
 800194c:	4b94      	ldr	r3, [pc, #592]	; (8001ba0 <mode_padi+0x2a4>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d109      	bne.n	8001968 <mode_padi+0x6c>
		motor_drive(&MExtendRight, 1, 750);//kanan 1
 8001954:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001958:	2101      	movs	r1, #1
 800195a:	4892      	ldr	r0, [pc, #584]	; (8001ba4 <mode_padi+0x2a8>)
 800195c:	f002 f874 	bl	8003a48 <motor_drive>
		lsflag_7=1;
 8001960:	4b8a      	ldr	r3, [pc, #552]	; (8001b8c <mode_padi+0x290>)
 8001962:	2201      	movs	r2, #1
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	e004      	b.n	8001972 <mode_padi+0x76>
	}
	else{
		motor_drive(&MExtendRight, 1, 0);
 8001968:	2200      	movs	r2, #0
 800196a:	2101      	movs	r1, #1
 800196c:	488d      	ldr	r0, [pc, #564]	; (8001ba4 <mode_padi+0x2a8>)
 800196e:	f002 f86b 	bl	8003a48 <motor_drive>
	}
	if (kiri==1){//nutup manual -1, buka 1
 8001972:	4b8d      	ldr	r3, [pc, #564]	; (8001ba8 <mode_padi+0x2ac>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d10a      	bne.n	8001990 <mode_padi+0x94>
		motor_drive(&MExtendLeft, -1, 750);//kiri nutup -1
 800197a:	f240 22ee 	movw	r2, #750	; 0x2ee
 800197e:	f04f 31ff 	mov.w	r1, #4294967295
 8001982:	488a      	ldr	r0, [pc, #552]	; (8001bac <mode_padi+0x2b0>)
 8001984:	f002 f860 	bl	8003a48 <motor_drive>
		lsflag_6=1;
 8001988:	4b7e      	ldr	r3, [pc, #504]	; (8001b84 <mode_padi+0x288>)
 800198a:	2201      	movs	r2, #1
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	e004      	b.n	800199a <mode_padi+0x9e>
	}
	else{
		motor_drive(&MExtendLeft, 1, 0);
 8001990:	2200      	movs	r2, #0
 8001992:	2101      	movs	r1, #1
 8001994:	4885      	ldr	r0, [pc, #532]	; (8001bac <mode_padi+0x2b0>)
 8001996:	f002 f857 	bl	8003a48 <motor_drive>
	}

	if (atas==1) { //buka(extend) otomatis
 800199a:	4b85      	ldr	r3, [pc, #532]	; (8001bb0 <mode_padi+0x2b4>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d102      	bne.n	80019a8 <mode_padi+0xac>
		atas1=1;
 80019a2:	4b84      	ldr	r3, [pc, #528]	; (8001bb4 <mode_padi+0x2b8>)
 80019a4:	2201      	movs	r2, #1
 80019a6:	601a      	str	r2, [r3, #0]
	}
	if (atas1==1){
 80019a8:	4b82      	ldr	r3, [pc, #520]	; (8001bb4 <mode_padi+0x2b8>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d12b      	bne.n	8001a08 <mode_padi+0x10c>
		if (lsflag_7==1){
 80019b0:	4b76      	ldr	r3, [pc, #472]	; (8001b8c <mode_padi+0x290>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d107      	bne.n	80019c8 <mode_padi+0xcc>
			motor_drive(&MExtendRight, -1, 750);//buka
 80019b8:	f240 22ee 	movw	r2, #750	; 0x2ee
 80019bc:	f04f 31ff 	mov.w	r1, #4294967295
 80019c0:	4878      	ldr	r0, [pc, #480]	; (8001ba4 <mode_padi+0x2a8>)
 80019c2:	f002 f841 	bl	8003a48 <motor_drive>
 80019c6:	e004      	b.n	80019d2 <mode_padi+0xd6>
		}
		else {
			motor_drive(&MExtendRight, 0, 0);
 80019c8:	2200      	movs	r2, #0
 80019ca:	2100      	movs	r1, #0
 80019cc:	4875      	ldr	r0, [pc, #468]	; (8001ba4 <mode_padi+0x2a8>)
 80019ce:	f002 f83b 	bl	8003a48 <motor_drive>
		}
		if (lsflag_6==1){
 80019d2:	4b6c      	ldr	r3, [pc, #432]	; (8001b84 <mode_padi+0x288>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d106      	bne.n	80019e8 <mode_padi+0xec>
			motor_drive(&MExtendLeft, 1, 750);//buka
 80019da:	f240 22ee 	movw	r2, #750	; 0x2ee
 80019de:	2101      	movs	r1, #1
 80019e0:	4872      	ldr	r0, [pc, #456]	; (8001bac <mode_padi+0x2b0>)
 80019e2:	f002 f831 	bl	8003a48 <motor_drive>
 80019e6:	e004      	b.n	80019f2 <mode_padi+0xf6>
		}
		else {
			motor_drive(&MExtendLeft, 0, 0);
 80019e8:	2200      	movs	r2, #0
 80019ea:	2100      	movs	r1, #0
 80019ec:	486f      	ldr	r0, [pc, #444]	; (8001bac <mode_padi+0x2b0>)
 80019ee:	f002 f82b 	bl	8003a48 <motor_drive>
		}
		if(lsflag_6 == 0 && lsflag_7 == 0){
 80019f2:	4b64      	ldr	r3, [pc, #400]	; (8001b84 <mode_padi+0x288>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d106      	bne.n	8001a08 <mode_padi+0x10c>
 80019fa:	4b64      	ldr	r3, [pc, #400]	; (8001b8c <mode_padi+0x290>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d102      	bne.n	8001a08 <mode_padi+0x10c>
			atas1=0;
 8001a02:	4b6c      	ldr	r3, [pc, #432]	; (8001bb4 <mode_padi+0x2b8>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
		}
	}

	if (bawah==1){//buka manual
 8001a08:	4b6b      	ldr	r3, [pc, #428]	; (8001bb8 <mode_padi+0x2bc>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d108      	bne.n	8001a22 <mode_padi+0x126>
		atas1=0;
 8001a10:	4b68      	ldr	r3, [pc, #416]	; (8001bb4 <mode_padi+0x2b8>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
//		lsflag_4=1;
		loopPadi=0;
 8001a16:	4b69      	ldr	r3, [pc, #420]	; (8001bbc <mode_padi+0x2c0>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
		stepPadi=0;
 8001a1c:	4b68      	ldr	r3, [pc, #416]	; (8001bc0 <mode_padi+0x2c4>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
//		else {
//			motor_drive(&MExtendLeft, 0, 0);
//		}
	}

	if (kotak==1){
 8001a22:	4b68      	ldr	r3, [pc, #416]	; (8001bc4 <mode_padi+0x2c8>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d11c      	bne.n	8001a64 <mode_padi+0x168>
		if(currentTick-nowTick>200){
 8001a2a:	4b67      	ldr	r3, [pc, #412]	; (8001bc8 <mode_padi+0x2cc>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	4b67      	ldr	r3, [pc, #412]	; (8001bcc <mode_padi+0x2d0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2bc8      	cmp	r3, #200	; 0xc8
 8001a36:	d93e      	bls.n	8001ab6 <mode_padi+0x1ba>
			HAL_GPIO_TogglePin(PISTON_A_GPIO_Port, PISTON_A_Pin);
 8001a38:	2102      	movs	r1, #2
 8001a3a:	4855      	ldr	r0, [pc, #340]	; (8001b90 <mode_padi+0x294>)
 8001a3c:	f003 f931 	bl	8004ca2 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(PISTON_B_GPIO_Port, PISTON_B_Pin);
 8001a40:	2104      	movs	r1, #4
 8001a42:	4853      	ldr	r0, [pc, #332]	; (8001b90 <mode_padi+0x294>)
 8001a44:	f003 f92d 	bl	8004ca2 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(PISTON_C_GPIO_Port, PISTON_C_Pin);
 8001a48:	2104      	movs	r1, #4
 8001a4a:	484d      	ldr	r0, [pc, #308]	; (8001b80 <mode_padi+0x284>)
 8001a4c:	f003 f929 	bl	8004ca2 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(PISTON_D_GPIO_Port, PISTON_D_Pin);
 8001a50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a54:	484e      	ldr	r0, [pc, #312]	; (8001b90 <mode_padi+0x294>)
 8001a56:	f003 f924 	bl	8004ca2 <HAL_GPIO_TogglePin>
			nowTick = currentTick;
 8001a5a:	4b5b      	ldr	r3, [pc, #364]	; (8001bc8 <mode_padi+0x2cc>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a5b      	ldr	r2, [pc, #364]	; (8001bcc <mode_padi+0x2d0>)
 8001a60:	6013      	str	r3, [r2, #0]
 8001a62:	e028      	b.n	8001ab6 <mode_padi+0x1ba>
		}
	}
	else if (silang==1){
 8001a64:	4b5a      	ldr	r3, [pc, #360]	; (8001bd0 <mode_padi+0x2d4>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d110      	bne.n	8001a8e <mode_padi+0x192>
		if(currentTick-nowTick>500){
 8001a6c:	4b56      	ldr	r3, [pc, #344]	; (8001bc8 <mode_padi+0x2cc>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4b56      	ldr	r3, [pc, #344]	; (8001bcc <mode_padi+0x2d0>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a7a:	d91c      	bls.n	8001ab6 <mode_padi+0x1ba>
			HAL_GPIO_TogglePin(PISTON_A_GPIO_Port, PISTON_A_Pin);
 8001a7c:	2102      	movs	r1, #2
 8001a7e:	4844      	ldr	r0, [pc, #272]	; (8001b90 <mode_padi+0x294>)
 8001a80:	f003 f90f 	bl	8004ca2 <HAL_GPIO_TogglePin>
			nowTick = currentTick;
 8001a84:	4b50      	ldr	r3, [pc, #320]	; (8001bc8 <mode_padi+0x2cc>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a50      	ldr	r2, [pc, #320]	; (8001bcc <mode_padi+0x2d0>)
 8001a8a:	6013      	str	r3, [r2, #0]
 8001a8c:	e013      	b.n	8001ab6 <mode_padi+0x1ba>
		}
	}
	else if (bulat==1){
 8001a8e:	4b51      	ldr	r3, [pc, #324]	; (8001bd4 <mode_padi+0x2d8>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d10f      	bne.n	8001ab6 <mode_padi+0x1ba>
		if(currentTick-nowTick>500){
 8001a96:	4b4c      	ldr	r3, [pc, #304]	; (8001bc8 <mode_padi+0x2cc>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	4b4c      	ldr	r3, [pc, #304]	; (8001bcc <mode_padi+0x2d0>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001aa4:	d907      	bls.n	8001ab6 <mode_padi+0x1ba>
			HAL_GPIO_TogglePin(PISTON_B_GPIO_Port, PISTON_B_Pin);
 8001aa6:	2104      	movs	r1, #4
 8001aa8:	4839      	ldr	r0, [pc, #228]	; (8001b90 <mode_padi+0x294>)
 8001aaa:	f003 f8fa 	bl	8004ca2 <HAL_GPIO_TogglePin>
			nowTick = currentTick;
 8001aae:	4b46      	ldr	r3, [pc, #280]	; (8001bc8 <mode_padi+0x2cc>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a46      	ldr	r2, [pc, #280]	; (8001bcc <mode_padi+0x2d0>)
 8001ab4:	6013      	str	r3, [r2, #0]
		}
	}
	if (l1==1){
 8001ab6:	4b48      	ldr	r3, [pc, #288]	; (8001bd8 <mode_padi+0x2dc>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d114      	bne.n	8001ae8 <mode_padi+0x1ec>
		if (lsflag_4==0){//turun
 8001abe:	4b47      	ldr	r3, [pc, #284]	; (8001bdc <mode_padi+0x2e0>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d107      	bne.n	8001ad6 <mode_padi+0x1da>
			motor_drive(&MPadi, -1, 600);
 8001ac6:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001aca:	f04f 31ff 	mov.w	r1, #4294967295
 8001ace:	4844      	ldr	r0, [pc, #272]	; (8001be0 <mode_padi+0x2e4>)
 8001ad0:	f001 ffba 	bl	8003a48 <motor_drive>
 8001ad4:	e004      	b.n	8001ae0 <mode_padi+0x1e4>
		}
		else {
			motor_drive(&MPadi, 0 , 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2100      	movs	r1, #0
 8001ada:	4841      	ldr	r0, [pc, #260]	; (8001be0 <mode_padi+0x2e4>)
 8001adc:	f001 ffb4 	bl	8003a48 <motor_drive>
		}
		lsflag_3=0;
 8001ae0:	4b40      	ldr	r3, [pc, #256]	; (8001be4 <mode_padi+0x2e8>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	e01c      	b.n	8001b22 <mode_padi+0x226>
	}
	else if (r1==1){
 8001ae8:	4b3f      	ldr	r3, [pc, #252]	; (8001be8 <mode_padi+0x2ec>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d113      	bne.n	8001b18 <mode_padi+0x21c>
		if (lsflag_3==0){//naik
 8001af0:	4b3c      	ldr	r3, [pc, #240]	; (8001be4 <mode_padi+0x2e8>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d106      	bne.n	8001b06 <mode_padi+0x20a>
			motor_drive(&MPadi, 1, 850);
 8001af8:	f240 3252 	movw	r2, #850	; 0x352
 8001afc:	2101      	movs	r1, #1
 8001afe:	4838      	ldr	r0, [pc, #224]	; (8001be0 <mode_padi+0x2e4>)
 8001b00:	f001 ffa2 	bl	8003a48 <motor_drive>
 8001b04:	e004      	b.n	8001b10 <mode_padi+0x214>
		}
		else {
			motor_drive(&MPadi, 0 , 0);
 8001b06:	2200      	movs	r2, #0
 8001b08:	2100      	movs	r1, #0
 8001b0a:	4835      	ldr	r0, [pc, #212]	; (8001be0 <mode_padi+0x2e4>)
 8001b0c:	f001 ff9c 	bl	8003a48 <motor_drive>
		}
		lsflag_4=0;
 8001b10:	4b32      	ldr	r3, [pc, #200]	; (8001bdc <mode_padi+0x2e0>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	e004      	b.n	8001b22 <mode_padi+0x226>
	}
	else{
		motor_drive(&MPadi, 1, 0);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	4830      	ldr	r0, [pc, #192]	; (8001be0 <mode_padi+0x2e4>)
 8001b1e:	f001 ff93 	bl	8003a48 <motor_drive>
	}

	if (r3==1){//start zone/ posisi awal tekuk dan bawah nyentuh ls4
 8001b22:	4b32      	ldr	r3, [pc, #200]	; (8001bec <mode_padi+0x2f0>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d103      	bne.n	8001b32 <mode_padi+0x236>
		r3a=1;
 8001b2a:	4b31      	ldr	r3, [pc, #196]	; (8001bf0 <mode_padi+0x2f4>)
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	e0ba      	b.n	8001ca8 <mode_padi+0x3ac>
	}
	else if(r3a==1){
 8001b32:	4b2f      	ldr	r3, [pc, #188]	; (8001bf0 <mode_padi+0x2f4>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d173      	bne.n	8001c22 <mode_padi+0x326>
		if(currentTick-nowTick>500){
 8001b3a:	4b23      	ldr	r3, [pc, #140]	; (8001bc8 <mode_padi+0x2cc>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	4b23      	ldr	r3, [pc, #140]	; (8001bcc <mode_padi+0x2d0>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001b48:	d908      	bls.n	8001b5c <mode_padi+0x260>
			HAL_GPIO_TogglePin(PISTON_PADI_GPIO_Port, PISTON_PADI_Pin);
 8001b4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b4e:	4810      	ldr	r0, [pc, #64]	; (8001b90 <mode_padi+0x294>)
 8001b50:	f003 f8a7 	bl	8004ca2 <HAL_GPIO_TogglePin>
			nowTick = currentTick;
 8001b54:	4b1c      	ldr	r3, [pc, #112]	; (8001bc8 <mode_padi+0x2cc>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a1c      	ldr	r2, [pc, #112]	; (8001bcc <mode_padi+0x2d0>)
 8001b5a:	6013      	str	r3, [r2, #0]
		}
		vTaskDelay(300);
 8001b5c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001b60:	f006 fe22 	bl	80087a8 <vTaskDelay>
		if(p5==1){
 8001b64:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <mode_padi+0x29c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d143      	bne.n	8001bf4 <mode_padi+0x2f8>
			atas1=1;
 8001b6c:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <mode_padi+0x2b8>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(PISTON_D_GPIO_Port, PISTON_D_Pin, RESET);
 8001b72:	2200      	movs	r2, #0
 8001b74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b78:	4805      	ldr	r0, [pc, #20]	; (8001b90 <mode_padi+0x294>)
 8001b7a:	f003 f879 	bl	8004c70 <HAL_GPIO_WritePin>
 8001b7e:	e043      	b.n	8001c08 <mode_padi+0x30c>
 8001b80:	40020c00 	.word	0x40020c00
 8001b84:	200007a0 	.word	0x200007a0
 8001b88:	40021800 	.word	0x40021800
 8001b8c:	200007a4 	.word	0x200007a4
 8001b90:	40020800 	.word	0x40020800
 8001b94:	200007c8 	.word	0x200007c8
 8001b98:	200007cc 	.word	0x200007cc
 8001b9c:	20000030 	.word	0x20000030
 8001ba0:	20000714 	.word	0x20000714
 8001ba4:	200000f0 	.word	0x200000f0
 8001ba8:	20000718 	.word	0x20000718
 8001bac:	200000d8 	.word	0x200000d8
 8001bb0:	2000070c 	.word	0x2000070c
 8001bb4:	20000700 	.word	0x20000700
 8001bb8:	20000710 	.word	0x20000710
 8001bbc:	200007b4 	.word	0x200007b4
 8001bc0:	200007b8 	.word	0x200007b8
 8001bc4:	2000071c 	.word	0x2000071c
 8001bc8:	200007dc 	.word	0x200007dc
 8001bcc:	200007e0 	.word	0x200007e0
 8001bd0:	20000720 	.word	0x20000720
 8001bd4:	20000724 	.word	0x20000724
 8001bd8:	2000072c 	.word	0x2000072c
 8001bdc:	20000798 	.word	0x20000798
 8001be0:	20000108 	.word	0x20000108
 8001be4:	20000794 	.word	0x20000794
 8001be8:	20000730 	.word	0x20000730
 8001bec:	20000738 	.word	0x20000738
 8001bf0:	20000708 	.word	0x20000708
		}
		else if(p5==0){
 8001bf4:	4b96      	ldr	r3, [pc, #600]	; (8001e50 <mode_padi+0x554>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d105      	bne.n	8001c08 <mode_padi+0x30c>
			HAL_GPIO_WritePin(PISTON_D_GPIO_Port, PISTON_D_Pin, SET);
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c02:	4894      	ldr	r0, [pc, #592]	; (8001e54 <mode_padi+0x558>)
 8001c04:	f003 f834 	bl	8004c70 <HAL_GPIO_WritePin>
		}
		lsflag_4=1;
 8001c08:	4b93      	ldr	r3, [pc, #588]	; (8001e58 <mode_padi+0x55c>)
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	601a      	str	r2, [r3, #0]
		loopPadi=0;
 8001c0e:	4b93      	ldr	r3, [pc, #588]	; (8001e5c <mode_padi+0x560>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
		stepPadi=0;
 8001c14:	4b92      	ldr	r3, [pc, #584]	; (8001e60 <mode_padi+0x564>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
		r3a=0;
 8001c1a:	4b92      	ldr	r3, [pc, #584]	; (8001e64 <mode_padi+0x568>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	e042      	b.n	8001ca8 <mode_padi+0x3ac>
	}
	else if (share==1){
 8001c22:	4b91      	ldr	r3, [pc, #580]	; (8001e68 <mode_padi+0x56c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d110      	bne.n	8001c4c <mode_padi+0x350>
		if(currentTick-nowTick>500){
 8001c2a:	4b90      	ldr	r3, [pc, #576]	; (8001e6c <mode_padi+0x570>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	4b90      	ldr	r3, [pc, #576]	; (8001e70 <mode_padi+0x574>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001c38:	d936      	bls.n	8001ca8 <mode_padi+0x3ac>
			HAL_GPIO_TogglePin(PISTON_C_GPIO_Port, PISTON_C_Pin);
 8001c3a:	2104      	movs	r1, #4
 8001c3c:	488d      	ldr	r0, [pc, #564]	; (8001e74 <mode_padi+0x578>)
 8001c3e:	f003 f830 	bl	8004ca2 <HAL_GPIO_TogglePin>
			nowTick = currentTick;
 8001c42:	4b8a      	ldr	r3, [pc, #552]	; (8001e6c <mode_padi+0x570>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a8a      	ldr	r2, [pc, #552]	; (8001e70 <mode_padi+0x574>)
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	e02d      	b.n	8001ca8 <mode_padi+0x3ac>
		}
	}
	else if (options==1){
 8001c4c:	4b8a      	ldr	r3, [pc, #552]	; (8001e78 <mode_padi+0x57c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d111      	bne.n	8001c78 <mode_padi+0x37c>
		if(currentTick-nowTick>500){
 8001c54:	4b85      	ldr	r3, [pc, #532]	; (8001e6c <mode_padi+0x570>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	4b85      	ldr	r3, [pc, #532]	; (8001e70 <mode_padi+0x574>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001c62:	d921      	bls.n	8001ca8 <mode_padi+0x3ac>
			HAL_GPIO_TogglePin(PISTON_D_GPIO_Port, PISTON_D_Pin);
 8001c64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c68:	487a      	ldr	r0, [pc, #488]	; (8001e54 <mode_padi+0x558>)
 8001c6a:	f003 f81a 	bl	8004ca2 <HAL_GPIO_TogglePin>
			nowTick = currentTick;
 8001c6e:	4b7f      	ldr	r3, [pc, #508]	; (8001e6c <mode_padi+0x570>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a7f      	ldr	r2, [pc, #508]	; (8001e70 <mode_padi+0x574>)
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	e017      	b.n	8001ca8 <mode_padi+0x3ac>
		}
	}
	else if (tpad==1){
 8001c78:	4b80      	ldr	r3, [pc, #512]	; (8001e7c <mode_padi+0x580>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d113      	bne.n	8001ca8 <mode_padi+0x3ac>
		if(currentTick-nowTick>500){
 8001c80:	4b7a      	ldr	r3, [pc, #488]	; (8001e6c <mode_padi+0x570>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4b7a      	ldr	r3, [pc, #488]	; (8001e70 <mode_padi+0x574>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001c8e:	d908      	bls.n	8001ca2 <mode_padi+0x3a6>
			loopPadi+=1;
 8001c90:	4b72      	ldr	r3, [pc, #456]	; (8001e5c <mode_padi+0x560>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	3301      	adds	r3, #1
 8001c96:	4a71      	ldr	r2, [pc, #452]	; (8001e5c <mode_padi+0x560>)
 8001c98:	6013      	str	r3, [r2, #0]
			nowTick = currentTick;
 8001c9a:	4b74      	ldr	r3, [pc, #464]	; (8001e6c <mode_padi+0x570>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a74      	ldr	r2, [pc, #464]	; (8001e70 <mode_padi+0x574>)
 8001ca0:	6013      	str	r3, [r2, #0]
		}
		stepPadi=0;
 8001ca2:	4b6f      	ldr	r3, [pc, #444]	; (8001e60 <mode_padi+0x564>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
	}
	if (loopPadi==1){
 8001ca8:	4b6c      	ldr	r3, [pc, #432]	; (8001e5c <mode_padi+0x560>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	f040 80f3 	bne.w	8001e98 <mode_padi+0x59c>
		if (stepPadi==0) {//posisi awal dibawah
 8001cb2:	4b6b      	ldr	r3, [pc, #428]	; (8001e60 <mode_padi+0x564>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d117      	bne.n	8001cea <mode_padi+0x3ee>
			if (lsflag_4==0){//turun
 8001cba:	4b67      	ldr	r3, [pc, #412]	; (8001e58 <mode_padi+0x55c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10a      	bne.n	8001cd8 <mode_padi+0x3dc>
				motor_drive(&MPadi, -1, 1000);
 8001cc2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cc6:	f04f 31ff 	mov.w	r1, #4294967295
 8001cca:	486d      	ldr	r0, [pc, #436]	; (8001e80 <mode_padi+0x584>)
 8001ccc:	f001 febc 	bl	8003a48 <motor_drive>
				lsflag_3=0;
 8001cd0:	4b6c      	ldr	r3, [pc, #432]	; (8001e84 <mode_padi+0x588>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	e1ca      	b.n	800206e <mode_padi+0x772>
			}
			else {
				motor_drive(&MPadi, 0 , 0);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	2100      	movs	r1, #0
 8001cdc:	4868      	ldr	r0, [pc, #416]	; (8001e80 <mode_padi+0x584>)
 8001cde:	f001 feb3 	bl	8003a48 <motor_drive>
				stepPadi=1;
 8001ce2:	4b5f      	ldr	r3, [pc, #380]	; (8001e60 <mode_padi+0x564>)
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	e1c1      	b.n	800206e <mode_padi+0x772>
			}
		}
		else if (stepPadi==1) {//cek buka capit padi
 8001cea:	4b5d      	ldr	r3, [pc, #372]	; (8001e60 <mode_padi+0x564>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	f040 81bd 	bne.w	800206e <mode_padi+0x772>
			p1 = HAL_GPIO_ReadPin(PISTON_A_GPIO_Port, PISTON_A_Pin);
 8001cf4:	2102      	movs	r1, #2
 8001cf6:	4857      	ldr	r0, [pc, #348]	; (8001e54 <mode_padi+0x558>)
 8001cf8:	f002 ffa2 	bl	8004c40 <HAL_GPIO_ReadPin>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	461a      	mov	r2, r3
 8001d00:	4b61      	ldr	r3, [pc, #388]	; (8001e88 <mode_padi+0x58c>)
 8001d02:	601a      	str	r2, [r3, #0]
			p2 = HAL_GPIO_ReadPin(PISTON_B_GPIO_Port, PISTON_B_Pin);
 8001d04:	2104      	movs	r1, #4
 8001d06:	4853      	ldr	r0, [pc, #332]	; (8001e54 <mode_padi+0x558>)
 8001d08:	f002 ff9a 	bl	8004c40 <HAL_GPIO_ReadPin>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	461a      	mov	r2, r3
 8001d10:	4b5e      	ldr	r3, [pc, #376]	; (8001e8c <mode_padi+0x590>)
 8001d12:	601a      	str	r2, [r3, #0]
			p3 = HAL_GPIO_ReadPin(PISTON_C_GPIO_Port, PISTON_C_Pin);
 8001d14:	2104      	movs	r1, #4
 8001d16:	4857      	ldr	r0, [pc, #348]	; (8001e74 <mode_padi+0x578>)
 8001d18:	f002 ff92 	bl	8004c40 <HAL_GPIO_ReadPin>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	461a      	mov	r2, r3
 8001d20:	4b5b      	ldr	r3, [pc, #364]	; (8001e90 <mode_padi+0x594>)
 8001d22:	601a      	str	r2, [r3, #0]
			p4 = HAL_GPIO_ReadPin(PISTON_D_GPIO_Port, PISTON_D_Pin);
 8001d24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d28:	484a      	ldr	r0, [pc, #296]	; (8001e54 <mode_padi+0x558>)
 8001d2a:	f002 ff89 	bl	8004c40 <HAL_GPIO_ReadPin>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	461a      	mov	r2, r3
 8001d32:	4b58      	ldr	r3, [pc, #352]	; (8001e94 <mode_padi+0x598>)
 8001d34:	601a      	str	r2, [r3, #0]
			if(p1==1 && p2==1 && p3==1 && p4==1){
 8001d36:	4b54      	ldr	r3, [pc, #336]	; (8001e88 <mode_padi+0x58c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d129      	bne.n	8001d92 <mode_padi+0x496>
 8001d3e:	4b53      	ldr	r3, [pc, #332]	; (8001e8c <mode_padi+0x590>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d125      	bne.n	8001d92 <mode_padi+0x496>
 8001d46:	4b52      	ldr	r3, [pc, #328]	; (8001e90 <mode_padi+0x594>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d121      	bne.n	8001d92 <mode_padi+0x496>
 8001d4e:	4b51      	ldr	r3, [pc, #324]	; (8001e94 <mode_padi+0x598>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d11d      	bne.n	8001d92 <mode_padi+0x496>
				if(currentTick-nowTick>200){
 8001d56:	4b45      	ldr	r3, [pc, #276]	; (8001e6c <mode_padi+0x570>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	4b45      	ldr	r3, [pc, #276]	; (8001e70 <mode_padi+0x574>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2bc8      	cmp	r3, #200	; 0xc8
 8001d62:	f240 8184 	bls.w	800206e <mode_padi+0x772>
					HAL_GPIO_TogglePin(PISTON_A_GPIO_Port, PISTON_A_Pin);
 8001d66:	2102      	movs	r1, #2
 8001d68:	483a      	ldr	r0, [pc, #232]	; (8001e54 <mode_padi+0x558>)
 8001d6a:	f002 ff9a 	bl	8004ca2 <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(PISTON_B_GPIO_Port, PISTON_B_Pin);
 8001d6e:	2104      	movs	r1, #4
 8001d70:	4838      	ldr	r0, [pc, #224]	; (8001e54 <mode_padi+0x558>)
 8001d72:	f002 ff96 	bl	8004ca2 <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(PISTON_C_GPIO_Port, PISTON_C_Pin);
 8001d76:	2104      	movs	r1, #4
 8001d78:	483e      	ldr	r0, [pc, #248]	; (8001e74 <mode_padi+0x578>)
 8001d7a:	f002 ff92 	bl	8004ca2 <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(PISTON_D_GPIO_Port, PISTON_D_Pin);
 8001d7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d82:	4834      	ldr	r0, [pc, #208]	; (8001e54 <mode_padi+0x558>)
 8001d84:	f002 ff8d 	bl	8004ca2 <HAL_GPIO_TogglePin>
					nowTick = currentTick;
 8001d88:	4b38      	ldr	r3, [pc, #224]	; (8001e6c <mode_padi+0x570>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a38      	ldr	r2, [pc, #224]	; (8001e70 <mode_padi+0x574>)
 8001d8e:	6013      	str	r3, [r2, #0]
				if(currentTick-nowTick>200){
 8001d90:	e16d      	b.n	800206e <mode_padi+0x772>
				}
			}
			else if(p1==1){
 8001d92:	4b3d      	ldr	r3, [pc, #244]	; (8001e88 <mode_padi+0x58c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d110      	bne.n	8001dbc <mode_padi+0x4c0>
				if(currentTick-nowTick>200){
 8001d9a:	4b34      	ldr	r3, [pc, #208]	; (8001e6c <mode_padi+0x570>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	4b34      	ldr	r3, [pc, #208]	; (8001e70 <mode_padi+0x574>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2bc8      	cmp	r3, #200	; 0xc8
 8001da6:	f240 8162 	bls.w	800206e <mode_padi+0x772>
					HAL_GPIO_TogglePin(PISTON_A_GPIO_Port, PISTON_A_Pin);
 8001daa:	2102      	movs	r1, #2
 8001dac:	4829      	ldr	r0, [pc, #164]	; (8001e54 <mode_padi+0x558>)
 8001dae:	f002 ff78 	bl	8004ca2 <HAL_GPIO_TogglePin>
					nowTick = currentTick;
 8001db2:	4b2e      	ldr	r3, [pc, #184]	; (8001e6c <mode_padi+0x570>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a2e      	ldr	r2, [pc, #184]	; (8001e70 <mode_padi+0x574>)
 8001db8:	6013      	str	r3, [r2, #0]
 8001dba:	e158      	b.n	800206e <mode_padi+0x772>
				}
			}
			else if(p2==1){
 8001dbc:	4b33      	ldr	r3, [pc, #204]	; (8001e8c <mode_padi+0x590>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d110      	bne.n	8001de6 <mode_padi+0x4ea>
				if(currentTick-nowTick>200){
 8001dc4:	4b29      	ldr	r3, [pc, #164]	; (8001e6c <mode_padi+0x570>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	4b29      	ldr	r3, [pc, #164]	; (8001e70 <mode_padi+0x574>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2bc8      	cmp	r3, #200	; 0xc8
 8001dd0:	f240 814d 	bls.w	800206e <mode_padi+0x772>
					HAL_GPIO_TogglePin(PISTON_B_GPIO_Port, PISTON_B_Pin);
 8001dd4:	2104      	movs	r1, #4
 8001dd6:	481f      	ldr	r0, [pc, #124]	; (8001e54 <mode_padi+0x558>)
 8001dd8:	f002 ff63 	bl	8004ca2 <HAL_GPIO_TogglePin>
					nowTick = currentTick;
 8001ddc:	4b23      	ldr	r3, [pc, #140]	; (8001e6c <mode_padi+0x570>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a23      	ldr	r2, [pc, #140]	; (8001e70 <mode_padi+0x574>)
 8001de2:	6013      	str	r3, [r2, #0]
 8001de4:	e143      	b.n	800206e <mode_padi+0x772>
				}
			}
			else if(p3==1){
 8001de6:	4b2a      	ldr	r3, [pc, #168]	; (8001e90 <mode_padi+0x594>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d110      	bne.n	8001e10 <mode_padi+0x514>
				if(currentTick-nowTick>200){
 8001dee:	4b1f      	ldr	r3, [pc, #124]	; (8001e6c <mode_padi+0x570>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	4b1f      	ldr	r3, [pc, #124]	; (8001e70 <mode_padi+0x574>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2bc8      	cmp	r3, #200	; 0xc8
 8001dfa:	f240 8138 	bls.w	800206e <mode_padi+0x772>
					HAL_GPIO_TogglePin(PISTON_C_GPIO_Port, PISTON_C_Pin);
 8001dfe:	2104      	movs	r1, #4
 8001e00:	481c      	ldr	r0, [pc, #112]	; (8001e74 <mode_padi+0x578>)
 8001e02:	f002 ff4e 	bl	8004ca2 <HAL_GPIO_TogglePin>
					nowTick = currentTick;
 8001e06:	4b19      	ldr	r3, [pc, #100]	; (8001e6c <mode_padi+0x570>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a19      	ldr	r2, [pc, #100]	; (8001e70 <mode_padi+0x574>)
 8001e0c:	6013      	str	r3, [r2, #0]
 8001e0e:	e12e      	b.n	800206e <mode_padi+0x772>
				}
			}
			else if(p4==1){
 8001e10:	4b20      	ldr	r3, [pc, #128]	; (8001e94 <mode_padi+0x598>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d111      	bne.n	8001e3c <mode_padi+0x540>
				if(currentTick-nowTick>200){
 8001e18:	4b14      	ldr	r3, [pc, #80]	; (8001e6c <mode_padi+0x570>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	4b14      	ldr	r3, [pc, #80]	; (8001e70 <mode_padi+0x574>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2bc8      	cmp	r3, #200	; 0xc8
 8001e24:	f240 8123 	bls.w	800206e <mode_padi+0x772>
					HAL_GPIO_TogglePin(PISTON_D_GPIO_Port, PISTON_D_Pin);
 8001e28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e2c:	4809      	ldr	r0, [pc, #36]	; (8001e54 <mode_padi+0x558>)
 8001e2e:	f002 ff38 	bl	8004ca2 <HAL_GPIO_TogglePin>
					nowTick = currentTick;
 8001e32:	4b0e      	ldr	r3, [pc, #56]	; (8001e6c <mode_padi+0x570>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a0e      	ldr	r2, [pc, #56]	; (8001e70 <mode_padi+0x574>)
 8001e38:	6013      	str	r3, [r2, #0]
 8001e3a:	e118      	b.n	800206e <mode_padi+0x772>
				}
			}
			else {
				lsflag_4=1;
 8001e3c:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <mode_padi+0x55c>)
 8001e3e:	2201      	movs	r2, #1
 8001e40:	601a      	str	r2, [r3, #0]
				lsflag_3=0;
 8001e42:	4b10      	ldr	r3, [pc, #64]	; (8001e84 <mode_padi+0x588>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
				stepPadi=0;
 8001e48:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <mode_padi+0x564>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	e10e      	b.n	800206e <mode_padi+0x772>
 8001e50:	200007cc 	.word	0x200007cc
 8001e54:	40020800 	.word	0x40020800
 8001e58:	20000798 	.word	0x20000798
 8001e5c:	200007b4 	.word	0x200007b4
 8001e60:	200007b8 	.word	0x200007b8
 8001e64:	20000708 	.word	0x20000708
 8001e68:	2000073c 	.word	0x2000073c
 8001e6c:	200007dc 	.word	0x200007dc
 8001e70:	200007e0 	.word	0x200007e0
 8001e74:	40020c00 	.word	0x40020c00
 8001e78:	20000740 	.word	0x20000740
 8001e7c:	20000748 	.word	0x20000748
 8001e80:	20000108 	.word	0x20000108
 8001e84:	20000794 	.word	0x20000794
 8001e88:	200007bc 	.word	0x200007bc
 8001e8c:	200007c0 	.word	0x200007c0
 8001e90:	200007c4 	.word	0x200007c4
 8001e94:	200007c8 	.word	0x200007c8
			}
		}
	}
	else if (loopPadi==2){
 8001e98:	4b80      	ldr	r3, [pc, #512]	; (800209c <mode_padi+0x7a0>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d128      	bne.n	8001ef2 <mode_padi+0x5f6>
		if(stepPadi==0){
 8001ea0:	4b7f      	ldr	r3, [pc, #508]	; (80020a0 <mode_padi+0x7a4>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d108      	bne.n	8001eba <mode_padi+0x5be>
			if(kotak==1){
 8001ea8:	4b7e      	ldr	r3, [pc, #504]	; (80020a4 <mode_padi+0x7a8>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	f040 80de 	bne.w	800206e <mode_padi+0x772>
				stepPadi=1;
 8001eb2:	4b7b      	ldr	r3, [pc, #492]	; (80020a0 <mode_padi+0x7a4>)
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	e0d9      	b.n	800206e <mode_padi+0x772>
			}
		}
		else if (stepPadi==1){
 8001eba:	4b79      	ldr	r3, [pc, #484]	; (80020a0 <mode_padi+0x7a4>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	f040 80d5 	bne.w	800206e <mode_padi+0x772>
			if (lsflag_3==0){//naik
 8001ec4:	4b78      	ldr	r3, [pc, #480]	; (80020a8 <mode_padi+0x7ac>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d106      	bne.n	8001eda <mode_padi+0x5de>
				motor_drive(&MPadi, 1, 1000);
 8001ecc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	4876      	ldr	r0, [pc, #472]	; (80020ac <mode_padi+0x7b0>)
 8001ed4:	f001 fdb8 	bl	8003a48 <motor_drive>
 8001ed8:	e0c9      	b.n	800206e <mode_padi+0x772>
			}
			else {
				motor_drive(&MPadi, 1 , 0);
 8001eda:	2200      	movs	r2, #0
 8001edc:	2101      	movs	r1, #1
 8001ede:	4873      	ldr	r0, [pc, #460]	; (80020ac <mode_padi+0x7b0>)
 8001ee0:	f001 fdb2 	bl	8003a48 <motor_drive>
				lsflag_4=0;
 8001ee4:	4b72      	ldr	r3, [pc, #456]	; (80020b0 <mode_padi+0x7b4>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
				stepPadi=5;
 8001eea:	4b6d      	ldr	r3, [pc, #436]	; (80020a0 <mode_padi+0x7a4>)
 8001eec:	2205      	movs	r2, #5
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	e0bd      	b.n	800206e <mode_padi+0x772>
			}
		}
	}
	else if(loopPadi==3){
 8001ef2:	4b6a      	ldr	r3, [pc, #424]	; (800209c <mode_padi+0x7a0>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2b03      	cmp	r3, #3
 8001ef8:	d14a      	bne.n	8001f90 <mode_padi+0x694>
		if(stepPadi==0){
 8001efa:	4b69      	ldr	r3, [pc, #420]	; (80020a0 <mode_padi+0x7a4>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d117      	bne.n	8001f32 <mode_padi+0x636>
			if (lsflag_4==0){//turun
 8001f02:	4b6b      	ldr	r3, [pc, #428]	; (80020b0 <mode_padi+0x7b4>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10a      	bne.n	8001f20 <mode_padi+0x624>
				motor_drive(&MPadi, -1, 800);
 8001f0a:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001f0e:	f04f 31ff 	mov.w	r1, #4294967295
 8001f12:	4866      	ldr	r0, [pc, #408]	; (80020ac <mode_padi+0x7b0>)
 8001f14:	f001 fd98 	bl	8003a48 <motor_drive>
				lsflag_3=0;
 8001f18:	4b63      	ldr	r3, [pc, #396]	; (80020a8 <mode_padi+0x7ac>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	e0a6      	b.n	800206e <mode_padi+0x772>
			}
			else {
				motor_drive(&MPadi, 0 , 0);
 8001f20:	2200      	movs	r2, #0
 8001f22:	2100      	movs	r1, #0
 8001f24:	4861      	ldr	r0, [pc, #388]	; (80020ac <mode_padi+0x7b0>)
 8001f26:	f001 fd8f 	bl	8003a48 <motor_drive>
				stepPadi=1;
 8001f2a:	4b5d      	ldr	r3, [pc, #372]	; (80020a0 <mode_padi+0x7a4>)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	e09d      	b.n	800206e <mode_padi+0x772>
			}
		}
		else if(stepPadi==1){
 8001f32:	4b5b      	ldr	r3, [pc, #364]	; (80020a0 <mode_padi+0x7a4>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d10b      	bne.n	8001f52 <mode_padi+0x656>
				HAL_GPIO_TogglePin(PISTON_A_GPIO_Port, PISTON_A_Pin);
 8001f3a:	2102      	movs	r1, #2
 8001f3c:	485d      	ldr	r0, [pc, #372]	; (80020b4 <mode_padi+0x7b8>)
 8001f3e:	f002 feb0 	bl	8004ca2 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(PISTON_C_GPIO_Port, PISTON_C_Pin);
 8001f42:	2104      	movs	r1, #4
 8001f44:	485c      	ldr	r0, [pc, #368]	; (80020b8 <mode_padi+0x7bc>)
 8001f46:	f002 feac 	bl	8004ca2 <HAL_GPIO_TogglePin>
			stepPadi=2;
 8001f4a:	4b55      	ldr	r3, [pc, #340]	; (80020a0 <mode_padi+0x7a4>)
 8001f4c:	2202      	movs	r2, #2
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	e08d      	b.n	800206e <mode_padi+0x772>
		}
		else if (stepPadi==2){
 8001f52:	4b53      	ldr	r3, [pc, #332]	; (80020a0 <mode_padi+0x7a4>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	f040 8089 	bne.w	800206e <mode_padi+0x772>
			if (lsflag_3==0){//naik
 8001f5c:	4b52      	ldr	r3, [pc, #328]	; (80020a8 <mode_padi+0x7ac>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d109      	bne.n	8001f78 <mode_padi+0x67c>
				motor_drive(&MPadi, 1, 1000);
 8001f64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f68:	2101      	movs	r1, #1
 8001f6a:	4850      	ldr	r0, [pc, #320]	; (80020ac <mode_padi+0x7b0>)
 8001f6c:	f001 fd6c 	bl	8003a48 <motor_drive>
				lsflag_4=0;
 8001f70:	4b4f      	ldr	r3, [pc, #316]	; (80020b0 <mode_padi+0x7b4>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	e07a      	b.n	800206e <mode_padi+0x772>
			}
			else {
				motor_drive(&MPadi, 0 , 0);
 8001f78:	2200      	movs	r2, #0
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	484b      	ldr	r0, [pc, #300]	; (80020ac <mode_padi+0x7b0>)
 8001f7e:	f001 fd63 	bl	8003a48 <motor_drive>
				lsflag_4=0;
 8001f82:	4b4b      	ldr	r3, [pc, #300]	; (80020b0 <mode_padi+0x7b4>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
				stepPadi=5;
 8001f88:	4b45      	ldr	r3, [pc, #276]	; (80020a0 <mode_padi+0x7a4>)
 8001f8a:	2205      	movs	r2, #5
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	e06e      	b.n	800206e <mode_padi+0x772>
			}
		}
	}
	else if(loopPadi==4){
 8001f90:	4b42      	ldr	r3, [pc, #264]	; (800209c <mode_padi+0x7a0>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2b04      	cmp	r3, #4
 8001f96:	d164      	bne.n	8002062 <mode_padi+0x766>
		if(stepPadi==0){
 8001f98:	4b41      	ldr	r3, [pc, #260]	; (80020a0 <mode_padi+0x7a4>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d117      	bne.n	8001fd0 <mode_padi+0x6d4>
			if (lsflag_4==0){//turun
 8001fa0:	4b43      	ldr	r3, [pc, #268]	; (80020b0 <mode_padi+0x7b4>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d107      	bne.n	8001fb8 <mode_padi+0x6bc>
				motor_drive(&MPadi, -1, 800);
 8001fa8:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001fac:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb0:	483e      	ldr	r0, [pc, #248]	; (80020ac <mode_padi+0x7b0>)
 8001fb2:	f001 fd49 	bl	8003a48 <motor_drive>
 8001fb6:	e05a      	b.n	800206e <mode_padi+0x772>
			}
			else {
				motor_drive(&MPadi, 0 , 0);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2100      	movs	r1, #0
 8001fbc:	483b      	ldr	r0, [pc, #236]	; (80020ac <mode_padi+0x7b0>)
 8001fbe:	f001 fd43 	bl	8003a48 <motor_drive>
				stepPadi=1;
 8001fc2:	4b37      	ldr	r3, [pc, #220]	; (80020a0 <mode_padi+0x7a4>)
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	601a      	str	r2, [r3, #0]
				lsflag_3=0;
 8001fc8:	4b37      	ldr	r3, [pc, #220]	; (80020a8 <mode_padi+0x7ac>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	e04e      	b.n	800206e <mode_padi+0x772>
			}
		}
		else if(stepPadi==1){
 8001fd0:	4b33      	ldr	r3, [pc, #204]	; (80020a0 <mode_padi+0x7a4>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d11b      	bne.n	8002010 <mode_padi+0x714>
			if(currentTick-nowTick>500){
 8001fd8:	4b38      	ldr	r3, [pc, #224]	; (80020bc <mode_padi+0x7c0>)
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	4b38      	ldr	r3, [pc, #224]	; (80020c0 <mode_padi+0x7c4>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001fe6:	d90c      	bls.n	8002002 <mode_padi+0x706>
				HAL_GPIO_TogglePin(PISTON_B_GPIO_Port, PISTON_B_Pin);
 8001fe8:	2104      	movs	r1, #4
 8001fea:	4832      	ldr	r0, [pc, #200]	; (80020b4 <mode_padi+0x7b8>)
 8001fec:	f002 fe59 	bl	8004ca2 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(PISTON_D_GPIO_Port, PISTON_D_Pin);
 8001ff0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ff4:	482f      	ldr	r0, [pc, #188]	; (80020b4 <mode_padi+0x7b8>)
 8001ff6:	f002 fe54 	bl	8004ca2 <HAL_GPIO_TogglePin>
				nowTick = currentTick;
 8001ffa:	4b30      	ldr	r3, [pc, #192]	; (80020bc <mode_padi+0x7c0>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a30      	ldr	r2, [pc, #192]	; (80020c0 <mode_padi+0x7c4>)
 8002000:	6013      	str	r3, [r2, #0]
			}
			stepPadi=2;
 8002002:	4b27      	ldr	r3, [pc, #156]	; (80020a0 <mode_padi+0x7a4>)
 8002004:	2202      	movs	r2, #2
 8002006:	601a      	str	r2, [r3, #0]
			lsflag_4=0;
 8002008:	4b29      	ldr	r3, [pc, #164]	; (80020b0 <mode_padi+0x7b4>)
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	e02e      	b.n	800206e <mode_padi+0x772>
		}
		else if (stepPadi==2){
 8002010:	4b23      	ldr	r3, [pc, #140]	; (80020a0 <mode_padi+0x7a4>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2b02      	cmp	r3, #2
 8002016:	d119      	bne.n	800204c <mode_padi+0x750>
			if (lsflag_3==0){//naik
 8002018:	4b23      	ldr	r3, [pc, #140]	; (80020a8 <mode_padi+0x7ac>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d109      	bne.n	8002034 <mode_padi+0x738>
				motor_drive(&MPadi, 1, 1000);
 8002020:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002024:	2101      	movs	r1, #1
 8002026:	4821      	ldr	r0, [pc, #132]	; (80020ac <mode_padi+0x7b0>)
 8002028:	f001 fd0e 	bl	8003a48 <motor_drive>
				lsflag_4=0;
 800202c:	4b20      	ldr	r3, [pc, #128]	; (80020b0 <mode_padi+0x7b4>)
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	e01c      	b.n	800206e <mode_padi+0x772>
			}
			else {
				motor_drive(&MPadi, 0 , 0);
 8002034:	2200      	movs	r2, #0
 8002036:	2100      	movs	r1, #0
 8002038:	481c      	ldr	r0, [pc, #112]	; (80020ac <mode_padi+0x7b0>)
 800203a:	f001 fd05 	bl	8003a48 <motor_drive>
				stepPadi=3;
 800203e:	4b18      	ldr	r3, [pc, #96]	; (80020a0 <mode_padi+0x7a4>)
 8002040:	2203      	movs	r2, #3
 8002042:	601a      	str	r2, [r3, #0]
				lsflag_3=1;
 8002044:	4b18      	ldr	r3, [pc, #96]	; (80020a8 <mode_padi+0x7ac>)
 8002046:	2201      	movs	r2, #1
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	e010      	b.n	800206e <mode_padi+0x772>
			}
		}
		else if(stepPadi==3){
 800204c:	4b14      	ldr	r3, [pc, #80]	; (80020a0 <mode_padi+0x7a4>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2b03      	cmp	r3, #3
 8002052:	d10c      	bne.n	800206e <mode_padi+0x772>
			stepPadi=0;
 8002054:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <mode_padi+0x7a4>)
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
			loopPadi=0;
 800205a:	4b10      	ldr	r3, [pc, #64]	; (800209c <mode_padi+0x7a0>)
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	e005      	b.n	800206e <mode_padi+0x772>
		}
	}
	else{
		stepPadi=0;
 8002062:	4b0f      	ldr	r3, [pc, #60]	; (80020a0 <mode_padi+0x7a4>)
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
		loopPadi=0;
 8002068:	4b0c      	ldr	r3, [pc, #48]	; (800209c <mode_padi+0x7a0>)
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
	}
	bldc_drive(&roller1, 3000);
 800206e:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002072:	4814      	ldr	r0, [pc, #80]	; (80020c4 <mode_padi+0x7c8>)
 8002074:	f001 fe33 	bl	8003cde <bldc_drive>
	bldc_drive(&roller2, 3000);
 8002078:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800207c:	4812      	ldr	r0, [pc, #72]	; (80020c8 <mode_padi+0x7cc>)
 800207e:	f001 fe2e 	bl	8003cde <bldc_drive>
	motor_drive(&MPelontar, 0, 0);
 8002082:	2200      	movs	r2, #0
 8002084:	2100      	movs	r1, #0
 8002086:	4811      	ldr	r0, [pc, #68]	; (80020cc <mode_padi+0x7d0>)
 8002088:	f001 fcde 	bl	8003a48 <motor_drive>
	motor_drive(&MBola, 0, 0);
 800208c:	2200      	movs	r2, #0
 800208e:	2100      	movs	r1, #0
 8002090:	480f      	ldr	r0, [pc, #60]	; (80020d0 <mode_padi+0x7d4>)
 8002092:	f001 fcd9 	bl	8003a48 <motor_drive>
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	200007b4 	.word	0x200007b4
 80020a0:	200007b8 	.word	0x200007b8
 80020a4:	2000071c 	.word	0x2000071c
 80020a8:	20000794 	.word	0x20000794
 80020ac:	20000108 	.word	0x20000108
 80020b0:	20000798 	.word	0x20000798
 80020b4:	40020800 	.word	0x40020800
 80020b8:	40020c00 	.word	0x40020c00
 80020bc:	200007dc 	.word	0x200007dc
 80020c0:	200007e0 	.word	0x200007e0
 80020c4:	20000038 	.word	0x20000038
 80020c8:	20000040 	.word	0x20000040
 80020cc:	200000a8 	.word	0x200000a8
 80020d0:	200000c0 	.word	0x200000c0

080020d4 <mode_bola>:

void mode_bola(){
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
	if(l==-1){
 80020d8:	4b8e      	ldr	r3, [pc, #568]	; (8002314 <mode_bola+0x240>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e0:	d135      	bne.n	800214e <mode_bola+0x7a>
		kec1=3545;
 80020e2:	4b8d      	ldr	r3, [pc, #564]	; (8002318 <mode_bola+0x244>)
 80020e4:	f640 52d9 	movw	r2, #3545	; 0xdd9
 80020e8:	601a      	str	r2, [r3, #0]
		bldc_drive(&roller1, kec1);
 80020ea:	4b8b      	ldr	r3, [pc, #556]	; (8002318 <mode_bola+0x244>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4619      	mov	r1, r3
 80020f0:	488a      	ldr	r0, [pc, #552]	; (800231c <mode_bola+0x248>)
 80020f2:	f001 fdf4 	bl	8003cde <bldc_drive>
		bldc_drive(&roller2, kec1);
 80020f6:	4b88      	ldr	r3, [pc, #544]	; (8002318 <mode_bola+0x244>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4619      	mov	r1, r3
 80020fc:	4888      	ldr	r0, [pc, #544]	; (8002320 <mode_bola+0x24c>)
 80020fe:	f001 fdee 	bl	8003cde <bldc_drive>
		vTaskDelay(600);
 8002102:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002106:	f006 fb4f 	bl	80087a8 <vTaskDelay>
		kec1=3000;
 800210a:	4b83      	ldr	r3, [pc, #524]	; (8002318 <mode_bola+0x244>)
 800210c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002110:	601a      	str	r2, [r3, #0]
		bldc_drive(&roller1, kec1);
 8002112:	4b81      	ldr	r3, [pc, #516]	; (8002318 <mode_bola+0x244>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4619      	mov	r1, r3
 8002118:	4880      	ldr	r0, [pc, #512]	; (800231c <mode_bola+0x248>)
 800211a:	f001 fde0 	bl	8003cde <bldc_drive>
		bldc_drive(&roller2, kec1);
 800211e:	4b7e      	ldr	r3, [pc, #504]	; (8002318 <mode_bola+0x244>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4619      	mov	r1, r3
 8002124:	487e      	ldr	r0, [pc, #504]	; (8002320 <mode_bola+0x24c>)
 8002126:	f001 fdda 	bl	8003cde <bldc_drive>
		vTaskDelay(300);
 800212a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800212e:	f006 fb3b 	bl	80087a8 <vTaskDelay>
		dutyR=3500;
 8002132:	4b7c      	ldr	r3, [pc, #496]	; (8002324 <mode_bola+0x250>)
 8002134:	f640 52ac 	movw	r2, #3500	; 0xdac
 8002138:	601a      	str	r2, [r3, #0]
		kec1=3500;
 800213a:	4b77      	ldr	r3, [pc, #476]	; (8002318 <mode_bola+0x244>)
 800213c:	f640 52ac 	movw	r2, #3500	; 0xdac
 8002140:	601a      	str	r2, [r3, #0]
		kec=1;
 8002142:	4b79      	ldr	r3, [pc, #484]	; (8002328 <mode_bola+0x254>)
 8002144:	2201      	movs	r2, #1
 8002146:	601a      	str	r2, [r3, #0]
		l=1;
 8002148:	4b72      	ldr	r3, [pc, #456]	; (8002314 <mode_bola+0x240>)
 800214a:	2201      	movs	r2, #1
 800214c:	601a      	str	r2, [r3, #0]
	}
	if (bawah==1) {
 800214e:	4b77      	ldr	r3, [pc, #476]	; (800232c <mode_bola+0x258>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d111      	bne.n	800217a <mode_bola+0xa6>
		if (lsflag_5==0){//turun
 8002156:	4b76      	ldr	r3, [pc, #472]	; (8002330 <mode_bola+0x25c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d107      	bne.n	800216e <mode_bola+0x9a>
			motor_drive(&MPelontar, -1, 550);
 800215e:	f240 2226 	movw	r2, #550	; 0x226
 8002162:	f04f 31ff 	mov.w	r1, #4294967295
 8002166:	4873      	ldr	r0, [pc, #460]	; (8002334 <mode_bola+0x260>)
 8002168:	f001 fc6e 	bl	8003a48 <motor_drive>
 800216c:	e018      	b.n	80021a0 <mode_bola+0xcc>
		}
		else {
			motor_drive(&MPelontar, 0 , 0);
 800216e:	2200      	movs	r2, #0
 8002170:	2100      	movs	r1, #0
 8002172:	4870      	ldr	r0, [pc, #448]	; (8002334 <mode_bola+0x260>)
 8002174:	f001 fc68 	bl	8003a48 <motor_drive>
 8002178:	e012      	b.n	80021a0 <mode_bola+0xcc>
		}
	}
	else if (atas==1){//naik
 800217a:	4b6f      	ldr	r3, [pc, #444]	; (8002338 <mode_bola+0x264>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d109      	bne.n	8002196 <mode_bola+0xc2>
		motor_drive(&MPelontar, 1, 450);
 8002182:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8002186:	2101      	movs	r1, #1
 8002188:	486a      	ldr	r0, [pc, #424]	; (8002334 <mode_bola+0x260>)
 800218a:	f001 fc5d 	bl	8003a48 <motor_drive>
		lsflag_5=0;
 800218e:	4b68      	ldr	r3, [pc, #416]	; (8002330 <mode_bola+0x25c>)
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	e004      	b.n	80021a0 <mode_bola+0xcc>
	}
	else{
		motor_drive(&MPelontar, 0, 0);
 8002196:	2200      	movs	r2, #0
 8002198:	2100      	movs	r1, #0
 800219a:	4866      	ldr	r0, [pc, #408]	; (8002334 <mode_bola+0x260>)
 800219c:	f001 fc54 	bl	8003a48 <motor_drive>
	}

	if (kanan==1){
 80021a0:	4b66      	ldr	r3, [pc, #408]	; (800233c <mode_bola+0x268>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d118      	bne.n	80021da <mode_bola+0x106>
		if(currentTick-nowTick>500 && kec<5){
 80021a8:	4b65      	ldr	r3, [pc, #404]	; (8002340 <mode_bola+0x26c>)
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	4b65      	ldr	r3, [pc, #404]	; (8002344 <mode_bola+0x270>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80021b6:	d92c      	bls.n	8002212 <mode_bola+0x13e>
 80021b8:	4b5b      	ldr	r3, [pc, #364]	; (8002328 <mode_bola+0x254>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2b04      	cmp	r3, #4
 80021be:	dc28      	bgt.n	8002212 <mode_bola+0x13e>
			adj=0;
 80021c0:	4b61      	ldr	r3, [pc, #388]	; (8002348 <mode_bola+0x274>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]
			kec+=1;
 80021c6:	4b58      	ldr	r3, [pc, #352]	; (8002328 <mode_bola+0x254>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	3301      	adds	r3, #1
 80021cc:	4a56      	ldr	r2, [pc, #344]	; (8002328 <mode_bola+0x254>)
 80021ce:	6013      	str	r3, [r2, #0]
			nowTick = currentTick;
 80021d0:	4b5b      	ldr	r3, [pc, #364]	; (8002340 <mode_bola+0x26c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a5b      	ldr	r2, [pc, #364]	; (8002344 <mode_bola+0x270>)
 80021d6:	6013      	str	r3, [r2, #0]
 80021d8:	e01b      	b.n	8002212 <mode_bola+0x13e>
		}
	}

	else if (kiri==1){
 80021da:	4b5c      	ldr	r3, [pc, #368]	; (800234c <mode_bola+0x278>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d117      	bne.n	8002212 <mode_bola+0x13e>
		if(currentTick-nowTick>500 && kec>0){
 80021e2:	4b57      	ldr	r3, [pc, #348]	; (8002340 <mode_bola+0x26c>)
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	4b57      	ldr	r3, [pc, #348]	; (8002344 <mode_bola+0x270>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80021f0:	d90f      	bls.n	8002212 <mode_bola+0x13e>
 80021f2:	4b4d      	ldr	r3, [pc, #308]	; (8002328 <mode_bola+0x254>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	dd0b      	ble.n	8002212 <mode_bola+0x13e>
			adj=0;
 80021fa:	4b53      	ldr	r3, [pc, #332]	; (8002348 <mode_bola+0x274>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
			kec-=1;
 8002200:	4b49      	ldr	r3, [pc, #292]	; (8002328 <mode_bola+0x254>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	3b01      	subs	r3, #1
 8002206:	4a48      	ldr	r2, [pc, #288]	; (8002328 <mode_bola+0x254>)
 8002208:	6013      	str	r3, [r2, #0]
			nowTick = currentTick;
 800220a:	4b4d      	ldr	r3, [pc, #308]	; (8002340 <mode_bola+0x26c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a4d      	ldr	r2, [pc, #308]	; (8002344 <mode_bola+0x270>)
 8002210:	6013      	str	r3, [r2, #0]
		}
	}
	if (kec==1 && adj==0){
 8002212:	4b45      	ldr	r3, [pc, #276]	; (8002328 <mode_bola+0x254>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d12f      	bne.n	800227a <mode_bola+0x1a6>
 800221a:	4b4b      	ldr	r3, [pc, #300]	; (8002348 <mode_bola+0x274>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d12b      	bne.n	800227a <mode_bola+0x1a6>
		if (k < 3499){
 8002222:	4b4b      	ldr	r3, [pc, #300]	; (8002350 <mode_bola+0x27c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f640 52aa 	movw	r2, #3498	; 0xdaa
 800222a:	4293      	cmp	r3, r2
 800222c:	dc1c      	bgt.n	8002268 <mode_bola+0x194>
			for (k = 3000; k < 3500; ++k) {
 800222e:	4b48      	ldr	r3, [pc, #288]	; (8002350 <mode_bola+0x27c>)
 8002230:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	e010      	b.n	800225a <mode_bola+0x186>
				dutyR=k;
 8002238:	4b45      	ldr	r3, [pc, #276]	; (8002350 <mode_bola+0x27c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	461a      	mov	r2, r3
 800223e:	4b39      	ldr	r3, [pc, #228]	; (8002324 <mode_bola+0x250>)
 8002240:	601a      	str	r2, [r3, #0]
				kec1=k;
 8002242:	4b43      	ldr	r3, [pc, #268]	; (8002350 <mode_bola+0x27c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a34      	ldr	r2, [pc, #208]	; (8002318 <mode_bola+0x244>)
 8002248:	6013      	str	r3, [r2, #0]
				osDelay(1);
 800224a:	2001      	movs	r0, #1
 800224c:	f006 f839 	bl	80082c2 <osDelay>
			for (k = 3000; k < 3500; ++k) {
 8002250:	4b3f      	ldr	r3, [pc, #252]	; (8002350 <mode_bola+0x27c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	3301      	adds	r3, #1
 8002256:	4a3e      	ldr	r2, [pc, #248]	; (8002350 <mode_bola+0x27c>)
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	4b3d      	ldr	r3, [pc, #244]	; (8002350 <mode_bola+0x27c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f640 52ab 	movw	r2, #3499	; 0xdab
 8002262:	4293      	cmp	r3, r2
 8002264:	dde8      	ble.n	8002238 <mode_bola+0x164>
		if (k < 3499){
 8002266:	e04b      	b.n	8002300 <mode_bola+0x22c>
			}
		}
		else{
			dutyR=3500;
 8002268:	4b2e      	ldr	r3, [pc, #184]	; (8002324 <mode_bola+0x250>)
 800226a:	f640 52ac 	movw	r2, #3500	; 0xdac
 800226e:	601a      	str	r2, [r3, #0]
			kec1=3500;
 8002270:	4b29      	ldr	r3, [pc, #164]	; (8002318 <mode_bola+0x244>)
 8002272:	f640 52ac 	movw	r2, #3500	; 0xdac
 8002276:	601a      	str	r2, [r3, #0]
		if (k < 3499){
 8002278:	e042      	b.n	8002300 <mode_bola+0x22c>
		}
	}
	else if (kec==2 && adj==0){dutyR=3545;kec1=3545;}
 800227a:	4b2b      	ldr	r3, [pc, #172]	; (8002328 <mode_bola+0x254>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2b02      	cmp	r3, #2
 8002280:	d10c      	bne.n	800229c <mode_bola+0x1c8>
 8002282:	4b31      	ldr	r3, [pc, #196]	; (8002348 <mode_bola+0x274>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d108      	bne.n	800229c <mode_bola+0x1c8>
 800228a:	4b26      	ldr	r3, [pc, #152]	; (8002324 <mode_bola+0x250>)
 800228c:	f640 52d9 	movw	r2, #3545	; 0xdd9
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	4b21      	ldr	r3, [pc, #132]	; (8002318 <mode_bola+0x244>)
 8002294:	f640 52d9 	movw	r2, #3545	; 0xdd9
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	e031      	b.n	8002300 <mode_bola+0x22c>
	else if (kec==3 && adj==0){dutyR=4000;kec1=4000;}
 800229c:	4b22      	ldr	r3, [pc, #136]	; (8002328 <mode_bola+0x254>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2b03      	cmp	r3, #3
 80022a2:	d10c      	bne.n	80022be <mode_bola+0x1ea>
 80022a4:	4b28      	ldr	r3, [pc, #160]	; (8002348 <mode_bola+0x274>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d108      	bne.n	80022be <mode_bola+0x1ea>
 80022ac:	4b1d      	ldr	r3, [pc, #116]	; (8002324 <mode_bola+0x250>)
 80022ae:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	4b18      	ldr	r3, [pc, #96]	; (8002318 <mode_bola+0x244>)
 80022b6:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	e020      	b.n	8002300 <mode_bola+0x22c>
	else if (kec==4 && adj==0){dutyR=4500;kec1=4500;}
 80022be:	4b1a      	ldr	r3, [pc, #104]	; (8002328 <mode_bola+0x254>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2b04      	cmp	r3, #4
 80022c4:	d10c      	bne.n	80022e0 <mode_bola+0x20c>
 80022c6:	4b20      	ldr	r3, [pc, #128]	; (8002348 <mode_bola+0x274>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d108      	bne.n	80022e0 <mode_bola+0x20c>
 80022ce:	4b15      	ldr	r3, [pc, #84]	; (8002324 <mode_bola+0x250>)
 80022d0:	f241 1294 	movw	r2, #4500	; 0x1194
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	4b10      	ldr	r3, [pc, #64]	; (8002318 <mode_bola+0x244>)
 80022d8:	f241 1294 	movw	r2, #4500	; 0x1194
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	e00f      	b.n	8002300 <mode_bola+0x22c>
	else if (kec==0 && adj==0){dutyR=3000;kec1=3000;}
 80022e0:	4b11      	ldr	r3, [pc, #68]	; (8002328 <mode_bola+0x254>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10b      	bne.n	8002300 <mode_bola+0x22c>
 80022e8:	4b17      	ldr	r3, [pc, #92]	; (8002348 <mode_bola+0x274>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d107      	bne.n	8002300 <mode_bola+0x22c>
 80022f0:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <mode_bola+0x250>)
 80022f2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	4b07      	ldr	r3, [pc, #28]	; (8002318 <mode_bola+0x244>)
 80022fa:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80022fe:	601a      	str	r2, [r3, #0]

	if (kotak==1){
 8002300:	4b14      	ldr	r3, [pc, #80]	; (8002354 <mode_bola+0x280>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d129      	bne.n	800235c <mode_bola+0x288>
		HAL_GPIO_WritePin(PISTON_PELONTAR_GPIO_Port, PISTON_PELONTAR_Pin, 1);
 8002308:	2201      	movs	r2, #1
 800230a:	2101      	movs	r1, #1
 800230c:	4812      	ldr	r0, [pc, #72]	; (8002358 <mode_bola+0x284>)
 800230e:	f002 fcaf 	bl	8004c70 <HAL_GPIO_WritePin>
 8002312:	e028      	b.n	8002366 <mode_bola+0x292>
 8002314:	20000030 	.word	0x20000030
 8002318:	200007d4 	.word	0x200007d4
 800231c:	20000038 	.word	0x20000038
 8002320:	20000040 	.word	0x20000040
 8002324:	2000002c 	.word	0x2000002c
 8002328:	200007d0 	.word	0x200007d0
 800232c:	20000710 	.word	0x20000710
 8002330:	2000079c 	.word	0x2000079c
 8002334:	200000a8 	.word	0x200000a8
 8002338:	2000070c 	.word	0x2000070c
 800233c:	20000714 	.word	0x20000714
 8002340:	200007dc 	.word	0x200007dc
 8002344:	200007e0 	.word	0x200007e0
 8002348:	200007d8 	.word	0x200007d8
 800234c:	20000718 	.word	0x20000718
 8002350:	20000034 	.word	0x20000034
 8002354:	2000071c 	.word	0x2000071c
 8002358:	40020800 	.word	0x40020800
	}
	else {
		HAL_GPIO_WritePin(PISTON_PELONTAR_GPIO_Port, PISTON_PELONTAR_Pin, 0);
 800235c:	2200      	movs	r2, #0
 800235e:	2101      	movs	r1, #1
 8002360:	488d      	ldr	r0, [pc, #564]	; (8002598 <mode_bola+0x4c4>)
 8002362:	f002 fc85 	bl	8004c70 <HAL_GPIO_WritePin>
	}

	if (silang==1){
 8002366:	4b8d      	ldr	r3, [pc, #564]	; (800259c <mode_bola+0x4c8>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d117      	bne.n	800239e <mode_bola+0x2ca>
		if (currentTick - nowTick > 500) {
 800236e:	4b8c      	ldr	r3, [pc, #560]	; (80025a0 <mode_bola+0x4cc>)
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	4b8c      	ldr	r3, [pc, #560]	; (80025a4 <mode_bola+0x4d0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800237c:	d90f      	bls.n	800239e <mode_bola+0x2ca>
			HAL_GPIO_TogglePin(PISTON_BOLA_GPIO_Port, PISTON_BOLA_Pin);
 800237e:	2108      	movs	r1, #8
 8002380:	4885      	ldr	r0, [pc, #532]	; (8002598 <mode_bola+0x4c4>)
 8002382:	f002 fc8e 	bl	8004ca2 <HAL_GPIO_TogglePin>
			capit = HAL_GPIO_ReadPin(PISTON_BOLA_GPIO_Port, PISTON_BOLA_Pin);
 8002386:	2108      	movs	r1, #8
 8002388:	4883      	ldr	r0, [pc, #524]	; (8002598 <mode_bola+0x4c4>)
 800238a:	f002 fc59 	bl	8004c40 <HAL_GPIO_ReadPin>
 800238e:	4603      	mov	r3, r0
 8002390:	461a      	mov	r2, r3
 8002392:	4b85      	ldr	r3, [pc, #532]	; (80025a8 <mode_bola+0x4d4>)
 8002394:	601a      	str	r2, [r3, #0]
			nowTick = currentTick;
 8002396:	4b82      	ldr	r3, [pc, #520]	; (80025a0 <mode_bola+0x4cc>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a82      	ldr	r2, [pc, #520]	; (80025a4 <mode_bola+0x4d0>)
 800239c:	6013      	str	r3, [r2, #0]
		}
	}
	if (bulat==1){
 800239e:	4b83      	ldr	r3, [pc, #524]	; (80025ac <mode_bola+0x4d8>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d10a      	bne.n	80023bc <mode_bola+0x2e8>
		motor_drive(&MPelontar, 0, 0);
 80023a6:	2200      	movs	r2, #0
 80023a8:	2100      	movs	r1, #0
 80023aa:	4881      	ldr	r0, [pc, #516]	; (80025b0 <mode_bola+0x4dc>)
 80023ac:	f001 fb4c 	bl	8003a48 <motor_drive>
		lsflag_5=1;
 80023b0:	4b80      	ldr	r3, [pc, #512]	; (80025b4 <mode_bola+0x4e0>)
 80023b2:	2201      	movs	r2, #1
 80023b4:	601a      	str	r2, [r3, #0]
		stepLoading=0;
 80023b6:	4b80      	ldr	r3, [pc, #512]	; (80025b8 <mode_bola+0x4e4>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
	}
	if (l1==1){
 80023bc:	4b7f      	ldr	r3, [pc, #508]	; (80025bc <mode_bola+0x4e8>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d114      	bne.n	80023ee <mode_bola+0x31a>
		if(lsflag_2==0){
 80023c4:	4b7e      	ldr	r3, [pc, #504]	; (80025c0 <mode_bola+0x4ec>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d10a      	bne.n	80023e2 <mode_bola+0x30e>
			motor_drive(&MBola, -1, 800);
 80023cc:	f44f 7248 	mov.w	r2, #800	; 0x320
 80023d0:	f04f 31ff 	mov.w	r1, #4294967295
 80023d4:	487b      	ldr	r0, [pc, #492]	; (80025c4 <mode_bola+0x4f0>)
 80023d6:	f001 fb37 	bl	8003a48 <motor_drive>
			lsflag_1=0;
 80023da:	4b7b      	ldr	r3, [pc, #492]	; (80025c8 <mode_bola+0x4f4>)
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	e022      	b.n	8002428 <mode_bola+0x354>
		}
		else{
			motor_drive(&MBola, 0, 0);
 80023e2:	2200      	movs	r2, #0
 80023e4:	2100      	movs	r1, #0
 80023e6:	4877      	ldr	r0, [pc, #476]	; (80025c4 <mode_bola+0x4f0>)
 80023e8:	f001 fb2e 	bl	8003a48 <motor_drive>
 80023ec:	e01c      	b.n	8002428 <mode_bola+0x354>
		}
	}
	else if (r1==1){
 80023ee:	4b77      	ldr	r3, [pc, #476]	; (80025cc <mode_bola+0x4f8>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d113      	bne.n	800241e <mode_bola+0x34a>
		if(lsflag_1==0){
 80023f6:	4b74      	ldr	r3, [pc, #464]	; (80025c8 <mode_bola+0x4f4>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d109      	bne.n	8002412 <mode_bola+0x33e>
			motor_drive(&MBola, 1, 800);
 80023fe:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002402:	2101      	movs	r1, #1
 8002404:	486f      	ldr	r0, [pc, #444]	; (80025c4 <mode_bola+0x4f0>)
 8002406:	f001 fb1f 	bl	8003a48 <motor_drive>
			lsflag_2=0;
 800240a:	4b6d      	ldr	r3, [pc, #436]	; (80025c0 <mode_bola+0x4ec>)
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	e00a      	b.n	8002428 <mode_bola+0x354>
		}
		else{
			motor_drive(&MBola, 0, 0);
 8002412:	2200      	movs	r2, #0
 8002414:	2100      	movs	r1, #0
 8002416:	486b      	ldr	r0, [pc, #428]	; (80025c4 <mode_bola+0x4f0>)
 8002418:	f001 fb16 	bl	8003a48 <motor_drive>
 800241c:	e004      	b.n	8002428 <mode_bola+0x354>
		}
	}
	else{
		motor_drive(&MBola, 0, 0);
 800241e:	2200      	movs	r2, #0
 8002420:	2100      	movs	r1, #0
 8002422:	4868      	ldr	r0, [pc, #416]	; (80025c4 <mode_bola+0x4f0>)
 8002424:	f001 fb10 	bl	8003a48 <motor_drive>
	}

	if (share==1){
 8002428:	4b69      	ldr	r3, [pc, #420]	; (80025d0 <mode_bola+0x4fc>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d119      	bne.n	8002464 <mode_bola+0x390>
		adj=1;
 8002430:	4b68      	ldr	r3, [pc, #416]	; (80025d4 <mode_bola+0x500>)
 8002432:	2201      	movs	r2, #1
 8002434:	601a      	str	r2, [r3, #0]
		if(currentTick-nowTick>100 && kec1>3000){
 8002436:	4b5a      	ldr	r3, [pc, #360]	; (80025a0 <mode_bola+0x4cc>)
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	4b5a      	ldr	r3, [pc, #360]	; (80025a4 <mode_bola+0x4d0>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b64      	cmp	r3, #100	; 0x64
 8002442:	d934      	bls.n	80024ae <mode_bola+0x3da>
 8002444:	4b64      	ldr	r3, [pc, #400]	; (80025d8 <mode_bola+0x504>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800244c:	4293      	cmp	r3, r2
 800244e:	dd2e      	ble.n	80024ae <mode_bola+0x3da>
			kec1-=10;
 8002450:	4b61      	ldr	r3, [pc, #388]	; (80025d8 <mode_bola+0x504>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	3b0a      	subs	r3, #10
 8002456:	4a60      	ldr	r2, [pc, #384]	; (80025d8 <mode_bola+0x504>)
 8002458:	6013      	str	r3, [r2, #0]
			nowTick = currentTick;
 800245a:	4b51      	ldr	r3, [pc, #324]	; (80025a0 <mode_bola+0x4cc>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a51      	ldr	r2, [pc, #324]	; (80025a4 <mode_bola+0x4d0>)
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	e024      	b.n	80024ae <mode_bola+0x3da>
		}
	}
	else if (options==1){
 8002464:	4b5d      	ldr	r3, [pc, #372]	; (80025dc <mode_bola+0x508>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d119      	bne.n	80024a0 <mode_bola+0x3cc>
		adj=1;
 800246c:	4b59      	ldr	r3, [pc, #356]	; (80025d4 <mode_bola+0x500>)
 800246e:	2201      	movs	r2, #1
 8002470:	601a      	str	r2, [r3, #0]
		if(currentTick-nowTick>100 && kec1<6000){
 8002472:	4b4b      	ldr	r3, [pc, #300]	; (80025a0 <mode_bola+0x4cc>)
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	4b4b      	ldr	r3, [pc, #300]	; (80025a4 <mode_bola+0x4d0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b64      	cmp	r3, #100	; 0x64
 800247e:	d916      	bls.n	80024ae <mode_bola+0x3da>
 8002480:	4b55      	ldr	r3, [pc, #340]	; (80025d8 <mode_bola+0x504>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f241 726f 	movw	r2, #5999	; 0x176f
 8002488:	4293      	cmp	r3, r2
 800248a:	dc10      	bgt.n	80024ae <mode_bola+0x3da>
			kec1+=10;
 800248c:	4b52      	ldr	r3, [pc, #328]	; (80025d8 <mode_bola+0x504>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	330a      	adds	r3, #10
 8002492:	4a51      	ldr	r2, [pc, #324]	; (80025d8 <mode_bola+0x504>)
 8002494:	6013      	str	r3, [r2, #0]
			nowTick = currentTick;
 8002496:	4b42      	ldr	r3, [pc, #264]	; (80025a0 <mode_bola+0x4cc>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a42      	ldr	r2, [pc, #264]	; (80025a4 <mode_bola+0x4d0>)
 800249c:	6013      	str	r3, [r2, #0]
 800249e:	e006      	b.n	80024ae <mode_bola+0x3da>
		}

	}
	else if (tpad==1){
 80024a0:	4b4f      	ldr	r3, [pc, #316]	; (80025e0 <mode_bola+0x50c>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d102      	bne.n	80024ae <mode_bola+0x3da>
		tpad1=1;
 80024a8:	4b4e      	ldr	r3, [pc, #312]	; (80025e4 <mode_bola+0x510>)
 80024aa:	2201      	movs	r2, #1
 80024ac:	601a      	str	r2, [r3, #0]
	}
	if(tpad1==1){
 80024ae:	4b4d      	ldr	r3, [pc, #308]	; (80025e4 <mode_bola+0x510>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	f040 8098 	bne.w	80025e8 <mode_bola+0x514>
		if(stepLoading==0){//ambil bola
 80024b8:	4b3f      	ldr	r3, [pc, #252]	; (80025b8 <mode_bola+0x4e4>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d121      	bne.n	8002504 <mode_bola+0x430>
			if	(lsflag_2==0){
 80024c0:	4b3f      	ldr	r3, [pc, #252]	; (80025c0 <mode_bola+0x4ec>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d106      	bne.n	80024d6 <mode_bola+0x402>
				motor_drive(&MBola, 1, 800);
 80024c8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80024cc:	2101      	movs	r1, #1
 80024ce:	483d      	ldr	r0, [pc, #244]	; (80025c4 <mode_bola+0x4f0>)
 80024d0:	f001 faba 	bl	8003a48 <motor_drive>
 80024d4:	e007      	b.n	80024e6 <mode_bola+0x412>
			}
			else{
				motor_drive(&MBola, 0, 0);
 80024d6:	2200      	movs	r2, #0
 80024d8:	2100      	movs	r1, #0
 80024da:	483a      	ldr	r0, [pc, #232]	; (80025c4 <mode_bola+0x4f0>)
 80024dc:	f001 fab4 	bl	8003a48 <motor_drive>
				lsflag_1=0;
 80024e0:	4b39      	ldr	r3, [pc, #228]	; (80025c8 <mode_bola+0x4f4>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
			}
			if (lsflag_5==1 && lsflag_2==1 && capit==1){
 80024e6:	4b33      	ldr	r3, [pc, #204]	; (80025b4 <mode_bola+0x4e0>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d10a      	bne.n	8002504 <mode_bola+0x430>
 80024ee:	4b34      	ldr	r3, [pc, #208]	; (80025c0 <mode_bola+0x4ec>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d106      	bne.n	8002504 <mode_bola+0x430>
 80024f6:	4b2c      	ldr	r3, [pc, #176]	; (80025a8 <mode_bola+0x4d4>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d102      	bne.n	8002504 <mode_bola+0x430>
				stepLoading=1;
 80024fe:	4b2e      	ldr	r3, [pc, #184]	; (80025b8 <mode_bola+0x4e4>)
 8002500:	2201      	movs	r2, #1
 8002502:	601a      	str	r2, [r3, #0]
			}
		}
		if(stepLoading==1){//taruh ke pelontar
 8002504:	4b2c      	ldr	r3, [pc, #176]	; (80025b8 <mode_bola+0x4e4>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d125      	bne.n	8002558 <mode_bola+0x484>
			if(lsflag_1==0){
 800250c:	4b2e      	ldr	r3, [pc, #184]	; (80025c8 <mode_bola+0x4f4>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d106      	bne.n	8002522 <mode_bola+0x44e>
				motor_drive(&MBola, 1, 1000);
 8002514:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002518:	2101      	movs	r1, #1
 800251a:	482a      	ldr	r0, [pc, #168]	; (80025c4 <mode_bola+0x4f0>)
 800251c:	f001 fa94 	bl	8003a48 <motor_drive>
 8002520:	e016      	b.n	8002550 <mode_bola+0x47c>
			}
			else {
				motor_drive(&MBola, 0, 0);
 8002522:	2200      	movs	r2, #0
 8002524:	2100      	movs	r1, #0
 8002526:	4827      	ldr	r0, [pc, #156]	; (80025c4 <mode_bola+0x4f0>)
 8002528:	f001 fa8e 	bl	8003a48 <motor_drive>
				HAL_GPIO_TogglePin(PISTON_BOLA_GPIO_Port, PISTON_BOLA_Pin);
 800252c:	2108      	movs	r1, #8
 800252e:	481a      	ldr	r0, [pc, #104]	; (8002598 <mode_bola+0x4c4>)
 8002530:	f002 fbb7 	bl	8004ca2 <HAL_GPIO_TogglePin>
				capit = HAL_GPIO_ReadPin(PISTON_BOLA_GPIO_Port, PISTON_BOLA_Pin);
 8002534:	2108      	movs	r1, #8
 8002536:	4818      	ldr	r0, [pc, #96]	; (8002598 <mode_bola+0x4c4>)
 8002538:	f002 fb82 	bl	8004c40 <HAL_GPIO_ReadPin>
 800253c:	4603      	mov	r3, r0
 800253e:	461a      	mov	r2, r3
 8002540:	4b19      	ldr	r3, [pc, #100]	; (80025a8 <mode_bola+0x4d4>)
 8002542:	601a      	str	r2, [r3, #0]
				osDelay(3);
 8002544:	2003      	movs	r0, #3
 8002546:	f005 febc 	bl	80082c2 <osDelay>
				stepLoading=2;
 800254a:	4b1b      	ldr	r3, [pc, #108]	; (80025b8 <mode_bola+0x4e4>)
 800254c:	2202      	movs	r2, #2
 800254e:	601a      	str	r2, [r3, #0]
//				vTaskDelay(100);
			}
			lsflag_2=0;
 8002550:	4b1b      	ldr	r3, [pc, #108]	; (80025c0 <mode_bola+0x4ec>)
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	e050      	b.n	80025fa <mode_bola+0x526>
		}
		else if(stepLoading==2){//kembali posisi ambil
 8002558:	4b17      	ldr	r3, [pc, #92]	; (80025b8 <mode_bola+0x4e4>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b02      	cmp	r3, #2
 800255e:	d114      	bne.n	800258a <mode_bola+0x4b6>
			if	(lsflag_2==0){
 8002560:	4b17      	ldr	r3, [pc, #92]	; (80025c0 <mode_bola+0x4ec>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d107      	bne.n	8002578 <mode_bola+0x4a4>
				motor_drive(&MBola, -1, 800);
 8002568:	f44f 7248 	mov.w	r2, #800	; 0x320
 800256c:	f04f 31ff 	mov.w	r1, #4294967295
 8002570:	4814      	ldr	r0, [pc, #80]	; (80025c4 <mode_bola+0x4f0>)
 8002572:	f001 fa69 	bl	8003a48 <motor_drive>
 8002576:	e040      	b.n	80025fa <mode_bola+0x526>
			}
			else{
				motor_drive(&MBola, 0, 0);
 8002578:	2200      	movs	r2, #0
 800257a:	2100      	movs	r1, #0
 800257c:	4811      	ldr	r0, [pc, #68]	; (80025c4 <mode_bola+0x4f0>)
 800257e:	f001 fa63 	bl	8003a48 <motor_drive>
				stepLoading=3;//end
 8002582:	4b0d      	ldr	r3, [pc, #52]	; (80025b8 <mode_bola+0x4e4>)
 8002584:	2203      	movs	r2, #3
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	e037      	b.n	80025fa <mode_bola+0x526>
			}
		}
		else{
//			lsflag_5=0;
			tpad1=0;
 800258a:	4b16      	ldr	r3, [pc, #88]	; (80025e4 <mode_bola+0x510>)
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
			stepLoading=0;
 8002590:	4b09      	ldr	r3, [pc, #36]	; (80025b8 <mode_bola+0x4e4>)
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	e030      	b.n	80025fa <mode_bola+0x526>
 8002598:	40020800 	.word	0x40020800
 800259c:	20000720 	.word	0x20000720
 80025a0:	200007dc 	.word	0x200007dc
 80025a4:	200007e0 	.word	0x200007e0
 80025a8:	200007ac 	.word	0x200007ac
 80025ac:	20000724 	.word	0x20000724
 80025b0:	200000a8 	.word	0x200000a8
 80025b4:	2000079c 	.word	0x2000079c
 80025b8:	200007b0 	.word	0x200007b0
 80025bc:	2000072c 	.word	0x2000072c
 80025c0:	20000790 	.word	0x20000790
 80025c4:	200000c0 	.word	0x200000c0
 80025c8:	2000078c 	.word	0x2000078c
 80025cc:	20000730 	.word	0x20000730
 80025d0:	2000073c 	.word	0x2000073c
 80025d4:	200007d8 	.word	0x200007d8
 80025d8:	200007d4 	.word	0x200007d4
 80025dc:	20000740 	.word	0x20000740
 80025e0:	20000748 	.word	0x20000748
 80025e4:	20000704 	.word	0x20000704
		}
	}
	else{
		lsflag_1=0;
 80025e8:	4b26      	ldr	r3, [pc, #152]	; (8002684 <mode_bola+0x5b0>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]
		tpad1=0;
 80025ee:	4b26      	ldr	r3, [pc, #152]	; (8002688 <mode_bola+0x5b4>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]
		stepLoading=0;
 80025f4:	4b25      	ldr	r3, [pc, #148]	; (800268c <mode_bola+0x5b8>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]
	}
	if (r3==1){
 80025fa:	4b25      	ldr	r3, [pc, #148]	; (8002690 <mode_bola+0x5bc>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d108      	bne.n	8002614 <mode_bola+0x540>
		flagFirst=1;
 8002602:	4b24      	ldr	r3, [pc, #144]	; (8002694 <mode_bola+0x5c0>)
 8002604:	2201      	movs	r2, #1
 8002606:	601a      	str	r2, [r3, #0]
		lsflag_5=1;
 8002608:	4b23      	ldr	r3, [pc, #140]	; (8002698 <mode_bola+0x5c4>)
 800260a:	2201      	movs	r2, #1
 800260c:	601a      	str	r2, [r3, #0]
		lsflag_1=0;
 800260e:	4b1d      	ldr	r3, [pc, #116]	; (8002684 <mode_bola+0x5b0>)
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
	}

	if (flagFirst==1){
 8002614:	4b1f      	ldr	r3, [pc, #124]	; (8002694 <mode_bola+0x5c0>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d113      	bne.n	8002644 <mode_bola+0x570>
		if(lsflag_2==0){
 800261c:	4b1f      	ldr	r3, [pc, #124]	; (800269c <mode_bola+0x5c8>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d107      	bne.n	8002634 <mode_bola+0x560>
			motor_drive(&MBola, -1, 800);
 8002624:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002628:	f04f 31ff 	mov.w	r1, #4294967295
 800262c:	481c      	ldr	r0, [pc, #112]	; (80026a0 <mode_bola+0x5cc>)
 800262e:	f001 fa0b 	bl	8003a48 <motor_drive>
 8002632:	e007      	b.n	8002644 <mode_bola+0x570>
		}
		else{
			motor_drive(&MBola, 0, 0);
 8002634:	2200      	movs	r2, #0
 8002636:	2100      	movs	r1, #0
 8002638:	4819      	ldr	r0, [pc, #100]	; (80026a0 <mode_bola+0x5cc>)
 800263a:	f001 fa05 	bl	8003a48 <motor_drive>
			flagFirst=0;
 800263e:	4b15      	ldr	r3, [pc, #84]	; (8002694 <mode_bola+0x5c0>)
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
		}
	}

	if(adj==1){
 8002644:	4b17      	ldr	r3, [pc, #92]	; (80026a4 <mode_bola+0x5d0>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d10c      	bne.n	8002666 <mode_bola+0x592>
		bldc_drive(&roller1, kec1);
 800264c:	4b16      	ldr	r3, [pc, #88]	; (80026a8 <mode_bola+0x5d4>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4619      	mov	r1, r3
 8002652:	4816      	ldr	r0, [pc, #88]	; (80026ac <mode_bola+0x5d8>)
 8002654:	f001 fb43 	bl	8003cde <bldc_drive>
		bldc_drive(&roller2, kec1);
 8002658:	4b13      	ldr	r3, [pc, #76]	; (80026a8 <mode_bola+0x5d4>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4619      	mov	r1, r3
 800265e:	4814      	ldr	r0, [pc, #80]	; (80026b0 <mode_bola+0x5dc>)
 8002660:	f001 fb3d 	bl	8003cde <bldc_drive>
	}
	else{
		bldc_drive(&roller1, dutyR);
		bldc_drive(&roller2, dutyR);
	}
}
 8002664:	e00b      	b.n	800267e <mode_bola+0x5aa>
		bldc_drive(&roller1, dutyR);
 8002666:	4b13      	ldr	r3, [pc, #76]	; (80026b4 <mode_bola+0x5e0>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4619      	mov	r1, r3
 800266c:	480f      	ldr	r0, [pc, #60]	; (80026ac <mode_bola+0x5d8>)
 800266e:	f001 fb36 	bl	8003cde <bldc_drive>
		bldc_drive(&roller2, dutyR);
 8002672:	4b10      	ldr	r3, [pc, #64]	; (80026b4 <mode_bola+0x5e0>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4619      	mov	r1, r3
 8002678:	480d      	ldr	r0, [pc, #52]	; (80026b0 <mode_bola+0x5dc>)
 800267a:	f001 fb30 	bl	8003cde <bldc_drive>
}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	2000078c 	.word	0x2000078c
 8002688:	20000704 	.word	0x20000704
 800268c:	200007b0 	.word	0x200007b0
 8002690:	20000738 	.word	0x20000738
 8002694:	200007a8 	.word	0x200007a8
 8002698:	2000079c 	.word	0x2000079c
 800269c:	20000790 	.word	0x20000790
 80026a0:	200000c0 	.word	0x200000c0
 80026a4:	200007d8 	.word	0x200007d8
 80026a8:	200007d4 	.word	0x200007d4
 80026ac:	20000038 	.word	0x20000038
 80026b0:	20000040 	.word	0x20000040
 80026b4:	2000002c 	.word	0x2000002c

080026b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026b8:	b5b0      	push	{r4, r5, r7, lr}
 80026ba:	b096      	sub	sp, #88	; 0x58
 80026bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026be:	f001 ff39 	bl	8004534 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026c2:	f000 f8db 	bl	800287c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026c6:	f000 fda7 	bl	8003218 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80026ca:	f000 fd7b 	bl	80031c4 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80026ce:	f000 fa3f 	bl	8002b50 <MX_TIM3_Init>
  MX_TIM12_Init();
 80026d2:	f000 fd09 	bl	80030e8 <MX_TIM12_Init>
  MX_TIM1_Init();
 80026d6:	f000 f977 	bl	80029c8 <MX_TIM1_Init>
  MX_SPI5_Init();
 80026da:	f000 f93f 	bl	800295c <MX_SPI5_Init>
  MX_TIM4_Init();
 80026de:	f000 facf 	bl	8002c80 <MX_TIM4_Init>
  MX_TIM5_Init();
 80026e2:	f000 fb65 	bl	8002db0 <MX_TIM5_Init>
  MX_TIM8_Init();
 80026e6:	f000 fbe5 	bl	8002eb4 <MX_TIM8_Init>
  MX_TIM9_Init();
 80026ea:	f000 fc8f 	bl	800300c <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
	#if Calibrate
	TIM12->CCR1 = 6000;  // Set the maximum pulse (2ms)
 80026ee:	4b4f      	ldr	r3, [pc, #316]	; (800282c <main+0x174>)
 80026f0:	f241 7270 	movw	r2, #6000	; 0x1770
 80026f4:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay (2000);  // wait for 1 beep
 80026f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80026fa:	f001 ff5d 	bl	80045b8 <HAL_Delay>
	TIM12->CCR1 = 3000;   // Set the minimum Pulse (1ms)
 80026fe:	4b4b      	ldr	r3, [pc, #300]	; (800282c <main+0x174>)
 8002700:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002704:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay (1000);  // wait for 2 beeps
 8002706:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800270a:	f001 ff55 	bl	80045b8 <HAL_Delay>
	#endif
  //inisiasi bldc roller
  bldc_init(&roller1, 3000);
 800270e:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002712:	4847      	ldr	r0, [pc, #284]	; (8002830 <main+0x178>)
 8002714:	f001 faaf 	bl	8003c76 <bldc_init>
  bldc_init(&roller2, 3000);
 8002718:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800271c:	4845      	ldr	r0, [pc, #276]	; (8002834 <main+0x17c>)
 800271e:	f001 faaa 	bl	8003c76 <bldc_init>

//inisiasi canbus spi
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002722:	2200      	movs	r2, #0
 8002724:	2180      	movs	r1, #128	; 0x80
 8002726:	4844      	ldr	r0, [pc, #272]	; (8002838 <main+0x180>)
 8002728:	f002 faa2 	bl	8004c70 <HAL_GPIO_WritePin>

    ret = CANSPI_Initialize();
 800272c:	f7fe fc90 	bl	8001050 <CANSPI_Initialize>
 8002730:	4603      	mov	r3, r0
 8002732:	4a42      	ldr	r2, [pc, #264]	; (800283c <main+0x184>)
 8002734:	6013      	str	r3, [r2, #0]
    if(ret < 0){
 8002736:	4b41      	ldr	r3, [pc, #260]	; (800283c <main+0x184>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2b00      	cmp	r3, #0
 800273c:	da05      	bge.n	800274a <main+0x92>
    	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800273e:	2201      	movs	r2, #1
 8002740:	2180      	movs	r1, #128	; 0x80
 8002742:	483d      	ldr	r0, [pc, #244]	; (8002838 <main+0x180>)
 8002744:	f002 fa94 	bl	8004c70 <HAL_GPIO_WritePin>
    	  while(1){}
 8002748:	e7fe      	b.n	8002748 <main+0x90>
    }

  motor_init(&LeftFront);
 800274a:	483d      	ldr	r0, [pc, #244]	; (8002840 <main+0x188>)
 800274c:	f001 f915 	bl	800397a <motor_init>
  motor_init(&LeftBack);
 8002750:	483c      	ldr	r0, [pc, #240]	; (8002844 <main+0x18c>)
 8002752:	f001 f912 	bl	800397a <motor_init>
  motor_init(&RightBack);
 8002756:	483c      	ldr	r0, [pc, #240]	; (8002848 <main+0x190>)
 8002758:	f001 f90f 	bl	800397a <motor_init>
  motor_init(&RightFront);
 800275c:	483b      	ldr	r0, [pc, #236]	; (800284c <main+0x194>)
 800275e:	f001 f90c 	bl	800397a <motor_init>
  motor_init(&MPelontar);
 8002762:	483b      	ldr	r0, [pc, #236]	; (8002850 <main+0x198>)
 8002764:	f001 f909 	bl	800397a <motor_init>
  motor_init(&MBola);
 8002768:	483a      	ldr	r0, [pc, #232]	; (8002854 <main+0x19c>)
 800276a:	f001 f906 	bl	800397a <motor_init>
  motor_init(&MExtendLeft);
 800276e:	483a      	ldr	r0, [pc, #232]	; (8002858 <main+0x1a0>)
 8002770:	f001 f903 	bl	800397a <motor_init>
  motor_init(&MExtendRight);
 8002774:	4839      	ldr	r0, [pc, #228]	; (800285c <main+0x1a4>)
 8002776:	f001 f900 	bl	800397a <motor_init>
  motor_init(&MPadi);
 800277a:	4839      	ldr	r0, [pc, #228]	; (8002860 <main+0x1a8>)
 800277c:	f001 f8fd 	bl	800397a <motor_init>

  enable_motor(&LeftFront);
 8002780:	482f      	ldr	r0, [pc, #188]	; (8002840 <main+0x188>)
 8002782:	f001 fa67 	bl	8003c54 <enable_motor>
  enable_motor(&LeftBack);
 8002786:	482f      	ldr	r0, [pc, #188]	; (8002844 <main+0x18c>)
 8002788:	f001 fa64 	bl	8003c54 <enable_motor>
  enable_motor(&RightBack);
 800278c:	482e      	ldr	r0, [pc, #184]	; (8002848 <main+0x190>)
 800278e:	f001 fa61 	bl	8003c54 <enable_motor>
  enable_motor(&RightFront);
 8002792:	482e      	ldr	r0, [pc, #184]	; (800284c <main+0x194>)
 8002794:	f001 fa5e 	bl	8003c54 <enable_motor>
  enable_motor(&MPelontar);
 8002798:	482d      	ldr	r0, [pc, #180]	; (8002850 <main+0x198>)
 800279a:	f001 fa5b 	bl	8003c54 <enable_motor>
  enable_motor(&MBola);
 800279e:	482d      	ldr	r0, [pc, #180]	; (8002854 <main+0x19c>)
 80027a0:	f001 fa58 	bl	8003c54 <enable_motor>
  enable_motor(&MExtendLeft);
 80027a4:	482c      	ldr	r0, [pc, #176]	; (8002858 <main+0x1a0>)
 80027a6:	f001 fa55 	bl	8003c54 <enable_motor>
  enable_motor(&MExtendRight);
 80027aa:	482c      	ldr	r0, [pc, #176]	; (800285c <main+0x1a4>)
 80027ac:	f001 fa52 	bl	8003c54 <enable_motor>
  enable_motor(&MPadi);
 80027b0:	482b      	ldr	r0, [pc, #172]	; (8002860 <main+0x1a8>)
 80027b2:	f001 fa4f 	bl	8003c54 <enable_motor>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of InputTask */
  osThreadDef(InputTask, InputHandle_Task, osPriorityAboveNormal, 0, 512);
 80027b6:	4b2b      	ldr	r3, [pc, #172]	; (8002864 <main+0x1ac>)
 80027b8:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80027bc:	461d      	mov	r5, r3
 80027be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80027c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  InputTaskHandle = osThreadCreate(osThread(InputTask), NULL);
 80027ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80027ce:	2100      	movs	r1, #0
 80027d0:	4618      	mov	r0, r3
 80027d2:	f005 fd2a 	bl	800822a <osThreadCreate>
 80027d6:	4603      	mov	r3, r0
 80027d8:	4a23      	ldr	r2, [pc, #140]	; (8002868 <main+0x1b0>)
 80027da:	6013      	str	r3, [r2, #0]

  /* definition and creation of MechanismTask */
  osThreadDef(MechanismTask, MechanismHandle_Task, osPriorityNormal, 0, 512);
 80027dc:	4b23      	ldr	r3, [pc, #140]	; (800286c <main+0x1b4>)
 80027de:	f107 0420 	add.w	r4, r7, #32
 80027e2:	461d      	mov	r5, r3
 80027e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80027ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MechanismTaskHandle = osThreadCreate(osThread(MechanismTask), NULL);
 80027f0:	f107 0320 	add.w	r3, r7, #32
 80027f4:	2100      	movs	r1, #0
 80027f6:	4618      	mov	r0, r3
 80027f8:	f005 fd17 	bl	800822a <osThreadCreate>
 80027fc:	4603      	mov	r3, r0
 80027fe:	4a1c      	ldr	r2, [pc, #112]	; (8002870 <main+0x1b8>)
 8002800:	6013      	str	r3, [r2, #0]

  /* definition and creation of OmniTask */
  osThreadDef(OmniTask, OmniHandle_Task, osPriorityNormal, 0, 512);
 8002802:	4b1c      	ldr	r3, [pc, #112]	; (8002874 <main+0x1bc>)
 8002804:	1d3c      	adds	r4, r7, #4
 8002806:	461d      	mov	r5, r3
 8002808:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800280a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800280c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002810:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  OmniTaskHandle = osThreadCreate(osThread(OmniTask), NULL);
 8002814:	1d3b      	adds	r3, r7, #4
 8002816:	2100      	movs	r1, #0
 8002818:	4618      	mov	r0, r3
 800281a:	f005 fd06 	bl	800822a <osThreadCreate>
 800281e:	4603      	mov	r3, r0
 8002820:	4a15      	ldr	r2, [pc, #84]	; (8002878 <main+0x1c0>)
 8002822:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002824:	f005 fcfa 	bl	800821c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002828:	e7fe      	b.n	8002828 <main+0x170>
 800282a:	bf00      	nop
 800282c:	40001800 	.word	0x40001800
 8002830:	20000038 	.word	0x20000038
 8002834:	20000040 	.word	0x20000040
 8002838:	40020400 	.word	0x40020400
 800283c:	20000780 	.word	0x20000780
 8002840:	20000048 	.word	0x20000048
 8002844:	20000060 	.word	0x20000060
 8002848:	20000090 	.word	0x20000090
 800284c:	20000078 	.word	0x20000078
 8002850:	200000a8 	.word	0x200000a8
 8002854:	200000c0 	.word	0x200000c0
 8002858:	200000d8 	.word	0x200000d8
 800285c:	200000f0 	.word	0x200000f0
 8002860:	20000108 	.word	0x20000108
 8002864:	080098b8 	.word	0x080098b8
 8002868:	200006f4 	.word	0x200006f4
 800286c:	080098e4 	.word	0x080098e4
 8002870:	200006f8 	.word	0x200006f8
 8002874:	0800990c 	.word	0x0800990c
 8002878:	200006fc 	.word	0x200006fc

0800287c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b094      	sub	sp, #80	; 0x50
 8002880:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002882:	f107 0320 	add.w	r3, r7, #32
 8002886:	2230      	movs	r2, #48	; 0x30
 8002888:	2100      	movs	r1, #0
 800288a:	4618      	mov	r0, r3
 800288c:	f006 ff26 	bl	80096dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002890:	f107 030c 	add.w	r3, r7, #12
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	605a      	str	r2, [r3, #4]
 800289a:	609a      	str	r2, [r3, #8]
 800289c:	60da      	str	r2, [r3, #12]
 800289e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80028a0:	2300      	movs	r3, #0
 80028a2:	60bb      	str	r3, [r7, #8]
 80028a4:	4b2b      	ldr	r3, [pc, #172]	; (8002954 <SystemClock_Config+0xd8>)
 80028a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a8:	4a2a      	ldr	r2, [pc, #168]	; (8002954 <SystemClock_Config+0xd8>)
 80028aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ae:	6413      	str	r3, [r2, #64]	; 0x40
 80028b0:	4b28      	ldr	r3, [pc, #160]	; (8002954 <SystemClock_Config+0xd8>)
 80028b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b8:	60bb      	str	r3, [r7, #8]
 80028ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028bc:	2300      	movs	r3, #0
 80028be:	607b      	str	r3, [r7, #4]
 80028c0:	4b25      	ldr	r3, [pc, #148]	; (8002958 <SystemClock_Config+0xdc>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a24      	ldr	r2, [pc, #144]	; (8002958 <SystemClock_Config+0xdc>)
 80028c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028ca:	6013      	str	r3, [r2, #0]
 80028cc:	4b22      	ldr	r3, [pc, #136]	; (8002958 <SystemClock_Config+0xdc>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80028d4:	607b      	str	r3, [r7, #4]
 80028d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80028d8:	2301      	movs	r3, #1
 80028da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80028dc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028e2:	2302      	movs	r3, #2
 80028e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80028ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80028ec:	2304      	movs	r3, #4
 80028ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80028f0:	23b4      	movs	r3, #180	; 0xb4
 80028f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80028f4:	2302      	movs	r3, #2
 80028f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80028f8:	2307      	movs	r3, #7
 80028fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028fc:	f107 0320 	add.w	r3, r7, #32
 8002900:	4618      	mov	r0, r3
 8002902:	f002 fa51 	bl	8004da8 <HAL_RCC_OscConfig>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800290c:	f001 f830 	bl	8003970 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002910:	f002 f9fa 	bl	8004d08 <HAL_PWREx_EnableOverDrive>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800291a:	f001 f829 	bl	8003970 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800291e:	230f      	movs	r3, #15
 8002920:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002922:	2302      	movs	r3, #2
 8002924:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002926:	2300      	movs	r3, #0
 8002928:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800292a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800292e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002930:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002934:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002936:	f107 030c 	add.w	r3, r7, #12
 800293a:	2105      	movs	r1, #5
 800293c:	4618      	mov	r0, r3
 800293e:	f002 fcab 	bl	8005298 <HAL_RCC_ClockConfig>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8002948:	f001 f812 	bl	8003970 <Error_Handler>
  }
}
 800294c:	bf00      	nop
 800294e:	3750      	adds	r7, #80	; 0x50
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40023800 	.word	0x40023800
 8002958:	40007000 	.word	0x40007000

0800295c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8002960:	4b17      	ldr	r3, [pc, #92]	; (80029c0 <MX_SPI5_Init+0x64>)
 8002962:	4a18      	ldr	r2, [pc, #96]	; (80029c4 <MX_SPI5_Init+0x68>)
 8002964:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002966:	4b16      	ldr	r3, [pc, #88]	; (80029c0 <MX_SPI5_Init+0x64>)
 8002968:	f44f 7282 	mov.w	r2, #260	; 0x104
 800296c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800296e:	4b14      	ldr	r3, [pc, #80]	; (80029c0 <MX_SPI5_Init+0x64>)
 8002970:	2200      	movs	r2, #0
 8002972:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002974:	4b12      	ldr	r3, [pc, #72]	; (80029c0 <MX_SPI5_Init+0x64>)
 8002976:	2200      	movs	r2, #0
 8002978:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800297a:	4b11      	ldr	r3, [pc, #68]	; (80029c0 <MX_SPI5_Init+0x64>)
 800297c:	2200      	movs	r2, #0
 800297e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002980:	4b0f      	ldr	r3, [pc, #60]	; (80029c0 <MX_SPI5_Init+0x64>)
 8002982:	2200      	movs	r2, #0
 8002984:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002986:	4b0e      	ldr	r3, [pc, #56]	; (80029c0 <MX_SPI5_Init+0x64>)
 8002988:	f44f 7200 	mov.w	r2, #512	; 0x200
 800298c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800298e:	4b0c      	ldr	r3, [pc, #48]	; (80029c0 <MX_SPI5_Init+0x64>)
 8002990:	2210      	movs	r2, #16
 8002992:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002994:	4b0a      	ldr	r3, [pc, #40]	; (80029c0 <MX_SPI5_Init+0x64>)
 8002996:	2200      	movs	r2, #0
 8002998:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800299a:	4b09      	ldr	r3, [pc, #36]	; (80029c0 <MX_SPI5_Init+0x64>)
 800299c:	2200      	movs	r2, #0
 800299e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029a0:	4b07      	ldr	r3, [pc, #28]	; (80029c0 <MX_SPI5_Init+0x64>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80029a6:	4b06      	ldr	r3, [pc, #24]	; (80029c0 <MX_SPI5_Init+0x64>)
 80029a8:	220a      	movs	r2, #10
 80029aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80029ac:	4804      	ldr	r0, [pc, #16]	; (80029c0 <MX_SPI5_Init+0x64>)
 80029ae:	f002 fec5 	bl	800573c <HAL_SPI_Init>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80029b8:	f000 ffda 	bl	8003970 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80029bc:	bf00      	nop
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	20000460 	.word	0x20000460
 80029c4:	40015000 	.word	0x40015000

080029c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b096      	sub	sp, #88	; 0x58
 80029cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80029d2:	2200      	movs	r2, #0
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	605a      	str	r2, [r3, #4]
 80029d8:	609a      	str	r2, [r3, #8]
 80029da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	605a      	str	r2, [r3, #4]
 80029f0:	609a      	str	r2, [r3, #8]
 80029f2:	60da      	str	r2, [r3, #12]
 80029f4:	611a      	str	r2, [r3, #16]
 80029f6:	615a      	str	r2, [r3, #20]
 80029f8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80029fa:	1d3b      	adds	r3, r7, #4
 80029fc:	2220      	movs	r2, #32
 80029fe:	2100      	movs	r1, #0
 8002a00:	4618      	mov	r0, r3
 8002a02:	f006 fe6b 	bl	80096dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002a06:	4b50      	ldr	r3, [pc, #320]	; (8002b48 <MX_TIM1_Init+0x180>)
 8002a08:	4a50      	ldr	r2, [pc, #320]	; (8002b4c <MX_TIM1_Init+0x184>)
 8002a0a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10-1;
 8002a0c:	4b4e      	ldr	r3, [pc, #312]	; (8002b48 <MX_TIM1_Init+0x180>)
 8002a0e:	2209      	movs	r2, #9
 8002a10:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a12:	4b4d      	ldr	r3, [pc, #308]	; (8002b48 <MX_TIM1_Init+0x180>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8002a18:	4b4b      	ldr	r3, [pc, #300]	; (8002b48 <MX_TIM1_Init+0x180>)
 8002a1a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a1e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a20:	4b49      	ldr	r3, [pc, #292]	; (8002b48 <MX_TIM1_Init+0x180>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002a26:	4b48      	ldr	r3, [pc, #288]	; (8002b48 <MX_TIM1_Init+0x180>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a2c:	4b46      	ldr	r3, [pc, #280]	; (8002b48 <MX_TIM1_Init+0x180>)
 8002a2e:	2280      	movs	r2, #128	; 0x80
 8002a30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002a32:	4845      	ldr	r0, [pc, #276]	; (8002b48 <MX_TIM1_Init+0x180>)
 8002a34:	f003 fc38 	bl	80062a8 <HAL_TIM_Base_Init>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002a3e:	f000 ff97 	bl	8003970 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a46:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002a48:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	483e      	ldr	r0, [pc, #248]	; (8002b48 <MX_TIM1_Init+0x180>)
 8002a50:	f003 ffd6 	bl	8006a00 <HAL_TIM_ConfigClockSource>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002a5a:	f000 ff89 	bl	8003970 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002a5e:	483a      	ldr	r0, [pc, #232]	; (8002b48 <MX_TIM1_Init+0x180>)
 8002a60:	f003 fce2 	bl	8006428 <HAL_TIM_PWM_Init>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002a6a:	f000 ff81 	bl	8003970 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a72:	2300      	movs	r3, #0
 8002a74:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a76:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4832      	ldr	r0, [pc, #200]	; (8002b48 <MX_TIM1_Init+0x180>)
 8002a7e:	f004 fbbf 	bl	8007200 <HAL_TIMEx_MasterConfigSynchronization>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002a88:	f000 ff72 	bl	8003970 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a8c:	2360      	movs	r3, #96	; 0x60
 8002a8e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002a90:	2300      	movs	r3, #0
 8002a92:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a94:	2300      	movs	r3, #0
 8002a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002aa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aac:	2200      	movs	r2, #0
 8002aae:	4619      	mov	r1, r3
 8002ab0:	4825      	ldr	r0, [pc, #148]	; (8002b48 <MX_TIM1_Init+0x180>)
 8002ab2:	f003 fee3 	bl	800687c <HAL_TIM_PWM_ConfigChannel>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002abc:	f000 ff58 	bl	8003970 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ac4:	2204      	movs	r2, #4
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	481f      	ldr	r0, [pc, #124]	; (8002b48 <MX_TIM1_Init+0x180>)
 8002aca:	f003 fed7 	bl	800687c <HAL_TIM_PWM_ConfigChannel>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002ad4:	f000 ff4c 	bl	8003970 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002ad8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002adc:	2208      	movs	r2, #8
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4819      	ldr	r0, [pc, #100]	; (8002b48 <MX_TIM1_Init+0x180>)
 8002ae2:	f003 fecb 	bl	800687c <HAL_TIM_PWM_ConfigChannel>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002aec:	f000 ff40 	bl	8003970 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002af0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002af4:	220c      	movs	r2, #12
 8002af6:	4619      	mov	r1, r3
 8002af8:	4813      	ldr	r0, [pc, #76]	; (8002b48 <MX_TIM1_Init+0x180>)
 8002afa:	f003 febf 	bl	800687c <HAL_TIM_PWM_ConfigChannel>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8002b04:	f000 ff34 	bl	8003970 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002b10:	2300      	movs	r3, #0
 8002b12:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002b14:	2300      	movs	r3, #0
 8002b16:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b20:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002b22:	2300      	movs	r3, #0
 8002b24:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002b26:	1d3b      	adds	r3, r7, #4
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4807      	ldr	r0, [pc, #28]	; (8002b48 <MX_TIM1_Init+0x180>)
 8002b2c:	f004 fbe4 	bl	80072f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8002b36:	f000 ff1b 	bl	8003970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002b3a:	4803      	ldr	r0, [pc, #12]	; (8002b48 <MX_TIM1_Init+0x180>)
 8002b3c:	f001 fa18 	bl	8003f70 <HAL_TIM_MspPostInit>

}
 8002b40:	bf00      	nop
 8002b42:	3758      	adds	r7, #88	; 0x58
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	200004b8 	.word	0x200004b8
 8002b4c:	40010000 	.word	0x40010000

08002b50 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b08e      	sub	sp, #56	; 0x38
 8002b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	605a      	str	r2, [r3, #4]
 8002b60:	609a      	str	r2, [r3, #8]
 8002b62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b64:	f107 0320 	add.w	r3, r7, #32
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b6e:	1d3b      	adds	r3, r7, #4
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	605a      	str	r2, [r3, #4]
 8002b76:	609a      	str	r2, [r3, #8]
 8002b78:	60da      	str	r2, [r3, #12]
 8002b7a:	611a      	str	r2, [r3, #16]
 8002b7c:	615a      	str	r2, [r3, #20]
 8002b7e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b80:	4b3d      	ldr	r3, [pc, #244]	; (8002c78 <MX_TIM3_Init+0x128>)
 8002b82:	4a3e      	ldr	r2, [pc, #248]	; (8002c7c <MX_TIM3_Init+0x12c>)
 8002b84:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5-1;
 8002b86:	4b3c      	ldr	r3, [pc, #240]	; (8002c78 <MX_TIM3_Init+0x128>)
 8002b88:	2204      	movs	r2, #4
 8002b8a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b8c:	4b3a      	ldr	r3, [pc, #232]	; (8002c78 <MX_TIM3_Init+0x128>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8002b92:	4b39      	ldr	r3, [pc, #228]	; (8002c78 <MX_TIM3_Init+0x128>)
 8002b94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b98:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b9a:	4b37      	ldr	r3, [pc, #220]	; (8002c78 <MX_TIM3_Init+0x128>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ba0:	4b35      	ldr	r3, [pc, #212]	; (8002c78 <MX_TIM3_Init+0x128>)
 8002ba2:	2280      	movs	r2, #128	; 0x80
 8002ba4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002ba6:	4834      	ldr	r0, [pc, #208]	; (8002c78 <MX_TIM3_Init+0x128>)
 8002ba8:	f003 fb7e 	bl	80062a8 <HAL_TIM_Base_Init>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002bb2:	f000 fedd 	bl	8003970 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002bbc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	482d      	ldr	r0, [pc, #180]	; (8002c78 <MX_TIM3_Init+0x128>)
 8002bc4:	f003 ff1c 	bl	8006a00 <HAL_TIM_ConfigClockSource>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002bce:	f000 fecf 	bl	8003970 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002bd2:	4829      	ldr	r0, [pc, #164]	; (8002c78 <MX_TIM3_Init+0x128>)
 8002bd4:	f003 fc28 	bl	8006428 <HAL_TIM_PWM_Init>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002bde:	f000 fec7 	bl	8003970 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002be2:	2300      	movs	r3, #0
 8002be4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002be6:	2300      	movs	r3, #0
 8002be8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bea:	f107 0320 	add.w	r3, r7, #32
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4821      	ldr	r0, [pc, #132]	; (8002c78 <MX_TIM3_Init+0x128>)
 8002bf2:	f004 fb05 	bl	8007200 <HAL_TIMEx_MasterConfigSynchronization>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002bfc:	f000 feb8 	bl	8003970 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c00:	2360      	movs	r3, #96	; 0x60
 8002c02:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002c04:	2300      	movs	r3, #0
 8002c06:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c10:	1d3b      	adds	r3, r7, #4
 8002c12:	2200      	movs	r2, #0
 8002c14:	4619      	mov	r1, r3
 8002c16:	4818      	ldr	r0, [pc, #96]	; (8002c78 <MX_TIM3_Init+0x128>)
 8002c18:	f003 fe30 	bl	800687c <HAL_TIM_PWM_ConfigChannel>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002c22:	f000 fea5 	bl	8003970 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c26:	1d3b      	adds	r3, r7, #4
 8002c28:	2204      	movs	r2, #4
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	4812      	ldr	r0, [pc, #72]	; (8002c78 <MX_TIM3_Init+0x128>)
 8002c2e:	f003 fe25 	bl	800687c <HAL_TIM_PWM_ConfigChannel>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002c38:	f000 fe9a 	bl	8003970 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002c3c:	1d3b      	adds	r3, r7, #4
 8002c3e:	2208      	movs	r2, #8
 8002c40:	4619      	mov	r1, r3
 8002c42:	480d      	ldr	r0, [pc, #52]	; (8002c78 <MX_TIM3_Init+0x128>)
 8002c44:	f003 fe1a 	bl	800687c <HAL_TIM_PWM_ConfigChannel>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8002c4e:	f000 fe8f 	bl	8003970 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002c52:	1d3b      	adds	r3, r7, #4
 8002c54:	220c      	movs	r2, #12
 8002c56:	4619      	mov	r1, r3
 8002c58:	4807      	ldr	r0, [pc, #28]	; (8002c78 <MX_TIM3_Init+0x128>)
 8002c5a:	f003 fe0f 	bl	800687c <HAL_TIM_PWM_ConfigChannel>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8002c64:	f000 fe84 	bl	8003970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002c68:	4803      	ldr	r0, [pc, #12]	; (8002c78 <MX_TIM3_Init+0x128>)
 8002c6a:	f001 f981 	bl	8003f70 <HAL_TIM_MspPostInit>

}
 8002c6e:	bf00      	nop
 8002c70:	3738      	adds	r7, #56	; 0x38
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	20000500 	.word	0x20000500
 8002c7c:	40000400 	.word	0x40000400

08002c80 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b08e      	sub	sp, #56	; 0x38
 8002c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	605a      	str	r2, [r3, #4]
 8002c90:	609a      	str	r2, [r3, #8]
 8002c92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c94:	f107 0320 	add.w	r3, r7, #32
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c9e:	1d3b      	adds	r3, r7, #4
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	605a      	str	r2, [r3, #4]
 8002ca6:	609a      	str	r2, [r3, #8]
 8002ca8:	60da      	str	r2, [r3, #12]
 8002caa:	611a      	str	r2, [r3, #16]
 8002cac:	615a      	str	r2, [r3, #20]
 8002cae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002cb0:	4b3d      	ldr	r3, [pc, #244]	; (8002da8 <MX_TIM4_Init+0x128>)
 8002cb2:	4a3e      	ldr	r2, [pc, #248]	; (8002dac <MX_TIM4_Init+0x12c>)
 8002cb4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 5-1;
 8002cb6:	4b3c      	ldr	r3, [pc, #240]	; (8002da8 <MX_TIM4_Init+0x128>)
 8002cb8:	2204      	movs	r2, #4
 8002cba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cbc:	4b3a      	ldr	r3, [pc, #232]	; (8002da8 <MX_TIM4_Init+0x128>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8002cc2:	4b39      	ldr	r3, [pc, #228]	; (8002da8 <MX_TIM4_Init+0x128>)
 8002cc4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002cc8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cca:	4b37      	ldr	r3, [pc, #220]	; (8002da8 <MX_TIM4_Init+0x128>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002cd0:	4b35      	ldr	r3, [pc, #212]	; (8002da8 <MX_TIM4_Init+0x128>)
 8002cd2:	2280      	movs	r2, #128	; 0x80
 8002cd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002cd6:	4834      	ldr	r0, [pc, #208]	; (8002da8 <MX_TIM4_Init+0x128>)
 8002cd8:	f003 fae6 	bl	80062a8 <HAL_TIM_Base_Init>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002ce2:	f000 fe45 	bl	8003970 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ce6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002cec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	482d      	ldr	r0, [pc, #180]	; (8002da8 <MX_TIM4_Init+0x128>)
 8002cf4:	f003 fe84 	bl	8006a00 <HAL_TIM_ConfigClockSource>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002cfe:	f000 fe37 	bl	8003970 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002d02:	4829      	ldr	r0, [pc, #164]	; (8002da8 <MX_TIM4_Init+0x128>)
 8002d04:	f003 fb90 	bl	8006428 <HAL_TIM_PWM_Init>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002d0e:	f000 fe2f 	bl	8003970 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d12:	2300      	movs	r3, #0
 8002d14:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d16:	2300      	movs	r3, #0
 8002d18:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002d1a:	f107 0320 	add.w	r3, r7, #32
 8002d1e:	4619      	mov	r1, r3
 8002d20:	4821      	ldr	r0, [pc, #132]	; (8002da8 <MX_TIM4_Init+0x128>)
 8002d22:	f004 fa6d 	bl	8007200 <HAL_TIMEx_MasterConfigSynchronization>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002d2c:	f000 fe20 	bl	8003970 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d30:	2360      	movs	r3, #96	; 0x60
 8002d32:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002d34:	2300      	movs	r3, #0
 8002d36:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d40:	1d3b      	adds	r3, r7, #4
 8002d42:	2200      	movs	r2, #0
 8002d44:	4619      	mov	r1, r3
 8002d46:	4818      	ldr	r0, [pc, #96]	; (8002da8 <MX_TIM4_Init+0x128>)
 8002d48:	f003 fd98 	bl	800687c <HAL_TIM_PWM_ConfigChannel>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002d52:	f000 fe0d 	bl	8003970 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d56:	1d3b      	adds	r3, r7, #4
 8002d58:	2204      	movs	r2, #4
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	4812      	ldr	r0, [pc, #72]	; (8002da8 <MX_TIM4_Init+0x128>)
 8002d5e:	f003 fd8d 	bl	800687c <HAL_TIM_PWM_ConfigChannel>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8002d68:	f000 fe02 	bl	8003970 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d6c:	1d3b      	adds	r3, r7, #4
 8002d6e:	2208      	movs	r2, #8
 8002d70:	4619      	mov	r1, r3
 8002d72:	480d      	ldr	r0, [pc, #52]	; (8002da8 <MX_TIM4_Init+0x128>)
 8002d74:	f003 fd82 	bl	800687c <HAL_TIM_PWM_ConfigChannel>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8002d7e:	f000 fdf7 	bl	8003970 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002d82:	1d3b      	adds	r3, r7, #4
 8002d84:	220c      	movs	r2, #12
 8002d86:	4619      	mov	r1, r3
 8002d88:	4807      	ldr	r0, [pc, #28]	; (8002da8 <MX_TIM4_Init+0x128>)
 8002d8a:	f003 fd77 	bl	800687c <HAL_TIM_PWM_ConfigChannel>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8002d94:	f000 fdec 	bl	8003970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002d98:	4803      	ldr	r0, [pc, #12]	; (8002da8 <MX_TIM4_Init+0x128>)
 8002d9a:	f001 f8e9 	bl	8003f70 <HAL_TIM_MspPostInit>

}
 8002d9e:	bf00      	nop
 8002da0:	3738      	adds	r7, #56	; 0x38
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	20000548 	.word	0x20000548
 8002dac:	40000800 	.word	0x40000800

08002db0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b08e      	sub	sp, #56	; 0x38
 8002db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002db6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dba:	2200      	movs	r2, #0
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	605a      	str	r2, [r3, #4]
 8002dc0:	609a      	str	r2, [r3, #8]
 8002dc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dc4:	f107 0320 	add.w	r3, r7, #32
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dce:	1d3b      	adds	r3, r7, #4
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	605a      	str	r2, [r3, #4]
 8002dd6:	609a      	str	r2, [r3, #8]
 8002dd8:	60da      	str	r2, [r3, #12]
 8002dda:	611a      	str	r2, [r3, #16]
 8002ddc:	615a      	str	r2, [r3, #20]
 8002dde:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002de0:	4b32      	ldr	r3, [pc, #200]	; (8002eac <MX_TIM5_Init+0xfc>)
 8002de2:	4a33      	ldr	r2, [pc, #204]	; (8002eb0 <MX_TIM5_Init+0x100>)
 8002de4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 5-1;
 8002de6:	4b31      	ldr	r3, [pc, #196]	; (8002eac <MX_TIM5_Init+0xfc>)
 8002de8:	2204      	movs	r2, #4
 8002dea:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dec:	4b2f      	ldr	r3, [pc, #188]	; (8002eac <MX_TIM5_Init+0xfc>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8002df2:	4b2e      	ldr	r3, [pc, #184]	; (8002eac <MX_TIM5_Init+0xfc>)
 8002df4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002df8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dfa:	4b2c      	ldr	r3, [pc, #176]	; (8002eac <MX_TIM5_Init+0xfc>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e00:	4b2a      	ldr	r3, [pc, #168]	; (8002eac <MX_TIM5_Init+0xfc>)
 8002e02:	2280      	movs	r2, #128	; 0x80
 8002e04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002e06:	4829      	ldr	r0, [pc, #164]	; (8002eac <MX_TIM5_Init+0xfc>)
 8002e08:	f003 fa4e 	bl	80062a8 <HAL_TIM_Base_Init>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8002e12:	f000 fdad 	bl	8003970 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002e1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e20:	4619      	mov	r1, r3
 8002e22:	4822      	ldr	r0, [pc, #136]	; (8002eac <MX_TIM5_Init+0xfc>)
 8002e24:	f003 fdec 	bl	8006a00 <HAL_TIM_ConfigClockSource>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8002e2e:	f000 fd9f 	bl	8003970 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002e32:	481e      	ldr	r0, [pc, #120]	; (8002eac <MX_TIM5_Init+0xfc>)
 8002e34:	f003 faf8 	bl	8006428 <HAL_TIM_PWM_Init>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8002e3e:	f000 fd97 	bl	8003970 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e42:	2300      	movs	r3, #0
 8002e44:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e46:	2300      	movs	r3, #0
 8002e48:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002e4a:	f107 0320 	add.w	r3, r7, #32
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4816      	ldr	r0, [pc, #88]	; (8002eac <MX_TIM5_Init+0xfc>)
 8002e52:	f004 f9d5 	bl	8007200 <HAL_TIMEx_MasterConfigSynchronization>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8002e5c:	f000 fd88 	bl	8003970 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e60:	2360      	movs	r3, #96	; 0x60
 8002e62:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002e64:	2300      	movs	r3, #0
 8002e66:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e70:	1d3b      	adds	r3, r7, #4
 8002e72:	2200      	movs	r2, #0
 8002e74:	4619      	mov	r1, r3
 8002e76:	480d      	ldr	r0, [pc, #52]	; (8002eac <MX_TIM5_Init+0xfc>)
 8002e78:	f003 fd00 	bl	800687c <HAL_TIM_PWM_ConfigChannel>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8002e82:	f000 fd75 	bl	8003970 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e86:	1d3b      	adds	r3, r7, #4
 8002e88:	2204      	movs	r2, #4
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	4807      	ldr	r0, [pc, #28]	; (8002eac <MX_TIM5_Init+0xfc>)
 8002e8e:	f003 fcf5 	bl	800687c <HAL_TIM_PWM_ConfigChannel>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 8002e98:	f000 fd6a 	bl	8003970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002e9c:	4803      	ldr	r0, [pc, #12]	; (8002eac <MX_TIM5_Init+0xfc>)
 8002e9e:	f001 f867 	bl	8003f70 <HAL_TIM_MspPostInit>

}
 8002ea2:	bf00      	nop
 8002ea4:	3738      	adds	r7, #56	; 0x38
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	20000590 	.word	0x20000590
 8002eb0:	40000c00 	.word	0x40000c00

08002eb4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b096      	sub	sp, #88	; 0x58
 8002eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002eba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	601a      	str	r2, [r3, #0]
 8002ec2:	605a      	str	r2, [r3, #4]
 8002ec4:	609a      	str	r2, [r3, #8]
 8002ec6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ec8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	605a      	str	r2, [r3, #4]
 8002edc:	609a      	str	r2, [r3, #8]
 8002ede:	60da      	str	r2, [r3, #12]
 8002ee0:	611a      	str	r2, [r3, #16]
 8002ee2:	615a      	str	r2, [r3, #20]
 8002ee4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002ee6:	1d3b      	adds	r3, r7, #4
 8002ee8:	2220      	movs	r2, #32
 8002eea:	2100      	movs	r1, #0
 8002eec:	4618      	mov	r0, r3
 8002eee:	f006 fbf5 	bl	80096dc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002ef2:	4b44      	ldr	r3, [pc, #272]	; (8003004 <MX_TIM8_Init+0x150>)
 8002ef4:	4a44      	ldr	r2, [pc, #272]	; (8003008 <MX_TIM8_Init+0x154>)
 8002ef6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 10-1;
 8002ef8:	4b42      	ldr	r3, [pc, #264]	; (8003004 <MX_TIM8_Init+0x150>)
 8002efa:	2209      	movs	r2, #9
 8002efc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002efe:	4b41      	ldr	r3, [pc, #260]	; (8003004 <MX_TIM8_Init+0x150>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000-1;
 8002f04:	4b3f      	ldr	r3, [pc, #252]	; (8003004 <MX_TIM8_Init+0x150>)
 8002f06:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f0a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f0c:	4b3d      	ldr	r3, [pc, #244]	; (8003004 <MX_TIM8_Init+0x150>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002f12:	4b3c      	ldr	r3, [pc, #240]	; (8003004 <MX_TIM8_Init+0x150>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f18:	4b3a      	ldr	r3, [pc, #232]	; (8003004 <MX_TIM8_Init+0x150>)
 8002f1a:	2280      	movs	r2, #128	; 0x80
 8002f1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002f1e:	4839      	ldr	r0, [pc, #228]	; (8003004 <MX_TIM8_Init+0x150>)
 8002f20:	f003 f9c2 	bl	80062a8 <HAL_TIM_Base_Init>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8002f2a:	f000 fd21 	bl	8003970 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f32:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002f34:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4832      	ldr	r0, [pc, #200]	; (8003004 <MX_TIM8_Init+0x150>)
 8002f3c:	f003 fd60 	bl	8006a00 <HAL_TIM_ConfigClockSource>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002f46:	f000 fd13 	bl	8003970 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002f4a:	482e      	ldr	r0, [pc, #184]	; (8003004 <MX_TIM8_Init+0x150>)
 8002f4c:	f003 fa6c 	bl	8006428 <HAL_TIM_PWM_Init>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002f56:	f000 fd0b 	bl	8003970 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002f62:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002f66:	4619      	mov	r1, r3
 8002f68:	4826      	ldr	r0, [pc, #152]	; (8003004 <MX_TIM8_Init+0x150>)
 8002f6a:	f004 f949 	bl	8007200 <HAL_TIMEx_MasterConfigSynchronization>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002f74:	f000 fcfc 	bl	8003970 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f78:	2360      	movs	r3, #96	; 0x60
 8002f7a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f80:	2300      	movs	r3, #0
 8002f82:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002f84:	2300      	movs	r3, #0
 8002f86:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002f90:	2300      	movs	r3, #0
 8002f92:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f98:	2200      	movs	r2, #0
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	4819      	ldr	r0, [pc, #100]	; (8003004 <MX_TIM8_Init+0x150>)
 8002f9e:	f003 fc6d 	bl	800687c <HAL_TIM_PWM_ConfigChannel>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8002fa8:	f000 fce2 	bl	8003970 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002fac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fb0:	2204      	movs	r2, #4
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	4813      	ldr	r0, [pc, #76]	; (8003004 <MX_TIM8_Init+0x150>)
 8002fb6:	f003 fc61 	bl	800687c <HAL_TIM_PWM_ConfigChannel>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8002fc0:	f000 fcd6 	bl	8003970 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002fd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fdc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002fe2:	1d3b      	adds	r3, r7, #4
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	4807      	ldr	r0, [pc, #28]	; (8003004 <MX_TIM8_Init+0x150>)
 8002fe8:	f004 f986 	bl	80072f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8002ff2:	f000 fcbd 	bl	8003970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002ff6:	4803      	ldr	r0, [pc, #12]	; (8003004 <MX_TIM8_Init+0x150>)
 8002ff8:	f000 ffba 	bl	8003f70 <HAL_TIM_MspPostInit>

}
 8002ffc:	bf00      	nop
 8002ffe:	3758      	adds	r7, #88	; 0x58
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	200005d8 	.word	0x200005d8
 8003008:	40010400 	.word	0x40010400

0800300c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b08c      	sub	sp, #48	; 0x30
 8003010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003012:	f107 0320 	add.w	r3, r7, #32
 8003016:	2200      	movs	r2, #0
 8003018:	601a      	str	r2, [r3, #0]
 800301a:	605a      	str	r2, [r3, #4]
 800301c:	609a      	str	r2, [r3, #8]
 800301e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003020:	1d3b      	adds	r3, r7, #4
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	605a      	str	r2, [r3, #4]
 8003028:	609a      	str	r2, [r3, #8]
 800302a:	60da      	str	r2, [r3, #12]
 800302c:	611a      	str	r2, [r3, #16]
 800302e:	615a      	str	r2, [r3, #20]
 8003030:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003032:	4b2b      	ldr	r3, [pc, #172]	; (80030e0 <MX_TIM9_Init+0xd4>)
 8003034:	4a2b      	ldr	r2, [pc, #172]	; (80030e4 <MX_TIM9_Init+0xd8>)
 8003036:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 10-1;
 8003038:	4b29      	ldr	r3, [pc, #164]	; (80030e0 <MX_TIM9_Init+0xd4>)
 800303a:	2209      	movs	r2, #9
 800303c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800303e:	4b28      	ldr	r3, [pc, #160]	; (80030e0 <MX_TIM9_Init+0xd4>)
 8003040:	2200      	movs	r2, #0
 8003042:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 8003044:	4b26      	ldr	r3, [pc, #152]	; (80030e0 <MX_TIM9_Init+0xd4>)
 8003046:	f240 32e7 	movw	r2, #999	; 0x3e7
 800304a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800304c:	4b24      	ldr	r3, [pc, #144]	; (80030e0 <MX_TIM9_Init+0xd4>)
 800304e:	2200      	movs	r2, #0
 8003050:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003052:	4b23      	ldr	r3, [pc, #140]	; (80030e0 <MX_TIM9_Init+0xd4>)
 8003054:	2280      	movs	r2, #128	; 0x80
 8003056:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8003058:	4821      	ldr	r0, [pc, #132]	; (80030e0 <MX_TIM9_Init+0xd4>)
 800305a:	f003 f925 	bl	80062a8 <HAL_TIM_Base_Init>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8003064:	f000 fc84 	bl	8003970 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003068:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800306c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800306e:	f107 0320 	add.w	r3, r7, #32
 8003072:	4619      	mov	r1, r3
 8003074:	481a      	ldr	r0, [pc, #104]	; (80030e0 <MX_TIM9_Init+0xd4>)
 8003076:	f003 fcc3 	bl	8006a00 <HAL_TIM_ConfigClockSource>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8003080:	f000 fc76 	bl	8003970 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8003084:	4816      	ldr	r0, [pc, #88]	; (80030e0 <MX_TIM9_Init+0xd4>)
 8003086:	f003 f9cf 	bl	8006428 <HAL_TIM_PWM_Init>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8003090:	f000 fc6e 	bl	8003970 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003094:	2360      	movs	r3, #96	; 0x60
 8003096:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003098:	2300      	movs	r3, #0
 800309a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800309c:	2300      	movs	r3, #0
 800309e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030a0:	2300      	movs	r3, #0
 80030a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030a4:	1d3b      	adds	r3, r7, #4
 80030a6:	2200      	movs	r2, #0
 80030a8:	4619      	mov	r1, r3
 80030aa:	480d      	ldr	r0, [pc, #52]	; (80030e0 <MX_TIM9_Init+0xd4>)
 80030ac:	f003 fbe6 	bl	800687c <HAL_TIM_PWM_ConfigChannel>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 80030b6:	f000 fc5b 	bl	8003970 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80030ba:	1d3b      	adds	r3, r7, #4
 80030bc:	2204      	movs	r2, #4
 80030be:	4619      	mov	r1, r3
 80030c0:	4807      	ldr	r0, [pc, #28]	; (80030e0 <MX_TIM9_Init+0xd4>)
 80030c2:	f003 fbdb 	bl	800687c <HAL_TIM_PWM_ConfigChannel>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <MX_TIM9_Init+0xc4>
  {
    Error_Handler();
 80030cc:	f000 fc50 	bl	8003970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80030d0:	4803      	ldr	r0, [pc, #12]	; (80030e0 <MX_TIM9_Init+0xd4>)
 80030d2:	f000 ff4d 	bl	8003f70 <HAL_TIM_MspPostInit>

}
 80030d6:	bf00      	nop
 80030d8:	3730      	adds	r7, #48	; 0x30
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	20000620 	.word	0x20000620
 80030e4:	40014000 	.word	0x40014000

080030e8 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b08c      	sub	sp, #48	; 0x30
 80030ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030ee:	f107 0320 	add.w	r3, r7, #32
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	605a      	str	r2, [r3, #4]
 80030f8:	609a      	str	r2, [r3, #8]
 80030fa:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030fc:	1d3b      	adds	r3, r7, #4
 80030fe:	2200      	movs	r2, #0
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	605a      	str	r2, [r3, #4]
 8003104:	609a      	str	r2, [r3, #8]
 8003106:	60da      	str	r2, [r3, #12]
 8003108:	611a      	str	r2, [r3, #16]
 800310a:	615a      	str	r2, [r3, #20]
 800310c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800310e:	4b2b      	ldr	r3, [pc, #172]	; (80031bc <MX_TIM12_Init+0xd4>)
 8003110:	4a2b      	ldr	r2, [pc, #172]	; (80031c0 <MX_TIM12_Init+0xd8>)
 8003112:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 30-1;
 8003114:	4b29      	ldr	r3, [pc, #164]	; (80031bc <MX_TIM12_Init+0xd4>)
 8003116:	221d      	movs	r2, #29
 8003118:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800311a:	4b28      	ldr	r3, [pc, #160]	; (80031bc <MX_TIM12_Init+0xd4>)
 800311c:	2200      	movs	r2, #0
 800311e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 60000-1;
 8003120:	4b26      	ldr	r3, [pc, #152]	; (80031bc <MX_TIM12_Init+0xd4>)
 8003122:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8003126:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003128:	4b24      	ldr	r3, [pc, #144]	; (80031bc <MX_TIM12_Init+0xd4>)
 800312a:	2200      	movs	r2, #0
 800312c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800312e:	4b23      	ldr	r3, [pc, #140]	; (80031bc <MX_TIM12_Init+0xd4>)
 8003130:	2280      	movs	r2, #128	; 0x80
 8003132:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8003134:	4821      	ldr	r0, [pc, #132]	; (80031bc <MX_TIM12_Init+0xd4>)
 8003136:	f003 f8b7 	bl	80062a8 <HAL_TIM_Base_Init>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8003140:	f000 fc16 	bl	8003970 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003144:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003148:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800314a:	f107 0320 	add.w	r3, r7, #32
 800314e:	4619      	mov	r1, r3
 8003150:	481a      	ldr	r0, [pc, #104]	; (80031bc <MX_TIM12_Init+0xd4>)
 8003152:	f003 fc55 	bl	8006a00 <HAL_TIM_ConfigClockSource>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 800315c:	f000 fc08 	bl	8003970 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8003160:	4816      	ldr	r0, [pc, #88]	; (80031bc <MX_TIM12_Init+0xd4>)
 8003162:	f003 f961 	bl	8006428 <HAL_TIM_PWM_Init>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 800316c:	f000 fc00 	bl	8003970 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003170:	2360      	movs	r3, #96	; 0x60
 8003172:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003174:	2300      	movs	r3, #0
 8003176:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003178:	2300      	movs	r3, #0
 800317a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800317c:	2300      	movs	r3, #0
 800317e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003180:	1d3b      	adds	r3, r7, #4
 8003182:	2200      	movs	r2, #0
 8003184:	4619      	mov	r1, r3
 8003186:	480d      	ldr	r0, [pc, #52]	; (80031bc <MX_TIM12_Init+0xd4>)
 8003188:	f003 fb78 	bl	800687c <HAL_TIM_PWM_ConfigChannel>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8003192:	f000 fbed 	bl	8003970 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003196:	1d3b      	adds	r3, r7, #4
 8003198:	2204      	movs	r2, #4
 800319a:	4619      	mov	r1, r3
 800319c:	4807      	ldr	r0, [pc, #28]	; (80031bc <MX_TIM12_Init+0xd4>)
 800319e:	f003 fb6d 	bl	800687c <HAL_TIM_PWM_ConfigChannel>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 80031a8:	f000 fbe2 	bl	8003970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80031ac:	4803      	ldr	r0, [pc, #12]	; (80031bc <MX_TIM12_Init+0xd4>)
 80031ae:	f000 fedf 	bl	8003f70 <HAL_TIM_MspPostInit>

}
 80031b2:	bf00      	nop
 80031b4:	3730      	adds	r7, #48	; 0x30
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	20000668 	.word	0x20000668
 80031c0:	40001800 	.word	0x40001800

080031c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80031c8:	4b11      	ldr	r3, [pc, #68]	; (8003210 <MX_USART3_UART_Init+0x4c>)
 80031ca:	4a12      	ldr	r2, [pc, #72]	; (8003214 <MX_USART3_UART_Init+0x50>)
 80031cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80031ce:	4b10      	ldr	r3, [pc, #64]	; (8003210 <MX_USART3_UART_Init+0x4c>)
 80031d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80031d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80031d6:	4b0e      	ldr	r3, [pc, #56]	; (8003210 <MX_USART3_UART_Init+0x4c>)
 80031d8:	2200      	movs	r2, #0
 80031da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80031dc:	4b0c      	ldr	r3, [pc, #48]	; (8003210 <MX_USART3_UART_Init+0x4c>)
 80031de:	2200      	movs	r2, #0
 80031e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80031e2:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <MX_USART3_UART_Init+0x4c>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80031e8:	4b09      	ldr	r3, [pc, #36]	; (8003210 <MX_USART3_UART_Init+0x4c>)
 80031ea:	220c      	movs	r2, #12
 80031ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031ee:	4b08      	ldr	r3, [pc, #32]	; (8003210 <MX_USART3_UART_Init+0x4c>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80031f4:	4b06      	ldr	r3, [pc, #24]	; (8003210 <MX_USART3_UART_Init+0x4c>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80031fa:	4805      	ldr	r0, [pc, #20]	; (8003210 <MX_USART3_UART_Init+0x4c>)
 80031fc:	f004 f8e2 	bl	80073c4 <HAL_UART_Init>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003206:	f000 fbb3 	bl	8003970 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800320a:	bf00      	nop
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	200006b0 	.word	0x200006b0
 8003214:	40004800 	.word	0x40004800

08003218 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b08e      	sub	sp, #56	; 0x38
 800321c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800321e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003222:	2200      	movs	r2, #0
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	605a      	str	r2, [r3, #4]
 8003228:	609a      	str	r2, [r3, #8]
 800322a:	60da      	str	r2, [r3, #12]
 800322c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800322e:	2300      	movs	r3, #0
 8003230:	623b      	str	r3, [r7, #32]
 8003232:	4bba      	ldr	r3, [pc, #744]	; (800351c <MX_GPIO_Init+0x304>)
 8003234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003236:	4ab9      	ldr	r2, [pc, #740]	; (800351c <MX_GPIO_Init+0x304>)
 8003238:	f043 0310 	orr.w	r3, r3, #16
 800323c:	6313      	str	r3, [r2, #48]	; 0x30
 800323e:	4bb7      	ldr	r3, [pc, #732]	; (800351c <MX_GPIO_Init+0x304>)
 8003240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003242:	f003 0310 	and.w	r3, r3, #16
 8003246:	623b      	str	r3, [r7, #32]
 8003248:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800324a:	2300      	movs	r3, #0
 800324c:	61fb      	str	r3, [r7, #28]
 800324e:	4bb3      	ldr	r3, [pc, #716]	; (800351c <MX_GPIO_Init+0x304>)
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003252:	4ab2      	ldr	r2, [pc, #712]	; (800351c <MX_GPIO_Init+0x304>)
 8003254:	f043 0304 	orr.w	r3, r3, #4
 8003258:	6313      	str	r3, [r2, #48]	; 0x30
 800325a:	4bb0      	ldr	r3, [pc, #704]	; (800351c <MX_GPIO_Init+0x304>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	f003 0304 	and.w	r3, r3, #4
 8003262:	61fb      	str	r3, [r7, #28]
 8003264:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003266:	2300      	movs	r3, #0
 8003268:	61bb      	str	r3, [r7, #24]
 800326a:	4bac      	ldr	r3, [pc, #688]	; (800351c <MX_GPIO_Init+0x304>)
 800326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326e:	4aab      	ldr	r2, [pc, #684]	; (800351c <MX_GPIO_Init+0x304>)
 8003270:	f043 0320 	orr.w	r3, r3, #32
 8003274:	6313      	str	r3, [r2, #48]	; 0x30
 8003276:	4ba9      	ldr	r3, [pc, #676]	; (800351c <MX_GPIO_Init+0x304>)
 8003278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327a:	f003 0320 	and.w	r3, r3, #32
 800327e:	61bb      	str	r3, [r7, #24]
 8003280:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003282:	2300      	movs	r3, #0
 8003284:	617b      	str	r3, [r7, #20]
 8003286:	4ba5      	ldr	r3, [pc, #660]	; (800351c <MX_GPIO_Init+0x304>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328a:	4aa4      	ldr	r2, [pc, #656]	; (800351c <MX_GPIO_Init+0x304>)
 800328c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003290:	6313      	str	r3, [r2, #48]	; 0x30
 8003292:	4ba2      	ldr	r3, [pc, #648]	; (800351c <MX_GPIO_Init+0x304>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800329a:	617b      	str	r3, [r7, #20]
 800329c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800329e:	2300      	movs	r3, #0
 80032a0:	613b      	str	r3, [r7, #16]
 80032a2:	4b9e      	ldr	r3, [pc, #632]	; (800351c <MX_GPIO_Init+0x304>)
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	4a9d      	ldr	r2, [pc, #628]	; (800351c <MX_GPIO_Init+0x304>)
 80032a8:	f043 0301 	orr.w	r3, r3, #1
 80032ac:	6313      	str	r3, [r2, #48]	; 0x30
 80032ae:	4b9b      	ldr	r3, [pc, #620]	; (800351c <MX_GPIO_Init+0x304>)
 80032b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	613b      	str	r3, [r7, #16]
 80032b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032ba:	2300      	movs	r3, #0
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	4b97      	ldr	r3, [pc, #604]	; (800351c <MX_GPIO_Init+0x304>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	4a96      	ldr	r2, [pc, #600]	; (800351c <MX_GPIO_Init+0x304>)
 80032c4:	f043 0302 	orr.w	r3, r3, #2
 80032c8:	6313      	str	r3, [r2, #48]	; 0x30
 80032ca:	4b94      	ldr	r3, [pc, #592]	; (800351c <MX_GPIO_Init+0x304>)
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80032d6:	2300      	movs	r3, #0
 80032d8:	60bb      	str	r3, [r7, #8]
 80032da:	4b90      	ldr	r3, [pc, #576]	; (800351c <MX_GPIO_Init+0x304>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032de:	4a8f      	ldr	r2, [pc, #572]	; (800351c <MX_GPIO_Init+0x304>)
 80032e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032e4:	6313      	str	r3, [r2, #48]	; 0x30
 80032e6:	4b8d      	ldr	r3, [pc, #564]	; (800351c <MX_GPIO_Init+0x304>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ee:	60bb      	str	r3, [r7, #8]
 80032f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80032f2:	2300      	movs	r3, #0
 80032f4:	607b      	str	r3, [r7, #4]
 80032f6:	4b89      	ldr	r3, [pc, #548]	; (800351c <MX_GPIO_Init+0x304>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	4a88      	ldr	r2, [pc, #544]	; (800351c <MX_GPIO_Init+0x304>)
 80032fc:	f043 0308 	orr.w	r3, r3, #8
 8003300:	6313      	str	r3, [r2, #48]	; 0x30
 8003302:	4b86      	ldr	r3, [pc, #536]	; (800351c <MX_GPIO_Init+0x304>)
 8003304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003306:	f003 0308 	and.w	r3, r3, #8
 800330a:	607b      	str	r3, [r7, #4]
 800330c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800330e:	2200      	movs	r2, #0
 8003310:	2140      	movs	r1, #64	; 0x40
 8003312:	4883      	ldr	r0, [pc, #524]	; (8003520 <MX_GPIO_Init+0x308>)
 8003314:	f001 fcac 	bl	8004c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PISTON_PELONTAR_Pin|PISTON_A_Pin|PISTON_B_Pin|PISTON_BOLA_Pin
 8003318:	2200      	movs	r2, #0
 800331a:	f641 010f 	movw	r1, #6159	; 0x180f
 800331e:	4881      	ldr	r0, [pc, #516]	; (8003524 <MX_GPIO_Init+0x30c>)
 8003320:	f001 fca6 	bl	8004c70 <HAL_GPIO_WritePin>
                          |PISTON_PADI_Pin|PISTON_D_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|EN_EXDR_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003324:	2200      	movs	r2, #0
 8003326:	21c1      	movs	r1, #193	; 0xc1
 8003328:	487f      	ldr	r0, [pc, #508]	; (8003528 <MX_GPIO_Init+0x310>)
 800332a:	f001 fca1 	bl	8004c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, EN_LF_Pin|EN_RF_Pin|EN_EXDL_Pin|EN_RB_Pin
 800332e:	2200      	movs	r2, #0
 8003330:	f64b 4102 	movw	r1, #48130	; 0xbc02
 8003334:	487d      	ldr	r0, [pc, #500]	; (800352c <MX_GPIO_Init+0x314>)
 8003336:	f001 fc9b 	bl	8004c70 <HAL_GPIO_WritePin>
                          |EN_PADI_Pin|EN_PELONTAR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, EN_LB_Pin|PISTON_C_Pin, GPIO_PIN_RESET);
 800333a:	2200      	movs	r2, #0
 800333c:	2105      	movs	r1, #5
 800333e:	487c      	ldr	r0, [pc, #496]	; (8003530 <MX_GPIO_Init+0x318>)
 8003340:	f001 fc96 	bl	8004c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_BOLA_GPIO_Port, EN_BOLA_Pin, GPIO_PIN_RESET);
 8003344:	2200      	movs	r2, #0
 8003346:	2102      	movs	r1, #2
 8003348:	487a      	ldr	r0, [pc, #488]	; (8003534 <MX_GPIO_Init+0x31c>)
 800334a:	f001 fc91 	bl	8004c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENC4_A_Pin ENC4_B_Pin ENC3_B_Pin ENC1_A_Pin
                           ENC2_A_Pin ENC3_A_Pin ENC2_B_Pin */
  GPIO_InitStruct.Pin = ENC4_A_Pin|ENC4_B_Pin|ENC3_B_Pin|ENC1_A_Pin
 800334e:	f64b 030e 	movw	r3, #47118	; 0xb80e
 8003352:	627b      	str	r3, [r7, #36]	; 0x24
                          |ENC2_A_Pin|ENC3_A_Pin|ENC2_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003354:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003358:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800335a:	2301      	movs	r3, #1
 800335c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800335e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003362:	4619      	mov	r1, r3
 8003364:	486e      	ldr	r0, [pc, #440]	; (8003520 <MX_GPIO_Init+0x308>)
 8003366:	f001 fabf 	bl	80048e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 800336a:	2340      	movs	r3, #64	; 0x40
 800336c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800336e:	2301      	movs	r3, #1
 8003370:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003372:	2300      	movs	r3, #0
 8003374:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003376:	2300      	movs	r3, #0
 8003378:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 800337a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800337e:	4619      	mov	r1, r3
 8003380:	4867      	ldr	r0, [pc, #412]	; (8003520 <MX_GPIO_Init+0x308>)
 8003382:	f001 fab1 	bl	80048e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PISTON_PELONTAR_Pin PISTON_A_Pin PISTON_B_Pin PISTON_BOLA_Pin
                           PISTON_PADI_Pin PISTON_D_Pin */
  GPIO_InitStruct.Pin = PISTON_PELONTAR_Pin|PISTON_A_Pin|PISTON_B_Pin|PISTON_BOLA_Pin
 8003386:	f641 030f 	movw	r3, #6159	; 0x180f
 800338a:	627b      	str	r3, [r7, #36]	; 0x24
                          |PISTON_PADI_Pin|PISTON_D_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800338c:	2301      	movs	r3, #1
 800338e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003390:	2300      	movs	r3, #0
 8003392:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003394:	2301      	movs	r3, #1
 8003396:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003398:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800339c:	4619      	mov	r1, r3
 800339e:	4861      	ldr	r0, [pc, #388]	; (8003524 <MX_GPIO_Init+0x30c>)
 80033a0:	f001 faa2 	bl	80048e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin EN_EXDR_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|EN_EXDR_Pin|LD2_Pin;
 80033a4:	23c1      	movs	r3, #193	; 0xc1
 80033a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033a8:	2301      	movs	r3, #1
 80033aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ac:	2300      	movs	r3, #0
 80033ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033b0:	2300      	movs	r3, #0
 80033b2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033b8:	4619      	mov	r1, r3
 80033ba:	485b      	ldr	r0, [pc, #364]	; (8003528 <MX_GPIO_Init+0x310>)
 80033bc:	f001 fa94 	bl	80048e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LS_2_Pin LS_3_Pin LS_1_Pin ENC1_B_Pin */
  GPIO_InitStruct.Pin = LS_2_Pin|LS_3_Pin|LS_1_Pin|ENC1_B_Pin;
 80033c0:	f244 2321 	movw	r3, #16929	; 0x4221
 80033c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80033c6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80033ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033cc:	2301      	movs	r3, #1
 80033ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80033d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033d4:	4619      	mov	r1, r3
 80033d6:	4855      	ldr	r0, [pc, #340]	; (800352c <MX_GPIO_Init+0x314>)
 80033d8:	f001 fa86 	bl	80048e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_LF_Pin EN_RF_Pin EN_EXDL_Pin EN_RB_Pin
                           EN_PADI_Pin EN_PELONTAR_Pin */
  GPIO_InitStruct.Pin = EN_LF_Pin|EN_RF_Pin|EN_EXDL_Pin|EN_RB_Pin
 80033dc:	f64b 4302 	movw	r3, #48130	; 0xbc02
 80033e0:	627b      	str	r3, [r7, #36]	; 0x24
                          |EN_PADI_Pin|EN_PELONTAR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033e2:	2301      	movs	r3, #1
 80033e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e6:	2300      	movs	r3, #0
 80033e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ea:	2300      	movs	r3, #0
 80033ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80033ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033f2:	4619      	mov	r1, r3
 80033f4:	484d      	ldr	r0, [pc, #308]	; (800352c <MX_GPIO_Init+0x314>)
 80033f6:	f001 fa77 	bl	80048e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LS_4_Pin LS_5_Pin */
  GPIO_InitStruct.Pin = LS_4_Pin|LS_5_Pin;
 80033fa:	f44f 6382 	mov.w	r3, #1040	; 0x410
 80033fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003400:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003404:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003406:	2301      	movs	r3, #1
 8003408:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800340a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800340e:	4619      	mov	r1, r3
 8003410:	4847      	ldr	r0, [pc, #284]	; (8003530 <MX_GPIO_Init+0x318>)
 8003412:	f001 fa69 	bl	80048e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003416:	2380      	movs	r3, #128	; 0x80
 8003418:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800341a:	2300      	movs	r3, #0
 800341c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341e:	2300      	movs	r3, #0
 8003420:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003422:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003426:	4619      	mov	r1, r3
 8003428:	4840      	ldr	r0, [pc, #256]	; (800352c <MX_GPIO_Init+0x314>)
 800342a:	f001 fa5d 	bl	80048e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LS_7_Pin */
  GPIO_InitStruct.Pin = LS_7_Pin;
 800342e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003432:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003434:	2300      	movs	r3, #0
 8003436:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003438:	2301      	movs	r3, #1
 800343a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LS_7_GPIO_Port, &GPIO_InitStruct);
 800343c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003440:	4619      	mov	r1, r3
 8003442:	483a      	ldr	r0, [pc, #232]	; (800352c <MX_GPIO_Init+0x314>)
 8003444:	f001 fa50 	bl	80048e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_LB_Pin */
  GPIO_InitStruct.Pin = EN_LB_Pin;
 8003448:	2301      	movs	r3, #1
 800344a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800344c:	2301      	movs	r3, #1
 800344e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003450:	2300      	movs	r3, #0
 8003452:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003454:	2300      	movs	r3, #0
 8003456:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(EN_LB_GPIO_Port, &GPIO_InitStruct);
 8003458:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800345c:	4619      	mov	r1, r3
 800345e:	4834      	ldr	r0, [pc, #208]	; (8003530 <MX_GPIO_Init+0x318>)
 8003460:	f001 fa42 	bl	80048e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PISTON_C_Pin */
  GPIO_InitStruct.Pin = PISTON_C_Pin;
 8003464:	2304      	movs	r3, #4
 8003466:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003468:	2301      	movs	r3, #1
 800346a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800346c:	2300      	movs	r3, #0
 800346e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003470:	2301      	movs	r3, #1
 8003472:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PISTON_C_GPIO_Port, &GPIO_InitStruct);
 8003474:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003478:	4619      	mov	r1, r3
 800347a:	482d      	ldr	r0, [pc, #180]	; (8003530 <MX_GPIO_Init+0x318>)
 800347c:	f001 fa34 	bl	80048e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LS_6_Pin */
  GPIO_InitStruct.Pin = LS_6_Pin;
 8003480:	2380      	movs	r3, #128	; 0x80
 8003482:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003484:	2300      	movs	r3, #0
 8003486:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003488:	2301      	movs	r3, #1
 800348a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LS_6_GPIO_Port, &GPIO_InitStruct);
 800348c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003490:	4619      	mov	r1, r3
 8003492:	4827      	ldr	r0, [pc, #156]	; (8003530 <MX_GPIO_Init+0x318>)
 8003494:	f001 fa28 	bl	80048e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_BOLA_Pin */
  GPIO_InitStruct.Pin = EN_BOLA_Pin;
 8003498:	2302      	movs	r3, #2
 800349a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800349c:	2301      	movs	r3, #1
 800349e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a0:	2300      	movs	r3, #0
 80034a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034a4:	2300      	movs	r3, #0
 80034a6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(EN_BOLA_GPIO_Port, &GPIO_InitStruct);
 80034a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034ac:	4619      	mov	r1, r3
 80034ae:	4821      	ldr	r0, [pc, #132]	; (8003534 <MX_GPIO_Init+0x31c>)
 80034b0:	f001 fa1a 	bl	80048e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80034b4:	2200      	movs	r2, #0
 80034b6:	2105      	movs	r1, #5
 80034b8:	2006      	movs	r0, #6
 80034ba:	f001 f959 	bl	8004770 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80034be:	2006      	movs	r0, #6
 80034c0:	f001 f972 	bl	80047a8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80034c4:	2200      	movs	r2, #0
 80034c6:	2105      	movs	r1, #5
 80034c8:	2007      	movs	r0, #7
 80034ca:	f001 f951 	bl	8004770 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80034ce:	2007      	movs	r0, #7
 80034d0:	f001 f96a 	bl	80047a8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80034d4:	2200      	movs	r2, #0
 80034d6:	2105      	movs	r1, #5
 80034d8:	2008      	movs	r0, #8
 80034da:	f001 f949 	bl	8004770 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80034de:	2008      	movs	r0, #8
 80034e0:	f001 f962 	bl	80047a8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80034e4:	2200      	movs	r2, #0
 80034e6:	2105      	movs	r1, #5
 80034e8:	2009      	movs	r0, #9
 80034ea:	f001 f941 	bl	8004770 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80034ee:	2009      	movs	r0, #9
 80034f0:	f001 f95a 	bl	80047a8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80034f4:	2200      	movs	r2, #0
 80034f6:	2105      	movs	r1, #5
 80034f8:	200a      	movs	r0, #10
 80034fa:	f001 f939 	bl	8004770 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80034fe:	200a      	movs	r0, #10
 8003500:	f001 f952 	bl	80047a8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8003504:	2200      	movs	r2, #0
 8003506:	2105      	movs	r1, #5
 8003508:	2017      	movs	r0, #23
 800350a:	f001 f931 	bl	8004770 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800350e:	2017      	movs	r0, #23
 8003510:	f001 f94a 	bl	80047a8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8003514:	2200      	movs	r2, #0
 8003516:	2105      	movs	r1, #5
 8003518:	2028      	movs	r0, #40	; 0x28
 800351a:	e00d      	b.n	8003538 <MX_GPIO_Init+0x320>
 800351c:	40023800 	.word	0x40023800
 8003520:	40021400 	.word	0x40021400
 8003524:	40020800 	.word	0x40020800
 8003528:	40020400 	.word	0x40020400
 800352c:	40021800 	.word	0x40021800
 8003530:	40020c00 	.word	0x40020c00
 8003534:	40021000 	.word	0x40021000
 8003538:	f001 f91a 	bl	8004770 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800353c:	2028      	movs	r0, #40	; 0x28
 800353e:	f001 f933 	bl	80047a8 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003542:	bf00      	nop
 8003544:	3738      	adds	r7, #56	; 0x38
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop

0800354c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	4603      	mov	r3, r0
 8003554:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == LS_1_Pin) {
 8003556:	88fb      	ldrh	r3, [r7, #6]
 8003558:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800355c:	d102      	bne.n	8003564 <HAL_GPIO_EXTI_Callback+0x18>
		lsflag_1 = 1;
 800355e:	4b11      	ldr	r3, [pc, #68]	; (80035a4 <HAL_GPIO_EXTI_Callback+0x58>)
 8003560:	2201      	movs	r2, #1
 8003562:	601a      	str	r2, [r3, #0]
	}
	if (GPIO_Pin == LS_2_Pin) {
 8003564:	88fb      	ldrh	r3, [r7, #6]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d102      	bne.n	8003570 <HAL_GPIO_EXTI_Callback+0x24>
		lsflag_2 = 1;
 800356a:	4b0f      	ldr	r3, [pc, #60]	; (80035a8 <HAL_GPIO_EXTI_Callback+0x5c>)
 800356c:	2201      	movs	r2, #1
 800356e:	601a      	str	r2, [r3, #0]
	}
	if (GPIO_Pin == LS_3_Pin) {
 8003570:	88fb      	ldrh	r3, [r7, #6]
 8003572:	2b20      	cmp	r3, #32
 8003574:	d102      	bne.n	800357c <HAL_GPIO_EXTI_Callback+0x30>
		lsflag_3 = 1;
 8003576:	4b0d      	ldr	r3, [pc, #52]	; (80035ac <HAL_GPIO_EXTI_Callback+0x60>)
 8003578:	2201      	movs	r2, #1
 800357a:	601a      	str	r2, [r3, #0]
	}
	if (GPIO_Pin == LS_4_Pin) {
 800357c:	88fb      	ldrh	r3, [r7, #6]
 800357e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003582:	d102      	bne.n	800358a <HAL_GPIO_EXTI_Callback+0x3e>
		lsflag_4 = 1;
 8003584:	4b0a      	ldr	r3, [pc, #40]	; (80035b0 <HAL_GPIO_EXTI_Callback+0x64>)
 8003586:	2201      	movs	r2, #1
 8003588:	601a      	str	r2, [r3, #0]
	}
	if (GPIO_Pin == LS_5_Pin) {
 800358a:	88fb      	ldrh	r3, [r7, #6]
 800358c:	2b10      	cmp	r3, #16
 800358e:	d102      	bne.n	8003596 <HAL_GPIO_EXTI_Callback+0x4a>
		lsflag_5 = 1;
 8003590:	4b08      	ldr	r3, [pc, #32]	; (80035b4 <HAL_GPIO_EXTI_Callback+0x68>)
 8003592:	2201      	movs	r2, #1
 8003594:	601a      	str	r2, [r3, #0]
	}

//	if(GPIO_Pin == ENC1_A_Pin) read_pulse_A(&R_front);
//	else if(GPIO_Pin == ENC1_B_Pin) read_pulse_B(&R_front);

}
 8003596:	bf00      	nop
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	2000078c 	.word	0x2000078c
 80035a8:	20000790 	.word	0x20000790
 80035ac:	20000794 	.word	0x20000794
 80035b0:	20000798 	.word	0x20000798
 80035b4:	2000079c 	.word	0x2000079c

080035b8 <InputHandle_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_InputHandle_Task */
void InputHandle_Task(void const * argument)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
//	  printf("input task\r\n");
	  ds4();
 80035c0:	f7fe f922 	bl	8001808 <ds4>
	  lxm = lx - lxs;
 80035c4:	4b08      	ldr	r3, [pc, #32]	; (80035e8 <InputHandle_Task+0x30>)
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	4b08      	ldr	r3, [pc, #32]	; (80035ec <InputHandle_Task+0x34>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	4a08      	ldr	r2, [pc, #32]	; (80035f0 <InputHandle_Task+0x38>)
 80035d0:	6013      	str	r3, [r2, #0]
	  lym = ly - lys;
 80035d2:	4b08      	ldr	r3, [pc, #32]	; (80035f4 <InputHandle_Task+0x3c>)
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	4b08      	ldr	r3, [pc, #32]	; (80035f8 <InputHandle_Task+0x40>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	4a07      	ldr	r2, [pc, #28]	; (80035fc <InputHandle_Task+0x44>)
 80035de:	6013      	str	r3, [r2, #0]
//	  printf("\r\n at:%d, ki:%d, bw:%d, ka:%d, se3:%d, se4:%d, x:%d, o:%d,r1:%d, l1:%d, r3:%d, l3:%d, shr:%d, opt:%d, ps:%d, tpad:%d, lx:%d, ly:%d  ",
//			  atas, kiri, bawah, kanan, segitiga, kotak,silang,bulat,r1, l1, r3, l3, share, options,ps,tpad, lxm, lym);
//	  printf("\r\n lxs:%d , lys:%d, lx:%d, ly:%d, lxm:%d, lym:%d",
//	  			   lxs, lys, lx, ly, lxm, lym);
//	  printf("w1:%d, w2:%d, w3:%d, w4:%d, putar:%d", wheel[0], wheel[1], wheel[2], wheel[3], putar);
	  osDelay(1);
 80035e0:	2001      	movs	r0, #1
 80035e2:	f004 fe6e 	bl	80082c2 <osDelay>
	  ds4();
 80035e6:	e7eb      	b.n	80035c0 <InputHandle_Task+0x8>
 80035e8:	2000074c 	.word	0x2000074c
 80035ec:	2000075c 	.word	0x2000075c
 80035f0:	20000764 	.word	0x20000764
 80035f4:	20000750 	.word	0x20000750
 80035f8:	20000760 	.word	0x20000760
 80035fc:	20000768 	.word	0x20000768

08003600 <MechanismHandle_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MechanismHandle_Task */
void MechanismHandle_Task(void const * argument)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MechanismHandle_Task */
  /* Infinite loop */
  for(;;)
  {
	  currentTick = HAL_GetTick(); //kayak millis
 8003608:	f000 ffca 	bl	80045a0 <HAL_GetTick>
 800360c:	4603      	mov	r3, r0
 800360e:	4a34      	ldr	r2, [pc, #208]	; (80036e0 <MechanismHandle_Task+0xe0>)
 8003610:	6013      	str	r3, [r2, #0]
	  if(segitiga==1){
 8003612:	4b34      	ldr	r3, [pc, #208]	; (80036e4 <MechanismHandle_Task+0xe4>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d124      	bne.n	8003664 <MechanismHandle_Task+0x64>
		  if(currentTick-nowTick>100 && nos<2){
 800361a:	4b31      	ldr	r3, [pc, #196]	; (80036e0 <MechanismHandle_Task+0xe0>)
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	4b32      	ldr	r3, [pc, #200]	; (80036e8 <MechanismHandle_Task+0xe8>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b64      	cmp	r3, #100	; 0x64
 8003626:	d923      	bls.n	8003670 <MechanismHandle_Task+0x70>
 8003628:	4b30      	ldr	r3, [pc, #192]	; (80036ec <MechanismHandle_Task+0xec>)
 800362a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800362e:	f04f 0200 	mov.w	r2, #0
 8003632:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003636:	f7fd fa09 	bl	8000a4c <__aeabi_dcmplt>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d017      	beq.n	8003670 <MechanismHandle_Task+0x70>
			  nos+=0.2;
 8003640:	4b2a      	ldr	r3, [pc, #168]	; (80036ec <MechanismHandle_Task+0xec>)
 8003642:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003646:	a324      	add	r3, pc, #144	; (adr r3, 80036d8 <MechanismHandle_Task+0xd8>)
 8003648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364c:	f7fc fdd6 	bl	80001fc <__adddf3>
 8003650:	4602      	mov	r2, r0
 8003652:	460b      	mov	r3, r1
 8003654:	4925      	ldr	r1, [pc, #148]	; (80036ec <MechanismHandle_Task+0xec>)
 8003656:	e9c1 2300 	strd	r2, r3, [r1]
			  nowTick = currentTick;
 800365a:	4b21      	ldr	r3, [pc, #132]	; (80036e0 <MechanismHandle_Task+0xe0>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a22      	ldr	r2, [pc, #136]	; (80036e8 <MechanismHandle_Task+0xe8>)
 8003660:	6013      	str	r3, [r2, #0]
 8003662:	e005      	b.n	8003670 <MechanismHandle_Task+0x70>
		  }
	  }
	  else nos = 1;
 8003664:	4921      	ldr	r1, [pc, #132]	; (80036ec <MechanismHandle_Task+0xec>)
 8003666:	f04f 0200 	mov.w	r2, #0
 800366a:	4b21      	ldr	r3, [pc, #132]	; (80036f0 <MechanismHandle_Task+0xf0>)
 800366c:	e9c1 2300 	strd	r2, r3, [r1]
	  if (ps == 1) {
 8003670:	4b20      	ldr	r3, [pc, #128]	; (80036f4 <MechanismHandle_Task+0xf4>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d11b      	bne.n	80036b0 <MechanismHandle_Task+0xb0>
		  if (currentTick - nowTick > 500) {
 8003678:	4b19      	ldr	r3, [pc, #100]	; (80036e0 <MechanismHandle_Task+0xe0>)
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	4b1a      	ldr	r3, [pc, #104]	; (80036e8 <MechanismHandle_Task+0xe8>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003686:	d913      	bls.n	80036b0 <MechanismHandle_Task+0xb0>
			  kec=0;
 8003688:	4b1b      	ldr	r3, [pc, #108]	; (80036f8 <MechanismHandle_Task+0xf8>)
 800368a:	2200      	movs	r2, #0
 800368c:	601a      	str	r2, [r3, #0]
			  adj=0;
 800368e:	4b1b      	ldr	r3, [pc, #108]	; (80036fc <MechanismHandle_Task+0xfc>)
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]
			  mode=mode*-1;
 8003694:	4b1a      	ldr	r3, [pc, #104]	; (8003700 <MechanismHandle_Task+0x100>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	425b      	negs	r3, r3
 800369a:	4a19      	ldr	r2, [pc, #100]	; (8003700 <MechanismHandle_Task+0x100>)
 800369c:	6013      	str	r3, [r2, #0]
			  l = l*-1;
 800369e:	4b19      	ldr	r3, [pc, #100]	; (8003704 <MechanismHandle_Task+0x104>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	425b      	negs	r3, r3
 80036a4:	4a17      	ldr	r2, [pc, #92]	; (8003704 <MechanismHandle_Task+0x104>)
 80036a6:	6013      	str	r3, [r2, #0]
			  nowTick = currentTick;
 80036a8:	4b0d      	ldr	r3, [pc, #52]	; (80036e0 <MechanismHandle_Task+0xe0>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a0e      	ldr	r2, [pc, #56]	; (80036e8 <MechanismHandle_Task+0xe8>)
 80036ae:	6013      	str	r3, [r2, #0]
		  }
	  }

	  if (mode>0) {
 80036b0:	4b13      	ldr	r3, [pc, #76]	; (8003700 <MechanismHandle_Task+0x100>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	dd02      	ble.n	80036be <MechanismHandle_Task+0xbe>
		  mode_padi();
 80036b8:	f7fe f920 	bl	80018fc <mode_padi>
 80036bc:	e005      	b.n	80036ca <MechanismHandle_Task+0xca>
	  }
	  else if (mode<0) {
 80036be:	4b10      	ldr	r3, [pc, #64]	; (8003700 <MechanismHandle_Task+0x100>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	da01      	bge.n	80036ca <MechanismHandle_Task+0xca>
		  mode_bola();
 80036c6:	f7fe fd05 	bl	80020d4 <mode_bola>
	  }

	  //printf("mechanism task\r\n");
	  osDelay(1);
 80036ca:	2001      	movs	r0, #1
 80036cc:	f004 fdf9 	bl	80082c2 <osDelay>
	  currentTick = HAL_GetTick(); //kayak millis
 80036d0:	e79a      	b.n	8003608 <MechanismHandle_Task+0x8>
 80036d2:	bf00      	nop
 80036d4:	f3af 8000 	nop.w
 80036d8:	9999999a 	.word	0x9999999a
 80036dc:	3fc99999 	.word	0x3fc99999
 80036e0:	200007dc 	.word	0x200007dc
 80036e4:	20000728 	.word	0x20000728
 80036e8:	200007e0 	.word	0x200007e0
 80036ec:	20000020 	.word	0x20000020
 80036f0:	3ff00000 	.word	0x3ff00000
 80036f4:	20000744 	.word	0x20000744
 80036f8:	200007d0 	.word	0x200007d0
 80036fc:	200007d8 	.word	0x200007d8
 8003700:	20000028 	.word	0x20000028
 8003704:	20000030 	.word	0x20000030

08003708 <OmniHandle_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OmniHandle_Task */
void OmniHandle_Task(void const * argument)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af02      	add	r7, sp, #8
 800370e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OmniHandle_Task */
  /* Infinite loop */
  for(;;)
  {
//	  printf("omni task\r\n");
	  if (l2 < r2) putar = -1*r2;
 8003710:	4b7d      	ldr	r3, [pc, #500]	; (8003908 <OmniHandle_Task+0x200>)
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	4b7d      	ldr	r3, [pc, #500]	; (800390c <OmniHandle_Task+0x204>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	429a      	cmp	r2, r3
 800371a:	da05      	bge.n	8003728 <OmniHandle_Task+0x20>
 800371c:	4b7b      	ldr	r3, [pc, #492]	; (800390c <OmniHandle_Task+0x204>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	425b      	negs	r3, r3
 8003722:	4a7b      	ldr	r2, [pc, #492]	; (8003910 <OmniHandle_Task+0x208>)
 8003724:	6013      	str	r3, [r2, #0]
 8003726:	e00d      	b.n	8003744 <OmniHandle_Task+0x3c>
	  else if (l2 > r2) putar = l2;
 8003728:	4b77      	ldr	r3, [pc, #476]	; (8003908 <OmniHandle_Task+0x200>)
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	4b77      	ldr	r3, [pc, #476]	; (800390c <OmniHandle_Task+0x204>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	429a      	cmp	r2, r3
 8003732:	dd04      	ble.n	800373e <OmniHandle_Task+0x36>
 8003734:	4b74      	ldr	r3, [pc, #464]	; (8003908 <OmniHandle_Task+0x200>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a75      	ldr	r2, [pc, #468]	; (8003910 <OmniHandle_Task+0x208>)
 800373a:	6013      	str	r3, [r2, #0]
 800373c:	e002      	b.n	8003744 <OmniHandle_Task+0x3c>
	  else putar = 0;
 800373e:	4b74      	ldr	r3, [pc, #464]	; (8003910 <OmniHandle_Task+0x208>)
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]

	  if (mode>0) putar1=putar/1.6;
 8003744:	4b73      	ldr	r3, [pc, #460]	; (8003914 <OmniHandle_Task+0x20c>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	dd13      	ble.n	8003774 <OmniHandle_Task+0x6c>
 800374c:	4b70      	ldr	r3, [pc, #448]	; (8003910 <OmniHandle_Task+0x208>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4618      	mov	r0, r3
 8003752:	f7fc fe9f 	bl	8000494 <__aeabi_i2d>
 8003756:	a36a      	add	r3, pc, #424	; (adr r3, 8003900 <OmniHandle_Task+0x1f8>)
 8003758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375c:	f7fd f82e 	bl	80007bc <__aeabi_ddiv>
 8003760:	4602      	mov	r2, r0
 8003762:	460b      	mov	r3, r1
 8003764:	4610      	mov	r0, r2
 8003766:	4619      	mov	r1, r3
 8003768:	f7fd f998 	bl	8000a9c <__aeabi_d2iz>
 800376c:	4603      	mov	r3, r0
 800376e:	4a6a      	ldr	r2, [pc, #424]	; (8003918 <OmniHandle_Task+0x210>)
 8003770:	6013      	str	r3, [r2, #0]
 8003772:	e016      	b.n	80037a2 <OmniHandle_Task+0x9a>
	  else if (mode<0) putar1=putar/1.6;
 8003774:	4b67      	ldr	r3, [pc, #412]	; (8003914 <OmniHandle_Task+0x20c>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	da12      	bge.n	80037a2 <OmniHandle_Task+0x9a>
 800377c:	4b64      	ldr	r3, [pc, #400]	; (8003910 <OmniHandle_Task+0x208>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4618      	mov	r0, r3
 8003782:	f7fc fe87 	bl	8000494 <__aeabi_i2d>
 8003786:	a35e      	add	r3, pc, #376	; (adr r3, 8003900 <OmniHandle_Task+0x1f8>)
 8003788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378c:	f7fd f816 	bl	80007bc <__aeabi_ddiv>
 8003790:	4602      	mov	r2, r0
 8003792:	460b      	mov	r3, r1
 8003794:	4610      	mov	r0, r2
 8003796:	4619      	mov	r1, r3
 8003798:	f7fd f980 	bl	8000a9c <__aeabi_d2iz>
 800379c:	4603      	mov	r3, r0
 800379e:	4a5e      	ldr	r2, [pc, #376]	; (8003918 <OmniHandle_Task+0x210>)
 80037a0:	6013      	str	r3, [r2, #0]

	  th = putar1;
 80037a2:	4b5d      	ldr	r3, [pc, #372]	; (8003918 <OmniHandle_Task+0x210>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a5d      	ldr	r2, [pc, #372]	; (800391c <OmniHandle_Task+0x214>)
 80037a8:	6013      	str	r3, [r2, #0]

	  kinematikM(lxm, lym, th, nos);
 80037aa:	4b5d      	ldr	r3, [pc, #372]	; (8003920 <OmniHandle_Task+0x218>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a5d      	ldr	r2, [pc, #372]	; (8003924 <OmniHandle_Task+0x21c>)
 80037b0:	6811      	ldr	r1, [r2, #0]
 80037b2:	4a5a      	ldr	r2, [pc, #360]	; (800391c <OmniHandle_Task+0x214>)
 80037b4:	6812      	ldr	r2, [r2, #0]
 80037b6:	485c      	ldr	r0, [pc, #368]	; (8003928 <OmniHandle_Task+0x220>)
 80037b8:	ed90 7b00 	vldr	d7, [r0]
 80037bc:	eeb0 0a47 	vmov.f32	s0, s14
 80037c0:	eef0 0a67 	vmov.f32	s1, s15
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7fd fb0f 	bl	8000de8 <kinematikM>
	  for (uint8_t i = 0; i < 4; i++) {
 80037ca:	2300      	movs	r3, #0
 80037cc:	73fb      	strb	r3, [r7, #15]
 80037ce:	e04e      	b.n	800386e <OmniHandle_Task+0x166>
		  wheel[0] = map(out[0], -360, 360, -1000, 1000);//386
 80037d0:	4b56      	ldr	r3, [pc, #344]	; (800392c <OmniHandle_Task+0x224>)
 80037d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d6:	4610      	mov	r0, r2
 80037d8:	4619      	mov	r1, r3
 80037da:	f7fd f95f 	bl	8000a9c <__aeabi_d2iz>
 80037de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037e2:	9300      	str	r3, [sp, #0]
 80037e4:	4b52      	ldr	r3, [pc, #328]	; (8003930 <OmniHandle_Task+0x228>)
 80037e6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80037ea:	4952      	ldr	r1, [pc, #328]	; (8003934 <OmniHandle_Task+0x22c>)
 80037ec:	f7fe f86a 	bl	80018c4 <map>
 80037f0:	4603      	mov	r3, r0
 80037f2:	4a51      	ldr	r2, [pc, #324]	; (8003938 <OmniHandle_Task+0x230>)
 80037f4:	6013      	str	r3, [r2, #0]
		  wheel[1] = map(out[1], -360, 360, -1000, 1000);//360
 80037f6:	4b4d      	ldr	r3, [pc, #308]	; (800392c <OmniHandle_Task+0x224>)
 80037f8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80037fc:	4610      	mov	r0, r2
 80037fe:	4619      	mov	r1, r3
 8003800:	f7fd f94c 	bl	8000a9c <__aeabi_d2iz>
 8003804:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003808:	9300      	str	r3, [sp, #0]
 800380a:	4b49      	ldr	r3, [pc, #292]	; (8003930 <OmniHandle_Task+0x228>)
 800380c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8003810:	4948      	ldr	r1, [pc, #288]	; (8003934 <OmniHandle_Task+0x22c>)
 8003812:	f7fe f857 	bl	80018c4 <map>
 8003816:	4603      	mov	r3, r0
 8003818:	4a47      	ldr	r2, [pc, #284]	; (8003938 <OmniHandle_Task+0x230>)
 800381a:	6053      	str	r3, [r2, #4]
		  wheel[2] = map(out[2], -360, 360, -1000, 1000);
 800381c:	4b43      	ldr	r3, [pc, #268]	; (800392c <OmniHandle_Task+0x224>)
 800381e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003822:	4610      	mov	r0, r2
 8003824:	4619      	mov	r1, r3
 8003826:	f7fd f939 	bl	8000a9c <__aeabi_d2iz>
 800382a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800382e:	9300      	str	r3, [sp, #0]
 8003830:	4b3f      	ldr	r3, [pc, #252]	; (8003930 <OmniHandle_Task+0x228>)
 8003832:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8003836:	493f      	ldr	r1, [pc, #252]	; (8003934 <OmniHandle_Task+0x22c>)
 8003838:	f7fe f844 	bl	80018c4 <map>
 800383c:	4603      	mov	r3, r0
 800383e:	4a3e      	ldr	r2, [pc, #248]	; (8003938 <OmniHandle_Task+0x230>)
 8003840:	6093      	str	r3, [r2, #8]
		  wheel[3] = map(out[3], -360, 360, -1000, 1000);
 8003842:	4b3a      	ldr	r3, [pc, #232]	; (800392c <OmniHandle_Task+0x224>)
 8003844:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003848:	4610      	mov	r0, r2
 800384a:	4619      	mov	r1, r3
 800384c:	f7fd f926 	bl	8000a9c <__aeabi_d2iz>
 8003850:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003854:	9300      	str	r3, [sp, #0]
 8003856:	4b36      	ldr	r3, [pc, #216]	; (8003930 <OmniHandle_Task+0x228>)
 8003858:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800385c:	4935      	ldr	r1, [pc, #212]	; (8003934 <OmniHandle_Task+0x22c>)
 800385e:	f7fe f831 	bl	80018c4 <map>
 8003862:	4603      	mov	r3, r0
 8003864:	4a34      	ldr	r2, [pc, #208]	; (8003938 <OmniHandle_Task+0x230>)
 8003866:	60d3      	str	r3, [r2, #12]
	  for (uint8_t i = 0; i < 4; i++) {
 8003868:	7bfb      	ldrb	r3, [r7, #15]
 800386a:	3301      	adds	r3, #1
 800386c:	73fb      	strb	r3, [r7, #15]
 800386e:	7bfb      	ldrb	r3, [r7, #15]
 8003870:	2b03      	cmp	r3, #3
 8003872:	d9ad      	bls.n	80037d0 <OmniHandle_Task+0xc8>
//	  motor_drive(&LeftFront, out[0], lf.output);
//	  motor_drive(&LeftBack, out[1], lb.output);
//	  motor_drive(&RightBack, out[2], rb.output);
//	  motor_drive(&RightFront, out[3], rf.output);

	  motor_drive(&LeftFront, out[0], wheel[0]);
 8003874:	4b2d      	ldr	r3, [pc, #180]	; (800392c <OmniHandle_Task+0x224>)
 8003876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800387a:	4610      	mov	r0, r2
 800387c:	4619      	mov	r1, r3
 800387e:	f7fd f90d 	bl	8000a9c <__aeabi_d2iz>
 8003882:	4603      	mov	r3, r0
 8003884:	b21b      	sxth	r3, r3
 8003886:	4a2c      	ldr	r2, [pc, #176]	; (8003938 <OmniHandle_Task+0x230>)
 8003888:	6812      	ldr	r2, [r2, #0]
 800388a:	b212      	sxth	r2, r2
 800388c:	4619      	mov	r1, r3
 800388e:	482b      	ldr	r0, [pc, #172]	; (800393c <OmniHandle_Task+0x234>)
 8003890:	f000 f8da 	bl	8003a48 <motor_drive>
	  motor_drive(&LeftBack, out[1], wheel[1]);
 8003894:	4b25      	ldr	r3, [pc, #148]	; (800392c <OmniHandle_Task+0x224>)
 8003896:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800389a:	4610      	mov	r0, r2
 800389c:	4619      	mov	r1, r3
 800389e:	f7fd f8fd 	bl	8000a9c <__aeabi_d2iz>
 80038a2:	4603      	mov	r3, r0
 80038a4:	b21b      	sxth	r3, r3
 80038a6:	4a24      	ldr	r2, [pc, #144]	; (8003938 <OmniHandle_Task+0x230>)
 80038a8:	6852      	ldr	r2, [r2, #4]
 80038aa:	b212      	sxth	r2, r2
 80038ac:	4619      	mov	r1, r3
 80038ae:	4824      	ldr	r0, [pc, #144]	; (8003940 <OmniHandle_Task+0x238>)
 80038b0:	f000 f8ca 	bl	8003a48 <motor_drive>
	  motor_drive(&RightBack, out[2], wheel[2]);
 80038b4:	4b1d      	ldr	r3, [pc, #116]	; (800392c <OmniHandle_Task+0x224>)
 80038b6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80038ba:	4610      	mov	r0, r2
 80038bc:	4619      	mov	r1, r3
 80038be:	f7fd f8ed 	bl	8000a9c <__aeabi_d2iz>
 80038c2:	4603      	mov	r3, r0
 80038c4:	b21b      	sxth	r3, r3
 80038c6:	4a1c      	ldr	r2, [pc, #112]	; (8003938 <OmniHandle_Task+0x230>)
 80038c8:	6892      	ldr	r2, [r2, #8]
 80038ca:	b212      	sxth	r2, r2
 80038cc:	4619      	mov	r1, r3
 80038ce:	481d      	ldr	r0, [pc, #116]	; (8003944 <OmniHandle_Task+0x23c>)
 80038d0:	f000 f8ba 	bl	8003a48 <motor_drive>
	  motor_drive(&RightFront, out[3], wheel[3]);
 80038d4:	4b15      	ldr	r3, [pc, #84]	; (800392c <OmniHandle_Task+0x224>)
 80038d6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80038da:	4610      	mov	r0, r2
 80038dc:	4619      	mov	r1, r3
 80038de:	f7fd f8dd 	bl	8000a9c <__aeabi_d2iz>
 80038e2:	4603      	mov	r3, r0
 80038e4:	b21b      	sxth	r3, r3
 80038e6:	4a14      	ldr	r2, [pc, #80]	; (8003938 <OmniHandle_Task+0x230>)
 80038e8:	68d2      	ldr	r2, [r2, #12]
 80038ea:	b212      	sxth	r2, r2
 80038ec:	4619      	mov	r1, r3
 80038ee:	4816      	ldr	r0, [pc, #88]	; (8003948 <OmniHandle_Task+0x240>)
 80038f0:	f000 f8aa 	bl	8003a48 <motor_drive>
//	  printf("out0:%d,out1:%d,out2:%d,out3:%d", out[0],out[1],out[2],out[3]);
	  osDelay(1);
 80038f4:	2001      	movs	r0, #1
 80038f6:	f004 fce4 	bl	80082c2 <osDelay>
	  if (l2 < r2) putar = -1*r2;
 80038fa:	e709      	b.n	8003710 <OmniHandle_Task+0x8>
 80038fc:	f3af 8000 	nop.w
 8003900:	9999999a 	.word	0x9999999a
 8003904:	3ff99999 	.word	0x3ff99999
 8003908:	20000754 	.word	0x20000754
 800390c:	20000758 	.word	0x20000758
 8003910:	20000784 	.word	0x20000784
 8003914:	20000028 	.word	0x20000028
 8003918:	20000788 	.word	0x20000788
 800391c:	2000076c 	.word	0x2000076c
 8003920:	20000764 	.word	0x20000764
 8003924:	20000768 	.word	0x20000768
 8003928:	20000020 	.word	0x20000020
 800392c:	200001a0 	.word	0x200001a0
 8003930:	fffffc18 	.word	0xfffffc18
 8003934:	fffffe98 	.word	0xfffffe98
 8003938:	20000770 	.word	0x20000770
 800393c:	20000048 	.word	0x20000048
 8003940:	20000060 	.word	0x20000060
 8003944:	20000090 	.word	0x20000090
 8003948:	20000078 	.word	0x20000078

0800394c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a04      	ldr	r2, [pc, #16]	; (800396c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d101      	bne.n	8003962 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800395e:	f000 fe0b 	bl	8004578 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003962:	bf00      	nop
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40001400 	.word	0x40001400

08003970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003974:	b672      	cpsid	i
}
 8003976:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003978:	e7fe      	b.n	8003978 <Error_Handler+0x8>

0800397a <motor_init>:
		.ch1_ = TIM_CHANNEL_2, .ch2_ = TIM_CHANNEL_1,
		.en_port = EN_PADI_GPIO_Port,
		.en_pin = EN_PADI_Pin
};

void motor_init(motor_channel *wheel_n){
 800397a:	b580      	push	{r7, lr}
 800397c:	b082      	sub	sp, #8
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(wheel_n->en_port, wheel_n->en_pin, GPIO_PIN_SET);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6918      	ldr	r0, [r3, #16]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	8a9b      	ldrh	r3, [r3, #20]
 800398a:	b29b      	uxth	r3, r3
 800398c:	2201      	movs	r2, #1
 800398e:	4619      	mov	r1, r3
 8003990:	f001 f96e 	bl	8004c70 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(wheel_n->in1_, wheel_n->ch1_);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	4619      	mov	r1, r3
 800399e:	4610      	mov	r0, r2
 80039a0:	f002 fd9c 	bl	80064dc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(wheel_n->in2_, wheel_n->ch2_);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685a      	ldr	r2, [r3, #4]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	4619      	mov	r1, r3
 80039ae:	4610      	mov	r0, r2
 80039b0:	f002 fd94 	bl	80064dc <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(wheel_n->in1_, wheel_n->ch1_, 0);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d105      	bne.n	80039c8 <motor_init+0x4e>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2200      	movs	r2, #0
 80039c4:	635a      	str	r2, [r3, #52]	; 0x34
 80039c6:	e018      	b.n	80039fa <motor_init+0x80>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	2b04      	cmp	r3, #4
 80039ce:	d105      	bne.n	80039dc <motor_init+0x62>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	2300      	movs	r3, #0
 80039d8:	6393      	str	r3, [r2, #56]	; 0x38
 80039da:	e00e      	b.n	80039fa <motor_init+0x80>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	2b08      	cmp	r3, #8
 80039e2:	d105      	bne.n	80039f0 <motor_init+0x76>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	2300      	movs	r3, #0
 80039ec:	63d3      	str	r3, [r2, #60]	; 0x3c
 80039ee:	e004      	b.n	80039fa <motor_init+0x80>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	2300      	movs	r3, #0
 80039f8:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(wheel_n->in2_, wheel_n->ch2_, 0);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d105      	bne.n	8003a0e <motor_init+0x94>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003a0c:	e018      	b.n	8003a40 <motor_init+0xc6>
	__HAL_TIM_SET_COMPARE(wheel_n->in2_, wheel_n->ch2_, 0);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	2b04      	cmp	r3, #4
 8003a14:	d105      	bne.n	8003a22 <motor_init+0xa8>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003a20:	e00e      	b.n	8003a40 <motor_init+0xc6>
	__HAL_TIM_SET_COMPARE(wheel_n->in2_, wheel_n->ch2_, 0);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	2b08      	cmp	r3, #8
 8003a28:	d105      	bne.n	8003a36 <motor_init+0xbc>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	2300      	movs	r3, #0
 8003a32:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8003a34:	e004      	b.n	8003a40 <motor_init+0xc6>
	__HAL_TIM_SET_COMPARE(wheel_n->in2_, wheel_n->ch2_, 0);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8003a40:	bf00      	nop
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <motor_drive>:

void motor_drive(motor_channel *wheel_n, int16_t dir, int16_t rpm){
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	460b      	mov	r3, r1
 8003a52:	807b      	strh	r3, [r7, #2]
 8003a54:	4613      	mov	r3, r2
 8003a56:	803b      	strh	r3, [r7, #0]
	if(dir > 0){
 8003a58:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	dd4a      	ble.n	8003af6 <motor_drive+0xae>
		__HAL_TIM_SET_COMPARE(wheel_n->in1_, wheel_n->ch1_, rpm);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d106      	bne.n	8003a76 <motor_drive+0x2e>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003a72:	635a      	str	r2, [r3, #52]	; 0x34
 8003a74:	e01b      	b.n	8003aae <motor_drive+0x66>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	2b04      	cmp	r3, #4
 8003a7c:	d106      	bne.n	8003a8c <motor_drive+0x44>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003a88:	6393      	str	r3, [r2, #56]	; 0x38
 8003a8a:	e010      	b.n	8003aae <motor_drive+0x66>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	2b08      	cmp	r3, #8
 8003a92:	d106      	bne.n	8003aa2 <motor_drive+0x5a>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003a9e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003aa0:	e005      	b.n	8003aae <motor_drive+0x66>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003aac:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(wheel_n->in2_, wheel_n->ch2_, 0);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d105      	bne.n	8003ac2 <motor_drive+0x7a>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2200      	movs	r2, #0
 8003abe:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else{
		__HAL_TIM_SET_COMPARE(wheel_n->in1_, wheel_n->ch1_, 0);
		__HAL_TIM_SET_COMPARE(wheel_n->in2_, wheel_n->ch2_, 0);
	}
}
 8003ac0:	e0c2      	b.n	8003c48 <motor_drive+0x200>
		__HAL_TIM_SET_COMPARE(wheel_n->in2_, wheel_n->ch2_, 0);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	d105      	bne.n	8003ad6 <motor_drive+0x8e>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	6393      	str	r3, [r2, #56]	; 0x38
 8003ad4:	e0b8      	b.n	8003c48 <motor_drive+0x200>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	2b08      	cmp	r3, #8
 8003adc:	d105      	bne.n	8003aea <motor_drive+0xa2>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003ae8:	e0ae      	b.n	8003c48 <motor_drive+0x200>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	2300      	movs	r3, #0
 8003af2:	6413      	str	r3, [r2, #64]	; 0x40
}
 8003af4:	e0a8      	b.n	8003c48 <motor_drive+0x200>
	else if(dir < 0){
 8003af6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	da5d      	bge.n	8003bba <motor_drive+0x172>
		__HAL_TIM_SET_COMPARE(wheel_n->in1_, wheel_n->ch1_, 0);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d105      	bne.n	8003b12 <motor_drive+0xca>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	635a      	str	r2, [r3, #52]	; 0x34
 8003b10:	e018      	b.n	8003b44 <motor_drive+0xfc>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	d105      	bne.n	8003b26 <motor_drive+0xde>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	2300      	movs	r3, #0
 8003b22:	6393      	str	r3, [r2, #56]	; 0x38
 8003b24:	e00e      	b.n	8003b44 <motor_drive+0xfc>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	2b08      	cmp	r3, #8
 8003b2c:	d105      	bne.n	8003b3a <motor_drive+0xf2>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	2300      	movs	r3, #0
 8003b36:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003b38:	e004      	b.n	8003b44 <motor_drive+0xfc>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	2300      	movs	r3, #0
 8003b42:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(wheel_n->in2_, wheel_n->ch2_, abs(rpm));
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10a      	bne.n	8003b62 <motor_drive+0x11a>
 8003b4c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	bfb8      	it	lt
 8003b54:	425b      	neglt	r3, r3
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003b60:	e072      	b.n	8003c48 <motor_drive+0x200>
		__HAL_TIM_SET_COMPARE(wheel_n->in2_, wheel_n->ch2_, abs(rpm));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	2b04      	cmp	r3, #4
 8003b68:	d10b      	bne.n	8003b82 <motor_drive+0x13a>
 8003b6a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	bfb8      	it	lt
 8003b72:	425b      	neglt	r3, r3
 8003b74:	b299      	uxth	r1, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	6393      	str	r3, [r2, #56]	; 0x38
 8003b80:	e062      	b.n	8003c48 <motor_drive+0x200>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	2b08      	cmp	r3, #8
 8003b88:	d10b      	bne.n	8003ba2 <motor_drive+0x15a>
 8003b8a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	bfb8      	it	lt
 8003b92:	425b      	neglt	r3, r3
 8003b94:	b299      	uxth	r1, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003ba0:	e052      	b.n	8003c48 <motor_drive+0x200>
 8003ba2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	bfb8      	it	lt
 8003baa:	425b      	neglt	r3, r3
 8003bac:	b299      	uxth	r1, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	6413      	str	r3, [r2, #64]	; 0x40
}
 8003bb8:	e046      	b.n	8003c48 <motor_drive+0x200>
		__HAL_TIM_SET_COMPARE(wheel_n->in1_, wheel_n->ch1_, 0);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d105      	bne.n	8003bce <motor_drive+0x186>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	635a      	str	r2, [r3, #52]	; 0x34
 8003bcc:	e018      	b.n	8003c00 <motor_drive+0x1b8>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	d105      	bne.n	8003be2 <motor_drive+0x19a>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	2300      	movs	r3, #0
 8003bde:	6393      	str	r3, [r2, #56]	; 0x38
 8003be0:	e00e      	b.n	8003c00 <motor_drive+0x1b8>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	2b08      	cmp	r3, #8
 8003be8:	d105      	bne.n	8003bf6 <motor_drive+0x1ae>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003bf4:	e004      	b.n	8003c00 <motor_drive+0x1b8>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(wheel_n->in2_, wheel_n->ch2_, 0);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d105      	bne.n	8003c14 <motor_drive+0x1cc>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003c12:	e019      	b.n	8003c48 <motor_drive+0x200>
		__HAL_TIM_SET_COMPARE(wheel_n->in2_, wheel_n->ch2_, 0);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	2b04      	cmp	r3, #4
 8003c1a:	d105      	bne.n	8003c28 <motor_drive+0x1e0>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	2300      	movs	r3, #0
 8003c24:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003c26:	e00f      	b.n	8003c48 <motor_drive+0x200>
		__HAL_TIM_SET_COMPARE(wheel_n->in2_, wheel_n->ch2_, 0);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	2b08      	cmp	r3, #8
 8003c2e:	d105      	bne.n	8003c3c <motor_drive+0x1f4>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	2300      	movs	r3, #0
 8003c38:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8003c3a:	e005      	b.n	8003c48 <motor_drive+0x200>
		__HAL_TIM_SET_COMPARE(wheel_n->in2_, wheel_n->ch2_, 0);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	2300      	movs	r3, #0
 8003c44:	6413      	str	r3, [r2, #64]	; 0x40
}
 8003c46:	e7ff      	b.n	8003c48 <motor_drive+0x200>
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <enable_motor>:

void disable_motor(motor_channel *wheel_n){
	HAL_GPIO_WritePin(wheel_n->en_port, wheel_n->en_pin, GPIO_PIN_RESET);
}

void enable_motor(motor_channel *wheel_n){
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(wheel_n->en_port, wheel_n->en_pin, GPIO_PIN_SET);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6918      	ldr	r0, [r3, #16]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	8a9b      	ldrh	r3, [r3, #20]
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	2201      	movs	r2, #1
 8003c68:	4619      	mov	r1, r3
 8003c6a:	f001 f801 	bl	8004c70 <HAL_GPIO_WritePin>
}
 8003c6e:	bf00      	nop
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <bldc_init>:

void bldc_init(esc *servo, uint32_t sp) {
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b082      	sub	sp, #8
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
 8003c7e:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Start(servo->htim, servo->channel);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	4619      	mov	r1, r3
 8003c8a:	4610      	mov	r0, r2
 8003c8c:	f002 fc26 	bl	80064dc <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(servo->htim, servo->channel, sp);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d105      	bne.n	8003ca4 <bldc_init+0x2e>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	683a      	ldr	r2, [r7, #0]
 8003ca0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003ca2:	e018      	b.n	8003cd6 <bldc_init+0x60>
	__HAL_TIM_SET_COMPARE(servo->htim, servo->channel, sp);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2b04      	cmp	r3, #4
 8003caa:	d105      	bne.n	8003cb8 <bldc_init+0x42>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003cb6:	e00e      	b.n	8003cd6 <bldc_init+0x60>
	__HAL_TIM_SET_COMPARE(servo->htim, servo->channel, sp);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	d105      	bne.n	8003ccc <bldc_init+0x56>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8003cca:	e004      	b.n	8003cd6 <bldc_init+0x60>
	__HAL_TIM_SET_COMPARE(servo->htim, servo->channel, sp);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	6413      	str	r3, [r2, #64]	; 0x40
}
 8003cd6:	bf00      	nop
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <bldc_drive>:

void bldc_drive(esc *servo, uint32_t duty) {
 8003cde:	b480      	push	{r7}
 8003ce0:	b083      	sub	sp, #12
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
 8003ce6:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COMPARE(servo->htim, servo->channel, duty);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d105      	bne.n	8003cfc <bldc_drive+0x1e>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003cfa:	e018      	b.n	8003d2e <bldc_drive+0x50>
	__HAL_TIM_SET_COMPARE(servo->htim, servo->channel, duty);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	2b04      	cmp	r3, #4
 8003d02:	d105      	bne.n	8003d10 <bldc_drive+0x32>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003d0e:	e00e      	b.n	8003d2e <bldc_drive+0x50>
	__HAL_TIM_SET_COMPARE(servo->htim, servo->channel, duty);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	2b08      	cmp	r3, #8
 8003d16:	d105      	bne.n	8003d24 <bldc_drive+0x46>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8003d22:	e004      	b.n	8003d2e <bldc_drive+0x50>
	__HAL_TIM_SET_COMPARE(servo->htim, servo->channel, duty);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
	...

08003d3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d42:	2300      	movs	r3, #0
 8003d44:	607b      	str	r3, [r7, #4]
 8003d46:	4b12      	ldr	r3, [pc, #72]	; (8003d90 <HAL_MspInit+0x54>)
 8003d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4a:	4a11      	ldr	r2, [pc, #68]	; (8003d90 <HAL_MspInit+0x54>)
 8003d4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d50:	6453      	str	r3, [r2, #68]	; 0x44
 8003d52:	4b0f      	ldr	r3, [pc, #60]	; (8003d90 <HAL_MspInit+0x54>)
 8003d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d5a:	607b      	str	r3, [r7, #4]
 8003d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d5e:	2300      	movs	r3, #0
 8003d60:	603b      	str	r3, [r7, #0]
 8003d62:	4b0b      	ldr	r3, [pc, #44]	; (8003d90 <HAL_MspInit+0x54>)
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	4a0a      	ldr	r2, [pc, #40]	; (8003d90 <HAL_MspInit+0x54>)
 8003d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d6e:	4b08      	ldr	r3, [pc, #32]	; (8003d90 <HAL_MspInit+0x54>)
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d76:	603b      	str	r3, [r7, #0]
 8003d78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	210f      	movs	r1, #15
 8003d7e:	f06f 0001 	mvn.w	r0, #1
 8003d82:	f000 fcf5 	bl	8004770 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d86:	bf00      	nop
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	40023800 	.word	0x40023800

08003d94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b08a      	sub	sp, #40	; 0x28
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d9c:	f107 0314 	add.w	r3, r7, #20
 8003da0:	2200      	movs	r2, #0
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	605a      	str	r2, [r3, #4]
 8003da6:	609a      	str	r2, [r3, #8]
 8003da8:	60da      	str	r2, [r3, #12]
 8003daa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a19      	ldr	r2, [pc, #100]	; (8003e18 <HAL_SPI_MspInit+0x84>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d12c      	bne.n	8003e10 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003db6:	2300      	movs	r3, #0
 8003db8:	613b      	str	r3, [r7, #16]
 8003dba:	4b18      	ldr	r3, [pc, #96]	; (8003e1c <HAL_SPI_MspInit+0x88>)
 8003dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dbe:	4a17      	ldr	r2, [pc, #92]	; (8003e1c <HAL_SPI_MspInit+0x88>)
 8003dc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8003dc6:	4b15      	ldr	r3, [pc, #84]	; (8003e1c <HAL_SPI_MspInit+0x88>)
 8003dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dce:	613b      	str	r3, [r7, #16]
 8003dd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	60fb      	str	r3, [r7, #12]
 8003dd6:	4b11      	ldr	r3, [pc, #68]	; (8003e1c <HAL_SPI_MspInit+0x88>)
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dda:	4a10      	ldr	r2, [pc, #64]	; (8003e1c <HAL_SPI_MspInit+0x88>)
 8003ddc:	f043 0320 	orr.w	r3, r3, #32
 8003de0:	6313      	str	r3, [r2, #48]	; 0x30
 8003de2:	4b0e      	ldr	r3, [pc, #56]	; (8003e1c <HAL_SPI_MspInit+0x88>)
 8003de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de6:	f003 0320 	and.w	r3, r3, #32
 8003dea:	60fb      	str	r3, [r7, #12]
 8003dec:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003dee:	f44f 7360 	mov.w	r3, #896	; 0x380
 8003df2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003df4:	2302      	movs	r3, #2
 8003df6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003e00:	2305      	movs	r3, #5
 8003e02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003e04:	f107 0314 	add.w	r3, r7, #20
 8003e08:	4619      	mov	r1, r3
 8003e0a:	4805      	ldr	r0, [pc, #20]	; (8003e20 <HAL_SPI_MspInit+0x8c>)
 8003e0c:	f000 fd6c 	bl	80048e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8003e10:	bf00      	nop
 8003e12:	3728      	adds	r7, #40	; 0x28
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	40015000 	.word	0x40015000
 8003e1c:	40023800 	.word	0x40023800
 8003e20:	40021400 	.word	0x40021400

08003e24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b08b      	sub	sp, #44	; 0x2c
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a47      	ldr	r2, [pc, #284]	; (8003f50 <HAL_TIM_Base_MspInit+0x12c>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d10e      	bne.n	8003e54 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003e36:	2300      	movs	r3, #0
 8003e38:	627b      	str	r3, [r7, #36]	; 0x24
 8003e3a:	4b46      	ldr	r3, [pc, #280]	; (8003f54 <HAL_TIM_Base_MspInit+0x130>)
 8003e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3e:	4a45      	ldr	r2, [pc, #276]	; (8003f54 <HAL_TIM_Base_MspInit+0x130>)
 8003e40:	f043 0301 	orr.w	r3, r3, #1
 8003e44:	6453      	str	r3, [r2, #68]	; 0x44
 8003e46:	4b43      	ldr	r3, [pc, #268]	; (8003f54 <HAL_TIM_Base_MspInit+0x130>)
 8003e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8003e52:	e076      	b.n	8003f42 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM3)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a3f      	ldr	r2, [pc, #252]	; (8003f58 <HAL_TIM_Base_MspInit+0x134>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d10e      	bne.n	8003e7c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e5e:	2300      	movs	r3, #0
 8003e60:	623b      	str	r3, [r7, #32]
 8003e62:	4b3c      	ldr	r3, [pc, #240]	; (8003f54 <HAL_TIM_Base_MspInit+0x130>)
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	4a3b      	ldr	r2, [pc, #236]	; (8003f54 <HAL_TIM_Base_MspInit+0x130>)
 8003e68:	f043 0302 	orr.w	r3, r3, #2
 8003e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e6e:	4b39      	ldr	r3, [pc, #228]	; (8003f54 <HAL_TIM_Base_MspInit+0x130>)
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	623b      	str	r3, [r7, #32]
 8003e78:	6a3b      	ldr	r3, [r7, #32]
}
 8003e7a:	e062      	b.n	8003f42 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM4)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a36      	ldr	r2, [pc, #216]	; (8003f5c <HAL_TIM_Base_MspInit+0x138>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d10e      	bne.n	8003ea4 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003e86:	2300      	movs	r3, #0
 8003e88:	61fb      	str	r3, [r7, #28]
 8003e8a:	4b32      	ldr	r3, [pc, #200]	; (8003f54 <HAL_TIM_Base_MspInit+0x130>)
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	4a31      	ldr	r2, [pc, #196]	; (8003f54 <HAL_TIM_Base_MspInit+0x130>)
 8003e90:	f043 0304 	orr.w	r3, r3, #4
 8003e94:	6413      	str	r3, [r2, #64]	; 0x40
 8003e96:	4b2f      	ldr	r3, [pc, #188]	; (8003f54 <HAL_TIM_Base_MspInit+0x130>)
 8003e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9a:	f003 0304 	and.w	r3, r3, #4
 8003e9e:	61fb      	str	r3, [r7, #28]
 8003ea0:	69fb      	ldr	r3, [r7, #28]
}
 8003ea2:	e04e      	b.n	8003f42 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM5)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a2d      	ldr	r2, [pc, #180]	; (8003f60 <HAL_TIM_Base_MspInit+0x13c>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d10e      	bne.n	8003ecc <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003eae:	2300      	movs	r3, #0
 8003eb0:	61bb      	str	r3, [r7, #24]
 8003eb2:	4b28      	ldr	r3, [pc, #160]	; (8003f54 <HAL_TIM_Base_MspInit+0x130>)
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	4a27      	ldr	r2, [pc, #156]	; (8003f54 <HAL_TIM_Base_MspInit+0x130>)
 8003eb8:	f043 0308 	orr.w	r3, r3, #8
 8003ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8003ebe:	4b25      	ldr	r3, [pc, #148]	; (8003f54 <HAL_TIM_Base_MspInit+0x130>)
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec2:	f003 0308 	and.w	r3, r3, #8
 8003ec6:	61bb      	str	r3, [r7, #24]
 8003ec8:	69bb      	ldr	r3, [r7, #24]
}
 8003eca:	e03a      	b.n	8003f42 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM8)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a24      	ldr	r2, [pc, #144]	; (8003f64 <HAL_TIM_Base_MspInit+0x140>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d10e      	bne.n	8003ef4 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	617b      	str	r3, [r7, #20]
 8003eda:	4b1e      	ldr	r3, [pc, #120]	; (8003f54 <HAL_TIM_Base_MspInit+0x130>)
 8003edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ede:	4a1d      	ldr	r2, [pc, #116]	; (8003f54 <HAL_TIM_Base_MspInit+0x130>)
 8003ee0:	f043 0302 	orr.w	r3, r3, #2
 8003ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ee6:	4b1b      	ldr	r3, [pc, #108]	; (8003f54 <HAL_TIM_Base_MspInit+0x130>)
 8003ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	617b      	str	r3, [r7, #20]
 8003ef0:	697b      	ldr	r3, [r7, #20]
}
 8003ef2:	e026      	b.n	8003f42 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM9)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a1b      	ldr	r2, [pc, #108]	; (8003f68 <HAL_TIM_Base_MspInit+0x144>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d10e      	bne.n	8003f1c <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003efe:	2300      	movs	r3, #0
 8003f00:	613b      	str	r3, [r7, #16]
 8003f02:	4b14      	ldr	r3, [pc, #80]	; (8003f54 <HAL_TIM_Base_MspInit+0x130>)
 8003f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f06:	4a13      	ldr	r2, [pc, #76]	; (8003f54 <HAL_TIM_Base_MspInit+0x130>)
 8003f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f0e:	4b11      	ldr	r3, [pc, #68]	; (8003f54 <HAL_TIM_Base_MspInit+0x130>)
 8003f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f16:	613b      	str	r3, [r7, #16]
 8003f18:	693b      	ldr	r3, [r7, #16]
}
 8003f1a:	e012      	b.n	8003f42 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM12)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a12      	ldr	r2, [pc, #72]	; (8003f6c <HAL_TIM_Base_MspInit+0x148>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d10d      	bne.n	8003f42 <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003f26:	2300      	movs	r3, #0
 8003f28:	60fb      	str	r3, [r7, #12]
 8003f2a:	4b0a      	ldr	r3, [pc, #40]	; (8003f54 <HAL_TIM_Base_MspInit+0x130>)
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	4a09      	ldr	r2, [pc, #36]	; (8003f54 <HAL_TIM_Base_MspInit+0x130>)
 8003f30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f34:	6413      	str	r3, [r2, #64]	; 0x40
 8003f36:	4b07      	ldr	r3, [pc, #28]	; (8003f54 <HAL_TIM_Base_MspInit+0x130>)
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f3e:	60fb      	str	r3, [r7, #12]
 8003f40:	68fb      	ldr	r3, [r7, #12]
}
 8003f42:	bf00      	nop
 8003f44:	372c      	adds	r7, #44	; 0x2c
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	40010000 	.word	0x40010000
 8003f54:	40023800 	.word	0x40023800
 8003f58:	40000400 	.word	0x40000400
 8003f5c:	40000800 	.word	0x40000800
 8003f60:	40000c00 	.word	0x40000c00
 8003f64:	40010400 	.word	0x40010400
 8003f68:	40014000 	.word	0x40014000
 8003f6c:	40001800 	.word	0x40001800

08003f70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b090      	sub	sp, #64	; 0x40
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	601a      	str	r2, [r3, #0]
 8003f80:	605a      	str	r2, [r3, #4]
 8003f82:	609a      	str	r2, [r3, #8]
 8003f84:	60da      	str	r2, [r3, #12]
 8003f86:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a9e      	ldr	r2, [pc, #632]	; (8004208 <HAL_TIM_MspPostInit+0x298>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d11f      	bne.n	8003fd2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f92:	2300      	movs	r3, #0
 8003f94:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f96:	4b9d      	ldr	r3, [pc, #628]	; (800420c <HAL_TIM_MspPostInit+0x29c>)
 8003f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9a:	4a9c      	ldr	r2, [pc, #624]	; (800420c <HAL_TIM_MspPostInit+0x29c>)
 8003f9c:	f043 0310 	orr.w	r3, r3, #16
 8003fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8003fa2:	4b9a      	ldr	r3, [pc, #616]	; (800420c <HAL_TIM_MspPostInit+0x29c>)
 8003fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa6:	f003 0310 	and.w	r3, r3, #16
 8003faa:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LF_CH1_Pin|LF_CH2_Pin|LB_CH1_Pin|LB_CH2_Pin;
 8003fae:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8003fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003fc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fc8:	4619      	mov	r1, r3
 8003fca:	4891      	ldr	r0, [pc, #580]	; (8004210 <HAL_TIM_MspPostInit+0x2a0>)
 8003fcc:	f000 fc8c 	bl	80048e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003fd0:	e115      	b.n	80041fe <HAL_TIM_MspPostInit+0x28e>
  else if(htim->Instance==TIM3)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a8f      	ldr	r2, [pc, #572]	; (8004214 <HAL_TIM_MspPostInit+0x2a4>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d15b      	bne.n	8004094 <HAL_TIM_MspPostInit+0x124>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fdc:	2300      	movs	r3, #0
 8003fde:	627b      	str	r3, [r7, #36]	; 0x24
 8003fe0:	4b8a      	ldr	r3, [pc, #552]	; (800420c <HAL_TIM_MspPostInit+0x29c>)
 8003fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe4:	4a89      	ldr	r2, [pc, #548]	; (800420c <HAL_TIM_MspPostInit+0x29c>)
 8003fe6:	f043 0301 	orr.w	r3, r3, #1
 8003fea:	6313      	str	r3, [r2, #48]	; 0x30
 8003fec:	4b87      	ldr	r3, [pc, #540]	; (800420c <HAL_TIM_MspPostInit+0x29c>)
 8003fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	623b      	str	r3, [r7, #32]
 8003ffc:	4b83      	ldr	r3, [pc, #524]	; (800420c <HAL_TIM_MspPostInit+0x29c>)
 8003ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004000:	4a82      	ldr	r2, [pc, #520]	; (800420c <HAL_TIM_MspPostInit+0x29c>)
 8004002:	f043 0302 	orr.w	r3, r3, #2
 8004006:	6313      	str	r3, [r2, #48]	; 0x30
 8004008:	4b80      	ldr	r3, [pc, #512]	; (800420c <HAL_TIM_MspPostInit+0x29c>)
 800400a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	623b      	str	r3, [r7, #32]
 8004012:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004014:	2300      	movs	r3, #0
 8004016:	61fb      	str	r3, [r7, #28]
 8004018:	4b7c      	ldr	r3, [pc, #496]	; (800420c <HAL_TIM_MspPostInit+0x29c>)
 800401a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401c:	4a7b      	ldr	r2, [pc, #492]	; (800420c <HAL_TIM_MspPostInit+0x29c>)
 800401e:	f043 0304 	orr.w	r3, r3, #4
 8004022:	6313      	str	r3, [r2, #48]	; 0x30
 8004024:	4b79      	ldr	r3, [pc, #484]	; (800420c <HAL_TIM_MspPostInit+0x29c>)
 8004026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004028:	f003 0304 	and.w	r3, r3, #4
 800402c:	61fb      	str	r3, [r7, #28]
 800402e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = RF_CH1_Pin|RF_CH2_Pin;
 8004030:	23c0      	movs	r3, #192	; 0xc0
 8004032:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004034:	2302      	movs	r3, #2
 8004036:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004038:	2300      	movs	r3, #0
 800403a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800403c:	2300      	movs	r3, #0
 800403e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004040:	2302      	movs	r3, #2
 8004042:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004044:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004048:	4619      	mov	r1, r3
 800404a:	4873      	ldr	r0, [pc, #460]	; (8004218 <HAL_TIM_MspPostInit+0x2a8>)
 800404c:	f000 fc4c 	bl	80048e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RB_CH2_Pin;
 8004050:	2302      	movs	r3, #2
 8004052:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004054:	2302      	movs	r3, #2
 8004056:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004058:	2300      	movs	r3, #0
 800405a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800405c:	2300      	movs	r3, #0
 800405e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004060:	2302      	movs	r3, #2
 8004062:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(RB_CH2_GPIO_Port, &GPIO_InitStruct);
 8004064:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004068:	4619      	mov	r1, r3
 800406a:	486c      	ldr	r0, [pc, #432]	; (800421c <HAL_TIM_MspPostInit+0x2ac>)
 800406c:	f000 fc3c 	bl	80048e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RB_CH1_Pin;
 8004070:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004074:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004076:	2302      	movs	r3, #2
 8004078:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800407a:	2300      	movs	r3, #0
 800407c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800407e:	2300      	movs	r3, #0
 8004080:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004082:	2302      	movs	r3, #2
 8004084:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(RB_CH1_GPIO_Port, &GPIO_InitStruct);
 8004086:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800408a:	4619      	mov	r1, r3
 800408c:	4864      	ldr	r0, [pc, #400]	; (8004220 <HAL_TIM_MspPostInit+0x2b0>)
 800408e:	f000 fc2b 	bl	80048e8 <HAL_GPIO_Init>
}
 8004092:	e0b4      	b.n	80041fe <HAL_TIM_MspPostInit+0x28e>
  else if(htim->Instance==TIM4)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a62      	ldr	r2, [pc, #392]	; (8004224 <HAL_TIM_MspPostInit+0x2b4>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d11f      	bne.n	80040de <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800409e:	2300      	movs	r3, #0
 80040a0:	61bb      	str	r3, [r7, #24]
 80040a2:	4b5a      	ldr	r3, [pc, #360]	; (800420c <HAL_TIM_MspPostInit+0x29c>)
 80040a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a6:	4a59      	ldr	r2, [pc, #356]	; (800420c <HAL_TIM_MspPostInit+0x29c>)
 80040a8:	f043 0308 	orr.w	r3, r3, #8
 80040ac:	6313      	str	r3, [r2, #48]	; 0x30
 80040ae:	4b57      	ldr	r3, [pc, #348]	; (800420c <HAL_TIM_MspPostInit+0x29c>)
 80040b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b2:	f003 0308 	and.w	r3, r3, #8
 80040b6:	61bb      	str	r3, [r7, #24]
 80040b8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = M_PELONTAR_CH1_Pin|M_PELONTAR_CH2_Pin|M_BOLA_CH1_Pin|M_BOLA_CH2_Pin;
 80040ba:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80040be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040c0:	2302      	movs	r3, #2
 80040c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c4:	2300      	movs	r3, #0
 80040c6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040c8:	2300      	movs	r3, #0
 80040ca:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80040cc:	2302      	movs	r3, #2
 80040ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040d4:	4619      	mov	r1, r3
 80040d6:	4854      	ldr	r0, [pc, #336]	; (8004228 <HAL_TIM_MspPostInit+0x2b8>)
 80040d8:	f000 fc06 	bl	80048e8 <HAL_GPIO_Init>
}
 80040dc:	e08f      	b.n	80041fe <HAL_TIM_MspPostInit+0x28e>
  else if(htim->Instance==TIM5)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a52      	ldr	r2, [pc, #328]	; (800422c <HAL_TIM_MspPostInit+0x2bc>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d11e      	bne.n	8004126 <HAL_TIM_MspPostInit+0x1b6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040e8:	2300      	movs	r3, #0
 80040ea:	617b      	str	r3, [r7, #20]
 80040ec:	4b47      	ldr	r3, [pc, #284]	; (800420c <HAL_TIM_MspPostInit+0x29c>)
 80040ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f0:	4a46      	ldr	r2, [pc, #280]	; (800420c <HAL_TIM_MspPostInit+0x29c>)
 80040f2:	f043 0301 	orr.w	r3, r3, #1
 80040f6:	6313      	str	r3, [r2, #48]	; 0x30
 80040f8:	4b44      	ldr	r3, [pc, #272]	; (800420c <HAL_TIM_MspPostInit+0x29c>)
 80040fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	617b      	str	r3, [r7, #20]
 8004102:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = M_EXDL_CH1_Pin|M_EXDL_CH2_Pin;
 8004104:	2303      	movs	r3, #3
 8004106:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004108:	2302      	movs	r3, #2
 800410a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800410c:	2300      	movs	r3, #0
 800410e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004110:	2300      	movs	r3, #0
 8004112:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004114:	2302      	movs	r3, #2
 8004116:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004118:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800411c:	4619      	mov	r1, r3
 800411e:	483e      	ldr	r0, [pc, #248]	; (8004218 <HAL_TIM_MspPostInit+0x2a8>)
 8004120:	f000 fbe2 	bl	80048e8 <HAL_GPIO_Init>
}
 8004124:	e06b      	b.n	80041fe <HAL_TIM_MspPostInit+0x28e>
  else if(htim->Instance==TIM8)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a41      	ldr	r2, [pc, #260]	; (8004230 <HAL_TIM_MspPostInit+0x2c0>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d11e      	bne.n	800416e <HAL_TIM_MspPostInit+0x1fe>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004130:	2300      	movs	r3, #0
 8004132:	613b      	str	r3, [r7, #16]
 8004134:	4b35      	ldr	r3, [pc, #212]	; (800420c <HAL_TIM_MspPostInit+0x29c>)
 8004136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004138:	4a34      	ldr	r2, [pc, #208]	; (800420c <HAL_TIM_MspPostInit+0x29c>)
 800413a:	f043 0304 	orr.w	r3, r3, #4
 800413e:	6313      	str	r3, [r2, #48]	; 0x30
 8004140:	4b32      	ldr	r3, [pc, #200]	; (800420c <HAL_TIM_MspPostInit+0x29c>)
 8004142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004144:	f003 0304 	and.w	r3, r3, #4
 8004148:	613b      	str	r3, [r7, #16]
 800414a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = M_EXDR_CH1_Pin|M_EXDR_CH2_Pin;
 800414c:	23c0      	movs	r3, #192	; 0xc0
 800414e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004150:	2302      	movs	r3, #2
 8004152:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004154:	2300      	movs	r3, #0
 8004156:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004158:	2300      	movs	r3, #0
 800415a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800415c:	2303      	movs	r3, #3
 800415e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004160:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004164:	4619      	mov	r1, r3
 8004166:	482e      	ldr	r0, [pc, #184]	; (8004220 <HAL_TIM_MspPostInit+0x2b0>)
 8004168:	f000 fbbe 	bl	80048e8 <HAL_GPIO_Init>
}
 800416c:	e047      	b.n	80041fe <HAL_TIM_MspPostInit+0x28e>
  else if(htim->Instance==TIM9)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a30      	ldr	r2, [pc, #192]	; (8004234 <HAL_TIM_MspPostInit+0x2c4>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d11e      	bne.n	80041b6 <HAL_TIM_MspPostInit+0x246>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004178:	2300      	movs	r3, #0
 800417a:	60fb      	str	r3, [r7, #12]
 800417c:	4b23      	ldr	r3, [pc, #140]	; (800420c <HAL_TIM_MspPostInit+0x29c>)
 800417e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004180:	4a22      	ldr	r2, [pc, #136]	; (800420c <HAL_TIM_MspPostInit+0x29c>)
 8004182:	f043 0310 	orr.w	r3, r3, #16
 8004186:	6313      	str	r3, [r2, #48]	; 0x30
 8004188:	4b20      	ldr	r3, [pc, #128]	; (800420c <HAL_TIM_MspPostInit+0x29c>)
 800418a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418c:	f003 0310 	and.w	r3, r3, #16
 8004190:	60fb      	str	r3, [r7, #12]
 8004192:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M_PADI_CH1_Pin|M_PADI_CH2_Pin;
 8004194:	2360      	movs	r3, #96	; 0x60
 8004196:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004198:	2302      	movs	r3, #2
 800419a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800419c:	2300      	movs	r3, #0
 800419e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041a0:	2300      	movs	r3, #0
 80041a2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80041a4:	2303      	movs	r3, #3
 80041a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80041a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041ac:	4619      	mov	r1, r3
 80041ae:	4818      	ldr	r0, [pc, #96]	; (8004210 <HAL_TIM_MspPostInit+0x2a0>)
 80041b0:	f000 fb9a 	bl	80048e8 <HAL_GPIO_Init>
}
 80041b4:	e023      	b.n	80041fe <HAL_TIM_MspPostInit+0x28e>
  else if(htim->Instance==TIM12)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a1f      	ldr	r2, [pc, #124]	; (8004238 <HAL_TIM_MspPostInit+0x2c8>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d11e      	bne.n	80041fe <HAL_TIM_MspPostInit+0x28e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041c0:	2300      	movs	r3, #0
 80041c2:	60bb      	str	r3, [r7, #8]
 80041c4:	4b11      	ldr	r3, [pc, #68]	; (800420c <HAL_TIM_MspPostInit+0x29c>)
 80041c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c8:	4a10      	ldr	r2, [pc, #64]	; (800420c <HAL_TIM_MspPostInit+0x29c>)
 80041ca:	f043 0302 	orr.w	r3, r3, #2
 80041ce:	6313      	str	r3, [r2, #48]	; 0x30
 80041d0:	4b0e      	ldr	r3, [pc, #56]	; (800420c <HAL_TIM_MspPostInit+0x29c>)
 80041d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	60bb      	str	r3, [r7, #8]
 80041da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ESC1_Pin|ESC2_Pin;
 80041dc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80041e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041e2:	2302      	movs	r3, #2
 80041e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e6:	2300      	movs	r3, #0
 80041e8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041ea:	2300      	movs	r3, #0
 80041ec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80041ee:	2309      	movs	r3, #9
 80041f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041f6:	4619      	mov	r1, r3
 80041f8:	4808      	ldr	r0, [pc, #32]	; (800421c <HAL_TIM_MspPostInit+0x2ac>)
 80041fa:	f000 fb75 	bl	80048e8 <HAL_GPIO_Init>
}
 80041fe:	bf00      	nop
 8004200:	3740      	adds	r7, #64	; 0x40
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	40010000 	.word	0x40010000
 800420c:	40023800 	.word	0x40023800
 8004210:	40021000 	.word	0x40021000
 8004214:	40000400 	.word	0x40000400
 8004218:	40020000 	.word	0x40020000
 800421c:	40020400 	.word	0x40020400
 8004220:	40020800 	.word	0x40020800
 8004224:	40000800 	.word	0x40000800
 8004228:	40020c00 	.word	0x40020c00
 800422c:	40000c00 	.word	0x40000c00
 8004230:	40010400 	.word	0x40010400
 8004234:	40014000 	.word	0x40014000
 8004238:	40001800 	.word	0x40001800

0800423c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b08a      	sub	sp, #40	; 0x28
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004244:	f107 0314 	add.w	r3, r7, #20
 8004248:	2200      	movs	r2, #0
 800424a:	601a      	str	r2, [r3, #0]
 800424c:	605a      	str	r2, [r3, #4]
 800424e:	609a      	str	r2, [r3, #8]
 8004250:	60da      	str	r2, [r3, #12]
 8004252:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a1d      	ldr	r2, [pc, #116]	; (80042d0 <HAL_UART_MspInit+0x94>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d134      	bne.n	80042c8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800425e:	2300      	movs	r3, #0
 8004260:	613b      	str	r3, [r7, #16]
 8004262:	4b1c      	ldr	r3, [pc, #112]	; (80042d4 <HAL_UART_MspInit+0x98>)
 8004264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004266:	4a1b      	ldr	r2, [pc, #108]	; (80042d4 <HAL_UART_MspInit+0x98>)
 8004268:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800426c:	6413      	str	r3, [r2, #64]	; 0x40
 800426e:	4b19      	ldr	r3, [pc, #100]	; (80042d4 <HAL_UART_MspInit+0x98>)
 8004270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004272:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004276:	613b      	str	r3, [r7, #16]
 8004278:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800427a:	2300      	movs	r3, #0
 800427c:	60fb      	str	r3, [r7, #12]
 800427e:	4b15      	ldr	r3, [pc, #84]	; (80042d4 <HAL_UART_MspInit+0x98>)
 8004280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004282:	4a14      	ldr	r2, [pc, #80]	; (80042d4 <HAL_UART_MspInit+0x98>)
 8004284:	f043 0308 	orr.w	r3, r3, #8
 8004288:	6313      	str	r3, [r2, #48]	; 0x30
 800428a:	4b12      	ldr	r3, [pc, #72]	; (80042d4 <HAL_UART_MspInit+0x98>)
 800428c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	60fb      	str	r3, [r7, #12]
 8004294:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8004296:	f44f 7340 	mov.w	r3, #768	; 0x300
 800429a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800429c:	2302      	movs	r3, #2
 800429e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042a0:	2300      	movs	r3, #0
 80042a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042a4:	2303      	movs	r3, #3
 80042a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80042a8:	2307      	movs	r3, #7
 80042aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80042ac:	f107 0314 	add.w	r3, r7, #20
 80042b0:	4619      	mov	r1, r3
 80042b2:	4809      	ldr	r0, [pc, #36]	; (80042d8 <HAL_UART_MspInit+0x9c>)
 80042b4:	f000 fb18 	bl	80048e8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80042b8:	2200      	movs	r2, #0
 80042ba:	2105      	movs	r1, #5
 80042bc:	2027      	movs	r0, #39	; 0x27
 80042be:	f000 fa57 	bl	8004770 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80042c2:	2027      	movs	r0, #39	; 0x27
 80042c4:	f000 fa70 	bl	80047a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80042c8:	bf00      	nop
 80042ca:	3728      	adds	r7, #40	; 0x28
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	40004800 	.word	0x40004800
 80042d4:	40023800 	.word	0x40023800
 80042d8:	40020c00 	.word	0x40020c00

080042dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b08e      	sub	sp, #56	; 0x38
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80042e4:	2300      	movs	r3, #0
 80042e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80042e8:	2300      	movs	r3, #0
 80042ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80042ec:	2300      	movs	r3, #0
 80042ee:	60fb      	str	r3, [r7, #12]
 80042f0:	4b33      	ldr	r3, [pc, #204]	; (80043c0 <HAL_InitTick+0xe4>)
 80042f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f4:	4a32      	ldr	r2, [pc, #200]	; (80043c0 <HAL_InitTick+0xe4>)
 80042f6:	f043 0320 	orr.w	r3, r3, #32
 80042fa:	6413      	str	r3, [r2, #64]	; 0x40
 80042fc:	4b30      	ldr	r3, [pc, #192]	; (80043c0 <HAL_InitTick+0xe4>)
 80042fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004300:	f003 0320 	and.w	r3, r3, #32
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004308:	f107 0210 	add.w	r2, r7, #16
 800430c:	f107 0314 	add.w	r3, r7, #20
 8004310:	4611      	mov	r1, r2
 8004312:	4618      	mov	r0, r3
 8004314:	f001 f9e0 	bl	80056d8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004318:	6a3b      	ldr	r3, [r7, #32]
 800431a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800431c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800431e:	2b00      	cmp	r3, #0
 8004320:	d103      	bne.n	800432a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004322:	f001 f9b1 	bl	8005688 <HAL_RCC_GetPCLK1Freq>
 8004326:	6378      	str	r0, [r7, #52]	; 0x34
 8004328:	e004      	b.n	8004334 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800432a:	f001 f9ad 	bl	8005688 <HAL_RCC_GetPCLK1Freq>
 800432e:	4603      	mov	r3, r0
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004336:	4a23      	ldr	r2, [pc, #140]	; (80043c4 <HAL_InitTick+0xe8>)
 8004338:	fba2 2303 	umull	r2, r3, r2, r3
 800433c:	0c9b      	lsrs	r3, r3, #18
 800433e:	3b01      	subs	r3, #1
 8004340:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8004342:	4b21      	ldr	r3, [pc, #132]	; (80043c8 <HAL_InitTick+0xec>)
 8004344:	4a21      	ldr	r2, [pc, #132]	; (80043cc <HAL_InitTick+0xf0>)
 8004346:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8004348:	4b1f      	ldr	r3, [pc, #124]	; (80043c8 <HAL_InitTick+0xec>)
 800434a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800434e:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8004350:	4a1d      	ldr	r2, [pc, #116]	; (80043c8 <HAL_InitTick+0xec>)
 8004352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004354:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8004356:	4b1c      	ldr	r3, [pc, #112]	; (80043c8 <HAL_InitTick+0xec>)
 8004358:	2200      	movs	r2, #0
 800435a:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800435c:	4b1a      	ldr	r3, [pc, #104]	; (80043c8 <HAL_InitTick+0xec>)
 800435e:	2200      	movs	r2, #0
 8004360:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004362:	4b19      	ldr	r3, [pc, #100]	; (80043c8 <HAL_InitTick+0xec>)
 8004364:	2200      	movs	r2, #0
 8004366:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8004368:	4817      	ldr	r0, [pc, #92]	; (80043c8 <HAL_InitTick+0xec>)
 800436a:	f001 ff9d 	bl	80062a8 <HAL_TIM_Base_Init>
 800436e:	4603      	mov	r3, r0
 8004370:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8004374:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004378:	2b00      	cmp	r3, #0
 800437a:	d11b      	bne.n	80043b4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 800437c:	4812      	ldr	r0, [pc, #72]	; (80043c8 <HAL_InitTick+0xec>)
 800437e:	f001 ffe3 	bl	8006348 <HAL_TIM_Base_Start_IT>
 8004382:	4603      	mov	r3, r0
 8004384:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8004388:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800438c:	2b00      	cmp	r3, #0
 800438e:	d111      	bne.n	80043b4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004390:	2037      	movs	r0, #55	; 0x37
 8004392:	f000 fa09 	bl	80047a8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2b0f      	cmp	r3, #15
 800439a:	d808      	bhi.n	80043ae <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 800439c:	2200      	movs	r2, #0
 800439e:	6879      	ldr	r1, [r7, #4]
 80043a0:	2037      	movs	r0, #55	; 0x37
 80043a2:	f000 f9e5 	bl	8004770 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80043a6:	4a0a      	ldr	r2, [pc, #40]	; (80043d0 <HAL_InitTick+0xf4>)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6013      	str	r3, [r2, #0]
 80043ac:	e002      	b.n	80043b4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80043b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3738      	adds	r7, #56	; 0x38
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	40023800 	.word	0x40023800
 80043c4:	431bde83 	.word	0x431bde83
 80043c8:	200007f8 	.word	0x200007f8
 80043cc:	40001400 	.word	0x40001400
 80043d0:	20000124 	.word	0x20000124

080043d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80043d4:	b480      	push	{r7}
 80043d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80043d8:	e7fe      	b.n	80043d8 <NMI_Handler+0x4>

080043da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80043da:	b480      	push	{r7}
 80043dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80043de:	e7fe      	b.n	80043de <HardFault_Handler+0x4>

080043e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80043e0:	b480      	push	{r7}
 80043e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80043e4:	e7fe      	b.n	80043e4 <MemManage_Handler+0x4>

080043e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80043e6:	b480      	push	{r7}
 80043e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80043ea:	e7fe      	b.n	80043ea <BusFault_Handler+0x4>

080043ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80043f0:	e7fe      	b.n	80043f0 <UsageFault_Handler+0x4>

080043f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80043f2:	b480      	push	{r7}
 80043f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80043f6:	bf00      	nop
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LS_2_Pin);
 8004404:	2001      	movs	r0, #1
 8004406:	f000 fc67 	bl	8004cd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800440a:	bf00      	nop
 800440c:	bd80      	pop	{r7, pc}

0800440e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800440e:	b580      	push	{r7, lr}
 8004410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC4_A_Pin);
 8004412:	2002      	movs	r0, #2
 8004414:	f000 fc60 	bl	8004cd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004418:	bf00      	nop
 800441a:	bd80      	pop	{r7, pc}

0800441c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC4_B_Pin);
 8004420:	2004      	movs	r0, #4
 8004422:	f000 fc59 	bl	8004cd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8004426:	bf00      	nop
 8004428:	bd80      	pop	{r7, pc}

0800442a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC3_B_Pin);
 800442e:	2008      	movs	r0, #8
 8004430:	f000 fc52 	bl	8004cd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004434:	bf00      	nop
 8004436:	bd80      	pop	{r7, pc}

08004438 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LS_5_Pin);
 800443c:	2010      	movs	r0, #16
 800443e:	f000 fc4b 	bl	8004cd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004442:	bf00      	nop
 8004444:	bd80      	pop	{r7, pc}

08004446 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LS_3_Pin);
 800444a:	2020      	movs	r0, #32
 800444c:	f000 fc44 	bl	8004cd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LS_1_Pin);
 8004450:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004454:	f000 fc40 	bl	8004cd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004458:	bf00      	nop
 800445a:	bd80      	pop	{r7, pc}

0800445c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004460:	4802      	ldr	r0, [pc, #8]	; (800446c <USART3_IRQHandler+0x10>)
 8004462:	f002 fffd 	bl	8007460 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004466:	bf00      	nop
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	200006b0 	.word	0x200006b0

08004470 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LS_4_Pin);
 8004474:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004478:	f000 fc2e 	bl	8004cd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC1_A_Pin);
 800447c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004480:	f000 fc2a 	bl	8004cd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC2_A_Pin);
 8004484:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004488:	f000 fc26 	bl	8004cd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC3_A_Pin);
 800448c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004490:	f000 fc22 	bl	8004cd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC1_B_Pin);
 8004494:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004498:	f000 fc1e 	bl	8004cd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC2_B_Pin);
 800449c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80044a0:	f000 fc1a 	bl	8004cd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80044a4:	bf00      	nop
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80044ac:	4802      	ldr	r0, [pc, #8]	; (80044b8 <TIM7_IRQHandler+0x10>)
 80044ae:	f002 f8dd 	bl	800666c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80044b2:	bf00      	nop
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	200007f8 	.word	0x200007f8

080044bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80044bc:	b480      	push	{r7}
 80044be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80044c0:	4b06      	ldr	r3, [pc, #24]	; (80044dc <SystemInit+0x20>)
 80044c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c6:	4a05      	ldr	r2, [pc, #20]	; (80044dc <SystemInit+0x20>)
 80044c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80044cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80044d0:	bf00      	nop
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	e000ed00 	.word	0xe000ed00

080044e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80044e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004518 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80044e4:	480d      	ldr	r0, [pc, #52]	; (800451c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80044e6:	490e      	ldr	r1, [pc, #56]	; (8004520 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80044e8:	4a0e      	ldr	r2, [pc, #56]	; (8004524 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80044ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044ec:	e002      	b.n	80044f4 <LoopCopyDataInit>

080044ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044f2:	3304      	adds	r3, #4

080044f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044f8:	d3f9      	bcc.n	80044ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044fa:	4a0b      	ldr	r2, [pc, #44]	; (8004528 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80044fc:	4c0b      	ldr	r4, [pc, #44]	; (800452c <LoopFillZerobss+0x26>)
  movs r3, #0
 80044fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004500:	e001      	b.n	8004506 <LoopFillZerobss>

08004502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004504:	3204      	adds	r2, #4

08004506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004508:	d3fb      	bcc.n	8004502 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800450a:	f7ff ffd7 	bl	80044bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800450e:	f005 f943 	bl	8009798 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004512:	f7fe f8d1 	bl	80026b8 <main>
  bx  lr    
 8004516:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004518:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800451c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004520:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8004524:	08009958 	.word	0x08009958
  ldr r2, =_sbss
 8004528:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 800452c:	200046d8 	.word	0x200046d8

08004530 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004530:	e7fe      	b.n	8004530 <ADC_IRQHandler>
	...

08004534 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004538:	4b0e      	ldr	r3, [pc, #56]	; (8004574 <HAL_Init+0x40>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a0d      	ldr	r2, [pc, #52]	; (8004574 <HAL_Init+0x40>)
 800453e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004542:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004544:	4b0b      	ldr	r3, [pc, #44]	; (8004574 <HAL_Init+0x40>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a0a      	ldr	r2, [pc, #40]	; (8004574 <HAL_Init+0x40>)
 800454a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800454e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004550:	4b08      	ldr	r3, [pc, #32]	; (8004574 <HAL_Init+0x40>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a07      	ldr	r2, [pc, #28]	; (8004574 <HAL_Init+0x40>)
 8004556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800455a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800455c:	2003      	movs	r0, #3
 800455e:	f000 f8fc 	bl	800475a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004562:	200f      	movs	r0, #15
 8004564:	f7ff feba 	bl	80042dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004568:	f7ff fbe8 	bl	8003d3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	40023c00 	.word	0x40023c00

08004578 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004578:	b480      	push	{r7}
 800457a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800457c:	4b06      	ldr	r3, [pc, #24]	; (8004598 <HAL_IncTick+0x20>)
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	461a      	mov	r2, r3
 8004582:	4b06      	ldr	r3, [pc, #24]	; (800459c <HAL_IncTick+0x24>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4413      	add	r3, r2
 8004588:	4a04      	ldr	r2, [pc, #16]	; (800459c <HAL_IncTick+0x24>)
 800458a:	6013      	str	r3, [r2, #0]
}
 800458c:	bf00      	nop
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	20000128 	.word	0x20000128
 800459c:	20000840 	.word	0x20000840

080045a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045a0:	b480      	push	{r7}
 80045a2:	af00      	add	r7, sp, #0
  return uwTick;
 80045a4:	4b03      	ldr	r3, [pc, #12]	; (80045b4 <HAL_GetTick+0x14>)
 80045a6:	681b      	ldr	r3, [r3, #0]
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	20000840 	.word	0x20000840

080045b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045c0:	f7ff ffee 	bl	80045a0 <HAL_GetTick>
 80045c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d0:	d005      	beq.n	80045de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80045d2:	4b0a      	ldr	r3, [pc, #40]	; (80045fc <HAL_Delay+0x44>)
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	461a      	mov	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	4413      	add	r3, r2
 80045dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80045de:	bf00      	nop
 80045e0:	f7ff ffde 	bl	80045a0 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d8f7      	bhi.n	80045e0 <HAL_Delay+0x28>
  {
  }
}
 80045f0:	bf00      	nop
 80045f2:	bf00      	nop
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	20000128 	.word	0x20000128

08004600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f003 0307 	and.w	r3, r3, #7
 800460e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004610:	4b0c      	ldr	r3, [pc, #48]	; (8004644 <__NVIC_SetPriorityGrouping+0x44>)
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004616:	68ba      	ldr	r2, [r7, #8]
 8004618:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800461c:	4013      	ands	r3, r2
 800461e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004628:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800462c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004632:	4a04      	ldr	r2, [pc, #16]	; (8004644 <__NVIC_SetPriorityGrouping+0x44>)
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	60d3      	str	r3, [r2, #12]
}
 8004638:	bf00      	nop
 800463a:	3714      	adds	r7, #20
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr
 8004644:	e000ed00 	.word	0xe000ed00

08004648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004648:	b480      	push	{r7}
 800464a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800464c:	4b04      	ldr	r3, [pc, #16]	; (8004660 <__NVIC_GetPriorityGrouping+0x18>)
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	0a1b      	lsrs	r3, r3, #8
 8004652:	f003 0307 	and.w	r3, r3, #7
}
 8004656:	4618      	mov	r0, r3
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr
 8004660:	e000ed00 	.word	0xe000ed00

08004664 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	4603      	mov	r3, r0
 800466c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800466e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004672:	2b00      	cmp	r3, #0
 8004674:	db0b      	blt.n	800468e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004676:	79fb      	ldrb	r3, [r7, #7]
 8004678:	f003 021f 	and.w	r2, r3, #31
 800467c:	4907      	ldr	r1, [pc, #28]	; (800469c <__NVIC_EnableIRQ+0x38>)
 800467e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004682:	095b      	lsrs	r3, r3, #5
 8004684:	2001      	movs	r0, #1
 8004686:	fa00 f202 	lsl.w	r2, r0, r2
 800468a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800468e:	bf00      	nop
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	e000e100 	.word	0xe000e100

080046a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	4603      	mov	r3, r0
 80046a8:	6039      	str	r1, [r7, #0]
 80046aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	db0a      	blt.n	80046ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	b2da      	uxtb	r2, r3
 80046b8:	490c      	ldr	r1, [pc, #48]	; (80046ec <__NVIC_SetPriority+0x4c>)
 80046ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046be:	0112      	lsls	r2, r2, #4
 80046c0:	b2d2      	uxtb	r2, r2
 80046c2:	440b      	add	r3, r1
 80046c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046c8:	e00a      	b.n	80046e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	4908      	ldr	r1, [pc, #32]	; (80046f0 <__NVIC_SetPriority+0x50>)
 80046d0:	79fb      	ldrb	r3, [r7, #7]
 80046d2:	f003 030f 	and.w	r3, r3, #15
 80046d6:	3b04      	subs	r3, #4
 80046d8:	0112      	lsls	r2, r2, #4
 80046da:	b2d2      	uxtb	r2, r2
 80046dc:	440b      	add	r3, r1
 80046de:	761a      	strb	r2, [r3, #24]
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr
 80046ec:	e000e100 	.word	0xe000e100
 80046f0:	e000ed00 	.word	0xe000ed00

080046f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b089      	sub	sp, #36	; 0x24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f003 0307 	and.w	r3, r3, #7
 8004706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	f1c3 0307 	rsb	r3, r3, #7
 800470e:	2b04      	cmp	r3, #4
 8004710:	bf28      	it	cs
 8004712:	2304      	movcs	r3, #4
 8004714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	3304      	adds	r3, #4
 800471a:	2b06      	cmp	r3, #6
 800471c:	d902      	bls.n	8004724 <NVIC_EncodePriority+0x30>
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	3b03      	subs	r3, #3
 8004722:	e000      	b.n	8004726 <NVIC_EncodePriority+0x32>
 8004724:	2300      	movs	r3, #0
 8004726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004728:	f04f 32ff 	mov.w	r2, #4294967295
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	fa02 f303 	lsl.w	r3, r2, r3
 8004732:	43da      	mvns	r2, r3
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	401a      	ands	r2, r3
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800473c:	f04f 31ff 	mov.w	r1, #4294967295
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	fa01 f303 	lsl.w	r3, r1, r3
 8004746:	43d9      	mvns	r1, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800474c:	4313      	orrs	r3, r2
         );
}
 800474e:	4618      	mov	r0, r3
 8004750:	3724      	adds	r7, #36	; 0x24
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr

0800475a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b082      	sub	sp, #8
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7ff ff4c 	bl	8004600 <__NVIC_SetPriorityGrouping>
}
 8004768:	bf00      	nop
 800476a:	3708      	adds	r7, #8
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004770:	b580      	push	{r7, lr}
 8004772:	b086      	sub	sp, #24
 8004774:	af00      	add	r7, sp, #0
 8004776:	4603      	mov	r3, r0
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
 800477c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800477e:	2300      	movs	r3, #0
 8004780:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004782:	f7ff ff61 	bl	8004648 <__NVIC_GetPriorityGrouping>
 8004786:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	68b9      	ldr	r1, [r7, #8]
 800478c:	6978      	ldr	r0, [r7, #20]
 800478e:	f7ff ffb1 	bl	80046f4 <NVIC_EncodePriority>
 8004792:	4602      	mov	r2, r0
 8004794:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004798:	4611      	mov	r1, r2
 800479a:	4618      	mov	r0, r3
 800479c:	f7ff ff80 	bl	80046a0 <__NVIC_SetPriority>
}
 80047a0:	bf00      	nop
 80047a2:	3718      	adds	r7, #24
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	4603      	mov	r3, r0
 80047b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7ff ff54 	bl	8004664 <__NVIC_EnableIRQ>
}
 80047bc:	bf00      	nop
 80047be:	3708      	adds	r7, #8
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80047d2:	f7ff fee5 	bl	80045a0 <HAL_GetTick>
 80047d6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d008      	beq.n	80047f6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2280      	movs	r2, #128	; 0x80
 80047e8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e052      	b.n	800489c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 0216 	bic.w	r2, r2, #22
 8004804:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	695a      	ldr	r2, [r3, #20]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004814:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481a:	2b00      	cmp	r3, #0
 800481c:	d103      	bne.n	8004826 <HAL_DMA_Abort+0x62>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004822:	2b00      	cmp	r3, #0
 8004824:	d007      	beq.n	8004836 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f022 0208 	bic.w	r2, r2, #8
 8004834:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f022 0201 	bic.w	r2, r2, #1
 8004844:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004846:	e013      	b.n	8004870 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004848:	f7ff feaa 	bl	80045a0 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	2b05      	cmp	r3, #5
 8004854:	d90c      	bls.n	8004870 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2220      	movs	r2, #32
 800485a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2203      	movs	r2, #3
 8004860:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e015      	b.n	800489c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1e4      	bne.n	8004848 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004882:	223f      	movs	r2, #63	; 0x3f
 8004884:	409a      	lsls	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3710      	adds	r7, #16
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d004      	beq.n	80048c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2280      	movs	r2, #128	; 0x80
 80048bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e00c      	b.n	80048dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2205      	movs	r2, #5
 80048c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 0201 	bic.w	r2, r2, #1
 80048d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b089      	sub	sp, #36	; 0x24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80048f2:	2300      	movs	r3, #0
 80048f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80048f6:	2300      	movs	r3, #0
 80048f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80048fa:	2300      	movs	r3, #0
 80048fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048fe:	2300      	movs	r3, #0
 8004900:	61fb      	str	r3, [r7, #28]
 8004902:	e177      	b.n	8004bf4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004904:	2201      	movs	r2, #1
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	fa02 f303 	lsl.w	r3, r2, r3
 800490c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	4013      	ands	r3, r2
 8004916:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	429a      	cmp	r2, r3
 800491e:	f040 8166 	bne.w	8004bee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f003 0303 	and.w	r3, r3, #3
 800492a:	2b01      	cmp	r3, #1
 800492c:	d005      	beq.n	800493a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004936:	2b02      	cmp	r3, #2
 8004938:	d130      	bne.n	800499c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	005b      	lsls	r3, r3, #1
 8004944:	2203      	movs	r2, #3
 8004946:	fa02 f303 	lsl.w	r3, r2, r3
 800494a:	43db      	mvns	r3, r3
 800494c:	69ba      	ldr	r2, [r7, #24]
 800494e:	4013      	ands	r3, r2
 8004950:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	68da      	ldr	r2, [r3, #12]
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	005b      	lsls	r3, r3, #1
 800495a:	fa02 f303 	lsl.w	r3, r2, r3
 800495e:	69ba      	ldr	r2, [r7, #24]
 8004960:	4313      	orrs	r3, r2
 8004962:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	69ba      	ldr	r2, [r7, #24]
 8004968:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004970:	2201      	movs	r2, #1
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	fa02 f303 	lsl.w	r3, r2, r3
 8004978:	43db      	mvns	r3, r3
 800497a:	69ba      	ldr	r2, [r7, #24]
 800497c:	4013      	ands	r3, r2
 800497e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	091b      	lsrs	r3, r3, #4
 8004986:	f003 0201 	and.w	r2, r3, #1
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	fa02 f303 	lsl.w	r3, r2, r3
 8004990:	69ba      	ldr	r2, [r7, #24]
 8004992:	4313      	orrs	r3, r2
 8004994:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f003 0303 	and.w	r3, r3, #3
 80049a4:	2b03      	cmp	r3, #3
 80049a6:	d017      	beq.n	80049d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	005b      	lsls	r3, r3, #1
 80049b2:	2203      	movs	r2, #3
 80049b4:	fa02 f303 	lsl.w	r3, r2, r3
 80049b8:	43db      	mvns	r3, r3
 80049ba:	69ba      	ldr	r2, [r7, #24]
 80049bc:	4013      	ands	r3, r2
 80049be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	689a      	ldr	r2, [r3, #8]
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	005b      	lsls	r3, r3, #1
 80049c8:	fa02 f303 	lsl.w	r3, r2, r3
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f003 0303 	and.w	r3, r3, #3
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d123      	bne.n	8004a2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	08da      	lsrs	r2, r3, #3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	3208      	adds	r2, #8
 80049ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	f003 0307 	and.w	r3, r3, #7
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	220f      	movs	r2, #15
 80049fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004a00:	43db      	mvns	r3, r3
 8004a02:	69ba      	ldr	r2, [r7, #24]
 8004a04:	4013      	ands	r3, r2
 8004a06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	691a      	ldr	r2, [r3, #16]
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	f003 0307 	and.w	r3, r3, #7
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	fa02 f303 	lsl.w	r3, r2, r3
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	08da      	lsrs	r2, r3, #3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	3208      	adds	r2, #8
 8004a26:	69b9      	ldr	r1, [r7, #24]
 8004a28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	005b      	lsls	r3, r3, #1
 8004a36:	2203      	movs	r2, #3
 8004a38:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3c:	43db      	mvns	r3, r3
 8004a3e:	69ba      	ldr	r2, [r7, #24]
 8004a40:	4013      	ands	r3, r2
 8004a42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f003 0203 	and.w	r2, r3, #3
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	005b      	lsls	r3, r3, #1
 8004a50:	fa02 f303 	lsl.w	r3, r2, r3
 8004a54:	69ba      	ldr	r2, [r7, #24]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f000 80c0 	beq.w	8004bee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a6e:	2300      	movs	r3, #0
 8004a70:	60fb      	str	r3, [r7, #12]
 8004a72:	4b66      	ldr	r3, [pc, #408]	; (8004c0c <HAL_GPIO_Init+0x324>)
 8004a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a76:	4a65      	ldr	r2, [pc, #404]	; (8004c0c <HAL_GPIO_Init+0x324>)
 8004a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8004a7e:	4b63      	ldr	r3, [pc, #396]	; (8004c0c <HAL_GPIO_Init+0x324>)
 8004a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a86:	60fb      	str	r3, [r7, #12]
 8004a88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a8a:	4a61      	ldr	r2, [pc, #388]	; (8004c10 <HAL_GPIO_Init+0x328>)
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	089b      	lsrs	r3, r3, #2
 8004a90:	3302      	adds	r3, #2
 8004a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	f003 0303 	and.w	r3, r3, #3
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	220f      	movs	r2, #15
 8004aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa6:	43db      	mvns	r3, r3
 8004aa8:	69ba      	ldr	r2, [r7, #24]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a58      	ldr	r2, [pc, #352]	; (8004c14 <HAL_GPIO_Init+0x32c>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d037      	beq.n	8004b26 <HAL_GPIO_Init+0x23e>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a57      	ldr	r2, [pc, #348]	; (8004c18 <HAL_GPIO_Init+0x330>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d031      	beq.n	8004b22 <HAL_GPIO_Init+0x23a>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a56      	ldr	r2, [pc, #344]	; (8004c1c <HAL_GPIO_Init+0x334>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d02b      	beq.n	8004b1e <HAL_GPIO_Init+0x236>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a55      	ldr	r2, [pc, #340]	; (8004c20 <HAL_GPIO_Init+0x338>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d025      	beq.n	8004b1a <HAL_GPIO_Init+0x232>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a54      	ldr	r2, [pc, #336]	; (8004c24 <HAL_GPIO_Init+0x33c>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d01f      	beq.n	8004b16 <HAL_GPIO_Init+0x22e>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a53      	ldr	r2, [pc, #332]	; (8004c28 <HAL_GPIO_Init+0x340>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d019      	beq.n	8004b12 <HAL_GPIO_Init+0x22a>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a52      	ldr	r2, [pc, #328]	; (8004c2c <HAL_GPIO_Init+0x344>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d013      	beq.n	8004b0e <HAL_GPIO_Init+0x226>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a51      	ldr	r2, [pc, #324]	; (8004c30 <HAL_GPIO_Init+0x348>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d00d      	beq.n	8004b0a <HAL_GPIO_Init+0x222>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a50      	ldr	r2, [pc, #320]	; (8004c34 <HAL_GPIO_Init+0x34c>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d007      	beq.n	8004b06 <HAL_GPIO_Init+0x21e>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a4f      	ldr	r2, [pc, #316]	; (8004c38 <HAL_GPIO_Init+0x350>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d101      	bne.n	8004b02 <HAL_GPIO_Init+0x21a>
 8004afe:	2309      	movs	r3, #9
 8004b00:	e012      	b.n	8004b28 <HAL_GPIO_Init+0x240>
 8004b02:	230a      	movs	r3, #10
 8004b04:	e010      	b.n	8004b28 <HAL_GPIO_Init+0x240>
 8004b06:	2308      	movs	r3, #8
 8004b08:	e00e      	b.n	8004b28 <HAL_GPIO_Init+0x240>
 8004b0a:	2307      	movs	r3, #7
 8004b0c:	e00c      	b.n	8004b28 <HAL_GPIO_Init+0x240>
 8004b0e:	2306      	movs	r3, #6
 8004b10:	e00a      	b.n	8004b28 <HAL_GPIO_Init+0x240>
 8004b12:	2305      	movs	r3, #5
 8004b14:	e008      	b.n	8004b28 <HAL_GPIO_Init+0x240>
 8004b16:	2304      	movs	r3, #4
 8004b18:	e006      	b.n	8004b28 <HAL_GPIO_Init+0x240>
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e004      	b.n	8004b28 <HAL_GPIO_Init+0x240>
 8004b1e:	2302      	movs	r3, #2
 8004b20:	e002      	b.n	8004b28 <HAL_GPIO_Init+0x240>
 8004b22:	2301      	movs	r3, #1
 8004b24:	e000      	b.n	8004b28 <HAL_GPIO_Init+0x240>
 8004b26:	2300      	movs	r3, #0
 8004b28:	69fa      	ldr	r2, [r7, #28]
 8004b2a:	f002 0203 	and.w	r2, r2, #3
 8004b2e:	0092      	lsls	r2, r2, #2
 8004b30:	4093      	lsls	r3, r2
 8004b32:	69ba      	ldr	r2, [r7, #24]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b38:	4935      	ldr	r1, [pc, #212]	; (8004c10 <HAL_GPIO_Init+0x328>)
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	089b      	lsrs	r3, r3, #2
 8004b3e:	3302      	adds	r3, #2
 8004b40:	69ba      	ldr	r2, [r7, #24]
 8004b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b46:	4b3d      	ldr	r3, [pc, #244]	; (8004c3c <HAL_GPIO_Init+0x354>)
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	43db      	mvns	r3, r3
 8004b50:	69ba      	ldr	r2, [r7, #24]
 8004b52:	4013      	ands	r3, r2
 8004b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004b62:	69ba      	ldr	r2, [r7, #24]
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b6a:	4a34      	ldr	r2, [pc, #208]	; (8004c3c <HAL_GPIO_Init+0x354>)
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b70:	4b32      	ldr	r3, [pc, #200]	; (8004c3c <HAL_GPIO_Init+0x354>)
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	43db      	mvns	r3, r3
 8004b7a:	69ba      	ldr	r2, [r7, #24]
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d003      	beq.n	8004b94 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004b8c:	69ba      	ldr	r2, [r7, #24]
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b94:	4a29      	ldr	r2, [pc, #164]	; (8004c3c <HAL_GPIO_Init+0x354>)
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004b9a:	4b28      	ldr	r3, [pc, #160]	; (8004c3c <HAL_GPIO_Init+0x354>)
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	43db      	mvns	r3, r3
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d003      	beq.n	8004bbe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004bb6:	69ba      	ldr	r2, [r7, #24]
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004bbe:	4a1f      	ldr	r2, [pc, #124]	; (8004c3c <HAL_GPIO_Init+0x354>)
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004bc4:	4b1d      	ldr	r3, [pc, #116]	; (8004c3c <HAL_GPIO_Init+0x354>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	43db      	mvns	r3, r3
 8004bce:	69ba      	ldr	r2, [r7, #24]
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d003      	beq.n	8004be8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004be0:	69ba      	ldr	r2, [r7, #24]
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004be8:	4a14      	ldr	r2, [pc, #80]	; (8004c3c <HAL_GPIO_Init+0x354>)
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	61fb      	str	r3, [r7, #28]
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	2b0f      	cmp	r3, #15
 8004bf8:	f67f ae84 	bls.w	8004904 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004bfc:	bf00      	nop
 8004bfe:	bf00      	nop
 8004c00:	3724      	adds	r7, #36	; 0x24
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	40023800 	.word	0x40023800
 8004c10:	40013800 	.word	0x40013800
 8004c14:	40020000 	.word	0x40020000
 8004c18:	40020400 	.word	0x40020400
 8004c1c:	40020800 	.word	0x40020800
 8004c20:	40020c00 	.word	0x40020c00
 8004c24:	40021000 	.word	0x40021000
 8004c28:	40021400 	.word	0x40021400
 8004c2c:	40021800 	.word	0x40021800
 8004c30:	40021c00 	.word	0x40021c00
 8004c34:	40022000 	.word	0x40022000
 8004c38:	40022400 	.word	0x40022400
 8004c3c:	40013c00 	.word	0x40013c00

08004c40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	460b      	mov	r3, r1
 8004c4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	691a      	ldr	r2, [r3, #16]
 8004c50:	887b      	ldrh	r3, [r7, #2]
 8004c52:	4013      	ands	r3, r2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d002      	beq.n	8004c5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	73fb      	strb	r3, [r7, #15]
 8004c5c:	e001      	b.n	8004c62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3714      	adds	r7, #20
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	460b      	mov	r3, r1
 8004c7a:	807b      	strh	r3, [r7, #2]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c80:	787b      	ldrb	r3, [r7, #1]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d003      	beq.n	8004c8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c86:	887a      	ldrh	r2, [r7, #2]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004c8c:	e003      	b.n	8004c96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c8e:	887b      	ldrh	r3, [r7, #2]
 8004c90:	041a      	lsls	r2, r3, #16
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	619a      	str	r2, [r3, #24]
}
 8004c96:	bf00      	nop
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr

08004ca2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b085      	sub	sp, #20
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
 8004caa:	460b      	mov	r3, r1
 8004cac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004cb4:	887a      	ldrh	r2, [r7, #2]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	4013      	ands	r3, r2
 8004cba:	041a      	lsls	r2, r3, #16
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	43d9      	mvns	r1, r3
 8004cc0:	887b      	ldrh	r3, [r7, #2]
 8004cc2:	400b      	ands	r3, r1
 8004cc4:	431a      	orrs	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	619a      	str	r2, [r3, #24]
}
 8004cca:	bf00      	nop
 8004ccc:	3714      	adds	r7, #20
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
	...

08004cd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	4603      	mov	r3, r0
 8004ce0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004ce2:	4b08      	ldr	r3, [pc, #32]	; (8004d04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ce4:	695a      	ldr	r2, [r3, #20]
 8004ce6:	88fb      	ldrh	r3, [r7, #6]
 8004ce8:	4013      	ands	r3, r2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d006      	beq.n	8004cfc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004cee:	4a05      	ldr	r2, [pc, #20]	; (8004d04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004cf0:	88fb      	ldrh	r3, [r7, #6]
 8004cf2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004cf4:	88fb      	ldrh	r3, [r7, #6]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7fe fc28 	bl	800354c <HAL_GPIO_EXTI_Callback>
  }
}
 8004cfc:	bf00      	nop
 8004cfe:	3708      	adds	r7, #8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	40013c00 	.word	0x40013c00

08004d08 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004d12:	2300      	movs	r3, #0
 8004d14:	603b      	str	r3, [r7, #0]
 8004d16:	4b20      	ldr	r3, [pc, #128]	; (8004d98 <HAL_PWREx_EnableOverDrive+0x90>)
 8004d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1a:	4a1f      	ldr	r2, [pc, #124]	; (8004d98 <HAL_PWREx_EnableOverDrive+0x90>)
 8004d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d20:	6413      	str	r3, [r2, #64]	; 0x40
 8004d22:	4b1d      	ldr	r3, [pc, #116]	; (8004d98 <HAL_PWREx_EnableOverDrive+0x90>)
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d2a:	603b      	str	r3, [r7, #0]
 8004d2c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004d2e:	4b1b      	ldr	r3, [pc, #108]	; (8004d9c <HAL_PWREx_EnableOverDrive+0x94>)
 8004d30:	2201      	movs	r2, #1
 8004d32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d34:	f7ff fc34 	bl	80045a0 <HAL_GetTick>
 8004d38:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004d3a:	e009      	b.n	8004d50 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004d3c:	f7ff fc30 	bl	80045a0 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d4a:	d901      	bls.n	8004d50 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e01f      	b.n	8004d90 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004d50:	4b13      	ldr	r3, [pc, #76]	; (8004da0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d5c:	d1ee      	bne.n	8004d3c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004d5e:	4b11      	ldr	r3, [pc, #68]	; (8004da4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d60:	2201      	movs	r2, #1
 8004d62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d64:	f7ff fc1c 	bl	80045a0 <HAL_GetTick>
 8004d68:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004d6a:	e009      	b.n	8004d80 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004d6c:	f7ff fc18 	bl	80045a0 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d7a:	d901      	bls.n	8004d80 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e007      	b.n	8004d90 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004d80:	4b07      	ldr	r3, [pc, #28]	; (8004da0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d8c:	d1ee      	bne.n	8004d6c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3708      	adds	r7, #8
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	40023800 	.word	0x40023800
 8004d9c:	420e0040 	.word	0x420e0040
 8004da0:	40007000 	.word	0x40007000
 8004da4:	420e0044 	.word	0x420e0044

08004da8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b086      	sub	sp, #24
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d101      	bne.n	8004dba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e267      	b.n	800528a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d075      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004dc6:	4b88      	ldr	r3, [pc, #544]	; (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f003 030c 	and.w	r3, r3, #12
 8004dce:	2b04      	cmp	r3, #4
 8004dd0:	d00c      	beq.n	8004dec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dd2:	4b85      	ldr	r3, [pc, #532]	; (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004dda:	2b08      	cmp	r3, #8
 8004ddc:	d112      	bne.n	8004e04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dde:	4b82      	ldr	r3, [pc, #520]	; (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004de6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dea:	d10b      	bne.n	8004e04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dec:	4b7e      	ldr	r3, [pc, #504]	; (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d05b      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x108>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d157      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e242      	b.n	800528a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e0c:	d106      	bne.n	8004e1c <HAL_RCC_OscConfig+0x74>
 8004e0e:	4b76      	ldr	r3, [pc, #472]	; (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a75      	ldr	r2, [pc, #468]	; (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e18:	6013      	str	r3, [r2, #0]
 8004e1a:	e01d      	b.n	8004e58 <HAL_RCC_OscConfig+0xb0>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e24:	d10c      	bne.n	8004e40 <HAL_RCC_OscConfig+0x98>
 8004e26:	4b70      	ldr	r3, [pc, #448]	; (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a6f      	ldr	r2, [pc, #444]	; (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004e2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e30:	6013      	str	r3, [r2, #0]
 8004e32:	4b6d      	ldr	r3, [pc, #436]	; (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a6c      	ldr	r2, [pc, #432]	; (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e3c:	6013      	str	r3, [r2, #0]
 8004e3e:	e00b      	b.n	8004e58 <HAL_RCC_OscConfig+0xb0>
 8004e40:	4b69      	ldr	r3, [pc, #420]	; (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a68      	ldr	r2, [pc, #416]	; (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004e46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e4a:	6013      	str	r3, [r2, #0]
 8004e4c:	4b66      	ldr	r3, [pc, #408]	; (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a65      	ldr	r2, [pc, #404]	; (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004e52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d013      	beq.n	8004e88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e60:	f7ff fb9e 	bl	80045a0 <HAL_GetTick>
 8004e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e66:	e008      	b.n	8004e7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e68:	f7ff fb9a 	bl	80045a0 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b64      	cmp	r3, #100	; 0x64
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e207      	b.n	800528a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e7a:	4b5b      	ldr	r3, [pc, #364]	; (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d0f0      	beq.n	8004e68 <HAL_RCC_OscConfig+0xc0>
 8004e86:	e014      	b.n	8004eb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e88:	f7ff fb8a 	bl	80045a0 <HAL_GetTick>
 8004e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e8e:	e008      	b.n	8004ea2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e90:	f7ff fb86 	bl	80045a0 <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	2b64      	cmp	r3, #100	; 0x64
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e1f3      	b.n	800528a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ea2:	4b51      	ldr	r3, [pc, #324]	; (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1f0      	bne.n	8004e90 <HAL_RCC_OscConfig+0xe8>
 8004eae:	e000      	b.n	8004eb2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d063      	beq.n	8004f86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ebe:	4b4a      	ldr	r3, [pc, #296]	; (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f003 030c 	and.w	r3, r3, #12
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00b      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004eca:	4b47      	ldr	r3, [pc, #284]	; (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ed2:	2b08      	cmp	r3, #8
 8004ed4:	d11c      	bne.n	8004f10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ed6:	4b44      	ldr	r3, [pc, #272]	; (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d116      	bne.n	8004f10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ee2:	4b41      	ldr	r3, [pc, #260]	; (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d005      	beq.n	8004efa <HAL_RCC_OscConfig+0x152>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d001      	beq.n	8004efa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e1c7      	b.n	800528a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004efa:	4b3b      	ldr	r3, [pc, #236]	; (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	00db      	lsls	r3, r3, #3
 8004f08:	4937      	ldr	r1, [pc, #220]	; (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f0e:	e03a      	b.n	8004f86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d020      	beq.n	8004f5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f18:	4b34      	ldr	r3, [pc, #208]	; (8004fec <HAL_RCC_OscConfig+0x244>)
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f1e:	f7ff fb3f 	bl	80045a0 <HAL_GetTick>
 8004f22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f24:	e008      	b.n	8004f38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f26:	f7ff fb3b 	bl	80045a0 <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d901      	bls.n	8004f38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e1a8      	b.n	800528a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f38:	4b2b      	ldr	r3, [pc, #172]	; (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0302 	and.w	r3, r3, #2
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d0f0      	beq.n	8004f26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f44:	4b28      	ldr	r3, [pc, #160]	; (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	00db      	lsls	r3, r3, #3
 8004f52:	4925      	ldr	r1, [pc, #148]	; (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	600b      	str	r3, [r1, #0]
 8004f58:	e015      	b.n	8004f86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f5a:	4b24      	ldr	r3, [pc, #144]	; (8004fec <HAL_RCC_OscConfig+0x244>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f60:	f7ff fb1e 	bl	80045a0 <HAL_GetTick>
 8004f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f66:	e008      	b.n	8004f7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f68:	f7ff fb1a 	bl	80045a0 <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d901      	bls.n	8004f7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e187      	b.n	800528a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f7a:	4b1b      	ldr	r3, [pc, #108]	; (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1f0      	bne.n	8004f68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0308 	and.w	r3, r3, #8
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d036      	beq.n	8005000 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d016      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f9a:	4b15      	ldr	r3, [pc, #84]	; (8004ff0 <HAL_RCC_OscConfig+0x248>)
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fa0:	f7ff fafe 	bl	80045a0 <HAL_GetTick>
 8004fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fa6:	e008      	b.n	8004fba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fa8:	f7ff fafa 	bl	80045a0 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d901      	bls.n	8004fba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e167      	b.n	800528a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fba:	4b0b      	ldr	r3, [pc, #44]	; (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004fbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fbe:	f003 0302 	and.w	r3, r3, #2
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d0f0      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x200>
 8004fc6:	e01b      	b.n	8005000 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fc8:	4b09      	ldr	r3, [pc, #36]	; (8004ff0 <HAL_RCC_OscConfig+0x248>)
 8004fca:	2200      	movs	r2, #0
 8004fcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fce:	f7ff fae7 	bl	80045a0 <HAL_GetTick>
 8004fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fd4:	e00e      	b.n	8004ff4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fd6:	f7ff fae3 	bl	80045a0 <HAL_GetTick>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d907      	bls.n	8004ff4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e150      	b.n	800528a <HAL_RCC_OscConfig+0x4e2>
 8004fe8:	40023800 	.word	0x40023800
 8004fec:	42470000 	.word	0x42470000
 8004ff0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ff4:	4b88      	ldr	r3, [pc, #544]	; (8005218 <HAL_RCC_OscConfig+0x470>)
 8004ff6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ff8:	f003 0302 	and.w	r3, r3, #2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1ea      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0304 	and.w	r3, r3, #4
 8005008:	2b00      	cmp	r3, #0
 800500a:	f000 8097 	beq.w	800513c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800500e:	2300      	movs	r3, #0
 8005010:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005012:	4b81      	ldr	r3, [pc, #516]	; (8005218 <HAL_RCC_OscConfig+0x470>)
 8005014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10f      	bne.n	800503e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800501e:	2300      	movs	r3, #0
 8005020:	60bb      	str	r3, [r7, #8]
 8005022:	4b7d      	ldr	r3, [pc, #500]	; (8005218 <HAL_RCC_OscConfig+0x470>)
 8005024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005026:	4a7c      	ldr	r2, [pc, #496]	; (8005218 <HAL_RCC_OscConfig+0x470>)
 8005028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800502c:	6413      	str	r3, [r2, #64]	; 0x40
 800502e:	4b7a      	ldr	r3, [pc, #488]	; (8005218 <HAL_RCC_OscConfig+0x470>)
 8005030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005036:	60bb      	str	r3, [r7, #8]
 8005038:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800503a:	2301      	movs	r3, #1
 800503c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800503e:	4b77      	ldr	r3, [pc, #476]	; (800521c <HAL_RCC_OscConfig+0x474>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005046:	2b00      	cmp	r3, #0
 8005048:	d118      	bne.n	800507c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800504a:	4b74      	ldr	r3, [pc, #464]	; (800521c <HAL_RCC_OscConfig+0x474>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a73      	ldr	r2, [pc, #460]	; (800521c <HAL_RCC_OscConfig+0x474>)
 8005050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005054:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005056:	f7ff faa3 	bl	80045a0 <HAL_GetTick>
 800505a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800505c:	e008      	b.n	8005070 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800505e:	f7ff fa9f 	bl	80045a0 <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	2b02      	cmp	r3, #2
 800506a:	d901      	bls.n	8005070 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e10c      	b.n	800528a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005070:	4b6a      	ldr	r3, [pc, #424]	; (800521c <HAL_RCC_OscConfig+0x474>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005078:	2b00      	cmp	r3, #0
 800507a:	d0f0      	beq.n	800505e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d106      	bne.n	8005092 <HAL_RCC_OscConfig+0x2ea>
 8005084:	4b64      	ldr	r3, [pc, #400]	; (8005218 <HAL_RCC_OscConfig+0x470>)
 8005086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005088:	4a63      	ldr	r2, [pc, #396]	; (8005218 <HAL_RCC_OscConfig+0x470>)
 800508a:	f043 0301 	orr.w	r3, r3, #1
 800508e:	6713      	str	r3, [r2, #112]	; 0x70
 8005090:	e01c      	b.n	80050cc <HAL_RCC_OscConfig+0x324>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	2b05      	cmp	r3, #5
 8005098:	d10c      	bne.n	80050b4 <HAL_RCC_OscConfig+0x30c>
 800509a:	4b5f      	ldr	r3, [pc, #380]	; (8005218 <HAL_RCC_OscConfig+0x470>)
 800509c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800509e:	4a5e      	ldr	r2, [pc, #376]	; (8005218 <HAL_RCC_OscConfig+0x470>)
 80050a0:	f043 0304 	orr.w	r3, r3, #4
 80050a4:	6713      	str	r3, [r2, #112]	; 0x70
 80050a6:	4b5c      	ldr	r3, [pc, #368]	; (8005218 <HAL_RCC_OscConfig+0x470>)
 80050a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050aa:	4a5b      	ldr	r2, [pc, #364]	; (8005218 <HAL_RCC_OscConfig+0x470>)
 80050ac:	f043 0301 	orr.w	r3, r3, #1
 80050b0:	6713      	str	r3, [r2, #112]	; 0x70
 80050b2:	e00b      	b.n	80050cc <HAL_RCC_OscConfig+0x324>
 80050b4:	4b58      	ldr	r3, [pc, #352]	; (8005218 <HAL_RCC_OscConfig+0x470>)
 80050b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b8:	4a57      	ldr	r2, [pc, #348]	; (8005218 <HAL_RCC_OscConfig+0x470>)
 80050ba:	f023 0301 	bic.w	r3, r3, #1
 80050be:	6713      	str	r3, [r2, #112]	; 0x70
 80050c0:	4b55      	ldr	r3, [pc, #340]	; (8005218 <HAL_RCC_OscConfig+0x470>)
 80050c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c4:	4a54      	ldr	r2, [pc, #336]	; (8005218 <HAL_RCC_OscConfig+0x470>)
 80050c6:	f023 0304 	bic.w	r3, r3, #4
 80050ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d015      	beq.n	8005100 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050d4:	f7ff fa64 	bl	80045a0 <HAL_GetTick>
 80050d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050da:	e00a      	b.n	80050f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050dc:	f7ff fa60 	bl	80045a0 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d901      	bls.n	80050f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e0cb      	b.n	800528a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050f2:	4b49      	ldr	r3, [pc, #292]	; (8005218 <HAL_RCC_OscConfig+0x470>)
 80050f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d0ee      	beq.n	80050dc <HAL_RCC_OscConfig+0x334>
 80050fe:	e014      	b.n	800512a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005100:	f7ff fa4e 	bl	80045a0 <HAL_GetTick>
 8005104:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005106:	e00a      	b.n	800511e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005108:	f7ff fa4a 	bl	80045a0 <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	f241 3288 	movw	r2, #5000	; 0x1388
 8005116:	4293      	cmp	r3, r2
 8005118:	d901      	bls.n	800511e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e0b5      	b.n	800528a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800511e:	4b3e      	ldr	r3, [pc, #248]	; (8005218 <HAL_RCC_OscConfig+0x470>)
 8005120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005122:	f003 0302 	and.w	r3, r3, #2
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1ee      	bne.n	8005108 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800512a:	7dfb      	ldrb	r3, [r7, #23]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d105      	bne.n	800513c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005130:	4b39      	ldr	r3, [pc, #228]	; (8005218 <HAL_RCC_OscConfig+0x470>)
 8005132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005134:	4a38      	ldr	r2, [pc, #224]	; (8005218 <HAL_RCC_OscConfig+0x470>)
 8005136:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800513a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	699b      	ldr	r3, [r3, #24]
 8005140:	2b00      	cmp	r3, #0
 8005142:	f000 80a1 	beq.w	8005288 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005146:	4b34      	ldr	r3, [pc, #208]	; (8005218 <HAL_RCC_OscConfig+0x470>)
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f003 030c 	and.w	r3, r3, #12
 800514e:	2b08      	cmp	r3, #8
 8005150:	d05c      	beq.n	800520c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	2b02      	cmp	r3, #2
 8005158:	d141      	bne.n	80051de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800515a:	4b31      	ldr	r3, [pc, #196]	; (8005220 <HAL_RCC_OscConfig+0x478>)
 800515c:	2200      	movs	r2, #0
 800515e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005160:	f7ff fa1e 	bl	80045a0 <HAL_GetTick>
 8005164:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005166:	e008      	b.n	800517a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005168:	f7ff fa1a 	bl	80045a0 <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	2b02      	cmp	r3, #2
 8005174:	d901      	bls.n	800517a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e087      	b.n	800528a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800517a:	4b27      	ldr	r3, [pc, #156]	; (8005218 <HAL_RCC_OscConfig+0x470>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d1f0      	bne.n	8005168 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	69da      	ldr	r2, [r3, #28]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	431a      	orrs	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005194:	019b      	lsls	r3, r3, #6
 8005196:	431a      	orrs	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519c:	085b      	lsrs	r3, r3, #1
 800519e:	3b01      	subs	r3, #1
 80051a0:	041b      	lsls	r3, r3, #16
 80051a2:	431a      	orrs	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a8:	061b      	lsls	r3, r3, #24
 80051aa:	491b      	ldr	r1, [pc, #108]	; (8005218 <HAL_RCC_OscConfig+0x470>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051b0:	4b1b      	ldr	r3, [pc, #108]	; (8005220 <HAL_RCC_OscConfig+0x478>)
 80051b2:	2201      	movs	r2, #1
 80051b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051b6:	f7ff f9f3 	bl	80045a0 <HAL_GetTick>
 80051ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051bc:	e008      	b.n	80051d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051be:	f7ff f9ef 	bl	80045a0 <HAL_GetTick>
 80051c2:	4602      	mov	r2, r0
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d901      	bls.n	80051d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e05c      	b.n	800528a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051d0:	4b11      	ldr	r3, [pc, #68]	; (8005218 <HAL_RCC_OscConfig+0x470>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d0f0      	beq.n	80051be <HAL_RCC_OscConfig+0x416>
 80051dc:	e054      	b.n	8005288 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051de:	4b10      	ldr	r3, [pc, #64]	; (8005220 <HAL_RCC_OscConfig+0x478>)
 80051e0:	2200      	movs	r2, #0
 80051e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051e4:	f7ff f9dc 	bl	80045a0 <HAL_GetTick>
 80051e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ea:	e008      	b.n	80051fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051ec:	f7ff f9d8 	bl	80045a0 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d901      	bls.n	80051fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e045      	b.n	800528a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051fe:	4b06      	ldr	r3, [pc, #24]	; (8005218 <HAL_RCC_OscConfig+0x470>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1f0      	bne.n	80051ec <HAL_RCC_OscConfig+0x444>
 800520a:	e03d      	b.n	8005288 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d107      	bne.n	8005224 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e038      	b.n	800528a <HAL_RCC_OscConfig+0x4e2>
 8005218:	40023800 	.word	0x40023800
 800521c:	40007000 	.word	0x40007000
 8005220:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005224:	4b1b      	ldr	r3, [pc, #108]	; (8005294 <HAL_RCC_OscConfig+0x4ec>)
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d028      	beq.n	8005284 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800523c:	429a      	cmp	r2, r3
 800523e:	d121      	bne.n	8005284 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800524a:	429a      	cmp	r2, r3
 800524c:	d11a      	bne.n	8005284 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005254:	4013      	ands	r3, r2
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800525a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800525c:	4293      	cmp	r3, r2
 800525e:	d111      	bne.n	8005284 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526a:	085b      	lsrs	r3, r3, #1
 800526c:	3b01      	subs	r3, #1
 800526e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005270:	429a      	cmp	r2, r3
 8005272:	d107      	bne.n	8005284 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005280:	429a      	cmp	r2, r3
 8005282:	d001      	beq.n	8005288 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e000      	b.n	800528a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3718      	adds	r7, #24
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	40023800 	.word	0x40023800

08005298 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d101      	bne.n	80052ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e0cc      	b.n	8005446 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052ac:	4b68      	ldr	r3, [pc, #416]	; (8005450 <HAL_RCC_ClockConfig+0x1b8>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 030f 	and.w	r3, r3, #15
 80052b4:	683a      	ldr	r2, [r7, #0]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d90c      	bls.n	80052d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ba:	4b65      	ldr	r3, [pc, #404]	; (8005450 <HAL_RCC_ClockConfig+0x1b8>)
 80052bc:	683a      	ldr	r2, [r7, #0]
 80052be:	b2d2      	uxtb	r2, r2
 80052c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052c2:	4b63      	ldr	r3, [pc, #396]	; (8005450 <HAL_RCC_ClockConfig+0x1b8>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 030f 	and.w	r3, r3, #15
 80052ca:	683a      	ldr	r2, [r7, #0]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d001      	beq.n	80052d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e0b8      	b.n	8005446 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0302 	and.w	r3, r3, #2
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d020      	beq.n	8005322 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0304 	and.w	r3, r3, #4
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d005      	beq.n	80052f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052ec:	4b59      	ldr	r3, [pc, #356]	; (8005454 <HAL_RCC_ClockConfig+0x1bc>)
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	4a58      	ldr	r2, [pc, #352]	; (8005454 <HAL_RCC_ClockConfig+0x1bc>)
 80052f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80052f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0308 	and.w	r3, r3, #8
 8005300:	2b00      	cmp	r3, #0
 8005302:	d005      	beq.n	8005310 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005304:	4b53      	ldr	r3, [pc, #332]	; (8005454 <HAL_RCC_ClockConfig+0x1bc>)
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	4a52      	ldr	r2, [pc, #328]	; (8005454 <HAL_RCC_ClockConfig+0x1bc>)
 800530a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800530e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005310:	4b50      	ldr	r3, [pc, #320]	; (8005454 <HAL_RCC_ClockConfig+0x1bc>)
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	494d      	ldr	r1, [pc, #308]	; (8005454 <HAL_RCC_ClockConfig+0x1bc>)
 800531e:	4313      	orrs	r3, r2
 8005320:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	2b00      	cmp	r3, #0
 800532c:	d044      	beq.n	80053b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	2b01      	cmp	r3, #1
 8005334:	d107      	bne.n	8005346 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005336:	4b47      	ldr	r3, [pc, #284]	; (8005454 <HAL_RCC_ClockConfig+0x1bc>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d119      	bne.n	8005376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e07f      	b.n	8005446 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	2b02      	cmp	r3, #2
 800534c:	d003      	beq.n	8005356 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005352:	2b03      	cmp	r3, #3
 8005354:	d107      	bne.n	8005366 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005356:	4b3f      	ldr	r3, [pc, #252]	; (8005454 <HAL_RCC_ClockConfig+0x1bc>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d109      	bne.n	8005376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e06f      	b.n	8005446 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005366:	4b3b      	ldr	r3, [pc, #236]	; (8005454 <HAL_RCC_ClockConfig+0x1bc>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0302 	and.w	r3, r3, #2
 800536e:	2b00      	cmp	r3, #0
 8005370:	d101      	bne.n	8005376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e067      	b.n	8005446 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005376:	4b37      	ldr	r3, [pc, #220]	; (8005454 <HAL_RCC_ClockConfig+0x1bc>)
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f023 0203 	bic.w	r2, r3, #3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	4934      	ldr	r1, [pc, #208]	; (8005454 <HAL_RCC_ClockConfig+0x1bc>)
 8005384:	4313      	orrs	r3, r2
 8005386:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005388:	f7ff f90a 	bl	80045a0 <HAL_GetTick>
 800538c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800538e:	e00a      	b.n	80053a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005390:	f7ff f906 	bl	80045a0 <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	f241 3288 	movw	r2, #5000	; 0x1388
 800539e:	4293      	cmp	r3, r2
 80053a0:	d901      	bls.n	80053a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e04f      	b.n	8005446 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053a6:	4b2b      	ldr	r3, [pc, #172]	; (8005454 <HAL_RCC_ClockConfig+0x1bc>)
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f003 020c 	and.w	r2, r3, #12
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d1eb      	bne.n	8005390 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053b8:	4b25      	ldr	r3, [pc, #148]	; (8005450 <HAL_RCC_ClockConfig+0x1b8>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 030f 	and.w	r3, r3, #15
 80053c0:	683a      	ldr	r2, [r7, #0]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d20c      	bcs.n	80053e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053c6:	4b22      	ldr	r3, [pc, #136]	; (8005450 <HAL_RCC_ClockConfig+0x1b8>)
 80053c8:	683a      	ldr	r2, [r7, #0]
 80053ca:	b2d2      	uxtb	r2, r2
 80053cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ce:	4b20      	ldr	r3, [pc, #128]	; (8005450 <HAL_RCC_ClockConfig+0x1b8>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 030f 	and.w	r3, r3, #15
 80053d6:	683a      	ldr	r2, [r7, #0]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d001      	beq.n	80053e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e032      	b.n	8005446 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0304 	and.w	r3, r3, #4
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d008      	beq.n	80053fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053ec:	4b19      	ldr	r3, [pc, #100]	; (8005454 <HAL_RCC_ClockConfig+0x1bc>)
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	4916      	ldr	r1, [pc, #88]	; (8005454 <HAL_RCC_ClockConfig+0x1bc>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0308 	and.w	r3, r3, #8
 8005406:	2b00      	cmp	r3, #0
 8005408:	d009      	beq.n	800541e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800540a:	4b12      	ldr	r3, [pc, #72]	; (8005454 <HAL_RCC_ClockConfig+0x1bc>)
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	00db      	lsls	r3, r3, #3
 8005418:	490e      	ldr	r1, [pc, #56]	; (8005454 <HAL_RCC_ClockConfig+0x1bc>)
 800541a:	4313      	orrs	r3, r2
 800541c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800541e:	f000 f821 	bl	8005464 <HAL_RCC_GetSysClockFreq>
 8005422:	4602      	mov	r2, r0
 8005424:	4b0b      	ldr	r3, [pc, #44]	; (8005454 <HAL_RCC_ClockConfig+0x1bc>)
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	091b      	lsrs	r3, r3, #4
 800542a:	f003 030f 	and.w	r3, r3, #15
 800542e:	490a      	ldr	r1, [pc, #40]	; (8005458 <HAL_RCC_ClockConfig+0x1c0>)
 8005430:	5ccb      	ldrb	r3, [r1, r3]
 8005432:	fa22 f303 	lsr.w	r3, r2, r3
 8005436:	4a09      	ldr	r2, [pc, #36]	; (800545c <HAL_RCC_ClockConfig+0x1c4>)
 8005438:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800543a:	4b09      	ldr	r3, [pc, #36]	; (8005460 <HAL_RCC_ClockConfig+0x1c8>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4618      	mov	r0, r3
 8005440:	f7fe ff4c 	bl	80042dc <HAL_InitTick>

  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3710      	adds	r7, #16
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	40023c00 	.word	0x40023c00
 8005454:	40023800 	.word	0x40023800
 8005458:	08009930 	.word	0x08009930
 800545c:	20000120 	.word	0x20000120
 8005460:	20000124 	.word	0x20000124

08005464 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005464:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005468:	b094      	sub	sp, #80	; 0x50
 800546a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800546c:	2300      	movs	r3, #0
 800546e:	647b      	str	r3, [r7, #68]	; 0x44
 8005470:	2300      	movs	r3, #0
 8005472:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005474:	2300      	movs	r3, #0
 8005476:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005478:	2300      	movs	r3, #0
 800547a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800547c:	4b79      	ldr	r3, [pc, #484]	; (8005664 <HAL_RCC_GetSysClockFreq+0x200>)
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	f003 030c 	and.w	r3, r3, #12
 8005484:	2b08      	cmp	r3, #8
 8005486:	d00d      	beq.n	80054a4 <HAL_RCC_GetSysClockFreq+0x40>
 8005488:	2b08      	cmp	r3, #8
 800548a:	f200 80e1 	bhi.w	8005650 <HAL_RCC_GetSysClockFreq+0x1ec>
 800548e:	2b00      	cmp	r3, #0
 8005490:	d002      	beq.n	8005498 <HAL_RCC_GetSysClockFreq+0x34>
 8005492:	2b04      	cmp	r3, #4
 8005494:	d003      	beq.n	800549e <HAL_RCC_GetSysClockFreq+0x3a>
 8005496:	e0db      	b.n	8005650 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005498:	4b73      	ldr	r3, [pc, #460]	; (8005668 <HAL_RCC_GetSysClockFreq+0x204>)
 800549a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800549c:	e0db      	b.n	8005656 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800549e:	4b73      	ldr	r3, [pc, #460]	; (800566c <HAL_RCC_GetSysClockFreq+0x208>)
 80054a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80054a2:	e0d8      	b.n	8005656 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054a4:	4b6f      	ldr	r3, [pc, #444]	; (8005664 <HAL_RCC_GetSysClockFreq+0x200>)
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054ac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054ae:	4b6d      	ldr	r3, [pc, #436]	; (8005664 <HAL_RCC_GetSysClockFreq+0x200>)
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d063      	beq.n	8005582 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054ba:	4b6a      	ldr	r3, [pc, #424]	; (8005664 <HAL_RCC_GetSysClockFreq+0x200>)
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	099b      	lsrs	r3, r3, #6
 80054c0:	2200      	movs	r2, #0
 80054c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80054c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80054c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054cc:	633b      	str	r3, [r7, #48]	; 0x30
 80054ce:	2300      	movs	r3, #0
 80054d0:	637b      	str	r3, [r7, #52]	; 0x34
 80054d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80054d6:	4622      	mov	r2, r4
 80054d8:	462b      	mov	r3, r5
 80054da:	f04f 0000 	mov.w	r0, #0
 80054de:	f04f 0100 	mov.w	r1, #0
 80054e2:	0159      	lsls	r1, r3, #5
 80054e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054e8:	0150      	lsls	r0, r2, #5
 80054ea:	4602      	mov	r2, r0
 80054ec:	460b      	mov	r3, r1
 80054ee:	4621      	mov	r1, r4
 80054f0:	1a51      	subs	r1, r2, r1
 80054f2:	6139      	str	r1, [r7, #16]
 80054f4:	4629      	mov	r1, r5
 80054f6:	eb63 0301 	sbc.w	r3, r3, r1
 80054fa:	617b      	str	r3, [r7, #20]
 80054fc:	f04f 0200 	mov.w	r2, #0
 8005500:	f04f 0300 	mov.w	r3, #0
 8005504:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005508:	4659      	mov	r1, fp
 800550a:	018b      	lsls	r3, r1, #6
 800550c:	4651      	mov	r1, sl
 800550e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005512:	4651      	mov	r1, sl
 8005514:	018a      	lsls	r2, r1, #6
 8005516:	4651      	mov	r1, sl
 8005518:	ebb2 0801 	subs.w	r8, r2, r1
 800551c:	4659      	mov	r1, fp
 800551e:	eb63 0901 	sbc.w	r9, r3, r1
 8005522:	f04f 0200 	mov.w	r2, #0
 8005526:	f04f 0300 	mov.w	r3, #0
 800552a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800552e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005532:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005536:	4690      	mov	r8, r2
 8005538:	4699      	mov	r9, r3
 800553a:	4623      	mov	r3, r4
 800553c:	eb18 0303 	adds.w	r3, r8, r3
 8005540:	60bb      	str	r3, [r7, #8]
 8005542:	462b      	mov	r3, r5
 8005544:	eb49 0303 	adc.w	r3, r9, r3
 8005548:	60fb      	str	r3, [r7, #12]
 800554a:	f04f 0200 	mov.w	r2, #0
 800554e:	f04f 0300 	mov.w	r3, #0
 8005552:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005556:	4629      	mov	r1, r5
 8005558:	024b      	lsls	r3, r1, #9
 800555a:	4621      	mov	r1, r4
 800555c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005560:	4621      	mov	r1, r4
 8005562:	024a      	lsls	r2, r1, #9
 8005564:	4610      	mov	r0, r2
 8005566:	4619      	mov	r1, r3
 8005568:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800556a:	2200      	movs	r2, #0
 800556c:	62bb      	str	r3, [r7, #40]	; 0x28
 800556e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005570:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005574:	f7fb faba 	bl	8000aec <__aeabi_uldivmod>
 8005578:	4602      	mov	r2, r0
 800557a:	460b      	mov	r3, r1
 800557c:	4613      	mov	r3, r2
 800557e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005580:	e058      	b.n	8005634 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005582:	4b38      	ldr	r3, [pc, #224]	; (8005664 <HAL_RCC_GetSysClockFreq+0x200>)
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	099b      	lsrs	r3, r3, #6
 8005588:	2200      	movs	r2, #0
 800558a:	4618      	mov	r0, r3
 800558c:	4611      	mov	r1, r2
 800558e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005592:	623b      	str	r3, [r7, #32]
 8005594:	2300      	movs	r3, #0
 8005596:	627b      	str	r3, [r7, #36]	; 0x24
 8005598:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800559c:	4642      	mov	r2, r8
 800559e:	464b      	mov	r3, r9
 80055a0:	f04f 0000 	mov.w	r0, #0
 80055a4:	f04f 0100 	mov.w	r1, #0
 80055a8:	0159      	lsls	r1, r3, #5
 80055aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055ae:	0150      	lsls	r0, r2, #5
 80055b0:	4602      	mov	r2, r0
 80055b2:	460b      	mov	r3, r1
 80055b4:	4641      	mov	r1, r8
 80055b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80055ba:	4649      	mov	r1, r9
 80055bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80055c0:	f04f 0200 	mov.w	r2, #0
 80055c4:	f04f 0300 	mov.w	r3, #0
 80055c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80055cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80055d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80055d4:	ebb2 040a 	subs.w	r4, r2, sl
 80055d8:	eb63 050b 	sbc.w	r5, r3, fp
 80055dc:	f04f 0200 	mov.w	r2, #0
 80055e0:	f04f 0300 	mov.w	r3, #0
 80055e4:	00eb      	lsls	r3, r5, #3
 80055e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055ea:	00e2      	lsls	r2, r4, #3
 80055ec:	4614      	mov	r4, r2
 80055ee:	461d      	mov	r5, r3
 80055f0:	4643      	mov	r3, r8
 80055f2:	18e3      	adds	r3, r4, r3
 80055f4:	603b      	str	r3, [r7, #0]
 80055f6:	464b      	mov	r3, r9
 80055f8:	eb45 0303 	adc.w	r3, r5, r3
 80055fc:	607b      	str	r3, [r7, #4]
 80055fe:	f04f 0200 	mov.w	r2, #0
 8005602:	f04f 0300 	mov.w	r3, #0
 8005606:	e9d7 4500 	ldrd	r4, r5, [r7]
 800560a:	4629      	mov	r1, r5
 800560c:	028b      	lsls	r3, r1, #10
 800560e:	4621      	mov	r1, r4
 8005610:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005614:	4621      	mov	r1, r4
 8005616:	028a      	lsls	r2, r1, #10
 8005618:	4610      	mov	r0, r2
 800561a:	4619      	mov	r1, r3
 800561c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800561e:	2200      	movs	r2, #0
 8005620:	61bb      	str	r3, [r7, #24]
 8005622:	61fa      	str	r2, [r7, #28]
 8005624:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005628:	f7fb fa60 	bl	8000aec <__aeabi_uldivmod>
 800562c:	4602      	mov	r2, r0
 800562e:	460b      	mov	r3, r1
 8005630:	4613      	mov	r3, r2
 8005632:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005634:	4b0b      	ldr	r3, [pc, #44]	; (8005664 <HAL_RCC_GetSysClockFreq+0x200>)
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	0c1b      	lsrs	r3, r3, #16
 800563a:	f003 0303 	and.w	r3, r3, #3
 800563e:	3301      	adds	r3, #1
 8005640:	005b      	lsls	r3, r3, #1
 8005642:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005644:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005646:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005648:	fbb2 f3f3 	udiv	r3, r2, r3
 800564c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800564e:	e002      	b.n	8005656 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005650:	4b05      	ldr	r3, [pc, #20]	; (8005668 <HAL_RCC_GetSysClockFreq+0x204>)
 8005652:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005654:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005656:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005658:	4618      	mov	r0, r3
 800565a:	3750      	adds	r7, #80	; 0x50
 800565c:	46bd      	mov	sp, r7
 800565e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005662:	bf00      	nop
 8005664:	40023800 	.word	0x40023800
 8005668:	00f42400 	.word	0x00f42400
 800566c:	007a1200 	.word	0x007a1200

08005670 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005670:	b480      	push	{r7}
 8005672:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005674:	4b03      	ldr	r3, [pc, #12]	; (8005684 <HAL_RCC_GetHCLKFreq+0x14>)
 8005676:	681b      	ldr	r3, [r3, #0]
}
 8005678:	4618      	mov	r0, r3
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	20000120 	.word	0x20000120

08005688 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800568c:	f7ff fff0 	bl	8005670 <HAL_RCC_GetHCLKFreq>
 8005690:	4602      	mov	r2, r0
 8005692:	4b05      	ldr	r3, [pc, #20]	; (80056a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	0a9b      	lsrs	r3, r3, #10
 8005698:	f003 0307 	and.w	r3, r3, #7
 800569c:	4903      	ldr	r1, [pc, #12]	; (80056ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800569e:	5ccb      	ldrb	r3, [r1, r3]
 80056a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	40023800 	.word	0x40023800
 80056ac:	08009940 	.word	0x08009940

080056b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80056b4:	f7ff ffdc 	bl	8005670 <HAL_RCC_GetHCLKFreq>
 80056b8:	4602      	mov	r2, r0
 80056ba:	4b05      	ldr	r3, [pc, #20]	; (80056d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	0b5b      	lsrs	r3, r3, #13
 80056c0:	f003 0307 	and.w	r3, r3, #7
 80056c4:	4903      	ldr	r1, [pc, #12]	; (80056d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056c6:	5ccb      	ldrb	r3, [r1, r3]
 80056c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	40023800 	.word	0x40023800
 80056d4:	08009940 	.word	0x08009940

080056d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	220f      	movs	r2, #15
 80056e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80056e8:	4b12      	ldr	r3, [pc, #72]	; (8005734 <HAL_RCC_GetClockConfig+0x5c>)
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	f003 0203 	and.w	r2, r3, #3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80056f4:	4b0f      	ldr	r3, [pc, #60]	; (8005734 <HAL_RCC_GetClockConfig+0x5c>)
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005700:	4b0c      	ldr	r3, [pc, #48]	; (8005734 <HAL_RCC_GetClockConfig+0x5c>)
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800570c:	4b09      	ldr	r3, [pc, #36]	; (8005734 <HAL_RCC_GetClockConfig+0x5c>)
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	08db      	lsrs	r3, r3, #3
 8005712:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800571a:	4b07      	ldr	r3, [pc, #28]	; (8005738 <HAL_RCC_GetClockConfig+0x60>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 020f 	and.w	r2, r3, #15
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	601a      	str	r2, [r3, #0]
}
 8005726:	bf00      	nop
 8005728:	370c      	adds	r7, #12
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	40023800 	.word	0x40023800
 8005738:	40023c00 	.word	0x40023c00

0800573c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d101      	bne.n	800574e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e07b      	b.n	8005846 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005752:	2b00      	cmp	r3, #0
 8005754:	d108      	bne.n	8005768 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800575e:	d009      	beq.n	8005774 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	61da      	str	r2, [r3, #28]
 8005766:	e005      	b.n	8005774 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b00      	cmp	r3, #0
 8005784:	d106      	bne.n	8005794 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f7fe fb00 	bl	8003d94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2202      	movs	r2, #2
 8005798:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80057bc:	431a      	orrs	r2, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057c6:	431a      	orrs	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	f003 0302 	and.w	r3, r3, #2
 80057d0:	431a      	orrs	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	f003 0301 	and.w	r3, r3, #1
 80057da:	431a      	orrs	r2, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057e4:	431a      	orrs	r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	69db      	ldr	r3, [r3, #28]
 80057ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057ee:	431a      	orrs	r2, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a1b      	ldr	r3, [r3, #32]
 80057f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057f8:	ea42 0103 	orr.w	r1, r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005800:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	430a      	orrs	r2, r1
 800580a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	699b      	ldr	r3, [r3, #24]
 8005810:	0c1b      	lsrs	r3, r3, #16
 8005812:	f003 0104 	and.w	r1, r3, #4
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581a:	f003 0210 	and.w	r2, r3, #16
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	430a      	orrs	r2, r1
 8005824:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	69da      	ldr	r2, [r3, #28]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005834:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3708      	adds	r7, #8
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800584e:	b580      	push	{r7, lr}
 8005850:	b088      	sub	sp, #32
 8005852:	af00      	add	r7, sp, #0
 8005854:	60f8      	str	r0, [r7, #12]
 8005856:	60b9      	str	r1, [r7, #8]
 8005858:	603b      	str	r3, [r7, #0]
 800585a:	4613      	mov	r3, r2
 800585c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800585e:	2300      	movs	r3, #0
 8005860:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005868:	2b01      	cmp	r3, #1
 800586a:	d101      	bne.n	8005870 <HAL_SPI_Transmit+0x22>
 800586c:	2302      	movs	r3, #2
 800586e:	e126      	b.n	8005abe <HAL_SPI_Transmit+0x270>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005878:	f7fe fe92 	bl	80045a0 <HAL_GetTick>
 800587c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800587e:	88fb      	ldrh	r3, [r7, #6]
 8005880:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b01      	cmp	r3, #1
 800588c:	d002      	beq.n	8005894 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800588e:	2302      	movs	r3, #2
 8005890:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005892:	e10b      	b.n	8005aac <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d002      	beq.n	80058a0 <HAL_SPI_Transmit+0x52>
 800589a:	88fb      	ldrh	r3, [r7, #6]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d102      	bne.n	80058a6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80058a4:	e102      	b.n	8005aac <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2203      	movs	r2, #3
 80058aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	88fa      	ldrh	r2, [r7, #6]
 80058be:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	88fa      	ldrh	r2, [r7, #6]
 80058c4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058ec:	d10f      	bne.n	800590e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800590c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005918:	2b40      	cmp	r3, #64	; 0x40
 800591a:	d007      	beq.n	800592c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800592a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005934:	d14b      	bne.n	80059ce <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d002      	beq.n	8005944 <HAL_SPI_Transmit+0xf6>
 800593e:	8afb      	ldrh	r3, [r7, #22]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d13e      	bne.n	80059c2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005948:	881a      	ldrh	r2, [r3, #0]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005954:	1c9a      	adds	r2, r3, #2
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800595e:	b29b      	uxth	r3, r3
 8005960:	3b01      	subs	r3, #1
 8005962:	b29a      	uxth	r2, r3
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005968:	e02b      	b.n	80059c2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	f003 0302 	and.w	r3, r3, #2
 8005974:	2b02      	cmp	r3, #2
 8005976:	d112      	bne.n	800599e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597c:	881a      	ldrh	r2, [r3, #0]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005988:	1c9a      	adds	r2, r3, #2
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005992:	b29b      	uxth	r3, r3
 8005994:	3b01      	subs	r3, #1
 8005996:	b29a      	uxth	r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	86da      	strh	r2, [r3, #54]	; 0x36
 800599c:	e011      	b.n	80059c2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800599e:	f7fe fdff 	bl	80045a0 <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	683a      	ldr	r2, [r7, #0]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d803      	bhi.n	80059b6 <HAL_SPI_Transmit+0x168>
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b4:	d102      	bne.n	80059bc <HAL_SPI_Transmit+0x16e>
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d102      	bne.n	80059c2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	77fb      	strb	r3, [r7, #31]
          goto error;
 80059c0:	e074      	b.n	8005aac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1ce      	bne.n	800596a <HAL_SPI_Transmit+0x11c>
 80059cc:	e04c      	b.n	8005a68 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d002      	beq.n	80059dc <HAL_SPI_Transmit+0x18e>
 80059d6:	8afb      	ldrh	r3, [r7, #22]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d140      	bne.n	8005a5e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	330c      	adds	r3, #12
 80059e6:	7812      	ldrb	r2, [r2, #0]
 80059e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ee:	1c5a      	adds	r2, r3, #1
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	3b01      	subs	r3, #1
 80059fc:	b29a      	uxth	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005a02:	e02c      	b.n	8005a5e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f003 0302 	and.w	r3, r3, #2
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d113      	bne.n	8005a3a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	330c      	adds	r3, #12
 8005a1c:	7812      	ldrb	r2, [r2, #0]
 8005a1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a24:	1c5a      	adds	r2, r3, #1
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	3b01      	subs	r3, #1
 8005a32:	b29a      	uxth	r2, r3
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	86da      	strh	r2, [r3, #54]	; 0x36
 8005a38:	e011      	b.n	8005a5e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a3a:	f7fe fdb1 	bl	80045a0 <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	683a      	ldr	r2, [r7, #0]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d803      	bhi.n	8005a52 <HAL_SPI_Transmit+0x204>
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a50:	d102      	bne.n	8005a58 <HAL_SPI_Transmit+0x20a>
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d102      	bne.n	8005a5e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a5c:	e026      	b.n	8005aac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1cd      	bne.n	8005a04 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a68:	69ba      	ldr	r2, [r7, #24]
 8005a6a:	6839      	ldr	r1, [r7, #0]
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f000 fbd9 	bl	8006224 <SPI_EndRxTxTransaction>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d002      	beq.n	8005a7e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2220      	movs	r2, #32
 8005a7c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10a      	bne.n	8005a9c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a86:	2300      	movs	r3, #0
 8005a88:	613b      	str	r3, [r7, #16]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	613b      	str	r3, [r7, #16]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	613b      	str	r3, [r7, #16]
 8005a9a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d002      	beq.n	8005aaa <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	77fb      	strb	r3, [r7, #31]
 8005aa8:	e000      	b.n	8005aac <HAL_SPI_Transmit+0x25e>
  }

error:
 8005aaa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005abc:	7ffb      	ldrb	r3, [r7, #31]
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3720      	adds	r7, #32
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b088      	sub	sp, #32
 8005aca:	af02      	add	r7, sp, #8
 8005acc:	60f8      	str	r0, [r7, #12]
 8005ace:	60b9      	str	r1, [r7, #8]
 8005ad0:	603b      	str	r3, [r7, #0]
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ae2:	d112      	bne.n	8005b0a <HAL_SPI_Receive+0x44>
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d10e      	bne.n	8005b0a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2204      	movs	r2, #4
 8005af0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005af4:	88fa      	ldrh	r2, [r7, #6]
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	9300      	str	r3, [sp, #0]
 8005afa:	4613      	mov	r3, r2
 8005afc:	68ba      	ldr	r2, [r7, #8]
 8005afe:	68b9      	ldr	r1, [r7, #8]
 8005b00:	68f8      	ldr	r0, [r7, #12]
 8005b02:	f000 f8f1 	bl	8005ce8 <HAL_SPI_TransmitReceive>
 8005b06:	4603      	mov	r3, r0
 8005b08:	e0ea      	b.n	8005ce0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d101      	bne.n	8005b18 <HAL_SPI_Receive+0x52>
 8005b14:	2302      	movs	r3, #2
 8005b16:	e0e3      	b.n	8005ce0 <HAL_SPI_Receive+0x21a>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b20:	f7fe fd3e 	bl	80045a0 <HAL_GetTick>
 8005b24:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d002      	beq.n	8005b38 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005b32:	2302      	movs	r3, #2
 8005b34:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005b36:	e0ca      	b.n	8005cce <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d002      	beq.n	8005b44 <HAL_SPI_Receive+0x7e>
 8005b3e:	88fb      	ldrh	r3, [r7, #6]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d102      	bne.n	8005b4a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005b48:	e0c1      	b.n	8005cce <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2204      	movs	r2, #4
 8005b4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	68ba      	ldr	r2, [r7, #8]
 8005b5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	88fa      	ldrh	r2, [r7, #6]
 8005b62:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	88fa      	ldrh	r2, [r7, #6]
 8005b68:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2200      	movs	r2, #0
 8005b74:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b90:	d10f      	bne.n	8005bb2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ba0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005bb0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bbc:	2b40      	cmp	r3, #64	; 0x40
 8005bbe:	d007      	beq.n	8005bd0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bce:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d162      	bne.n	8005c9e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005bd8:	e02e      	b.n	8005c38 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f003 0301 	and.w	r3, r3, #1
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d115      	bne.n	8005c14 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f103 020c 	add.w	r2, r3, #12
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf4:	7812      	ldrb	r2, [r2, #0]
 8005bf6:	b2d2      	uxtb	r2, r2
 8005bf8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfe:	1c5a      	adds	r2, r3, #1
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	b29a      	uxth	r2, r3
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c12:	e011      	b.n	8005c38 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c14:	f7fe fcc4 	bl	80045a0 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	683a      	ldr	r2, [r7, #0]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d803      	bhi.n	8005c2c <HAL_SPI_Receive+0x166>
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c2a:	d102      	bne.n	8005c32 <HAL_SPI_Receive+0x16c>
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d102      	bne.n	8005c38 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005c36:	e04a      	b.n	8005cce <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1cb      	bne.n	8005bda <HAL_SPI_Receive+0x114>
 8005c42:	e031      	b.n	8005ca8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	f003 0301 	and.w	r3, r3, #1
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d113      	bne.n	8005c7a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68da      	ldr	r2, [r3, #12]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5c:	b292      	uxth	r2, r2
 8005c5e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c64:	1c9a      	adds	r2, r3, #2
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	3b01      	subs	r3, #1
 8005c72:	b29a      	uxth	r2, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c78:	e011      	b.n	8005c9e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c7a:	f7fe fc91 	bl	80045a0 <HAL_GetTick>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	683a      	ldr	r2, [r7, #0]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d803      	bhi.n	8005c92 <HAL_SPI_Receive+0x1cc>
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c90:	d102      	bne.n	8005c98 <HAL_SPI_Receive+0x1d2>
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d102      	bne.n	8005c9e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005c9c:	e017      	b.n	8005cce <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1cd      	bne.n	8005c44 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ca8:	693a      	ldr	r2, [r7, #16]
 8005caa:	6839      	ldr	r1, [r7, #0]
 8005cac:	68f8      	ldr	r0, [r7, #12]
 8005cae:	f000 fa53 	bl	8006158 <SPI_EndRxTransaction>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d002      	beq.n	8005cbe <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2220      	movs	r2, #32
 8005cbc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d002      	beq.n	8005ccc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	75fb      	strb	r3, [r7, #23]
 8005cca:	e000      	b.n	8005cce <HAL_SPI_Receive+0x208>
  }

error :
 8005ccc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005cde:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3718      	adds	r7, #24
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b08c      	sub	sp, #48	; 0x30
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	607a      	str	r2, [r7, #4]
 8005cf4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d101      	bne.n	8005d0e <HAL_SPI_TransmitReceive+0x26>
 8005d0a:	2302      	movs	r3, #2
 8005d0c:	e18a      	b.n	8006024 <HAL_SPI_TransmitReceive+0x33c>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d16:	f7fe fc43 	bl	80045a0 <HAL_GetTick>
 8005d1a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005d2c:	887b      	ldrh	r3, [r7, #2]
 8005d2e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005d30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d00f      	beq.n	8005d58 <HAL_SPI_TransmitReceive+0x70>
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d3e:	d107      	bne.n	8005d50 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d103      	bne.n	8005d50 <HAL_SPI_TransmitReceive+0x68>
 8005d48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d4c:	2b04      	cmp	r3, #4
 8005d4e:	d003      	beq.n	8005d58 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005d50:	2302      	movs	r3, #2
 8005d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005d56:	e15b      	b.n	8006010 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d005      	beq.n	8005d6a <HAL_SPI_TransmitReceive+0x82>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d002      	beq.n	8005d6a <HAL_SPI_TransmitReceive+0x82>
 8005d64:	887b      	ldrh	r3, [r7, #2]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d103      	bne.n	8005d72 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005d70:	e14e      	b.n	8006010 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	2b04      	cmp	r3, #4
 8005d7c:	d003      	beq.n	8005d86 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2205      	movs	r2, #5
 8005d82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	887a      	ldrh	r2, [r7, #2]
 8005d96:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	887a      	ldrh	r2, [r7, #2]
 8005d9c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	68ba      	ldr	r2, [r7, #8]
 8005da2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	887a      	ldrh	r2, [r7, #2]
 8005da8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	887a      	ldrh	r2, [r7, #2]
 8005dae:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2200      	movs	r2, #0
 8005dba:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc6:	2b40      	cmp	r3, #64	; 0x40
 8005dc8:	d007      	beq.n	8005dda <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dd8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005de2:	d178      	bne.n	8005ed6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d002      	beq.n	8005df2 <HAL_SPI_TransmitReceive+0x10a>
 8005dec:	8b7b      	ldrh	r3, [r7, #26]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d166      	bne.n	8005ec0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df6:	881a      	ldrh	r2, [r3, #0]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e02:	1c9a      	adds	r2, r3, #2
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e16:	e053      	b.n	8005ec0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	f003 0302 	and.w	r3, r3, #2
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d11b      	bne.n	8005e5e <HAL_SPI_TransmitReceive+0x176>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d016      	beq.n	8005e5e <HAL_SPI_TransmitReceive+0x176>
 8005e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d113      	bne.n	8005e5e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3a:	881a      	ldrh	r2, [r3, #0]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e46:	1c9a      	adds	r2, r3, #2
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	3b01      	subs	r3, #1
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	f003 0301 	and.w	r3, r3, #1
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d119      	bne.n	8005ea0 <HAL_SPI_TransmitReceive+0x1b8>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d014      	beq.n	8005ea0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68da      	ldr	r2, [r3, #12]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e80:	b292      	uxth	r2, r2
 8005e82:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e88:	1c9a      	adds	r2, r3, #2
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	3b01      	subs	r3, #1
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005ea0:	f7fe fb7e 	bl	80045a0 <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d807      	bhi.n	8005ec0 <HAL_SPI_TransmitReceive+0x1d8>
 8005eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb6:	d003      	beq.n	8005ec0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005eb8:	2303      	movs	r3, #3
 8005eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005ebe:	e0a7      	b.n	8006010 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d1a6      	bne.n	8005e18 <HAL_SPI_TransmitReceive+0x130>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d1a1      	bne.n	8005e18 <HAL_SPI_TransmitReceive+0x130>
 8005ed4:	e07c      	b.n	8005fd0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d002      	beq.n	8005ee4 <HAL_SPI_TransmitReceive+0x1fc>
 8005ede:	8b7b      	ldrh	r3, [r7, #26]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d16b      	bne.n	8005fbc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	330c      	adds	r3, #12
 8005eee:	7812      	ldrb	r2, [r2, #0]
 8005ef0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef6:	1c5a      	adds	r2, r3, #1
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	3b01      	subs	r3, #1
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f0a:	e057      	b.n	8005fbc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	f003 0302 	and.w	r3, r3, #2
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d11c      	bne.n	8005f54 <HAL_SPI_TransmitReceive+0x26c>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d017      	beq.n	8005f54 <HAL_SPI_TransmitReceive+0x26c>
 8005f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d114      	bne.n	8005f54 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	330c      	adds	r3, #12
 8005f34:	7812      	ldrb	r2, [r2, #0]
 8005f36:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3c:	1c5a      	adds	r2, r3, #1
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f50:	2300      	movs	r3, #0
 8005f52:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d119      	bne.n	8005f96 <HAL_SPI_TransmitReceive+0x2ae>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d014      	beq.n	8005f96 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68da      	ldr	r2, [r3, #12]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f76:	b2d2      	uxtb	r2, r2
 8005f78:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f7e:	1c5a      	adds	r2, r3, #1
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	b29a      	uxth	r2, r3
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f92:	2301      	movs	r3, #1
 8005f94:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005f96:	f7fe fb03 	bl	80045a0 <HAL_GetTick>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d803      	bhi.n	8005fae <HAL_SPI_TransmitReceive+0x2c6>
 8005fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fac:	d102      	bne.n	8005fb4 <HAL_SPI_TransmitReceive+0x2cc>
 8005fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d103      	bne.n	8005fbc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005fba:	e029      	b.n	8006010 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1a2      	bne.n	8005f0c <HAL_SPI_TransmitReceive+0x224>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d19d      	bne.n	8005f0c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fd2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f000 f925 	bl	8006224 <SPI_EndRxTxTransaction>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d006      	beq.n	8005fee <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2220      	movs	r2, #32
 8005fea:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005fec:	e010      	b.n	8006010 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d10b      	bne.n	800600e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	617b      	str	r3, [r7, #20]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	617b      	str	r3, [r7, #20]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	617b      	str	r3, [r7, #20]
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	e000      	b.n	8006010 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800600e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006020:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006024:	4618      	mov	r0, r3
 8006026:	3730      	adds	r7, #48	; 0x30
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800603a:	b2db      	uxtb	r3, r3
}
 800603c:	4618      	mov	r0, r3
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b088      	sub	sp, #32
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	603b      	str	r3, [r7, #0]
 8006054:	4613      	mov	r3, r2
 8006056:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006058:	f7fe faa2 	bl	80045a0 <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006060:	1a9b      	subs	r3, r3, r2
 8006062:	683a      	ldr	r2, [r7, #0]
 8006064:	4413      	add	r3, r2
 8006066:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006068:	f7fe fa9a 	bl	80045a0 <HAL_GetTick>
 800606c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800606e:	4b39      	ldr	r3, [pc, #228]	; (8006154 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	015b      	lsls	r3, r3, #5
 8006074:	0d1b      	lsrs	r3, r3, #20
 8006076:	69fa      	ldr	r2, [r7, #28]
 8006078:	fb02 f303 	mul.w	r3, r2, r3
 800607c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800607e:	e054      	b.n	800612a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006086:	d050      	beq.n	800612a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006088:	f7fe fa8a 	bl	80045a0 <HAL_GetTick>
 800608c:	4602      	mov	r2, r0
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	69fa      	ldr	r2, [r7, #28]
 8006094:	429a      	cmp	r2, r3
 8006096:	d902      	bls.n	800609e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d13d      	bne.n	800611a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	685a      	ldr	r2, [r3, #4]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80060ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060b6:	d111      	bne.n	80060dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060c0:	d004      	beq.n	80060cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060ca:	d107      	bne.n	80060dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060e4:	d10f      	bne.n	8006106 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060f4:	601a      	str	r2, [r3, #0]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006104:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2201      	movs	r2, #1
 800610a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006116:	2303      	movs	r3, #3
 8006118:	e017      	b.n	800614a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d101      	bne.n	8006124 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006120:	2300      	movs	r3, #0
 8006122:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	3b01      	subs	r3, #1
 8006128:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	689a      	ldr	r2, [r3, #8]
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	4013      	ands	r3, r2
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	429a      	cmp	r2, r3
 8006138:	bf0c      	ite	eq
 800613a:	2301      	moveq	r3, #1
 800613c:	2300      	movne	r3, #0
 800613e:	b2db      	uxtb	r3, r3
 8006140:	461a      	mov	r2, r3
 8006142:	79fb      	ldrb	r3, [r7, #7]
 8006144:	429a      	cmp	r2, r3
 8006146:	d19b      	bne.n	8006080 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3720      	adds	r7, #32
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	20000120 	.word	0x20000120

08006158 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b086      	sub	sp, #24
 800615c:	af02      	add	r7, sp, #8
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800616c:	d111      	bne.n	8006192 <SPI_EndRxTransaction+0x3a>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006176:	d004      	beq.n	8006182 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006180:	d107      	bne.n	8006192 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006190:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800619a:	d12a      	bne.n	80061f2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061a4:	d012      	beq.n	80061cc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	9300      	str	r3, [sp, #0]
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	2200      	movs	r2, #0
 80061ae:	2180      	movs	r1, #128	; 0x80
 80061b0:	68f8      	ldr	r0, [r7, #12]
 80061b2:	f7ff ff49 	bl	8006048 <SPI_WaitFlagStateUntilTimeout>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d02d      	beq.n	8006218 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061c0:	f043 0220 	orr.w	r2, r3, #32
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	e026      	b.n	800621a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	9300      	str	r3, [sp, #0]
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	2200      	movs	r2, #0
 80061d4:	2101      	movs	r1, #1
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	f7ff ff36 	bl	8006048 <SPI_WaitFlagStateUntilTimeout>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d01a      	beq.n	8006218 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061e6:	f043 0220 	orr.w	r2, r3, #32
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80061ee:	2303      	movs	r3, #3
 80061f0:	e013      	b.n	800621a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	9300      	str	r3, [sp, #0]
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	2200      	movs	r2, #0
 80061fa:	2101      	movs	r1, #1
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f7ff ff23 	bl	8006048 <SPI_WaitFlagStateUntilTimeout>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d007      	beq.n	8006218 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800620c:	f043 0220 	orr.w	r2, r3, #32
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006214:	2303      	movs	r3, #3
 8006216:	e000      	b.n	800621a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	3710      	adds	r7, #16
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
	...

08006224 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b088      	sub	sp, #32
 8006228:	af02      	add	r7, sp, #8
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006230:	4b1b      	ldr	r3, [pc, #108]	; (80062a0 <SPI_EndRxTxTransaction+0x7c>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a1b      	ldr	r2, [pc, #108]	; (80062a4 <SPI_EndRxTxTransaction+0x80>)
 8006236:	fba2 2303 	umull	r2, r3, r2, r3
 800623a:	0d5b      	lsrs	r3, r3, #21
 800623c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006240:	fb02 f303 	mul.w	r3, r2, r3
 8006244:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800624e:	d112      	bne.n	8006276 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	9300      	str	r3, [sp, #0]
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	2200      	movs	r2, #0
 8006258:	2180      	movs	r1, #128	; 0x80
 800625a:	68f8      	ldr	r0, [r7, #12]
 800625c:	f7ff fef4 	bl	8006048 <SPI_WaitFlagStateUntilTimeout>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d016      	beq.n	8006294 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800626a:	f043 0220 	orr.w	r2, r3, #32
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	e00f      	b.n	8006296 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d00a      	beq.n	8006292 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	3b01      	subs	r3, #1
 8006280:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800628c:	2b80      	cmp	r3, #128	; 0x80
 800628e:	d0f2      	beq.n	8006276 <SPI_EndRxTxTransaction+0x52>
 8006290:	e000      	b.n	8006294 <SPI_EndRxTxTransaction+0x70>
        break;
 8006292:	bf00      	nop
  }

  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3718      	adds	r7, #24
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	20000120 	.word	0x20000120
 80062a4:	165e9f81 	.word	0x165e9f81

080062a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d101      	bne.n	80062ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e041      	b.n	800633e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d106      	bne.n	80062d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f7fd fda8 	bl	8003e24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2202      	movs	r2, #2
 80062d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	3304      	adds	r3, #4
 80062e4:	4619      	mov	r1, r3
 80062e6:	4610      	mov	r0, r2
 80062e8:	f000 fc7a 	bl	8006be0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	3708      	adds	r7, #8
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
	...

08006348 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006348:	b480      	push	{r7}
 800634a:	b085      	sub	sp, #20
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006356:	b2db      	uxtb	r3, r3
 8006358:	2b01      	cmp	r3, #1
 800635a:	d001      	beq.n	8006360 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e04e      	b.n	80063fe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2202      	movs	r2, #2
 8006364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68da      	ldr	r2, [r3, #12]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f042 0201 	orr.w	r2, r2, #1
 8006376:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a23      	ldr	r2, [pc, #140]	; (800640c <HAL_TIM_Base_Start_IT+0xc4>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d022      	beq.n	80063c8 <HAL_TIM_Base_Start_IT+0x80>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800638a:	d01d      	beq.n	80063c8 <HAL_TIM_Base_Start_IT+0x80>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a1f      	ldr	r2, [pc, #124]	; (8006410 <HAL_TIM_Base_Start_IT+0xc8>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d018      	beq.n	80063c8 <HAL_TIM_Base_Start_IT+0x80>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a1e      	ldr	r2, [pc, #120]	; (8006414 <HAL_TIM_Base_Start_IT+0xcc>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d013      	beq.n	80063c8 <HAL_TIM_Base_Start_IT+0x80>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a1c      	ldr	r2, [pc, #112]	; (8006418 <HAL_TIM_Base_Start_IT+0xd0>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d00e      	beq.n	80063c8 <HAL_TIM_Base_Start_IT+0x80>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a1b      	ldr	r2, [pc, #108]	; (800641c <HAL_TIM_Base_Start_IT+0xd4>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d009      	beq.n	80063c8 <HAL_TIM_Base_Start_IT+0x80>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a19      	ldr	r2, [pc, #100]	; (8006420 <HAL_TIM_Base_Start_IT+0xd8>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d004      	beq.n	80063c8 <HAL_TIM_Base_Start_IT+0x80>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a18      	ldr	r2, [pc, #96]	; (8006424 <HAL_TIM_Base_Start_IT+0xdc>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d111      	bne.n	80063ec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	f003 0307 	and.w	r3, r3, #7
 80063d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2b06      	cmp	r3, #6
 80063d8:	d010      	beq.n	80063fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f042 0201 	orr.w	r2, r2, #1
 80063e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063ea:	e007      	b.n	80063fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f042 0201 	orr.w	r2, r2, #1
 80063fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3714      	adds	r7, #20
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr
 800640a:	bf00      	nop
 800640c:	40010000 	.word	0x40010000
 8006410:	40000400 	.word	0x40000400
 8006414:	40000800 	.word	0x40000800
 8006418:	40000c00 	.word	0x40000c00
 800641c:	40010400 	.word	0x40010400
 8006420:	40014000 	.word	0x40014000
 8006424:	40001800 	.word	0x40001800

08006428 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d101      	bne.n	800643a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e041      	b.n	80064be <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006440:	b2db      	uxtb	r3, r3
 8006442:	2b00      	cmp	r3, #0
 8006444:	d106      	bne.n	8006454 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 f839 	bl	80064c6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2202      	movs	r2, #2
 8006458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	3304      	adds	r3, #4
 8006464:	4619      	mov	r1, r3
 8006466:	4610      	mov	r0, r2
 8006468:	f000 fbba 	bl	8006be0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3708      	adds	r7, #8
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80064c6:	b480      	push	{r7}
 80064c8:	b083      	sub	sp, #12
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80064ce:	bf00      	nop
 80064d0:	370c      	adds	r7, #12
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr
	...

080064dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d109      	bne.n	8006500 <HAL_TIM_PWM_Start+0x24>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	bf14      	ite	ne
 80064f8:	2301      	movne	r3, #1
 80064fa:	2300      	moveq	r3, #0
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	e022      	b.n	8006546 <HAL_TIM_PWM_Start+0x6a>
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	2b04      	cmp	r3, #4
 8006504:	d109      	bne.n	800651a <HAL_TIM_PWM_Start+0x3e>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800650c:	b2db      	uxtb	r3, r3
 800650e:	2b01      	cmp	r3, #1
 8006510:	bf14      	ite	ne
 8006512:	2301      	movne	r3, #1
 8006514:	2300      	moveq	r3, #0
 8006516:	b2db      	uxtb	r3, r3
 8006518:	e015      	b.n	8006546 <HAL_TIM_PWM_Start+0x6a>
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	2b08      	cmp	r3, #8
 800651e:	d109      	bne.n	8006534 <HAL_TIM_PWM_Start+0x58>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006526:	b2db      	uxtb	r3, r3
 8006528:	2b01      	cmp	r3, #1
 800652a:	bf14      	ite	ne
 800652c:	2301      	movne	r3, #1
 800652e:	2300      	moveq	r3, #0
 8006530:	b2db      	uxtb	r3, r3
 8006532:	e008      	b.n	8006546 <HAL_TIM_PWM_Start+0x6a>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2b01      	cmp	r3, #1
 800653e:	bf14      	ite	ne
 8006540:	2301      	movne	r3, #1
 8006542:	2300      	moveq	r3, #0
 8006544:	b2db      	uxtb	r3, r3
 8006546:	2b00      	cmp	r3, #0
 8006548:	d001      	beq.n	800654e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e07c      	b.n	8006648 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d104      	bne.n	800655e <HAL_TIM_PWM_Start+0x82>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2202      	movs	r2, #2
 8006558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800655c:	e013      	b.n	8006586 <HAL_TIM_PWM_Start+0xaa>
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	2b04      	cmp	r3, #4
 8006562:	d104      	bne.n	800656e <HAL_TIM_PWM_Start+0x92>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2202      	movs	r2, #2
 8006568:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800656c:	e00b      	b.n	8006586 <HAL_TIM_PWM_Start+0xaa>
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	2b08      	cmp	r3, #8
 8006572:	d104      	bne.n	800657e <HAL_TIM_PWM_Start+0xa2>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2202      	movs	r2, #2
 8006578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800657c:	e003      	b.n	8006586 <HAL_TIM_PWM_Start+0xaa>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2202      	movs	r2, #2
 8006582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2201      	movs	r2, #1
 800658c:	6839      	ldr	r1, [r7, #0]
 800658e:	4618      	mov	r0, r3
 8006590:	f000 fe10 	bl	80071b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a2d      	ldr	r2, [pc, #180]	; (8006650 <HAL_TIM_PWM_Start+0x174>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d004      	beq.n	80065a8 <HAL_TIM_PWM_Start+0xcc>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a2c      	ldr	r2, [pc, #176]	; (8006654 <HAL_TIM_PWM_Start+0x178>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d101      	bne.n	80065ac <HAL_TIM_PWM_Start+0xd0>
 80065a8:	2301      	movs	r3, #1
 80065aa:	e000      	b.n	80065ae <HAL_TIM_PWM_Start+0xd2>
 80065ac:	2300      	movs	r3, #0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d007      	beq.n	80065c2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a22      	ldr	r2, [pc, #136]	; (8006650 <HAL_TIM_PWM_Start+0x174>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d022      	beq.n	8006612 <HAL_TIM_PWM_Start+0x136>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065d4:	d01d      	beq.n	8006612 <HAL_TIM_PWM_Start+0x136>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a1f      	ldr	r2, [pc, #124]	; (8006658 <HAL_TIM_PWM_Start+0x17c>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d018      	beq.n	8006612 <HAL_TIM_PWM_Start+0x136>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a1d      	ldr	r2, [pc, #116]	; (800665c <HAL_TIM_PWM_Start+0x180>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d013      	beq.n	8006612 <HAL_TIM_PWM_Start+0x136>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a1c      	ldr	r2, [pc, #112]	; (8006660 <HAL_TIM_PWM_Start+0x184>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d00e      	beq.n	8006612 <HAL_TIM_PWM_Start+0x136>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a16      	ldr	r2, [pc, #88]	; (8006654 <HAL_TIM_PWM_Start+0x178>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d009      	beq.n	8006612 <HAL_TIM_PWM_Start+0x136>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a18      	ldr	r2, [pc, #96]	; (8006664 <HAL_TIM_PWM_Start+0x188>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d004      	beq.n	8006612 <HAL_TIM_PWM_Start+0x136>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a16      	ldr	r2, [pc, #88]	; (8006668 <HAL_TIM_PWM_Start+0x18c>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d111      	bne.n	8006636 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	f003 0307 	and.w	r3, r3, #7
 800661c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2b06      	cmp	r3, #6
 8006622:	d010      	beq.n	8006646 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f042 0201 	orr.w	r2, r2, #1
 8006632:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006634:	e007      	b.n	8006646 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f042 0201 	orr.w	r2, r2, #1
 8006644:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	3710      	adds	r7, #16
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}
 8006650:	40010000 	.word	0x40010000
 8006654:	40010400 	.word	0x40010400
 8006658:	40000400 	.word	0x40000400
 800665c:	40000800 	.word	0x40000800
 8006660:	40000c00 	.word	0x40000c00
 8006664:	40014000 	.word	0x40014000
 8006668:	40001800 	.word	0x40001800

0800666c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	f003 0302 	and.w	r3, r3, #2
 800667e:	2b02      	cmp	r3, #2
 8006680:	d122      	bne.n	80066c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	f003 0302 	and.w	r3, r3, #2
 800668c:	2b02      	cmp	r3, #2
 800668e:	d11b      	bne.n	80066c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f06f 0202 	mvn.w	r2, #2
 8006698:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2201      	movs	r2, #1
 800669e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	699b      	ldr	r3, [r3, #24]
 80066a6:	f003 0303 	and.w	r3, r3, #3
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d003      	beq.n	80066b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 fa77 	bl	8006ba2 <HAL_TIM_IC_CaptureCallback>
 80066b4:	e005      	b.n	80066c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 fa69 	bl	8006b8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 fa7a 	bl	8006bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	f003 0304 	and.w	r3, r3, #4
 80066d2:	2b04      	cmp	r3, #4
 80066d4:	d122      	bne.n	800671c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	f003 0304 	and.w	r3, r3, #4
 80066e0:	2b04      	cmp	r3, #4
 80066e2:	d11b      	bne.n	800671c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f06f 0204 	mvn.w	r2, #4
 80066ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2202      	movs	r2, #2
 80066f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d003      	beq.n	800670a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 fa4d 	bl	8006ba2 <HAL_TIM_IC_CaptureCallback>
 8006708:	e005      	b.n	8006716 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 fa3f 	bl	8006b8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 fa50 	bl	8006bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	f003 0308 	and.w	r3, r3, #8
 8006726:	2b08      	cmp	r3, #8
 8006728:	d122      	bne.n	8006770 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	f003 0308 	and.w	r3, r3, #8
 8006734:	2b08      	cmp	r3, #8
 8006736:	d11b      	bne.n	8006770 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f06f 0208 	mvn.w	r2, #8
 8006740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2204      	movs	r2, #4
 8006746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	69db      	ldr	r3, [r3, #28]
 800674e:	f003 0303 	and.w	r3, r3, #3
 8006752:	2b00      	cmp	r3, #0
 8006754:	d003      	beq.n	800675e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 fa23 	bl	8006ba2 <HAL_TIM_IC_CaptureCallback>
 800675c:	e005      	b.n	800676a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 fa15 	bl	8006b8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 fa26 	bl	8006bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	f003 0310 	and.w	r3, r3, #16
 800677a:	2b10      	cmp	r3, #16
 800677c:	d122      	bne.n	80067c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	f003 0310 	and.w	r3, r3, #16
 8006788:	2b10      	cmp	r3, #16
 800678a:	d11b      	bne.n	80067c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f06f 0210 	mvn.w	r2, #16
 8006794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2208      	movs	r2, #8
 800679a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d003      	beq.n	80067b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f9f9 	bl	8006ba2 <HAL_TIM_IC_CaptureCallback>
 80067b0:	e005      	b.n	80067be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 f9eb 	bl	8006b8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 f9fc 	bl	8006bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	f003 0301 	and.w	r3, r3, #1
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d10e      	bne.n	80067f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	f003 0301 	and.w	r3, r3, #1
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d107      	bne.n	80067f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f06f 0201 	mvn.w	r2, #1
 80067e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f7fd f8ae 	bl	800394c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067fa:	2b80      	cmp	r3, #128	; 0x80
 80067fc:	d10e      	bne.n	800681c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006808:	2b80      	cmp	r3, #128	; 0x80
 800680a:	d107      	bne.n	800681c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 fdca 	bl	80073b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006826:	2b40      	cmp	r3, #64	; 0x40
 8006828:	d10e      	bne.n	8006848 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006834:	2b40      	cmp	r3, #64	; 0x40
 8006836:	d107      	bne.n	8006848 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 f9c1 	bl	8006bca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	f003 0320 	and.w	r3, r3, #32
 8006852:	2b20      	cmp	r3, #32
 8006854:	d10e      	bne.n	8006874 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	f003 0320 	and.w	r3, r3, #32
 8006860:	2b20      	cmp	r3, #32
 8006862:	d107      	bne.n	8006874 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f06f 0220 	mvn.w	r2, #32
 800686c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 fd94 	bl	800739c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006874:	bf00      	nop
 8006876:	3708      	adds	r7, #8
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b086      	sub	sp, #24
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	60b9      	str	r1, [r7, #8]
 8006886:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006888:	2300      	movs	r3, #0
 800688a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006892:	2b01      	cmp	r3, #1
 8006894:	d101      	bne.n	800689a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006896:	2302      	movs	r3, #2
 8006898:	e0ae      	b.n	80069f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2201      	movs	r2, #1
 800689e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2b0c      	cmp	r3, #12
 80068a6:	f200 809f 	bhi.w	80069e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80068aa:	a201      	add	r2, pc, #4	; (adr r2, 80068b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80068ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b0:	080068e5 	.word	0x080068e5
 80068b4:	080069e9 	.word	0x080069e9
 80068b8:	080069e9 	.word	0x080069e9
 80068bc:	080069e9 	.word	0x080069e9
 80068c0:	08006925 	.word	0x08006925
 80068c4:	080069e9 	.word	0x080069e9
 80068c8:	080069e9 	.word	0x080069e9
 80068cc:	080069e9 	.word	0x080069e9
 80068d0:	08006967 	.word	0x08006967
 80068d4:	080069e9 	.word	0x080069e9
 80068d8:	080069e9 	.word	0x080069e9
 80068dc:	080069e9 	.word	0x080069e9
 80068e0:	080069a7 	.word	0x080069a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68b9      	ldr	r1, [r7, #8]
 80068ea:	4618      	mov	r0, r3
 80068ec:	f000 fa18 	bl	8006d20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	699a      	ldr	r2, [r3, #24]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f042 0208 	orr.w	r2, r2, #8
 80068fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	699a      	ldr	r2, [r3, #24]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f022 0204 	bic.w	r2, r2, #4
 800690e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	6999      	ldr	r1, [r3, #24]
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	691a      	ldr	r2, [r3, #16]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	430a      	orrs	r2, r1
 8006920:	619a      	str	r2, [r3, #24]
      break;
 8006922:	e064      	b.n	80069ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	68b9      	ldr	r1, [r7, #8]
 800692a:	4618      	mov	r0, r3
 800692c:	f000 fa68 	bl	8006e00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	699a      	ldr	r2, [r3, #24]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800693e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	699a      	ldr	r2, [r3, #24]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800694e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	6999      	ldr	r1, [r3, #24]
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	021a      	lsls	r2, r3, #8
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	430a      	orrs	r2, r1
 8006962:	619a      	str	r2, [r3, #24]
      break;
 8006964:	e043      	b.n	80069ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68b9      	ldr	r1, [r7, #8]
 800696c:	4618      	mov	r0, r3
 800696e:	f000 fabd 	bl	8006eec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	69da      	ldr	r2, [r3, #28]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f042 0208 	orr.w	r2, r2, #8
 8006980:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	69da      	ldr	r2, [r3, #28]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f022 0204 	bic.w	r2, r2, #4
 8006990:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	69d9      	ldr	r1, [r3, #28]
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	691a      	ldr	r2, [r3, #16]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	430a      	orrs	r2, r1
 80069a2:	61da      	str	r2, [r3, #28]
      break;
 80069a4:	e023      	b.n	80069ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68b9      	ldr	r1, [r7, #8]
 80069ac:	4618      	mov	r0, r3
 80069ae:	f000 fb11 	bl	8006fd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	69da      	ldr	r2, [r3, #28]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	69da      	ldr	r2, [r3, #28]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	69d9      	ldr	r1, [r3, #28]
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	021a      	lsls	r2, r3, #8
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	430a      	orrs	r2, r1
 80069e4:	61da      	str	r2, [r3, #28]
      break;
 80069e6:	e002      	b.n	80069ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	75fb      	strb	r3, [r7, #23]
      break;
 80069ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3718      	adds	r7, #24
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d101      	bne.n	8006a1c <HAL_TIM_ConfigClockSource+0x1c>
 8006a18:	2302      	movs	r3, #2
 8006a1a:	e0b4      	b.n	8006b86 <HAL_TIM_ConfigClockSource+0x186>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2202      	movs	r2, #2
 8006a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006a3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68ba      	ldr	r2, [r7, #8]
 8006a4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a54:	d03e      	beq.n	8006ad4 <HAL_TIM_ConfigClockSource+0xd4>
 8006a56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a5a:	f200 8087 	bhi.w	8006b6c <HAL_TIM_ConfigClockSource+0x16c>
 8006a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a62:	f000 8086 	beq.w	8006b72 <HAL_TIM_ConfigClockSource+0x172>
 8006a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a6a:	d87f      	bhi.n	8006b6c <HAL_TIM_ConfigClockSource+0x16c>
 8006a6c:	2b70      	cmp	r3, #112	; 0x70
 8006a6e:	d01a      	beq.n	8006aa6 <HAL_TIM_ConfigClockSource+0xa6>
 8006a70:	2b70      	cmp	r3, #112	; 0x70
 8006a72:	d87b      	bhi.n	8006b6c <HAL_TIM_ConfigClockSource+0x16c>
 8006a74:	2b60      	cmp	r3, #96	; 0x60
 8006a76:	d050      	beq.n	8006b1a <HAL_TIM_ConfigClockSource+0x11a>
 8006a78:	2b60      	cmp	r3, #96	; 0x60
 8006a7a:	d877      	bhi.n	8006b6c <HAL_TIM_ConfigClockSource+0x16c>
 8006a7c:	2b50      	cmp	r3, #80	; 0x50
 8006a7e:	d03c      	beq.n	8006afa <HAL_TIM_ConfigClockSource+0xfa>
 8006a80:	2b50      	cmp	r3, #80	; 0x50
 8006a82:	d873      	bhi.n	8006b6c <HAL_TIM_ConfigClockSource+0x16c>
 8006a84:	2b40      	cmp	r3, #64	; 0x40
 8006a86:	d058      	beq.n	8006b3a <HAL_TIM_ConfigClockSource+0x13a>
 8006a88:	2b40      	cmp	r3, #64	; 0x40
 8006a8a:	d86f      	bhi.n	8006b6c <HAL_TIM_ConfigClockSource+0x16c>
 8006a8c:	2b30      	cmp	r3, #48	; 0x30
 8006a8e:	d064      	beq.n	8006b5a <HAL_TIM_ConfigClockSource+0x15a>
 8006a90:	2b30      	cmp	r3, #48	; 0x30
 8006a92:	d86b      	bhi.n	8006b6c <HAL_TIM_ConfigClockSource+0x16c>
 8006a94:	2b20      	cmp	r3, #32
 8006a96:	d060      	beq.n	8006b5a <HAL_TIM_ConfigClockSource+0x15a>
 8006a98:	2b20      	cmp	r3, #32
 8006a9a:	d867      	bhi.n	8006b6c <HAL_TIM_ConfigClockSource+0x16c>
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d05c      	beq.n	8006b5a <HAL_TIM_ConfigClockSource+0x15a>
 8006aa0:	2b10      	cmp	r3, #16
 8006aa2:	d05a      	beq.n	8006b5a <HAL_TIM_ConfigClockSource+0x15a>
 8006aa4:	e062      	b.n	8006b6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6818      	ldr	r0, [r3, #0]
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	6899      	ldr	r1, [r3, #8]
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	685a      	ldr	r2, [r3, #4]
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	f000 fb5d 	bl	8007174 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ac8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68ba      	ldr	r2, [r7, #8]
 8006ad0:	609a      	str	r2, [r3, #8]
      break;
 8006ad2:	e04f      	b.n	8006b74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6818      	ldr	r0, [r3, #0]
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	6899      	ldr	r1, [r3, #8]
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	685a      	ldr	r2, [r3, #4]
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	f000 fb46 	bl	8007174 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	689a      	ldr	r2, [r3, #8]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006af6:	609a      	str	r2, [r3, #8]
      break;
 8006af8:	e03c      	b.n	8006b74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6818      	ldr	r0, [r3, #0]
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	6859      	ldr	r1, [r3, #4]
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	461a      	mov	r2, r3
 8006b08:	f000 faba 	bl	8007080 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2150      	movs	r1, #80	; 0x50
 8006b12:	4618      	mov	r0, r3
 8006b14:	f000 fb13 	bl	800713e <TIM_ITRx_SetConfig>
      break;
 8006b18:	e02c      	b.n	8006b74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6818      	ldr	r0, [r3, #0]
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	6859      	ldr	r1, [r3, #4]
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	461a      	mov	r2, r3
 8006b28:	f000 fad9 	bl	80070de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2160      	movs	r1, #96	; 0x60
 8006b32:	4618      	mov	r0, r3
 8006b34:	f000 fb03 	bl	800713e <TIM_ITRx_SetConfig>
      break;
 8006b38:	e01c      	b.n	8006b74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6818      	ldr	r0, [r3, #0]
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	6859      	ldr	r1, [r3, #4]
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	461a      	mov	r2, r3
 8006b48:	f000 fa9a 	bl	8007080 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2140      	movs	r1, #64	; 0x40
 8006b52:	4618      	mov	r0, r3
 8006b54:	f000 faf3 	bl	800713e <TIM_ITRx_SetConfig>
      break;
 8006b58:	e00c      	b.n	8006b74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4619      	mov	r1, r3
 8006b64:	4610      	mov	r0, r2
 8006b66:	f000 faea 	bl	800713e <TIM_ITRx_SetConfig>
      break;
 8006b6a:	e003      	b.n	8006b74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b70:	e000      	b.n	8006b74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006b72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3710      	adds	r7, #16
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b8e:	b480      	push	{r7}
 8006b90:	b083      	sub	sp, #12
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b96:	bf00      	nop
 8006b98:	370c      	adds	r7, #12
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr

08006ba2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ba2:	b480      	push	{r7}
 8006ba4:	b083      	sub	sp, #12
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006baa:	bf00      	nop
 8006bac:	370c      	adds	r7, #12
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr

08006bb6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	b083      	sub	sp, #12
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006bbe:	bf00      	nop
 8006bc0:	370c      	adds	r7, #12
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr

08006bca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006bca:	b480      	push	{r7}
 8006bcc:	b083      	sub	sp, #12
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006bd2:	bf00      	nop
 8006bd4:	370c      	adds	r7, #12
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr
	...

08006be0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b085      	sub	sp, #20
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4a40      	ldr	r2, [pc, #256]	; (8006cf4 <TIM_Base_SetConfig+0x114>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d013      	beq.n	8006c20 <TIM_Base_SetConfig+0x40>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bfe:	d00f      	beq.n	8006c20 <TIM_Base_SetConfig+0x40>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a3d      	ldr	r2, [pc, #244]	; (8006cf8 <TIM_Base_SetConfig+0x118>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d00b      	beq.n	8006c20 <TIM_Base_SetConfig+0x40>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a3c      	ldr	r2, [pc, #240]	; (8006cfc <TIM_Base_SetConfig+0x11c>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d007      	beq.n	8006c20 <TIM_Base_SetConfig+0x40>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a3b      	ldr	r2, [pc, #236]	; (8006d00 <TIM_Base_SetConfig+0x120>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d003      	beq.n	8006c20 <TIM_Base_SetConfig+0x40>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a3a      	ldr	r2, [pc, #232]	; (8006d04 <TIM_Base_SetConfig+0x124>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d108      	bne.n	8006c32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4a2f      	ldr	r2, [pc, #188]	; (8006cf4 <TIM_Base_SetConfig+0x114>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d02b      	beq.n	8006c92 <TIM_Base_SetConfig+0xb2>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c40:	d027      	beq.n	8006c92 <TIM_Base_SetConfig+0xb2>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a2c      	ldr	r2, [pc, #176]	; (8006cf8 <TIM_Base_SetConfig+0x118>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d023      	beq.n	8006c92 <TIM_Base_SetConfig+0xb2>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a2b      	ldr	r2, [pc, #172]	; (8006cfc <TIM_Base_SetConfig+0x11c>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d01f      	beq.n	8006c92 <TIM_Base_SetConfig+0xb2>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a2a      	ldr	r2, [pc, #168]	; (8006d00 <TIM_Base_SetConfig+0x120>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d01b      	beq.n	8006c92 <TIM_Base_SetConfig+0xb2>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a29      	ldr	r2, [pc, #164]	; (8006d04 <TIM_Base_SetConfig+0x124>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d017      	beq.n	8006c92 <TIM_Base_SetConfig+0xb2>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a28      	ldr	r2, [pc, #160]	; (8006d08 <TIM_Base_SetConfig+0x128>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d013      	beq.n	8006c92 <TIM_Base_SetConfig+0xb2>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a27      	ldr	r2, [pc, #156]	; (8006d0c <TIM_Base_SetConfig+0x12c>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d00f      	beq.n	8006c92 <TIM_Base_SetConfig+0xb2>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a26      	ldr	r2, [pc, #152]	; (8006d10 <TIM_Base_SetConfig+0x130>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d00b      	beq.n	8006c92 <TIM_Base_SetConfig+0xb2>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a25      	ldr	r2, [pc, #148]	; (8006d14 <TIM_Base_SetConfig+0x134>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d007      	beq.n	8006c92 <TIM_Base_SetConfig+0xb2>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a24      	ldr	r2, [pc, #144]	; (8006d18 <TIM_Base_SetConfig+0x138>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d003      	beq.n	8006c92 <TIM_Base_SetConfig+0xb2>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a23      	ldr	r2, [pc, #140]	; (8006d1c <TIM_Base_SetConfig+0x13c>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d108      	bne.n	8006ca4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	695b      	ldr	r3, [r3, #20]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	689a      	ldr	r2, [r3, #8]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a0a      	ldr	r2, [pc, #40]	; (8006cf4 <TIM_Base_SetConfig+0x114>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d003      	beq.n	8006cd8 <TIM_Base_SetConfig+0xf8>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a0c      	ldr	r2, [pc, #48]	; (8006d04 <TIM_Base_SetConfig+0x124>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d103      	bne.n	8006ce0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	691a      	ldr	r2, [r3, #16]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	615a      	str	r2, [r3, #20]
}
 8006ce6:	bf00      	nop
 8006ce8:	3714      	adds	r7, #20
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr
 8006cf2:	bf00      	nop
 8006cf4:	40010000 	.word	0x40010000
 8006cf8:	40000400 	.word	0x40000400
 8006cfc:	40000800 	.word	0x40000800
 8006d00:	40000c00 	.word	0x40000c00
 8006d04:	40010400 	.word	0x40010400
 8006d08:	40014000 	.word	0x40014000
 8006d0c:	40014400 	.word	0x40014400
 8006d10:	40014800 	.word	0x40014800
 8006d14:	40001800 	.word	0x40001800
 8006d18:	40001c00 	.word	0x40001c00
 8006d1c:	40002000 	.word	0x40002000

08006d20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b087      	sub	sp, #28
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a1b      	ldr	r3, [r3, #32]
 8006d2e:	f023 0201 	bic.w	r2, r3, #1
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6a1b      	ldr	r3, [r3, #32]
 8006d3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	699b      	ldr	r3, [r3, #24]
 8006d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f023 0303 	bic.w	r3, r3, #3
 8006d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	f023 0302 	bic.w	r3, r3, #2
 8006d68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	697a      	ldr	r2, [r7, #20]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a20      	ldr	r2, [pc, #128]	; (8006df8 <TIM_OC1_SetConfig+0xd8>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d003      	beq.n	8006d84 <TIM_OC1_SetConfig+0x64>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a1f      	ldr	r2, [pc, #124]	; (8006dfc <TIM_OC1_SetConfig+0xdc>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d10c      	bne.n	8006d9e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	f023 0308 	bic.w	r3, r3, #8
 8006d8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	697a      	ldr	r2, [r7, #20]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	f023 0304 	bic.w	r3, r3, #4
 8006d9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a15      	ldr	r2, [pc, #84]	; (8006df8 <TIM_OC1_SetConfig+0xd8>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d003      	beq.n	8006dae <TIM_OC1_SetConfig+0x8e>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a14      	ldr	r2, [pc, #80]	; (8006dfc <TIM_OC1_SetConfig+0xdc>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d111      	bne.n	8006dd2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006db4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006dbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	695b      	ldr	r3, [r3, #20]
 8006dc2:	693a      	ldr	r2, [r7, #16]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	699b      	ldr	r3, [r3, #24]
 8006dcc:	693a      	ldr	r2, [r7, #16]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	693a      	ldr	r2, [r7, #16]
 8006dd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	685a      	ldr	r2, [r3, #4]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	697a      	ldr	r2, [r7, #20]
 8006dea:	621a      	str	r2, [r3, #32]
}
 8006dec:	bf00      	nop
 8006dee:	371c      	adds	r7, #28
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr
 8006df8:	40010000 	.word	0x40010000
 8006dfc:	40010400 	.word	0x40010400

08006e00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b087      	sub	sp, #28
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	f023 0210 	bic.w	r2, r3, #16
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a1b      	ldr	r3, [r3, #32]
 8006e1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	699b      	ldr	r3, [r3, #24]
 8006e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	021b      	lsls	r3, r3, #8
 8006e3e:	68fa      	ldr	r2, [r7, #12]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	f023 0320 	bic.w	r3, r3, #32
 8006e4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	011b      	lsls	r3, r3, #4
 8006e52:	697a      	ldr	r2, [r7, #20]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a22      	ldr	r2, [pc, #136]	; (8006ee4 <TIM_OC2_SetConfig+0xe4>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d003      	beq.n	8006e68 <TIM_OC2_SetConfig+0x68>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a21      	ldr	r2, [pc, #132]	; (8006ee8 <TIM_OC2_SetConfig+0xe8>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d10d      	bne.n	8006e84 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	011b      	lsls	r3, r3, #4
 8006e76:	697a      	ldr	r2, [r7, #20]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4a17      	ldr	r2, [pc, #92]	; (8006ee4 <TIM_OC2_SetConfig+0xe4>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d003      	beq.n	8006e94 <TIM_OC2_SetConfig+0x94>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4a16      	ldr	r2, [pc, #88]	; (8006ee8 <TIM_OC2_SetConfig+0xe8>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d113      	bne.n	8006ebc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ea2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	695b      	ldr	r3, [r3, #20]
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	693a      	ldr	r2, [r7, #16]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	693a      	ldr	r2, [r7, #16]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	693a      	ldr	r2, [r7, #16]
 8006ec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	68fa      	ldr	r2, [r7, #12]
 8006ec6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	685a      	ldr	r2, [r3, #4]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	621a      	str	r2, [r3, #32]
}
 8006ed6:	bf00      	nop
 8006ed8:	371c      	adds	r7, #28
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	40010000 	.word	0x40010000
 8006ee8:	40010400 	.word	0x40010400

08006eec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b087      	sub	sp, #28
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a1b      	ldr	r3, [r3, #32]
 8006efa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	69db      	ldr	r3, [r3, #28]
 8006f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f023 0303 	bic.w	r3, r3, #3
 8006f22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	021b      	lsls	r3, r3, #8
 8006f3c:	697a      	ldr	r2, [r7, #20]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a21      	ldr	r2, [pc, #132]	; (8006fcc <TIM_OC3_SetConfig+0xe0>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d003      	beq.n	8006f52 <TIM_OC3_SetConfig+0x66>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a20      	ldr	r2, [pc, #128]	; (8006fd0 <TIM_OC3_SetConfig+0xe4>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d10d      	bne.n	8006f6e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	021b      	lsls	r3, r3, #8
 8006f60:	697a      	ldr	r2, [r7, #20]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a16      	ldr	r2, [pc, #88]	; (8006fcc <TIM_OC3_SetConfig+0xe0>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d003      	beq.n	8006f7e <TIM_OC3_SetConfig+0x92>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a15      	ldr	r2, [pc, #84]	; (8006fd0 <TIM_OC3_SetConfig+0xe4>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d113      	bne.n	8006fa6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	011b      	lsls	r3, r3, #4
 8006f94:	693a      	ldr	r2, [r7, #16]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	699b      	ldr	r3, [r3, #24]
 8006f9e:	011b      	lsls	r3, r3, #4
 8006fa0:	693a      	ldr	r2, [r7, #16]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	693a      	ldr	r2, [r7, #16]
 8006faa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	685a      	ldr	r2, [r3, #4]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	697a      	ldr	r2, [r7, #20]
 8006fbe:	621a      	str	r2, [r3, #32]
}
 8006fc0:	bf00      	nop
 8006fc2:	371c      	adds	r7, #28
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr
 8006fcc:	40010000 	.word	0x40010000
 8006fd0:	40010400 	.word	0x40010400

08006fd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b087      	sub	sp, #28
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a1b      	ldr	r3, [r3, #32]
 8006fe2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a1b      	ldr	r3, [r3, #32]
 8006fee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	69db      	ldr	r3, [r3, #28]
 8006ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800700a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	021b      	lsls	r3, r3, #8
 8007012:	68fa      	ldr	r2, [r7, #12]
 8007014:	4313      	orrs	r3, r2
 8007016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800701e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	031b      	lsls	r3, r3, #12
 8007026:	693a      	ldr	r2, [r7, #16]
 8007028:	4313      	orrs	r3, r2
 800702a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a12      	ldr	r2, [pc, #72]	; (8007078 <TIM_OC4_SetConfig+0xa4>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d003      	beq.n	800703c <TIM_OC4_SetConfig+0x68>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4a11      	ldr	r2, [pc, #68]	; (800707c <TIM_OC4_SetConfig+0xa8>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d109      	bne.n	8007050 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007042:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	695b      	ldr	r3, [r3, #20]
 8007048:	019b      	lsls	r3, r3, #6
 800704a:	697a      	ldr	r2, [r7, #20]
 800704c:	4313      	orrs	r3, r2
 800704e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	697a      	ldr	r2, [r7, #20]
 8007054:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	685a      	ldr	r2, [r3, #4]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	693a      	ldr	r2, [r7, #16]
 8007068:	621a      	str	r2, [r3, #32]
}
 800706a:	bf00      	nop
 800706c:	371c      	adds	r7, #28
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop
 8007078:	40010000 	.word	0x40010000
 800707c:	40010400 	.word	0x40010400

08007080 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007080:	b480      	push	{r7}
 8007082:	b087      	sub	sp, #28
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6a1b      	ldr	r3, [r3, #32]
 8007090:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6a1b      	ldr	r3, [r3, #32]
 8007096:	f023 0201 	bic.w	r2, r3, #1
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	699b      	ldr	r3, [r3, #24]
 80070a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	011b      	lsls	r3, r3, #4
 80070b0:	693a      	ldr	r2, [r7, #16]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	f023 030a 	bic.w	r3, r3, #10
 80070bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80070be:	697a      	ldr	r2, [r7, #20]
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	4313      	orrs	r3, r2
 80070c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	697a      	ldr	r2, [r7, #20]
 80070d0:	621a      	str	r2, [r3, #32]
}
 80070d2:	bf00      	nop
 80070d4:	371c      	adds	r7, #28
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr

080070de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070de:	b480      	push	{r7}
 80070e0:	b087      	sub	sp, #28
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	60f8      	str	r0, [r7, #12]
 80070e6:	60b9      	str	r1, [r7, #8]
 80070e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6a1b      	ldr	r3, [r3, #32]
 80070ee:	f023 0210 	bic.w	r2, r3, #16
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	699b      	ldr	r3, [r3, #24]
 80070fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6a1b      	ldr	r3, [r3, #32]
 8007100:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007108:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	031b      	lsls	r3, r3, #12
 800710e:	697a      	ldr	r2, [r7, #20]
 8007110:	4313      	orrs	r3, r2
 8007112:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800711a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	011b      	lsls	r3, r3, #4
 8007120:	693a      	ldr	r2, [r7, #16]
 8007122:	4313      	orrs	r3, r2
 8007124:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	697a      	ldr	r2, [r7, #20]
 800712a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	693a      	ldr	r2, [r7, #16]
 8007130:	621a      	str	r2, [r3, #32]
}
 8007132:	bf00      	nop
 8007134:	371c      	adds	r7, #28
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr

0800713e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800713e:	b480      	push	{r7}
 8007140:	b085      	sub	sp, #20
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
 8007146:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007154:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007156:	683a      	ldr	r2, [r7, #0]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	4313      	orrs	r3, r2
 800715c:	f043 0307 	orr.w	r3, r3, #7
 8007160:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	68fa      	ldr	r2, [r7, #12]
 8007166:	609a      	str	r2, [r3, #8]
}
 8007168:	bf00      	nop
 800716a:	3714      	adds	r7, #20
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007174:	b480      	push	{r7}
 8007176:	b087      	sub	sp, #28
 8007178:	af00      	add	r7, sp, #0
 800717a:	60f8      	str	r0, [r7, #12]
 800717c:	60b9      	str	r1, [r7, #8]
 800717e:	607a      	str	r2, [r7, #4]
 8007180:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800718e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));

 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	021a      	lsls	r2, r3, #8
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	431a      	orrs	r2, r3
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	4313      	orrs	r3, r2
 800719c:	697a      	ldr	r2, [r7, #20]
 800719e:	4313      	orrs	r3, r2
 80071a0:	617b      	str	r3, [r7, #20]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
}
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	697a      	ldr	r2, [r7, #20]
 80071a6:	609a      	str	r2, [r3, #8]

 80071a8:	bf00      	nop
 80071aa:	371c      	adds	r7, #28
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <TIM_CCxChannelCmd>:
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
  uint32_t tmp;
 80071b4:	b480      	push	{r7}
 80071b6:	b087      	sub	sp, #28
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	f003 031f 	and.w	r3, r3, #31
 80071c6:	2201      	movs	r2, #1
 80071c8:	fa02 f303 	lsl.w	r3, r2, r3
 80071cc:	617b      	str	r3, [r7, #20]
  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6a1a      	ldr	r2, [r3, #32]
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	43db      	mvns	r3, r3
 80071d6:	401a      	ands	r2, r3
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	621a      	str	r2, [r3, #32]
  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
}
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6a1a      	ldr	r2, [r3, #32]
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	f003 031f 	and.w	r3, r3, #31
 80071e6:	6879      	ldr	r1, [r7, #4]
 80071e8:	fa01 f303 	lsl.w	r3, r1, r3
 80071ec:	431a      	orrs	r2, r3
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	621a      	str	r2, [r3, #32]

 80071f2:	bf00      	nop
 80071f4:	371c      	adds	r7, #28
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr
	...

08007200 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007200:	b480      	push	{r7}
 8007202:	b085      	sub	sp, #20
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007210:	2b01      	cmp	r3, #1
 8007212:	d101      	bne.n	8007218 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007214:	2302      	movs	r3, #2
 8007216:	e05a      	b.n	80072ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2201      	movs	r2, #1
 800721c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2202      	movs	r2, #2
 8007224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800723e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	4313      	orrs	r3, r2
 8007248:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a21      	ldr	r2, [pc, #132]	; (80072dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d022      	beq.n	80072a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007264:	d01d      	beq.n	80072a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a1d      	ldr	r2, [pc, #116]	; (80072e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d018      	beq.n	80072a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a1b      	ldr	r2, [pc, #108]	; (80072e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d013      	beq.n	80072a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a1a      	ldr	r2, [pc, #104]	; (80072e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d00e      	beq.n	80072a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a18      	ldr	r2, [pc, #96]	; (80072ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d009      	beq.n	80072a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a17      	ldr	r2, [pc, #92]	; (80072f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d004      	beq.n	80072a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a15      	ldr	r2, [pc, #84]	; (80072f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d10c      	bne.n	80072bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	68ba      	ldr	r2, [r7, #8]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	68ba      	ldr	r2, [r7, #8]
 80072ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3714      	adds	r7, #20
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	40010000 	.word	0x40010000
 80072e0:	40000400 	.word	0x40000400
 80072e4:	40000800 	.word	0x40000800
 80072e8:	40000c00 	.word	0x40000c00
 80072ec:	40010400 	.word	0x40010400
 80072f0:	40014000 	.word	0x40014000
 80072f4:	40001800 	.word	0x40001800

080072f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b085      	sub	sp, #20
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007302:	2300      	movs	r3, #0
 8007304:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800730c:	2b01      	cmp	r3, #1
 800730e:	d101      	bne.n	8007314 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007310:	2302      	movs	r3, #2
 8007312:	e03d      	b.n	8007390 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	4313      	orrs	r3, r2
 8007328:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	4313      	orrs	r3, r2
 8007336:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	4313      	orrs	r3, r2
 8007344:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4313      	orrs	r3, r2
 8007352:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	4313      	orrs	r3, r2
 8007360:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	695b      	ldr	r3, [r3, #20]
 800736c:	4313      	orrs	r3, r2
 800736e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	69db      	ldr	r3, [r3, #28]
 800737a:	4313      	orrs	r3, r2
 800737c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68fa      	ldr	r2, [r7, #12]
 8007384:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800738e:	2300      	movs	r3, #0
}
 8007390:	4618      	mov	r0, r3
 8007392:	3714      	adds	r7, #20
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80073a4:	bf00      	nop
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80073b8:	bf00      	nop
 80073ba:	370c      	adds	r7, #12
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d101      	bne.n	80073d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	e03f      	b.n	8007456 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d106      	bne.n	80073f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f7fc ff26 	bl	800423c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2224      	movs	r2, #36	; 0x24
 80073f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	68da      	ldr	r2, [r3, #12]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007406:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 fc7b 	bl	8007d04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	691a      	ldr	r2, [r3, #16]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800741c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	695a      	ldr	r2, [r3, #20]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800742c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68da      	ldr	r2, [r3, #12]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800743c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2220      	movs	r2, #32
 8007448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2220      	movs	r2, #32
 8007450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3708      	adds	r7, #8
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
	...

08007460 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b0ba      	sub	sp, #232	; 0xe8
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	695b      	ldr	r3, [r3, #20]
 8007482:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007486:	2300      	movs	r3, #0
 8007488:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800748c:	2300      	movs	r3, #0
 800748e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007496:	f003 030f 	and.w	r3, r3, #15
 800749a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800749e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d10f      	bne.n	80074c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80074a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074aa:	f003 0320 	and.w	r3, r3, #32
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d009      	beq.n	80074c6 <HAL_UART_IRQHandler+0x66>
 80074b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074b6:	f003 0320 	and.w	r3, r3, #32
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d003      	beq.n	80074c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 fb65 	bl	8007b8e <UART_Receive_IT>
      return;
 80074c4:	e256      	b.n	8007974 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80074c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	f000 80de 	beq.w	800768c <HAL_UART_IRQHandler+0x22c>
 80074d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074d4:	f003 0301 	and.w	r3, r3, #1
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d106      	bne.n	80074ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80074dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074e0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	f000 80d1 	beq.w	800768c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80074ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074ee:	f003 0301 	and.w	r3, r3, #1
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00b      	beq.n	800750e <HAL_UART_IRQHandler+0xae>
 80074f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d005      	beq.n	800750e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007506:	f043 0201 	orr.w	r2, r3, #1
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800750e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007512:	f003 0304 	and.w	r3, r3, #4
 8007516:	2b00      	cmp	r3, #0
 8007518:	d00b      	beq.n	8007532 <HAL_UART_IRQHandler+0xd2>
 800751a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800751e:	f003 0301 	and.w	r3, r3, #1
 8007522:	2b00      	cmp	r3, #0
 8007524:	d005      	beq.n	8007532 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752a:	f043 0202 	orr.w	r2, r3, #2
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007536:	f003 0302 	and.w	r3, r3, #2
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00b      	beq.n	8007556 <HAL_UART_IRQHandler+0xf6>
 800753e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007542:	f003 0301 	and.w	r3, r3, #1
 8007546:	2b00      	cmp	r3, #0
 8007548:	d005      	beq.n	8007556 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754e:	f043 0204 	orr.w	r2, r3, #4
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800755a:	f003 0308 	and.w	r3, r3, #8
 800755e:	2b00      	cmp	r3, #0
 8007560:	d011      	beq.n	8007586 <HAL_UART_IRQHandler+0x126>
 8007562:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007566:	f003 0320 	and.w	r3, r3, #32
 800756a:	2b00      	cmp	r3, #0
 800756c:	d105      	bne.n	800757a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800756e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007572:	f003 0301 	and.w	r3, r3, #1
 8007576:	2b00      	cmp	r3, #0
 8007578:	d005      	beq.n	8007586 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757e:	f043 0208 	orr.w	r2, r3, #8
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758a:	2b00      	cmp	r3, #0
 800758c:	f000 81ed 	beq.w	800796a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007594:	f003 0320 	and.w	r3, r3, #32
 8007598:	2b00      	cmp	r3, #0
 800759a:	d008      	beq.n	80075ae <HAL_UART_IRQHandler+0x14e>
 800759c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075a0:	f003 0320 	and.w	r3, r3, #32
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d002      	beq.n	80075ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 faf0 	bl	8007b8e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	695b      	ldr	r3, [r3, #20]
 80075b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075b8:	2b40      	cmp	r3, #64	; 0x40
 80075ba:	bf0c      	ite	eq
 80075bc:	2301      	moveq	r3, #1
 80075be:	2300      	movne	r3, #0
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ca:	f003 0308 	and.w	r3, r3, #8
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d103      	bne.n	80075da <HAL_UART_IRQHandler+0x17a>
 80075d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d04f      	beq.n	800767a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 f9f8 	bl	80079d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	695b      	ldr	r3, [r3, #20]
 80075e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ea:	2b40      	cmp	r3, #64	; 0x40
 80075ec:	d141      	bne.n	8007672 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	3314      	adds	r3, #20
 80075f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80075fc:	e853 3f00 	ldrex	r3, [r3]
 8007600:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007604:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007608:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800760c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	3314      	adds	r3, #20
 8007616:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800761a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800761e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007622:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007626:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800762a:	e841 2300 	strex	r3, r2, [r1]
 800762e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007632:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007636:	2b00      	cmp	r3, #0
 8007638:	d1d9      	bne.n	80075ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800763e:	2b00      	cmp	r3, #0
 8007640:	d013      	beq.n	800766a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007646:	4a7d      	ldr	r2, [pc, #500]	; (800783c <HAL_UART_IRQHandler+0x3dc>)
 8007648:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800764e:	4618      	mov	r0, r3
 8007650:	f7fd f928 	bl	80048a4 <HAL_DMA_Abort_IT>
 8007654:	4603      	mov	r3, r0
 8007656:	2b00      	cmp	r3, #0
 8007658:	d016      	beq.n	8007688 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800765e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007664:	4610      	mov	r0, r2
 8007666:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007668:	e00e      	b.n	8007688 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 f99a 	bl	80079a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007670:	e00a      	b.n	8007688 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 f996 	bl	80079a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007678:	e006      	b.n	8007688 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 f992 	bl	80079a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007686:	e170      	b.n	800796a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007688:	bf00      	nop
    return;
 800768a:	e16e      	b.n	800796a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007690:	2b01      	cmp	r3, #1
 8007692:	f040 814a 	bne.w	800792a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800769a:	f003 0310 	and.w	r3, r3, #16
 800769e:	2b00      	cmp	r3, #0
 80076a0:	f000 8143 	beq.w	800792a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80076a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076a8:	f003 0310 	and.w	r3, r3, #16
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	f000 813c 	beq.w	800792a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80076b2:	2300      	movs	r3, #0
 80076b4:	60bb      	str	r3, [r7, #8]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	60bb      	str	r3, [r7, #8]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	60bb      	str	r3, [r7, #8]
 80076c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	695b      	ldr	r3, [r3, #20]
 80076ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076d2:	2b40      	cmp	r3, #64	; 0x40
 80076d4:	f040 80b4 	bne.w	8007840 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80076e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	f000 8140 	beq.w	800796e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80076f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80076f6:	429a      	cmp	r2, r3
 80076f8:	f080 8139 	bcs.w	800796e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007702:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007708:	69db      	ldr	r3, [r3, #28]
 800770a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800770e:	f000 8088 	beq.w	8007822 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	330c      	adds	r3, #12
 8007718:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800771c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007720:	e853 3f00 	ldrex	r3, [r3]
 8007724:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007728:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800772c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007730:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	330c      	adds	r3, #12
 800773a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800773e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007742:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007746:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800774a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800774e:	e841 2300 	strex	r3, r2, [r1]
 8007752:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007756:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800775a:	2b00      	cmp	r3, #0
 800775c:	d1d9      	bne.n	8007712 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	3314      	adds	r3, #20
 8007764:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007766:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007768:	e853 3f00 	ldrex	r3, [r3]
 800776c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800776e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007770:	f023 0301 	bic.w	r3, r3, #1
 8007774:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	3314      	adds	r3, #20
 800777e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007782:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007786:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007788:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800778a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800778e:	e841 2300 	strex	r3, r2, [r1]
 8007792:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007794:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007796:	2b00      	cmp	r3, #0
 8007798:	d1e1      	bne.n	800775e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	3314      	adds	r3, #20
 80077a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077a4:	e853 3f00 	ldrex	r3, [r3]
 80077a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80077aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	3314      	adds	r3, #20
 80077ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80077be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80077c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80077c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80077c6:	e841 2300 	strex	r3, r2, [r1]
 80077ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80077cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d1e3      	bne.n	800779a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2220      	movs	r2, #32
 80077d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	330c      	adds	r3, #12
 80077e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077ea:	e853 3f00 	ldrex	r3, [r3]
 80077ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80077f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077f2:	f023 0310 	bic.w	r3, r3, #16
 80077f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	330c      	adds	r3, #12
 8007800:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007804:	65ba      	str	r2, [r7, #88]	; 0x58
 8007806:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007808:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800780a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800780c:	e841 2300 	strex	r3, r2, [r1]
 8007810:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007814:	2b00      	cmp	r3, #0
 8007816:	d1e3      	bne.n	80077e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800781c:	4618      	mov	r0, r3
 800781e:	f7fc ffd1 	bl	80047c4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800782a:	b29b      	uxth	r3, r3
 800782c:	1ad3      	subs	r3, r2, r3
 800782e:	b29b      	uxth	r3, r3
 8007830:	4619      	mov	r1, r3
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 f8c0 	bl	80079b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007838:	e099      	b.n	800796e <HAL_UART_IRQHandler+0x50e>
 800783a:	bf00      	nop
 800783c:	08007a97 	.word	0x08007a97
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007848:	b29b      	uxth	r3, r3
 800784a:	1ad3      	subs	r3, r2, r3
 800784c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007854:	b29b      	uxth	r3, r3
 8007856:	2b00      	cmp	r3, #0
 8007858:	f000 808b 	beq.w	8007972 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800785c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007860:	2b00      	cmp	r3, #0
 8007862:	f000 8086 	beq.w	8007972 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	330c      	adds	r3, #12
 800786c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007870:	e853 3f00 	ldrex	r3, [r3]
 8007874:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007878:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800787c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	330c      	adds	r3, #12
 8007886:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800788a:	647a      	str	r2, [r7, #68]	; 0x44
 800788c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007890:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007892:	e841 2300 	strex	r3, r2, [r1]
 8007896:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1e3      	bne.n	8007866 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	3314      	adds	r3, #20
 80078a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a8:	e853 3f00 	ldrex	r3, [r3]
 80078ac:	623b      	str	r3, [r7, #32]
   return(result);
 80078ae:	6a3b      	ldr	r3, [r7, #32]
 80078b0:	f023 0301 	bic.w	r3, r3, #1
 80078b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	3314      	adds	r3, #20
 80078be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80078c2:	633a      	str	r2, [r7, #48]	; 0x30
 80078c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078ca:	e841 2300 	strex	r3, r2, [r1]
 80078ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80078d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d1e3      	bne.n	800789e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2220      	movs	r2, #32
 80078da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	330c      	adds	r3, #12
 80078ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	e853 3f00 	ldrex	r3, [r3]
 80078f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f023 0310 	bic.w	r3, r3, #16
 80078fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	330c      	adds	r3, #12
 8007904:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007908:	61fa      	str	r2, [r7, #28]
 800790a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790c:	69b9      	ldr	r1, [r7, #24]
 800790e:	69fa      	ldr	r2, [r7, #28]
 8007910:	e841 2300 	strex	r3, r2, [r1]
 8007914:	617b      	str	r3, [r7, #20]
   return(result);
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d1e3      	bne.n	80078e4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800791c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007920:	4619      	mov	r1, r3
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 f848 	bl	80079b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007928:	e023      	b.n	8007972 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800792a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800792e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007932:	2b00      	cmp	r3, #0
 8007934:	d009      	beq.n	800794a <HAL_UART_IRQHandler+0x4ea>
 8007936:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800793a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800793e:	2b00      	cmp	r3, #0
 8007940:	d003      	beq.n	800794a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 f8bb 	bl	8007abe <UART_Transmit_IT>
    return;
 8007948:	e014      	b.n	8007974 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800794a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800794e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007952:	2b00      	cmp	r3, #0
 8007954:	d00e      	beq.n	8007974 <HAL_UART_IRQHandler+0x514>
 8007956:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800795a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800795e:	2b00      	cmp	r3, #0
 8007960:	d008      	beq.n	8007974 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 f8fb 	bl	8007b5e <UART_EndTransmit_IT>
    return;
 8007968:	e004      	b.n	8007974 <HAL_UART_IRQHandler+0x514>
    return;
 800796a:	bf00      	nop
 800796c:	e002      	b.n	8007974 <HAL_UART_IRQHandler+0x514>
      return;
 800796e:	bf00      	nop
 8007970:	e000      	b.n	8007974 <HAL_UART_IRQHandler+0x514>
      return;
 8007972:	bf00      	nop
  }
}
 8007974:	37e8      	adds	r7, #232	; 0xe8
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop

0800797c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007984:	bf00      	nop
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007998:	bf00      	nop
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80079ac:	bf00      	nop
 80079ae:	370c      	adds	r7, #12
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	460b      	mov	r3, r1
 80079c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80079c4:	bf00      	nop
 80079c6:	370c      	adds	r7, #12
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr

080079d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b095      	sub	sp, #84	; 0x54
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	330c      	adds	r3, #12
 80079de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079e2:	e853 3f00 	ldrex	r3, [r3]
 80079e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80079e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	330c      	adds	r3, #12
 80079f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80079f8:	643a      	str	r2, [r7, #64]	; 0x40
 80079fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80079fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a00:	e841 2300 	strex	r3, r2, [r1]
 8007a04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d1e5      	bne.n	80079d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	3314      	adds	r3, #20
 8007a12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a14:	6a3b      	ldr	r3, [r7, #32]
 8007a16:	e853 3f00 	ldrex	r3, [r3]
 8007a1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a1c:	69fb      	ldr	r3, [r7, #28]
 8007a1e:	f023 0301 	bic.w	r3, r3, #1
 8007a22:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	3314      	adds	r3, #20
 8007a2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a34:	e841 2300 	strex	r3, r2, [r1]
 8007a38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d1e5      	bne.n	8007a0c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d119      	bne.n	8007a7c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	330c      	adds	r3, #12
 8007a4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	e853 3f00 	ldrex	r3, [r3]
 8007a56:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	f023 0310 	bic.w	r3, r3, #16
 8007a5e:	647b      	str	r3, [r7, #68]	; 0x44
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	330c      	adds	r3, #12
 8007a66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a68:	61ba      	str	r2, [r7, #24]
 8007a6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a6c:	6979      	ldr	r1, [r7, #20]
 8007a6e:	69ba      	ldr	r2, [r7, #24]
 8007a70:	e841 2300 	strex	r3, r2, [r1]
 8007a74:	613b      	str	r3, [r7, #16]
   return(result);
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d1e5      	bne.n	8007a48 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2220      	movs	r2, #32
 8007a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2200      	movs	r2, #0
 8007a88:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007a8a:	bf00      	nop
 8007a8c:	3754      	adds	r7, #84	; 0x54
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr

08007a96 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b084      	sub	sp, #16
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2200      	movs	r2, #0
 8007aae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ab0:	68f8      	ldr	r0, [r7, #12]
 8007ab2:	f7ff ff77 	bl	80079a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ab6:	bf00      	nop
 8007ab8:	3710      	adds	r7, #16
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}

08007abe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007abe:	b480      	push	{r7}
 8007ac0:	b085      	sub	sp, #20
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	2b21      	cmp	r3, #33	; 0x21
 8007ad0:	d13e      	bne.n	8007b50 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ada:	d114      	bne.n	8007b06 <UART_Transmit_IT+0x48>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	691b      	ldr	r3, [r3, #16]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d110      	bne.n	8007b06 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6a1b      	ldr	r3, [r3, #32]
 8007ae8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	881b      	ldrh	r3, [r3, #0]
 8007aee:	461a      	mov	r2, r3
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007af8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6a1b      	ldr	r3, [r3, #32]
 8007afe:	1c9a      	adds	r2, r3, #2
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	621a      	str	r2, [r3, #32]
 8007b04:	e008      	b.n	8007b18 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6a1b      	ldr	r3, [r3, #32]
 8007b0a:	1c59      	adds	r1, r3, #1
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	6211      	str	r1, [r2, #32]
 8007b10:	781a      	ldrb	r2, [r3, #0]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	3b01      	subs	r3, #1
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	4619      	mov	r1, r3
 8007b26:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d10f      	bne.n	8007b4c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	68da      	ldr	r2, [r3, #12]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b3a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	68da      	ldr	r2, [r3, #12]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b4a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	e000      	b.n	8007b52 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007b50:	2302      	movs	r3, #2
  }
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3714      	adds	r7, #20
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr

08007b5e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	b082      	sub	sp, #8
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	68da      	ldr	r2, [r3, #12]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b74:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2220      	movs	r2, #32
 8007b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f7ff fefc 	bl	800797c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3708      	adds	r7, #8
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b08c      	sub	sp, #48	; 0x30
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	2b22      	cmp	r3, #34	; 0x22
 8007ba0:	f040 80ab 	bne.w	8007cfa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bac:	d117      	bne.n	8007bde <UART_Receive_IT+0x50>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	691b      	ldr	r3, [r3, #16]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d113      	bne.n	8007bde <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bbe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bcc:	b29a      	uxth	r2, r3
 8007bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bd6:	1c9a      	adds	r2, r3, #2
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	629a      	str	r2, [r3, #40]	; 0x28
 8007bdc:	e026      	b.n	8007c2c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007be2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007be4:	2300      	movs	r3, #0
 8007be6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bf0:	d007      	beq.n	8007c02 <UART_Receive_IT+0x74>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d10a      	bne.n	8007c10 <UART_Receive_IT+0x82>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	691b      	ldr	r3, [r3, #16]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d106      	bne.n	8007c10 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	b2da      	uxtb	r2, r3
 8007c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c0c:	701a      	strb	r2, [r3, #0]
 8007c0e:	e008      	b.n	8007c22 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c1c:	b2da      	uxtb	r2, r3
 8007c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c20:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c26:	1c5a      	adds	r2, r3, #1
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	3b01      	subs	r3, #1
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	4619      	mov	r1, r3
 8007c3a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d15a      	bne.n	8007cf6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	68da      	ldr	r2, [r3, #12]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f022 0220 	bic.w	r2, r2, #32
 8007c4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	68da      	ldr	r2, [r3, #12]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	695a      	ldr	r2, [r3, #20]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f022 0201 	bic.w	r2, r2, #1
 8007c6e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2220      	movs	r2, #32
 8007c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d135      	bne.n	8007cec <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	330c      	adds	r3, #12
 8007c8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	e853 3f00 	ldrex	r3, [r3]
 8007c94:	613b      	str	r3, [r7, #16]
   return(result);
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	f023 0310 	bic.w	r3, r3, #16
 8007c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	330c      	adds	r3, #12
 8007ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ca6:	623a      	str	r2, [r7, #32]
 8007ca8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007caa:	69f9      	ldr	r1, [r7, #28]
 8007cac:	6a3a      	ldr	r2, [r7, #32]
 8007cae:	e841 2300 	strex	r3, r2, [r1]
 8007cb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d1e5      	bne.n	8007c86 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f003 0310 	and.w	r3, r3, #16
 8007cc4:	2b10      	cmp	r3, #16
 8007cc6:	d10a      	bne.n	8007cde <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007cc8:	2300      	movs	r3, #0
 8007cca:	60fb      	str	r3, [r7, #12]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	60fb      	str	r3, [r7, #12]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	60fb      	str	r3, [r7, #12]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f7ff fe67 	bl	80079b8 <HAL_UARTEx_RxEventCallback>
 8007cea:	e002      	b.n	8007cf2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f7ff fe4f 	bl	8007990 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	e002      	b.n	8007cfc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	e000      	b.n	8007cfc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007cfa:	2302      	movs	r3, #2
  }
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3730      	adds	r7, #48	; 0x30
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d08:	b0c0      	sub	sp, #256	; 0x100
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	691b      	ldr	r3, [r3, #16]
 8007d18:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d20:	68d9      	ldr	r1, [r3, #12]
 8007d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	ea40 0301 	orr.w	r3, r0, r1
 8007d2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d32:	689a      	ldr	r2, [r3, #8]
 8007d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d38:	691b      	ldr	r3, [r3, #16]
 8007d3a:	431a      	orrs	r2, r3
 8007d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d40:	695b      	ldr	r3, [r3, #20]
 8007d42:	431a      	orrs	r2, r3
 8007d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d48:	69db      	ldr	r3, [r3, #28]
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	68db      	ldr	r3, [r3, #12]
 8007d58:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007d5c:	f021 010c 	bic.w	r1, r1, #12
 8007d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007d6a:	430b      	orrs	r3, r1
 8007d6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	695b      	ldr	r3, [r3, #20]
 8007d76:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d7e:	6999      	ldr	r1, [r3, #24]
 8007d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	ea40 0301 	orr.w	r3, r0, r1
 8007d8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	4b8f      	ldr	r3, [pc, #572]	; (8007fd0 <UART_SetConfig+0x2cc>)
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d005      	beq.n	8007da4 <UART_SetConfig+0xa0>
 8007d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	4b8d      	ldr	r3, [pc, #564]	; (8007fd4 <UART_SetConfig+0x2d0>)
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d104      	bne.n	8007dae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007da4:	f7fd fc84 	bl	80056b0 <HAL_RCC_GetPCLK2Freq>
 8007da8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007dac:	e003      	b.n	8007db6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007dae:	f7fd fc6b 	bl	8005688 <HAL_RCC_GetPCLK1Freq>
 8007db2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dba:	69db      	ldr	r3, [r3, #28]
 8007dbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dc0:	f040 810c 	bne.w	8007fdc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007dc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007dce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007dd2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007dd6:	4622      	mov	r2, r4
 8007dd8:	462b      	mov	r3, r5
 8007dda:	1891      	adds	r1, r2, r2
 8007ddc:	65b9      	str	r1, [r7, #88]	; 0x58
 8007dde:	415b      	adcs	r3, r3
 8007de0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007de2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007de6:	4621      	mov	r1, r4
 8007de8:	eb12 0801 	adds.w	r8, r2, r1
 8007dec:	4629      	mov	r1, r5
 8007dee:	eb43 0901 	adc.w	r9, r3, r1
 8007df2:	f04f 0200 	mov.w	r2, #0
 8007df6:	f04f 0300 	mov.w	r3, #0
 8007dfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007dfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007e02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007e06:	4690      	mov	r8, r2
 8007e08:	4699      	mov	r9, r3
 8007e0a:	4623      	mov	r3, r4
 8007e0c:	eb18 0303 	adds.w	r3, r8, r3
 8007e10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007e14:	462b      	mov	r3, r5
 8007e16:	eb49 0303 	adc.w	r3, r9, r3
 8007e1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007e2a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007e2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007e32:	460b      	mov	r3, r1
 8007e34:	18db      	adds	r3, r3, r3
 8007e36:	653b      	str	r3, [r7, #80]	; 0x50
 8007e38:	4613      	mov	r3, r2
 8007e3a:	eb42 0303 	adc.w	r3, r2, r3
 8007e3e:	657b      	str	r3, [r7, #84]	; 0x54
 8007e40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007e44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007e48:	f7f8 fe50 	bl	8000aec <__aeabi_uldivmod>
 8007e4c:	4602      	mov	r2, r0
 8007e4e:	460b      	mov	r3, r1
 8007e50:	4b61      	ldr	r3, [pc, #388]	; (8007fd8 <UART_SetConfig+0x2d4>)
 8007e52:	fba3 2302 	umull	r2, r3, r3, r2
 8007e56:	095b      	lsrs	r3, r3, #5
 8007e58:	011c      	lsls	r4, r3, #4
 8007e5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007e64:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007e68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007e6c:	4642      	mov	r2, r8
 8007e6e:	464b      	mov	r3, r9
 8007e70:	1891      	adds	r1, r2, r2
 8007e72:	64b9      	str	r1, [r7, #72]	; 0x48
 8007e74:	415b      	adcs	r3, r3
 8007e76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007e7c:	4641      	mov	r1, r8
 8007e7e:	eb12 0a01 	adds.w	sl, r2, r1
 8007e82:	4649      	mov	r1, r9
 8007e84:	eb43 0b01 	adc.w	fp, r3, r1
 8007e88:	f04f 0200 	mov.w	r2, #0
 8007e8c:	f04f 0300 	mov.w	r3, #0
 8007e90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007e94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007e98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e9c:	4692      	mov	sl, r2
 8007e9e:	469b      	mov	fp, r3
 8007ea0:	4643      	mov	r3, r8
 8007ea2:	eb1a 0303 	adds.w	r3, sl, r3
 8007ea6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007eaa:	464b      	mov	r3, r9
 8007eac:	eb4b 0303 	adc.w	r3, fp, r3
 8007eb0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ec0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007ec4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007ec8:	460b      	mov	r3, r1
 8007eca:	18db      	adds	r3, r3, r3
 8007ecc:	643b      	str	r3, [r7, #64]	; 0x40
 8007ece:	4613      	mov	r3, r2
 8007ed0:	eb42 0303 	adc.w	r3, r2, r3
 8007ed4:	647b      	str	r3, [r7, #68]	; 0x44
 8007ed6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007eda:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007ede:	f7f8 fe05 	bl	8000aec <__aeabi_uldivmod>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	4611      	mov	r1, r2
 8007ee8:	4b3b      	ldr	r3, [pc, #236]	; (8007fd8 <UART_SetConfig+0x2d4>)
 8007eea:	fba3 2301 	umull	r2, r3, r3, r1
 8007eee:	095b      	lsrs	r3, r3, #5
 8007ef0:	2264      	movs	r2, #100	; 0x64
 8007ef2:	fb02 f303 	mul.w	r3, r2, r3
 8007ef6:	1acb      	subs	r3, r1, r3
 8007ef8:	00db      	lsls	r3, r3, #3
 8007efa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007efe:	4b36      	ldr	r3, [pc, #216]	; (8007fd8 <UART_SetConfig+0x2d4>)
 8007f00:	fba3 2302 	umull	r2, r3, r3, r2
 8007f04:	095b      	lsrs	r3, r3, #5
 8007f06:	005b      	lsls	r3, r3, #1
 8007f08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007f0c:	441c      	add	r4, r3
 8007f0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f12:	2200      	movs	r2, #0
 8007f14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007f18:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007f1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007f20:	4642      	mov	r2, r8
 8007f22:	464b      	mov	r3, r9
 8007f24:	1891      	adds	r1, r2, r2
 8007f26:	63b9      	str	r1, [r7, #56]	; 0x38
 8007f28:	415b      	adcs	r3, r3
 8007f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007f30:	4641      	mov	r1, r8
 8007f32:	1851      	adds	r1, r2, r1
 8007f34:	6339      	str	r1, [r7, #48]	; 0x30
 8007f36:	4649      	mov	r1, r9
 8007f38:	414b      	adcs	r3, r1
 8007f3a:	637b      	str	r3, [r7, #52]	; 0x34
 8007f3c:	f04f 0200 	mov.w	r2, #0
 8007f40:	f04f 0300 	mov.w	r3, #0
 8007f44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007f48:	4659      	mov	r1, fp
 8007f4a:	00cb      	lsls	r3, r1, #3
 8007f4c:	4651      	mov	r1, sl
 8007f4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f52:	4651      	mov	r1, sl
 8007f54:	00ca      	lsls	r2, r1, #3
 8007f56:	4610      	mov	r0, r2
 8007f58:	4619      	mov	r1, r3
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	4642      	mov	r2, r8
 8007f5e:	189b      	adds	r3, r3, r2
 8007f60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f64:	464b      	mov	r3, r9
 8007f66:	460a      	mov	r2, r1
 8007f68:	eb42 0303 	adc.w	r3, r2, r3
 8007f6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007f7c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007f80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007f84:	460b      	mov	r3, r1
 8007f86:	18db      	adds	r3, r3, r3
 8007f88:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f8a:	4613      	mov	r3, r2
 8007f8c:	eb42 0303 	adc.w	r3, r2, r3
 8007f90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007f9a:	f7f8 fda7 	bl	8000aec <__aeabi_uldivmod>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	4b0d      	ldr	r3, [pc, #52]	; (8007fd8 <UART_SetConfig+0x2d4>)
 8007fa4:	fba3 1302 	umull	r1, r3, r3, r2
 8007fa8:	095b      	lsrs	r3, r3, #5
 8007faa:	2164      	movs	r1, #100	; 0x64
 8007fac:	fb01 f303 	mul.w	r3, r1, r3
 8007fb0:	1ad3      	subs	r3, r2, r3
 8007fb2:	00db      	lsls	r3, r3, #3
 8007fb4:	3332      	adds	r3, #50	; 0x32
 8007fb6:	4a08      	ldr	r2, [pc, #32]	; (8007fd8 <UART_SetConfig+0x2d4>)
 8007fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8007fbc:	095b      	lsrs	r3, r3, #5
 8007fbe:	f003 0207 	and.w	r2, r3, #7
 8007fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4422      	add	r2, r4
 8007fca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007fcc:	e106      	b.n	80081dc <UART_SetConfig+0x4d8>
 8007fce:	bf00      	nop
 8007fd0:	40011000 	.word	0x40011000
 8007fd4:	40011400 	.word	0x40011400
 8007fd8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007fdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007fe6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007fea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007fee:	4642      	mov	r2, r8
 8007ff0:	464b      	mov	r3, r9
 8007ff2:	1891      	adds	r1, r2, r2
 8007ff4:	6239      	str	r1, [r7, #32]
 8007ff6:	415b      	adcs	r3, r3
 8007ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8007ffa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007ffe:	4641      	mov	r1, r8
 8008000:	1854      	adds	r4, r2, r1
 8008002:	4649      	mov	r1, r9
 8008004:	eb43 0501 	adc.w	r5, r3, r1
 8008008:	f04f 0200 	mov.w	r2, #0
 800800c:	f04f 0300 	mov.w	r3, #0
 8008010:	00eb      	lsls	r3, r5, #3
 8008012:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008016:	00e2      	lsls	r2, r4, #3
 8008018:	4614      	mov	r4, r2
 800801a:	461d      	mov	r5, r3
 800801c:	4643      	mov	r3, r8
 800801e:	18e3      	adds	r3, r4, r3
 8008020:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008024:	464b      	mov	r3, r9
 8008026:	eb45 0303 	adc.w	r3, r5, r3
 800802a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800802e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800803a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800803e:	f04f 0200 	mov.w	r2, #0
 8008042:	f04f 0300 	mov.w	r3, #0
 8008046:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800804a:	4629      	mov	r1, r5
 800804c:	008b      	lsls	r3, r1, #2
 800804e:	4621      	mov	r1, r4
 8008050:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008054:	4621      	mov	r1, r4
 8008056:	008a      	lsls	r2, r1, #2
 8008058:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800805c:	f7f8 fd46 	bl	8000aec <__aeabi_uldivmod>
 8008060:	4602      	mov	r2, r0
 8008062:	460b      	mov	r3, r1
 8008064:	4b60      	ldr	r3, [pc, #384]	; (80081e8 <UART_SetConfig+0x4e4>)
 8008066:	fba3 2302 	umull	r2, r3, r3, r2
 800806a:	095b      	lsrs	r3, r3, #5
 800806c:	011c      	lsls	r4, r3, #4
 800806e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008072:	2200      	movs	r2, #0
 8008074:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008078:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800807c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008080:	4642      	mov	r2, r8
 8008082:	464b      	mov	r3, r9
 8008084:	1891      	adds	r1, r2, r2
 8008086:	61b9      	str	r1, [r7, #24]
 8008088:	415b      	adcs	r3, r3
 800808a:	61fb      	str	r3, [r7, #28]
 800808c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008090:	4641      	mov	r1, r8
 8008092:	1851      	adds	r1, r2, r1
 8008094:	6139      	str	r1, [r7, #16]
 8008096:	4649      	mov	r1, r9
 8008098:	414b      	adcs	r3, r1
 800809a:	617b      	str	r3, [r7, #20]
 800809c:	f04f 0200 	mov.w	r2, #0
 80080a0:	f04f 0300 	mov.w	r3, #0
 80080a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80080a8:	4659      	mov	r1, fp
 80080aa:	00cb      	lsls	r3, r1, #3
 80080ac:	4651      	mov	r1, sl
 80080ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80080b2:	4651      	mov	r1, sl
 80080b4:	00ca      	lsls	r2, r1, #3
 80080b6:	4610      	mov	r0, r2
 80080b8:	4619      	mov	r1, r3
 80080ba:	4603      	mov	r3, r0
 80080bc:	4642      	mov	r2, r8
 80080be:	189b      	adds	r3, r3, r2
 80080c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80080c4:	464b      	mov	r3, r9
 80080c6:	460a      	mov	r2, r1
 80080c8:	eb42 0303 	adc.w	r3, r2, r3
 80080cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80080d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80080da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80080dc:	f04f 0200 	mov.w	r2, #0
 80080e0:	f04f 0300 	mov.w	r3, #0
 80080e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80080e8:	4649      	mov	r1, r9
 80080ea:	008b      	lsls	r3, r1, #2
 80080ec:	4641      	mov	r1, r8
 80080ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080f2:	4641      	mov	r1, r8
 80080f4:	008a      	lsls	r2, r1, #2
 80080f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80080fa:	f7f8 fcf7 	bl	8000aec <__aeabi_uldivmod>
 80080fe:	4602      	mov	r2, r0
 8008100:	460b      	mov	r3, r1
 8008102:	4611      	mov	r1, r2
 8008104:	4b38      	ldr	r3, [pc, #224]	; (80081e8 <UART_SetConfig+0x4e4>)
 8008106:	fba3 2301 	umull	r2, r3, r3, r1
 800810a:	095b      	lsrs	r3, r3, #5
 800810c:	2264      	movs	r2, #100	; 0x64
 800810e:	fb02 f303 	mul.w	r3, r2, r3
 8008112:	1acb      	subs	r3, r1, r3
 8008114:	011b      	lsls	r3, r3, #4
 8008116:	3332      	adds	r3, #50	; 0x32
 8008118:	4a33      	ldr	r2, [pc, #204]	; (80081e8 <UART_SetConfig+0x4e4>)
 800811a:	fba2 2303 	umull	r2, r3, r2, r3
 800811e:	095b      	lsrs	r3, r3, #5
 8008120:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008124:	441c      	add	r4, r3
 8008126:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800812a:	2200      	movs	r2, #0
 800812c:	673b      	str	r3, [r7, #112]	; 0x70
 800812e:	677a      	str	r2, [r7, #116]	; 0x74
 8008130:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008134:	4642      	mov	r2, r8
 8008136:	464b      	mov	r3, r9
 8008138:	1891      	adds	r1, r2, r2
 800813a:	60b9      	str	r1, [r7, #8]
 800813c:	415b      	adcs	r3, r3
 800813e:	60fb      	str	r3, [r7, #12]
 8008140:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008144:	4641      	mov	r1, r8
 8008146:	1851      	adds	r1, r2, r1
 8008148:	6039      	str	r1, [r7, #0]
 800814a:	4649      	mov	r1, r9
 800814c:	414b      	adcs	r3, r1
 800814e:	607b      	str	r3, [r7, #4]
 8008150:	f04f 0200 	mov.w	r2, #0
 8008154:	f04f 0300 	mov.w	r3, #0
 8008158:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800815c:	4659      	mov	r1, fp
 800815e:	00cb      	lsls	r3, r1, #3
 8008160:	4651      	mov	r1, sl
 8008162:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008166:	4651      	mov	r1, sl
 8008168:	00ca      	lsls	r2, r1, #3
 800816a:	4610      	mov	r0, r2
 800816c:	4619      	mov	r1, r3
 800816e:	4603      	mov	r3, r0
 8008170:	4642      	mov	r2, r8
 8008172:	189b      	adds	r3, r3, r2
 8008174:	66bb      	str	r3, [r7, #104]	; 0x68
 8008176:	464b      	mov	r3, r9
 8008178:	460a      	mov	r2, r1
 800817a:	eb42 0303 	adc.w	r3, r2, r3
 800817e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	663b      	str	r3, [r7, #96]	; 0x60
 800818a:	667a      	str	r2, [r7, #100]	; 0x64
 800818c:	f04f 0200 	mov.w	r2, #0
 8008190:	f04f 0300 	mov.w	r3, #0
 8008194:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008198:	4649      	mov	r1, r9
 800819a:	008b      	lsls	r3, r1, #2
 800819c:	4641      	mov	r1, r8
 800819e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80081a2:	4641      	mov	r1, r8
 80081a4:	008a      	lsls	r2, r1, #2
 80081a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80081aa:	f7f8 fc9f 	bl	8000aec <__aeabi_uldivmod>
 80081ae:	4602      	mov	r2, r0
 80081b0:	460b      	mov	r3, r1
 80081b2:	4b0d      	ldr	r3, [pc, #52]	; (80081e8 <UART_SetConfig+0x4e4>)
 80081b4:	fba3 1302 	umull	r1, r3, r3, r2
 80081b8:	095b      	lsrs	r3, r3, #5
 80081ba:	2164      	movs	r1, #100	; 0x64
 80081bc:	fb01 f303 	mul.w	r3, r1, r3
 80081c0:	1ad3      	subs	r3, r2, r3
 80081c2:	011b      	lsls	r3, r3, #4
 80081c4:	3332      	adds	r3, #50	; 0x32
 80081c6:	4a08      	ldr	r2, [pc, #32]	; (80081e8 <UART_SetConfig+0x4e4>)
 80081c8:	fba2 2303 	umull	r2, r3, r2, r3
 80081cc:	095b      	lsrs	r3, r3, #5
 80081ce:	f003 020f 	and.w	r2, r3, #15
 80081d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4422      	add	r2, r4
 80081da:	609a      	str	r2, [r3, #8]
}
 80081dc:	bf00      	nop
 80081de:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80081e2:	46bd      	mov	sp, r7
 80081e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081e8:	51eb851f 	.word	0x51eb851f

080081ec <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b085      	sub	sp, #20
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	4603      	mov	r3, r0
 80081f4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80081f6:	2300      	movs	r3, #0
 80081f8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80081fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80081fe:	2b84      	cmp	r3, #132	; 0x84
 8008200:	d005      	beq.n	800820e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008202:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	4413      	add	r3, r2
 800820a:	3303      	adds	r3, #3
 800820c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800820e:	68fb      	ldr	r3, [r7, #12]
}
 8008210:	4618      	mov	r0, r3
 8008212:	3714      	adds	r7, #20
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr

0800821c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008220:	f000 faf6 	bl	8008810 <vTaskStartScheduler>
  
  return osOK;
 8008224:	2300      	movs	r3, #0
}
 8008226:	4618      	mov	r0, r3
 8008228:	bd80      	pop	{r7, pc}

0800822a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800822a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800822c:	b089      	sub	sp, #36	; 0x24
 800822e:	af04      	add	r7, sp, #16
 8008230:	6078      	str	r0, [r7, #4]
 8008232:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	695b      	ldr	r3, [r3, #20]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d020      	beq.n	800827e <osThreadCreate+0x54>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	699b      	ldr	r3, [r3, #24]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d01c      	beq.n	800827e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	685c      	ldr	r4, [r3, #4]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	691e      	ldr	r6, [r3, #16]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008256:	4618      	mov	r0, r3
 8008258:	f7ff ffc8 	bl	80081ec <makeFreeRtosPriority>
 800825c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	695b      	ldr	r3, [r3, #20]
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008266:	9202      	str	r2, [sp, #8]
 8008268:	9301      	str	r3, [sp, #4]
 800826a:	9100      	str	r1, [sp, #0]
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	4632      	mov	r2, r6
 8008270:	4629      	mov	r1, r5
 8008272:	4620      	mov	r0, r4
 8008274:	f000 f8ed 	bl	8008452 <xTaskCreateStatic>
 8008278:	4603      	mov	r3, r0
 800827a:	60fb      	str	r3, [r7, #12]
 800827c:	e01c      	b.n	80082b8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	685c      	ldr	r4, [r3, #4]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800828a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008292:	4618      	mov	r0, r3
 8008294:	f7ff ffaa 	bl	80081ec <makeFreeRtosPriority>
 8008298:	4602      	mov	r2, r0
 800829a:	f107 030c 	add.w	r3, r7, #12
 800829e:	9301      	str	r3, [sp, #4]
 80082a0:	9200      	str	r2, [sp, #0]
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	4632      	mov	r2, r6
 80082a6:	4629      	mov	r1, r5
 80082a8:	4620      	mov	r0, r4
 80082aa:	f000 f92f 	bl	800850c <xTaskCreate>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d001      	beq.n	80082b8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80082b4:	2300      	movs	r3, #0
 80082b6:	e000      	b.n	80082ba <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80082b8:	68fb      	ldr	r3, [r7, #12]
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3714      	adds	r7, #20
 80082be:	46bd      	mov	sp, r7
 80082c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080082c2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80082c2:	b580      	push	{r7, lr}
 80082c4:	b084      	sub	sp, #16
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d001      	beq.n	80082d8 <osDelay+0x16>
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	e000      	b.n	80082da <osDelay+0x18>
 80082d8:	2301      	movs	r3, #1
 80082da:	4618      	mov	r0, r3
 80082dc:	f000 fa64 	bl	80087a8 <vTaskDelay>
  
  return osOK;
 80082e0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3710      	adds	r7, #16
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}

080082ea <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80082ea:	b480      	push	{r7}
 80082ec:	b083      	sub	sp, #12
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f103 0208 	add.w	r2, r3, #8
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008302:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f103 0208 	add.w	r2, r3, #8
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f103 0208 	add.w	r2, r3, #8
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800831e:	bf00      	nop
 8008320:	370c      	adds	r7, #12
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr

0800832a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800832a:	b480      	push	{r7}
 800832c:	b083      	sub	sp, #12
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008338:	bf00      	nop
 800833a:	370c      	adds	r7, #12
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008344:	b480      	push	{r7}
 8008346:	b085      	sub	sp, #20
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	68fa      	ldr	r2, [r7, #12]
 8008358:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	689a      	ldr	r2, [r3, #8]
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	683a      	ldr	r2, [r7, #0]
 8008368:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	683a      	ldr	r2, [r7, #0]
 800836e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	1c5a      	adds	r2, r3, #1
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	601a      	str	r2, [r3, #0]
}
 8008380:	bf00      	nop
 8008382:	3714      	adds	r7, #20
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr

0800838c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800838c:	b480      	push	{r7}
 800838e:	b085      	sub	sp, #20
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083a2:	d103      	bne.n	80083ac <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	691b      	ldr	r3, [r3, #16]
 80083a8:	60fb      	str	r3, [r7, #12]
 80083aa:	e00c      	b.n	80083c6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	3308      	adds	r3, #8
 80083b0:	60fb      	str	r3, [r7, #12]
 80083b2:	e002      	b.n	80083ba <vListInsert+0x2e>
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	60fb      	str	r3, [r7, #12]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	68ba      	ldr	r2, [r7, #8]
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d2f6      	bcs.n	80083b4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	685a      	ldr	r2, [r3, #4]
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	683a      	ldr	r2, [r7, #0]
 80083d4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	68fa      	ldr	r2, [r7, #12]
 80083da:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	683a      	ldr	r2, [r7, #0]
 80083e0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	1c5a      	adds	r2, r3, #1
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	601a      	str	r2, [r3, #0]
}
 80083f2:	bf00      	nop
 80083f4:	3714      	adds	r7, #20
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr

080083fe <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80083fe:	b480      	push	{r7}
 8008400:	b085      	sub	sp, #20
 8008402:	af00      	add	r7, sp, #0
 8008404:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	691b      	ldr	r3, [r3, #16]
 800840a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	6892      	ldr	r2, [r2, #8]
 8008414:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	6852      	ldr	r2, [r2, #4]
 800841e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	429a      	cmp	r2, r3
 8008428:	d103      	bne.n	8008432 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	689a      	ldr	r2, [r3, #8]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2200      	movs	r2, #0
 8008436:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	1e5a      	subs	r2, r3, #1
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
}
 8008446:	4618      	mov	r0, r3
 8008448:	3714      	adds	r7, #20
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr

08008452 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008452:	b580      	push	{r7, lr}
 8008454:	b08e      	sub	sp, #56	; 0x38
 8008456:	af04      	add	r7, sp, #16
 8008458:	60f8      	str	r0, [r7, #12]
 800845a:	60b9      	str	r1, [r7, #8]
 800845c:	607a      	str	r2, [r7, #4]
 800845e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008462:	2b00      	cmp	r3, #0
 8008464:	d10a      	bne.n	800847c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846a:	f383 8811 	msr	BASEPRI, r3
 800846e:	f3bf 8f6f 	isb	sy
 8008472:	f3bf 8f4f 	dsb	sy
 8008476:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008478:	bf00      	nop
 800847a:	e7fe      	b.n	800847a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800847c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847e:	2b00      	cmp	r3, #0
 8008480:	d10a      	bne.n	8008498 <xTaskCreateStatic+0x46>
	__asm volatile
 8008482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008486:	f383 8811 	msr	BASEPRI, r3
 800848a:	f3bf 8f6f 	isb	sy
 800848e:	f3bf 8f4f 	dsb	sy
 8008492:	61fb      	str	r3, [r7, #28]
}
 8008494:	bf00      	nop
 8008496:	e7fe      	b.n	8008496 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008498:	23a0      	movs	r3, #160	; 0xa0
 800849a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	2ba0      	cmp	r3, #160	; 0xa0
 80084a0:	d00a      	beq.n	80084b8 <xTaskCreateStatic+0x66>
	__asm volatile
 80084a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a6:	f383 8811 	msr	BASEPRI, r3
 80084aa:	f3bf 8f6f 	isb	sy
 80084ae:	f3bf 8f4f 	dsb	sy
 80084b2:	61bb      	str	r3, [r7, #24]
}
 80084b4:	bf00      	nop
 80084b6:	e7fe      	b.n	80084b6 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80084b8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80084ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d01e      	beq.n	80084fe <xTaskCreateStatic+0xac>
 80084c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d01b      	beq.n	80084fe <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80084c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80084ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084ce:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80084d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d2:	2202      	movs	r2, #2
 80084d4:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80084d8:	2300      	movs	r3, #0
 80084da:	9303      	str	r3, [sp, #12]
 80084dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084de:	9302      	str	r3, [sp, #8]
 80084e0:	f107 0314 	add.w	r3, r7, #20
 80084e4:	9301      	str	r3, [sp, #4]
 80084e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e8:	9300      	str	r3, [sp, #0]
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	68b9      	ldr	r1, [r7, #8]
 80084f0:	68f8      	ldr	r0, [r7, #12]
 80084f2:	f000 f851 	bl	8008598 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80084f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80084f8:	f000 f8ec 	bl	80086d4 <prvAddNewTaskToReadyList>
 80084fc:	e001      	b.n	8008502 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80084fe:	2300      	movs	r3, #0
 8008500:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008502:	697b      	ldr	r3, [r7, #20]
	}
 8008504:	4618      	mov	r0, r3
 8008506:	3728      	adds	r7, #40	; 0x28
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800850c:	b580      	push	{r7, lr}
 800850e:	b08c      	sub	sp, #48	; 0x30
 8008510:	af04      	add	r7, sp, #16
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	603b      	str	r3, [r7, #0]
 8008518:	4613      	mov	r3, r2
 800851a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800851c:	88fb      	ldrh	r3, [r7, #6]
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	4618      	mov	r0, r3
 8008522:	f000 fef1 	bl	8009308 <pvPortMalloc>
 8008526:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d00e      	beq.n	800854c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800852e:	20a0      	movs	r0, #160	; 0xa0
 8008530:	f000 feea 	bl	8009308 <pvPortMalloc>
 8008534:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d003      	beq.n	8008544 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800853c:	69fb      	ldr	r3, [r7, #28]
 800853e:	697a      	ldr	r2, [r7, #20]
 8008540:	631a      	str	r2, [r3, #48]	; 0x30
 8008542:	e005      	b.n	8008550 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008544:	6978      	ldr	r0, [r7, #20]
 8008546:	f000 ffab 	bl	80094a0 <vPortFree>
 800854a:	e001      	b.n	8008550 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800854c:	2300      	movs	r3, #0
 800854e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008550:	69fb      	ldr	r3, [r7, #28]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d017      	beq.n	8008586 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008556:	69fb      	ldr	r3, [r7, #28]
 8008558:	2200      	movs	r2, #0
 800855a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800855e:	88fa      	ldrh	r2, [r7, #6]
 8008560:	2300      	movs	r3, #0
 8008562:	9303      	str	r3, [sp, #12]
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	9302      	str	r3, [sp, #8]
 8008568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800856a:	9301      	str	r3, [sp, #4]
 800856c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800856e:	9300      	str	r3, [sp, #0]
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	68b9      	ldr	r1, [r7, #8]
 8008574:	68f8      	ldr	r0, [r7, #12]
 8008576:	f000 f80f 	bl	8008598 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800857a:	69f8      	ldr	r0, [r7, #28]
 800857c:	f000 f8aa 	bl	80086d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008580:	2301      	movs	r3, #1
 8008582:	61bb      	str	r3, [r7, #24]
 8008584:	e002      	b.n	800858c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008586:	f04f 33ff 	mov.w	r3, #4294967295
 800858a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800858c:	69bb      	ldr	r3, [r7, #24]
	}
 800858e:	4618      	mov	r0, r3
 8008590:	3720      	adds	r7, #32
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
	...

08008598 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b088      	sub	sp, #32
 800859c:	af00      	add	r7, sp, #0
 800859e:	60f8      	str	r0, [r7, #12]
 80085a0:	60b9      	str	r1, [r7, #8]
 80085a2:	607a      	str	r2, [r7, #4]
 80085a4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80085a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80085b0:	3b01      	subs	r3, #1
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	4413      	add	r3, r2
 80085b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80085b8:	69bb      	ldr	r3, [r7, #24]
 80085ba:	f023 0307 	bic.w	r3, r3, #7
 80085be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80085c0:	69bb      	ldr	r3, [r7, #24]
 80085c2:	f003 0307 	and.w	r3, r3, #7
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d00a      	beq.n	80085e0 <prvInitialiseNewTask+0x48>
	__asm volatile
 80085ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ce:	f383 8811 	msr	BASEPRI, r3
 80085d2:	f3bf 8f6f 	isb	sy
 80085d6:	f3bf 8f4f 	dsb	sy
 80085da:	617b      	str	r3, [r7, #20]
}
 80085dc:	bf00      	nop
 80085de:	e7fe      	b.n	80085de <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d01f      	beq.n	8008626 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80085e6:	2300      	movs	r3, #0
 80085e8:	61fb      	str	r3, [r7, #28]
 80085ea:	e012      	b.n	8008612 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80085ec:	68ba      	ldr	r2, [r7, #8]
 80085ee:	69fb      	ldr	r3, [r7, #28]
 80085f0:	4413      	add	r3, r2
 80085f2:	7819      	ldrb	r1, [r3, #0]
 80085f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085f6:	69fb      	ldr	r3, [r7, #28]
 80085f8:	4413      	add	r3, r2
 80085fa:	3334      	adds	r3, #52	; 0x34
 80085fc:	460a      	mov	r2, r1
 80085fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008600:	68ba      	ldr	r2, [r7, #8]
 8008602:	69fb      	ldr	r3, [r7, #28]
 8008604:	4413      	add	r3, r2
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d006      	beq.n	800861a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800860c:	69fb      	ldr	r3, [r7, #28]
 800860e:	3301      	adds	r3, #1
 8008610:	61fb      	str	r3, [r7, #28]
 8008612:	69fb      	ldr	r3, [r7, #28]
 8008614:	2b0f      	cmp	r3, #15
 8008616:	d9e9      	bls.n	80085ec <prvInitialiseNewTask+0x54>
 8008618:	e000      	b.n	800861c <prvInitialiseNewTask+0x84>
			{
				break;
 800861a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800861c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800861e:	2200      	movs	r2, #0
 8008620:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008624:	e003      	b.n	800862e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008628:	2200      	movs	r2, #0
 800862a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800862e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008630:	2b06      	cmp	r3, #6
 8008632:	d901      	bls.n	8008638 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008634:	2306      	movs	r3, #6
 8008636:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800863c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800863e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008640:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008642:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008646:	2200      	movs	r2, #0
 8008648:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800864a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800864c:	3304      	adds	r3, #4
 800864e:	4618      	mov	r0, r3
 8008650:	f7ff fe6b 	bl	800832a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008656:	3318      	adds	r3, #24
 8008658:	4618      	mov	r0, r3
 800865a:	f7ff fe66 	bl	800832a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800865e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008662:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008666:	f1c3 0207 	rsb	r2, r3, #7
 800866a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800866e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008672:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008676:	2200      	movs	r2, #0
 8008678:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800867c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867e:	2200      	movs	r2, #0
 8008680:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008686:	334c      	adds	r3, #76	; 0x4c
 8008688:	224c      	movs	r2, #76	; 0x4c
 800868a:	2100      	movs	r1, #0
 800868c:	4618      	mov	r0, r3
 800868e:	f001 f825 	bl	80096dc <memset>
 8008692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008694:	4a0c      	ldr	r2, [pc, #48]	; (80086c8 <prvInitialiseNewTask+0x130>)
 8008696:	651a      	str	r2, [r3, #80]	; 0x50
 8008698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869a:	4a0c      	ldr	r2, [pc, #48]	; (80086cc <prvInitialiseNewTask+0x134>)
 800869c:	655a      	str	r2, [r3, #84]	; 0x54
 800869e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a0:	4a0b      	ldr	r2, [pc, #44]	; (80086d0 <prvInitialiseNewTask+0x138>)
 80086a2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80086a4:	683a      	ldr	r2, [r7, #0]
 80086a6:	68f9      	ldr	r1, [r7, #12]
 80086a8:	69b8      	ldr	r0, [r7, #24]
 80086aa:	f000 fc1f 	bl	8008eec <pxPortInitialiseStack>
 80086ae:	4602      	mov	r2, r0
 80086b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80086b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d002      	beq.n	80086c0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80086ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086be:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086c0:	bf00      	nop
 80086c2:	3720      	adds	r7, #32
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	20004598 	.word	0x20004598
 80086cc:	20004600 	.word	0x20004600
 80086d0:	20004668 	.word	0x20004668

080086d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80086dc:	f000 fd32 	bl	8009144 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80086e0:	4b2a      	ldr	r3, [pc, #168]	; (800878c <prvAddNewTaskToReadyList+0xb8>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	3301      	adds	r3, #1
 80086e6:	4a29      	ldr	r2, [pc, #164]	; (800878c <prvAddNewTaskToReadyList+0xb8>)
 80086e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80086ea:	4b29      	ldr	r3, [pc, #164]	; (8008790 <prvAddNewTaskToReadyList+0xbc>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d109      	bne.n	8008706 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80086f2:	4a27      	ldr	r2, [pc, #156]	; (8008790 <prvAddNewTaskToReadyList+0xbc>)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80086f8:	4b24      	ldr	r3, [pc, #144]	; (800878c <prvAddNewTaskToReadyList+0xb8>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d110      	bne.n	8008722 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008700:	f000 facc 	bl	8008c9c <prvInitialiseTaskLists>
 8008704:	e00d      	b.n	8008722 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008706:	4b23      	ldr	r3, [pc, #140]	; (8008794 <prvAddNewTaskToReadyList+0xc0>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d109      	bne.n	8008722 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800870e:	4b20      	ldr	r3, [pc, #128]	; (8008790 <prvAddNewTaskToReadyList+0xbc>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008718:	429a      	cmp	r2, r3
 800871a:	d802      	bhi.n	8008722 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800871c:	4a1c      	ldr	r2, [pc, #112]	; (8008790 <prvAddNewTaskToReadyList+0xbc>)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008722:	4b1d      	ldr	r3, [pc, #116]	; (8008798 <prvAddNewTaskToReadyList+0xc4>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	3301      	adds	r3, #1
 8008728:	4a1b      	ldr	r2, [pc, #108]	; (8008798 <prvAddNewTaskToReadyList+0xc4>)
 800872a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008730:	2201      	movs	r2, #1
 8008732:	409a      	lsls	r2, r3
 8008734:	4b19      	ldr	r3, [pc, #100]	; (800879c <prvAddNewTaskToReadyList+0xc8>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4313      	orrs	r3, r2
 800873a:	4a18      	ldr	r2, [pc, #96]	; (800879c <prvAddNewTaskToReadyList+0xc8>)
 800873c:	6013      	str	r3, [r2, #0]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008742:	4613      	mov	r3, r2
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	4413      	add	r3, r2
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	4a15      	ldr	r2, [pc, #84]	; (80087a0 <prvAddNewTaskToReadyList+0xcc>)
 800874c:	441a      	add	r2, r3
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	3304      	adds	r3, #4
 8008752:	4619      	mov	r1, r3
 8008754:	4610      	mov	r0, r2
 8008756:	f7ff fdf5 	bl	8008344 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800875a:	f000 fd23 	bl	80091a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800875e:	4b0d      	ldr	r3, [pc, #52]	; (8008794 <prvAddNewTaskToReadyList+0xc0>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d00e      	beq.n	8008784 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008766:	4b0a      	ldr	r3, [pc, #40]	; (8008790 <prvAddNewTaskToReadyList+0xbc>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008770:	429a      	cmp	r2, r3
 8008772:	d207      	bcs.n	8008784 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008774:	4b0b      	ldr	r3, [pc, #44]	; (80087a4 <prvAddNewTaskToReadyList+0xd0>)
 8008776:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800877a:	601a      	str	r2, [r3, #0]
 800877c:	f3bf 8f4f 	dsb	sy
 8008780:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008784:	bf00      	nop
 8008786:	3708      	adds	r7, #8
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}
 800878c:	20000944 	.word	0x20000944
 8008790:	20000844 	.word	0x20000844
 8008794:	20000950 	.word	0x20000950
 8008798:	20000960 	.word	0x20000960
 800879c:	2000094c 	.word	0x2000094c
 80087a0:	20000848 	.word	0x20000848
 80087a4:	e000ed04 	.word	0xe000ed04

080087a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80087b0:	2300      	movs	r3, #0
 80087b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d017      	beq.n	80087ea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80087ba:	4b13      	ldr	r3, [pc, #76]	; (8008808 <vTaskDelay+0x60>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d00a      	beq.n	80087d8 <vTaskDelay+0x30>
	__asm volatile
 80087c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c6:	f383 8811 	msr	BASEPRI, r3
 80087ca:	f3bf 8f6f 	isb	sy
 80087ce:	f3bf 8f4f 	dsb	sy
 80087d2:	60bb      	str	r3, [r7, #8]
}
 80087d4:	bf00      	nop
 80087d6:	e7fe      	b.n	80087d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80087d8:	f000 f884 	bl	80088e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80087dc:	2100      	movs	r1, #0
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 fb1e 	bl	8008e20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80087e4:	f000 f88c 	bl	8008900 <xTaskResumeAll>
 80087e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d107      	bne.n	8008800 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80087f0:	4b06      	ldr	r3, [pc, #24]	; (800880c <vTaskDelay+0x64>)
 80087f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087f6:	601a      	str	r2, [r3, #0]
 80087f8:	f3bf 8f4f 	dsb	sy
 80087fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008800:	bf00      	nop
 8008802:	3710      	adds	r7, #16
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}
 8008808:	2000096c 	.word	0x2000096c
 800880c:	e000ed04 	.word	0xe000ed04

08008810 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b08a      	sub	sp, #40	; 0x28
 8008814:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008816:	2300      	movs	r3, #0
 8008818:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800881a:	2300      	movs	r3, #0
 800881c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800881e:	463a      	mov	r2, r7
 8008820:	1d39      	adds	r1, r7, #4
 8008822:	f107 0308 	add.w	r3, r7, #8
 8008826:	4618      	mov	r0, r3
 8008828:	f7f9 f832 	bl	8001890 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800882c:	6839      	ldr	r1, [r7, #0]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	68ba      	ldr	r2, [r7, #8]
 8008832:	9202      	str	r2, [sp, #8]
 8008834:	9301      	str	r3, [sp, #4]
 8008836:	2300      	movs	r3, #0
 8008838:	9300      	str	r3, [sp, #0]
 800883a:	2300      	movs	r3, #0
 800883c:	460a      	mov	r2, r1
 800883e:	4921      	ldr	r1, [pc, #132]	; (80088c4 <vTaskStartScheduler+0xb4>)
 8008840:	4821      	ldr	r0, [pc, #132]	; (80088c8 <vTaskStartScheduler+0xb8>)
 8008842:	f7ff fe06 	bl	8008452 <xTaskCreateStatic>
 8008846:	4603      	mov	r3, r0
 8008848:	4a20      	ldr	r2, [pc, #128]	; (80088cc <vTaskStartScheduler+0xbc>)
 800884a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800884c:	4b1f      	ldr	r3, [pc, #124]	; (80088cc <vTaskStartScheduler+0xbc>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d002      	beq.n	800885a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008854:	2301      	movs	r3, #1
 8008856:	617b      	str	r3, [r7, #20]
 8008858:	e001      	b.n	800885e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800885a:	2300      	movs	r3, #0
 800885c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	2b01      	cmp	r3, #1
 8008862:	d11b      	bne.n	800889c <vTaskStartScheduler+0x8c>
	__asm volatile
 8008864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008868:	f383 8811 	msr	BASEPRI, r3
 800886c:	f3bf 8f6f 	isb	sy
 8008870:	f3bf 8f4f 	dsb	sy
 8008874:	613b      	str	r3, [r7, #16]
}
 8008876:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008878:	4b15      	ldr	r3, [pc, #84]	; (80088d0 <vTaskStartScheduler+0xc0>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	334c      	adds	r3, #76	; 0x4c
 800887e:	4a15      	ldr	r2, [pc, #84]	; (80088d4 <vTaskStartScheduler+0xc4>)
 8008880:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008882:	4b15      	ldr	r3, [pc, #84]	; (80088d8 <vTaskStartScheduler+0xc8>)
 8008884:	f04f 32ff 	mov.w	r2, #4294967295
 8008888:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800888a:	4b14      	ldr	r3, [pc, #80]	; (80088dc <vTaskStartScheduler+0xcc>)
 800888c:	2201      	movs	r2, #1
 800888e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008890:	4b13      	ldr	r3, [pc, #76]	; (80088e0 <vTaskStartScheduler+0xd0>)
 8008892:	2200      	movs	r2, #0
 8008894:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008896:	f000 fbb3 	bl	8009000 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800889a:	e00e      	b.n	80088ba <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088a2:	d10a      	bne.n	80088ba <vTaskStartScheduler+0xaa>
	__asm volatile
 80088a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a8:	f383 8811 	msr	BASEPRI, r3
 80088ac:	f3bf 8f6f 	isb	sy
 80088b0:	f3bf 8f4f 	dsb	sy
 80088b4:	60fb      	str	r3, [r7, #12]
}
 80088b6:	bf00      	nop
 80088b8:	e7fe      	b.n	80088b8 <vTaskStartScheduler+0xa8>
}
 80088ba:	bf00      	nop
 80088bc:	3718      	adds	r7, #24
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	08009928 	.word	0x08009928
 80088c8:	08008c6d 	.word	0x08008c6d
 80088cc:	20000968 	.word	0x20000968
 80088d0:	20000844 	.word	0x20000844
 80088d4:	2000017c 	.word	0x2000017c
 80088d8:	20000964 	.word	0x20000964
 80088dc:	20000950 	.word	0x20000950
 80088e0:	20000948 	.word	0x20000948

080088e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80088e4:	b480      	push	{r7}
 80088e6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80088e8:	4b04      	ldr	r3, [pc, #16]	; (80088fc <vTaskSuspendAll+0x18>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	3301      	adds	r3, #1
 80088ee:	4a03      	ldr	r2, [pc, #12]	; (80088fc <vTaskSuspendAll+0x18>)
 80088f0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80088f2:	bf00      	nop
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr
 80088fc:	2000096c 	.word	0x2000096c

08008900 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008906:	2300      	movs	r3, #0
 8008908:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800890a:	2300      	movs	r3, #0
 800890c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800890e:	4b41      	ldr	r3, [pc, #260]	; (8008a14 <xTaskResumeAll+0x114>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d10a      	bne.n	800892c <xTaskResumeAll+0x2c>
	__asm volatile
 8008916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800891a:	f383 8811 	msr	BASEPRI, r3
 800891e:	f3bf 8f6f 	isb	sy
 8008922:	f3bf 8f4f 	dsb	sy
 8008926:	603b      	str	r3, [r7, #0]
}
 8008928:	bf00      	nop
 800892a:	e7fe      	b.n	800892a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800892c:	f000 fc0a 	bl	8009144 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008930:	4b38      	ldr	r3, [pc, #224]	; (8008a14 <xTaskResumeAll+0x114>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	3b01      	subs	r3, #1
 8008936:	4a37      	ldr	r2, [pc, #220]	; (8008a14 <xTaskResumeAll+0x114>)
 8008938:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800893a:	4b36      	ldr	r3, [pc, #216]	; (8008a14 <xTaskResumeAll+0x114>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d161      	bne.n	8008a06 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008942:	4b35      	ldr	r3, [pc, #212]	; (8008a18 <xTaskResumeAll+0x118>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d05d      	beq.n	8008a06 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800894a:	e02e      	b.n	80089aa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800894c:	4b33      	ldr	r3, [pc, #204]	; (8008a1c <xTaskResumeAll+0x11c>)
 800894e:	68db      	ldr	r3, [r3, #12]
 8008950:	68db      	ldr	r3, [r3, #12]
 8008952:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	3318      	adds	r3, #24
 8008958:	4618      	mov	r0, r3
 800895a:	f7ff fd50 	bl	80083fe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	3304      	adds	r3, #4
 8008962:	4618      	mov	r0, r3
 8008964:	f7ff fd4b 	bl	80083fe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800896c:	2201      	movs	r2, #1
 800896e:	409a      	lsls	r2, r3
 8008970:	4b2b      	ldr	r3, [pc, #172]	; (8008a20 <xTaskResumeAll+0x120>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4313      	orrs	r3, r2
 8008976:	4a2a      	ldr	r2, [pc, #168]	; (8008a20 <xTaskResumeAll+0x120>)
 8008978:	6013      	str	r3, [r2, #0]
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800897e:	4613      	mov	r3, r2
 8008980:	009b      	lsls	r3, r3, #2
 8008982:	4413      	add	r3, r2
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	4a27      	ldr	r2, [pc, #156]	; (8008a24 <xTaskResumeAll+0x124>)
 8008988:	441a      	add	r2, r3
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	3304      	adds	r3, #4
 800898e:	4619      	mov	r1, r3
 8008990:	4610      	mov	r0, r2
 8008992:	f7ff fcd7 	bl	8008344 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800899a:	4b23      	ldr	r3, [pc, #140]	; (8008a28 <xTaskResumeAll+0x128>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d302      	bcc.n	80089aa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80089a4:	4b21      	ldr	r3, [pc, #132]	; (8008a2c <xTaskResumeAll+0x12c>)
 80089a6:	2201      	movs	r2, #1
 80089a8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089aa:	4b1c      	ldr	r3, [pc, #112]	; (8008a1c <xTaskResumeAll+0x11c>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d1cc      	bne.n	800894c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d001      	beq.n	80089bc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80089b8:	f000 fa12 	bl	8008de0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80089bc:	4b1c      	ldr	r3, [pc, #112]	; (8008a30 <xTaskResumeAll+0x130>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d010      	beq.n	80089ea <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80089c8:	f000 f836 	bl	8008a38 <xTaskIncrementTick>
 80089cc:	4603      	mov	r3, r0
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d002      	beq.n	80089d8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80089d2:	4b16      	ldr	r3, [pc, #88]	; (8008a2c <xTaskResumeAll+0x12c>)
 80089d4:	2201      	movs	r2, #1
 80089d6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	3b01      	subs	r3, #1
 80089dc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d1f1      	bne.n	80089c8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80089e4:	4b12      	ldr	r3, [pc, #72]	; (8008a30 <xTaskResumeAll+0x130>)
 80089e6:	2200      	movs	r2, #0
 80089e8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80089ea:	4b10      	ldr	r3, [pc, #64]	; (8008a2c <xTaskResumeAll+0x12c>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d009      	beq.n	8008a06 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80089f2:	2301      	movs	r3, #1
 80089f4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80089f6:	4b0f      	ldr	r3, [pc, #60]	; (8008a34 <xTaskResumeAll+0x134>)
 80089f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089fc:	601a      	str	r2, [r3, #0]
 80089fe:	f3bf 8f4f 	dsb	sy
 8008a02:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a06:	f000 fbcd 	bl	80091a4 <vPortExitCritical>

	return xAlreadyYielded;
 8008a0a:	68bb      	ldr	r3, [r7, #8]
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3710      	adds	r7, #16
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}
 8008a14:	2000096c 	.word	0x2000096c
 8008a18:	20000944 	.word	0x20000944
 8008a1c:	20000904 	.word	0x20000904
 8008a20:	2000094c 	.word	0x2000094c
 8008a24:	20000848 	.word	0x20000848
 8008a28:	20000844 	.word	0x20000844
 8008a2c:	20000958 	.word	0x20000958
 8008a30:	20000954 	.word	0x20000954
 8008a34:	e000ed04 	.word	0xe000ed04

08008a38 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b086      	sub	sp, #24
 8008a3c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a42:	4b4e      	ldr	r3, [pc, #312]	; (8008b7c <xTaskIncrementTick+0x144>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	f040 808e 	bne.w	8008b68 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008a4c:	4b4c      	ldr	r3, [pc, #304]	; (8008b80 <xTaskIncrementTick+0x148>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	3301      	adds	r3, #1
 8008a52:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008a54:	4a4a      	ldr	r2, [pc, #296]	; (8008b80 <xTaskIncrementTick+0x148>)
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d120      	bne.n	8008aa2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008a60:	4b48      	ldr	r3, [pc, #288]	; (8008b84 <xTaskIncrementTick+0x14c>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d00a      	beq.n	8008a80 <xTaskIncrementTick+0x48>
	__asm volatile
 8008a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a6e:	f383 8811 	msr	BASEPRI, r3
 8008a72:	f3bf 8f6f 	isb	sy
 8008a76:	f3bf 8f4f 	dsb	sy
 8008a7a:	603b      	str	r3, [r7, #0]
}
 8008a7c:	bf00      	nop
 8008a7e:	e7fe      	b.n	8008a7e <xTaskIncrementTick+0x46>
 8008a80:	4b40      	ldr	r3, [pc, #256]	; (8008b84 <xTaskIncrementTick+0x14c>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	60fb      	str	r3, [r7, #12]
 8008a86:	4b40      	ldr	r3, [pc, #256]	; (8008b88 <xTaskIncrementTick+0x150>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a3e      	ldr	r2, [pc, #248]	; (8008b84 <xTaskIncrementTick+0x14c>)
 8008a8c:	6013      	str	r3, [r2, #0]
 8008a8e:	4a3e      	ldr	r2, [pc, #248]	; (8008b88 <xTaskIncrementTick+0x150>)
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	6013      	str	r3, [r2, #0]
 8008a94:	4b3d      	ldr	r3, [pc, #244]	; (8008b8c <xTaskIncrementTick+0x154>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	3301      	adds	r3, #1
 8008a9a:	4a3c      	ldr	r2, [pc, #240]	; (8008b8c <xTaskIncrementTick+0x154>)
 8008a9c:	6013      	str	r3, [r2, #0]
 8008a9e:	f000 f99f 	bl	8008de0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008aa2:	4b3b      	ldr	r3, [pc, #236]	; (8008b90 <xTaskIncrementTick+0x158>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	693a      	ldr	r2, [r7, #16]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d348      	bcc.n	8008b3e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008aac:	4b35      	ldr	r3, [pc, #212]	; (8008b84 <xTaskIncrementTick+0x14c>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d104      	bne.n	8008ac0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ab6:	4b36      	ldr	r3, [pc, #216]	; (8008b90 <xTaskIncrementTick+0x158>)
 8008ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8008abc:	601a      	str	r2, [r3, #0]
					break;
 8008abe:	e03e      	b.n	8008b3e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ac0:	4b30      	ldr	r3, [pc, #192]	; (8008b84 <xTaskIncrementTick+0x14c>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	68db      	ldr	r3, [r3, #12]
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008ad0:	693a      	ldr	r2, [r7, #16]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d203      	bcs.n	8008ae0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008ad8:	4a2d      	ldr	r2, [pc, #180]	; (8008b90 <xTaskIncrementTick+0x158>)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008ade:	e02e      	b.n	8008b3e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	3304      	adds	r3, #4
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7ff fc8a 	bl	80083fe <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d004      	beq.n	8008afc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	3318      	adds	r3, #24
 8008af6:	4618      	mov	r0, r3
 8008af8:	f7ff fc81 	bl	80083fe <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b00:	2201      	movs	r2, #1
 8008b02:	409a      	lsls	r2, r3
 8008b04:	4b23      	ldr	r3, [pc, #140]	; (8008b94 <xTaskIncrementTick+0x15c>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	4a22      	ldr	r2, [pc, #136]	; (8008b94 <xTaskIncrementTick+0x15c>)
 8008b0c:	6013      	str	r3, [r2, #0]
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b12:	4613      	mov	r3, r2
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	4413      	add	r3, r2
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	4a1f      	ldr	r2, [pc, #124]	; (8008b98 <xTaskIncrementTick+0x160>)
 8008b1c:	441a      	add	r2, r3
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	3304      	adds	r3, #4
 8008b22:	4619      	mov	r1, r3
 8008b24:	4610      	mov	r0, r2
 8008b26:	f7ff fc0d 	bl	8008344 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b2e:	4b1b      	ldr	r3, [pc, #108]	; (8008b9c <xTaskIncrementTick+0x164>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d3b9      	bcc.n	8008aac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b3c:	e7b6      	b.n	8008aac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008b3e:	4b17      	ldr	r3, [pc, #92]	; (8008b9c <xTaskIncrementTick+0x164>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b44:	4914      	ldr	r1, [pc, #80]	; (8008b98 <xTaskIncrementTick+0x160>)
 8008b46:	4613      	mov	r3, r2
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	4413      	add	r3, r2
 8008b4c:	009b      	lsls	r3, r3, #2
 8008b4e:	440b      	add	r3, r1
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d901      	bls.n	8008b5a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8008b56:	2301      	movs	r3, #1
 8008b58:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008b5a:	4b11      	ldr	r3, [pc, #68]	; (8008ba0 <xTaskIncrementTick+0x168>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d007      	beq.n	8008b72 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008b62:	2301      	movs	r3, #1
 8008b64:	617b      	str	r3, [r7, #20]
 8008b66:	e004      	b.n	8008b72 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008b68:	4b0e      	ldr	r3, [pc, #56]	; (8008ba4 <xTaskIncrementTick+0x16c>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	4a0d      	ldr	r2, [pc, #52]	; (8008ba4 <xTaskIncrementTick+0x16c>)
 8008b70:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008b72:	697b      	ldr	r3, [r7, #20]
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3718      	adds	r7, #24
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}
 8008b7c:	2000096c 	.word	0x2000096c
 8008b80:	20000948 	.word	0x20000948
 8008b84:	200008fc 	.word	0x200008fc
 8008b88:	20000900 	.word	0x20000900
 8008b8c:	2000095c 	.word	0x2000095c
 8008b90:	20000964 	.word	0x20000964
 8008b94:	2000094c 	.word	0x2000094c
 8008b98:	20000848 	.word	0x20000848
 8008b9c:	20000844 	.word	0x20000844
 8008ba0:	20000958 	.word	0x20000958
 8008ba4:	20000954 	.word	0x20000954

08008ba8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b087      	sub	sp, #28
 8008bac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008bae:	4b29      	ldr	r3, [pc, #164]	; (8008c54 <vTaskSwitchContext+0xac>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d003      	beq.n	8008bbe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008bb6:	4b28      	ldr	r3, [pc, #160]	; (8008c58 <vTaskSwitchContext+0xb0>)
 8008bb8:	2201      	movs	r2, #1
 8008bba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008bbc:	e044      	b.n	8008c48 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8008bbe:	4b26      	ldr	r3, [pc, #152]	; (8008c58 <vTaskSwitchContext+0xb0>)
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bc4:	4b25      	ldr	r3, [pc, #148]	; (8008c5c <vTaskSwitchContext+0xb4>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	fab3 f383 	clz	r3, r3
 8008bd0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008bd2:	7afb      	ldrb	r3, [r7, #11]
 8008bd4:	f1c3 031f 	rsb	r3, r3, #31
 8008bd8:	617b      	str	r3, [r7, #20]
 8008bda:	4921      	ldr	r1, [pc, #132]	; (8008c60 <vTaskSwitchContext+0xb8>)
 8008bdc:	697a      	ldr	r2, [r7, #20]
 8008bde:	4613      	mov	r3, r2
 8008be0:	009b      	lsls	r3, r3, #2
 8008be2:	4413      	add	r3, r2
 8008be4:	009b      	lsls	r3, r3, #2
 8008be6:	440b      	add	r3, r1
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d10a      	bne.n	8008c04 <vTaskSwitchContext+0x5c>
	__asm volatile
 8008bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf2:	f383 8811 	msr	BASEPRI, r3
 8008bf6:	f3bf 8f6f 	isb	sy
 8008bfa:	f3bf 8f4f 	dsb	sy
 8008bfe:	607b      	str	r3, [r7, #4]
}
 8008c00:	bf00      	nop
 8008c02:	e7fe      	b.n	8008c02 <vTaskSwitchContext+0x5a>
 8008c04:	697a      	ldr	r2, [r7, #20]
 8008c06:	4613      	mov	r3, r2
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	4413      	add	r3, r2
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	4a14      	ldr	r2, [pc, #80]	; (8008c60 <vTaskSwitchContext+0xb8>)
 8008c10:	4413      	add	r3, r2
 8008c12:	613b      	str	r3, [r7, #16]
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	685a      	ldr	r2, [r3, #4]
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	605a      	str	r2, [r3, #4]
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	685a      	ldr	r2, [r3, #4]
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	3308      	adds	r3, #8
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d104      	bne.n	8008c34 <vTaskSwitchContext+0x8c>
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	685a      	ldr	r2, [r3, #4]
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	605a      	str	r2, [r3, #4]
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	68db      	ldr	r3, [r3, #12]
 8008c3a:	4a0a      	ldr	r2, [pc, #40]	; (8008c64 <vTaskSwitchContext+0xbc>)
 8008c3c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008c3e:	4b09      	ldr	r3, [pc, #36]	; (8008c64 <vTaskSwitchContext+0xbc>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	334c      	adds	r3, #76	; 0x4c
 8008c44:	4a08      	ldr	r2, [pc, #32]	; (8008c68 <vTaskSwitchContext+0xc0>)
 8008c46:	6013      	str	r3, [r2, #0]
}
 8008c48:	bf00      	nop
 8008c4a:	371c      	adds	r7, #28
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr
 8008c54:	2000096c 	.word	0x2000096c
 8008c58:	20000958 	.word	0x20000958
 8008c5c:	2000094c 	.word	0x2000094c
 8008c60:	20000848 	.word	0x20000848
 8008c64:	20000844 	.word	0x20000844
 8008c68:	2000017c 	.word	0x2000017c

08008c6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008c74:	f000 f852 	bl	8008d1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008c78:	4b06      	ldr	r3, [pc, #24]	; (8008c94 <prvIdleTask+0x28>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d9f9      	bls.n	8008c74 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008c80:	4b05      	ldr	r3, [pc, #20]	; (8008c98 <prvIdleTask+0x2c>)
 8008c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c86:	601a      	str	r2, [r3, #0]
 8008c88:	f3bf 8f4f 	dsb	sy
 8008c8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008c90:	e7f0      	b.n	8008c74 <prvIdleTask+0x8>
 8008c92:	bf00      	nop
 8008c94:	20000848 	.word	0x20000848
 8008c98:	e000ed04 	.word	0xe000ed04

08008c9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b082      	sub	sp, #8
 8008ca0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	607b      	str	r3, [r7, #4]
 8008ca6:	e00c      	b.n	8008cc2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	4613      	mov	r3, r2
 8008cac:	009b      	lsls	r3, r3, #2
 8008cae:	4413      	add	r3, r2
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	4a12      	ldr	r2, [pc, #72]	; (8008cfc <prvInitialiseTaskLists+0x60>)
 8008cb4:	4413      	add	r3, r2
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7ff fb17 	bl	80082ea <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	607b      	str	r3, [r7, #4]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2b06      	cmp	r3, #6
 8008cc6:	d9ef      	bls.n	8008ca8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008cc8:	480d      	ldr	r0, [pc, #52]	; (8008d00 <prvInitialiseTaskLists+0x64>)
 8008cca:	f7ff fb0e 	bl	80082ea <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008cce:	480d      	ldr	r0, [pc, #52]	; (8008d04 <prvInitialiseTaskLists+0x68>)
 8008cd0:	f7ff fb0b 	bl	80082ea <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008cd4:	480c      	ldr	r0, [pc, #48]	; (8008d08 <prvInitialiseTaskLists+0x6c>)
 8008cd6:	f7ff fb08 	bl	80082ea <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008cda:	480c      	ldr	r0, [pc, #48]	; (8008d0c <prvInitialiseTaskLists+0x70>)
 8008cdc:	f7ff fb05 	bl	80082ea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008ce0:	480b      	ldr	r0, [pc, #44]	; (8008d10 <prvInitialiseTaskLists+0x74>)
 8008ce2:	f7ff fb02 	bl	80082ea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008ce6:	4b0b      	ldr	r3, [pc, #44]	; (8008d14 <prvInitialiseTaskLists+0x78>)
 8008ce8:	4a05      	ldr	r2, [pc, #20]	; (8008d00 <prvInitialiseTaskLists+0x64>)
 8008cea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008cec:	4b0a      	ldr	r3, [pc, #40]	; (8008d18 <prvInitialiseTaskLists+0x7c>)
 8008cee:	4a05      	ldr	r2, [pc, #20]	; (8008d04 <prvInitialiseTaskLists+0x68>)
 8008cf0:	601a      	str	r2, [r3, #0]
}
 8008cf2:	bf00      	nop
 8008cf4:	3708      	adds	r7, #8
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
 8008cfa:	bf00      	nop
 8008cfc:	20000848 	.word	0x20000848
 8008d00:	200008d4 	.word	0x200008d4
 8008d04:	200008e8 	.word	0x200008e8
 8008d08:	20000904 	.word	0x20000904
 8008d0c:	20000918 	.word	0x20000918
 8008d10:	20000930 	.word	0x20000930
 8008d14:	200008fc 	.word	0x200008fc
 8008d18:	20000900 	.word	0x20000900

08008d1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b082      	sub	sp, #8
 8008d20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d22:	e019      	b.n	8008d58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008d24:	f000 fa0e 	bl	8009144 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d28:	4b10      	ldr	r3, [pc, #64]	; (8008d6c <prvCheckTasksWaitingTermination+0x50>)
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	68db      	ldr	r3, [r3, #12]
 8008d2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	3304      	adds	r3, #4
 8008d34:	4618      	mov	r0, r3
 8008d36:	f7ff fb62 	bl	80083fe <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008d3a:	4b0d      	ldr	r3, [pc, #52]	; (8008d70 <prvCheckTasksWaitingTermination+0x54>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	3b01      	subs	r3, #1
 8008d40:	4a0b      	ldr	r2, [pc, #44]	; (8008d70 <prvCheckTasksWaitingTermination+0x54>)
 8008d42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008d44:	4b0b      	ldr	r3, [pc, #44]	; (8008d74 <prvCheckTasksWaitingTermination+0x58>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	3b01      	subs	r3, #1
 8008d4a:	4a0a      	ldr	r2, [pc, #40]	; (8008d74 <prvCheckTasksWaitingTermination+0x58>)
 8008d4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008d4e:	f000 fa29 	bl	80091a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 f810 	bl	8008d78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d58:	4b06      	ldr	r3, [pc, #24]	; (8008d74 <prvCheckTasksWaitingTermination+0x58>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d1e1      	bne.n	8008d24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008d60:	bf00      	nop
 8008d62:	bf00      	nop
 8008d64:	3708      	adds	r7, #8
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
 8008d6a:	bf00      	nop
 8008d6c:	20000918 	.word	0x20000918
 8008d70:	20000944 	.word	0x20000944
 8008d74:	2000092c 	.word	0x2000092c

08008d78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b084      	sub	sp, #16
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	334c      	adds	r3, #76	; 0x4c
 8008d84:	4618      	mov	r0, r3
 8008d86:	f000 fcb1 	bl	80096ec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d108      	bne.n	8008da6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f000 fb81 	bl	80094a0 <vPortFree>
				vPortFree( pxTCB );
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 fb7e 	bl	80094a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008da4:	e018      	b.n	8008dd8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d103      	bne.n	8008db8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 fb75 	bl	80094a0 <vPortFree>
	}
 8008db6:	e00f      	b.n	8008dd8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8008dbe:	2b02      	cmp	r3, #2
 8008dc0:	d00a      	beq.n	8008dd8 <prvDeleteTCB+0x60>
	__asm volatile
 8008dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc6:	f383 8811 	msr	BASEPRI, r3
 8008dca:	f3bf 8f6f 	isb	sy
 8008dce:	f3bf 8f4f 	dsb	sy
 8008dd2:	60fb      	str	r3, [r7, #12]
}
 8008dd4:	bf00      	nop
 8008dd6:	e7fe      	b.n	8008dd6 <prvDeleteTCB+0x5e>
	}
 8008dd8:	bf00      	nop
 8008dda:	3710      	adds	r7, #16
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008de0:	b480      	push	{r7}
 8008de2:	b083      	sub	sp, #12
 8008de4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008de6:	4b0c      	ldr	r3, [pc, #48]	; (8008e18 <prvResetNextTaskUnblockTime+0x38>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d104      	bne.n	8008dfa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008df0:	4b0a      	ldr	r3, [pc, #40]	; (8008e1c <prvResetNextTaskUnblockTime+0x3c>)
 8008df2:	f04f 32ff 	mov.w	r2, #4294967295
 8008df6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008df8:	e008      	b.n	8008e0c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008dfa:	4b07      	ldr	r3, [pc, #28]	; (8008e18 <prvResetNextTaskUnblockTime+0x38>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	68db      	ldr	r3, [r3, #12]
 8008e00:	68db      	ldr	r3, [r3, #12]
 8008e02:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	4a04      	ldr	r2, [pc, #16]	; (8008e1c <prvResetNextTaskUnblockTime+0x3c>)
 8008e0a:	6013      	str	r3, [r2, #0]
}
 8008e0c:	bf00      	nop
 8008e0e:	370c      	adds	r7, #12
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr
 8008e18:	200008fc 	.word	0x200008fc
 8008e1c:	20000964 	.word	0x20000964

08008e20 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008e2a:	4b29      	ldr	r3, [pc, #164]	; (8008ed0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e30:	4b28      	ldr	r3, [pc, #160]	; (8008ed4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	3304      	adds	r3, #4
 8008e36:	4618      	mov	r0, r3
 8008e38:	f7ff fae1 	bl	80083fe <uxListRemove>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d10b      	bne.n	8008e5a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008e42:	4b24      	ldr	r3, [pc, #144]	; (8008ed4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e48:	2201      	movs	r2, #1
 8008e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e4e:	43da      	mvns	r2, r3
 8008e50:	4b21      	ldr	r3, [pc, #132]	; (8008ed8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4013      	ands	r3, r2
 8008e56:	4a20      	ldr	r2, [pc, #128]	; (8008ed8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008e58:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e60:	d10a      	bne.n	8008e78 <prvAddCurrentTaskToDelayedList+0x58>
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d007      	beq.n	8008e78 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e68:	4b1a      	ldr	r3, [pc, #104]	; (8008ed4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	3304      	adds	r3, #4
 8008e6e:	4619      	mov	r1, r3
 8008e70:	481a      	ldr	r0, [pc, #104]	; (8008edc <prvAddCurrentTaskToDelayedList+0xbc>)
 8008e72:	f7ff fa67 	bl	8008344 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008e76:	e026      	b.n	8008ec6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008e78:	68fa      	ldr	r2, [r7, #12]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	4413      	add	r3, r2
 8008e7e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008e80:	4b14      	ldr	r3, [pc, #80]	; (8008ed4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	68ba      	ldr	r2, [r7, #8]
 8008e86:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008e88:	68ba      	ldr	r2, [r7, #8]
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d209      	bcs.n	8008ea4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e90:	4b13      	ldr	r3, [pc, #76]	; (8008ee0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008e92:	681a      	ldr	r2, [r3, #0]
 8008e94:	4b0f      	ldr	r3, [pc, #60]	; (8008ed4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	3304      	adds	r3, #4
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	4610      	mov	r0, r2
 8008e9e:	f7ff fa75 	bl	800838c <vListInsert>
}
 8008ea2:	e010      	b.n	8008ec6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ea4:	4b0f      	ldr	r3, [pc, #60]	; (8008ee4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008ea6:	681a      	ldr	r2, [r3, #0]
 8008ea8:	4b0a      	ldr	r3, [pc, #40]	; (8008ed4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	3304      	adds	r3, #4
 8008eae:	4619      	mov	r1, r3
 8008eb0:	4610      	mov	r0, r2
 8008eb2:	f7ff fa6b 	bl	800838c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008eb6:	4b0c      	ldr	r3, [pc, #48]	; (8008ee8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	68ba      	ldr	r2, [r7, #8]
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d202      	bcs.n	8008ec6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008ec0:	4a09      	ldr	r2, [pc, #36]	; (8008ee8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	6013      	str	r3, [r2, #0]
}
 8008ec6:	bf00      	nop
 8008ec8:	3710      	adds	r7, #16
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
 8008ece:	bf00      	nop
 8008ed0:	20000948 	.word	0x20000948
 8008ed4:	20000844 	.word	0x20000844
 8008ed8:	2000094c 	.word	0x2000094c
 8008edc:	20000930 	.word	0x20000930
 8008ee0:	20000900 	.word	0x20000900
 8008ee4:	200008fc 	.word	0x200008fc
 8008ee8:	20000964 	.word	0x20000964

08008eec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008eec:	b480      	push	{r7}
 8008eee:	b085      	sub	sp, #20
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	60f8      	str	r0, [r7, #12]
 8008ef4:	60b9      	str	r1, [r7, #8]
 8008ef6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	3b04      	subs	r3, #4
 8008efc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008f04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	3b04      	subs	r3, #4
 8008f0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	f023 0201 	bic.w	r2, r3, #1
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	3b04      	subs	r3, #4
 8008f1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008f1c:	4a0c      	ldr	r2, [pc, #48]	; (8008f50 <pxPortInitialiseStack+0x64>)
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	3b14      	subs	r3, #20
 8008f26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	3b04      	subs	r3, #4
 8008f32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f06f 0202 	mvn.w	r2, #2
 8008f3a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	3b20      	subs	r3, #32
 8008f40:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008f42:	68fb      	ldr	r3, [r7, #12]
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3714      	adds	r7, #20
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr
 8008f50:	08008f55 	.word	0x08008f55

08008f54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008f54:	b480      	push	{r7}
 8008f56:	b085      	sub	sp, #20
 8008f58:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008f5e:	4b12      	ldr	r3, [pc, #72]	; (8008fa8 <prvTaskExitError+0x54>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f66:	d00a      	beq.n	8008f7e <prvTaskExitError+0x2a>
	__asm volatile
 8008f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6c:	f383 8811 	msr	BASEPRI, r3
 8008f70:	f3bf 8f6f 	isb	sy
 8008f74:	f3bf 8f4f 	dsb	sy
 8008f78:	60fb      	str	r3, [r7, #12]
}
 8008f7a:	bf00      	nop
 8008f7c:	e7fe      	b.n	8008f7c <prvTaskExitError+0x28>
	__asm volatile
 8008f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f82:	f383 8811 	msr	BASEPRI, r3
 8008f86:	f3bf 8f6f 	isb	sy
 8008f8a:	f3bf 8f4f 	dsb	sy
 8008f8e:	60bb      	str	r3, [r7, #8]
}
 8008f90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008f92:	bf00      	nop
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d0fc      	beq.n	8008f94 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008f9a:	bf00      	nop
 8008f9c:	bf00      	nop
 8008f9e:	3714      	adds	r7, #20
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr
 8008fa8:	2000012c 	.word	0x2000012c
 8008fac:	00000000 	.word	0x00000000

08008fb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008fb0:	4b07      	ldr	r3, [pc, #28]	; (8008fd0 <pxCurrentTCBConst2>)
 8008fb2:	6819      	ldr	r1, [r3, #0]
 8008fb4:	6808      	ldr	r0, [r1, #0]
 8008fb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fba:	f380 8809 	msr	PSP, r0
 8008fbe:	f3bf 8f6f 	isb	sy
 8008fc2:	f04f 0000 	mov.w	r0, #0
 8008fc6:	f380 8811 	msr	BASEPRI, r0
 8008fca:	4770      	bx	lr
 8008fcc:	f3af 8000 	nop.w

08008fd0 <pxCurrentTCBConst2>:
 8008fd0:	20000844 	.word	0x20000844
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008fd4:	bf00      	nop
 8008fd6:	bf00      	nop

08008fd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008fd8:	4808      	ldr	r0, [pc, #32]	; (8008ffc <prvPortStartFirstTask+0x24>)
 8008fda:	6800      	ldr	r0, [r0, #0]
 8008fdc:	6800      	ldr	r0, [r0, #0]
 8008fde:	f380 8808 	msr	MSP, r0
 8008fe2:	f04f 0000 	mov.w	r0, #0
 8008fe6:	f380 8814 	msr	CONTROL, r0
 8008fea:	b662      	cpsie	i
 8008fec:	b661      	cpsie	f
 8008fee:	f3bf 8f4f 	dsb	sy
 8008ff2:	f3bf 8f6f 	isb	sy
 8008ff6:	df00      	svc	0
 8008ff8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008ffa:	bf00      	nop
 8008ffc:	e000ed08 	.word	0xe000ed08

08009000 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b086      	sub	sp, #24
 8009004:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009006:	4b46      	ldr	r3, [pc, #280]	; (8009120 <xPortStartScheduler+0x120>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a46      	ldr	r2, [pc, #280]	; (8009124 <xPortStartScheduler+0x124>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d10a      	bne.n	8009026 <xPortStartScheduler+0x26>
	__asm volatile
 8009010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009014:	f383 8811 	msr	BASEPRI, r3
 8009018:	f3bf 8f6f 	isb	sy
 800901c:	f3bf 8f4f 	dsb	sy
 8009020:	613b      	str	r3, [r7, #16]
}
 8009022:	bf00      	nop
 8009024:	e7fe      	b.n	8009024 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009026:	4b3e      	ldr	r3, [pc, #248]	; (8009120 <xPortStartScheduler+0x120>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4a3f      	ldr	r2, [pc, #252]	; (8009128 <xPortStartScheduler+0x128>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d10a      	bne.n	8009046 <xPortStartScheduler+0x46>
	__asm volatile
 8009030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009034:	f383 8811 	msr	BASEPRI, r3
 8009038:	f3bf 8f6f 	isb	sy
 800903c:	f3bf 8f4f 	dsb	sy
 8009040:	60fb      	str	r3, [r7, #12]
}
 8009042:	bf00      	nop
 8009044:	e7fe      	b.n	8009044 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009046:	4b39      	ldr	r3, [pc, #228]	; (800912c <xPortStartScheduler+0x12c>)
 8009048:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	b2db      	uxtb	r3, r3
 8009050:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	22ff      	movs	r2, #255	; 0xff
 8009056:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	b2db      	uxtb	r3, r3
 800905e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009060:	78fb      	ldrb	r3, [r7, #3]
 8009062:	b2db      	uxtb	r3, r3
 8009064:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009068:	b2da      	uxtb	r2, r3
 800906a:	4b31      	ldr	r3, [pc, #196]	; (8009130 <xPortStartScheduler+0x130>)
 800906c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800906e:	4b31      	ldr	r3, [pc, #196]	; (8009134 <xPortStartScheduler+0x134>)
 8009070:	2207      	movs	r2, #7
 8009072:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009074:	e009      	b.n	800908a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009076:	4b2f      	ldr	r3, [pc, #188]	; (8009134 <xPortStartScheduler+0x134>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	3b01      	subs	r3, #1
 800907c:	4a2d      	ldr	r2, [pc, #180]	; (8009134 <xPortStartScheduler+0x134>)
 800907e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009080:	78fb      	ldrb	r3, [r7, #3]
 8009082:	b2db      	uxtb	r3, r3
 8009084:	005b      	lsls	r3, r3, #1
 8009086:	b2db      	uxtb	r3, r3
 8009088:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800908a:	78fb      	ldrb	r3, [r7, #3]
 800908c:	b2db      	uxtb	r3, r3
 800908e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009092:	2b80      	cmp	r3, #128	; 0x80
 8009094:	d0ef      	beq.n	8009076 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009096:	4b27      	ldr	r3, [pc, #156]	; (8009134 <xPortStartScheduler+0x134>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f1c3 0307 	rsb	r3, r3, #7
 800909e:	2b04      	cmp	r3, #4
 80090a0:	d00a      	beq.n	80090b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80090a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a6:	f383 8811 	msr	BASEPRI, r3
 80090aa:	f3bf 8f6f 	isb	sy
 80090ae:	f3bf 8f4f 	dsb	sy
 80090b2:	60bb      	str	r3, [r7, #8]
}
 80090b4:	bf00      	nop
 80090b6:	e7fe      	b.n	80090b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80090b8:	4b1e      	ldr	r3, [pc, #120]	; (8009134 <xPortStartScheduler+0x134>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	021b      	lsls	r3, r3, #8
 80090be:	4a1d      	ldr	r2, [pc, #116]	; (8009134 <xPortStartScheduler+0x134>)
 80090c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80090c2:	4b1c      	ldr	r3, [pc, #112]	; (8009134 <xPortStartScheduler+0x134>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80090ca:	4a1a      	ldr	r2, [pc, #104]	; (8009134 <xPortStartScheduler+0x134>)
 80090cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	b2da      	uxtb	r2, r3
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80090d6:	4b18      	ldr	r3, [pc, #96]	; (8009138 <xPortStartScheduler+0x138>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4a17      	ldr	r2, [pc, #92]	; (8009138 <xPortStartScheduler+0x138>)
 80090dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80090e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80090e2:	4b15      	ldr	r3, [pc, #84]	; (8009138 <xPortStartScheduler+0x138>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4a14      	ldr	r2, [pc, #80]	; (8009138 <xPortStartScheduler+0x138>)
 80090e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80090ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80090ee:	f000 f8dd 	bl	80092ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80090f2:	4b12      	ldr	r3, [pc, #72]	; (800913c <xPortStartScheduler+0x13c>)
 80090f4:	2200      	movs	r2, #0
 80090f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80090f8:	f000 f8fc 	bl	80092f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80090fc:	4b10      	ldr	r3, [pc, #64]	; (8009140 <xPortStartScheduler+0x140>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4a0f      	ldr	r2, [pc, #60]	; (8009140 <xPortStartScheduler+0x140>)
 8009102:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009106:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009108:	f7ff ff66 	bl	8008fd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800910c:	f7ff fd4c 	bl	8008ba8 <vTaskSwitchContext>
	prvTaskExitError();
 8009110:	f7ff ff20 	bl	8008f54 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009114:	2300      	movs	r3, #0
}
 8009116:	4618      	mov	r0, r3
 8009118:	3718      	adds	r7, #24
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
 800911e:	bf00      	nop
 8009120:	e000ed00 	.word	0xe000ed00
 8009124:	410fc271 	.word	0x410fc271
 8009128:	410fc270 	.word	0x410fc270
 800912c:	e000e400 	.word	0xe000e400
 8009130:	20000970 	.word	0x20000970
 8009134:	20000974 	.word	0x20000974
 8009138:	e000ed20 	.word	0xe000ed20
 800913c:	2000012c 	.word	0x2000012c
 8009140:	e000ef34 	.word	0xe000ef34

08009144 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009144:	b480      	push	{r7}
 8009146:	b083      	sub	sp, #12
 8009148:	af00      	add	r7, sp, #0
	__asm volatile
 800914a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800914e:	f383 8811 	msr	BASEPRI, r3
 8009152:	f3bf 8f6f 	isb	sy
 8009156:	f3bf 8f4f 	dsb	sy
 800915a:	607b      	str	r3, [r7, #4]
}
 800915c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800915e:	4b0f      	ldr	r3, [pc, #60]	; (800919c <vPortEnterCritical+0x58>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	3301      	adds	r3, #1
 8009164:	4a0d      	ldr	r2, [pc, #52]	; (800919c <vPortEnterCritical+0x58>)
 8009166:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009168:	4b0c      	ldr	r3, [pc, #48]	; (800919c <vPortEnterCritical+0x58>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	2b01      	cmp	r3, #1
 800916e:	d10f      	bne.n	8009190 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009170:	4b0b      	ldr	r3, [pc, #44]	; (80091a0 <vPortEnterCritical+0x5c>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	b2db      	uxtb	r3, r3
 8009176:	2b00      	cmp	r3, #0
 8009178:	d00a      	beq.n	8009190 <vPortEnterCritical+0x4c>
	__asm volatile
 800917a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800917e:	f383 8811 	msr	BASEPRI, r3
 8009182:	f3bf 8f6f 	isb	sy
 8009186:	f3bf 8f4f 	dsb	sy
 800918a:	603b      	str	r3, [r7, #0]
}
 800918c:	bf00      	nop
 800918e:	e7fe      	b.n	800918e <vPortEnterCritical+0x4a>
	}
}
 8009190:	bf00      	nop
 8009192:	370c      	adds	r7, #12
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr
 800919c:	2000012c 	.word	0x2000012c
 80091a0:	e000ed04 	.word	0xe000ed04

080091a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80091a4:	b480      	push	{r7}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80091aa:	4b12      	ldr	r3, [pc, #72]	; (80091f4 <vPortExitCritical+0x50>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d10a      	bne.n	80091c8 <vPortExitCritical+0x24>
	__asm volatile
 80091b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b6:	f383 8811 	msr	BASEPRI, r3
 80091ba:	f3bf 8f6f 	isb	sy
 80091be:	f3bf 8f4f 	dsb	sy
 80091c2:	607b      	str	r3, [r7, #4]
}
 80091c4:	bf00      	nop
 80091c6:	e7fe      	b.n	80091c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80091c8:	4b0a      	ldr	r3, [pc, #40]	; (80091f4 <vPortExitCritical+0x50>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	3b01      	subs	r3, #1
 80091ce:	4a09      	ldr	r2, [pc, #36]	; (80091f4 <vPortExitCritical+0x50>)
 80091d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80091d2:	4b08      	ldr	r3, [pc, #32]	; (80091f4 <vPortExitCritical+0x50>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d105      	bne.n	80091e6 <vPortExitCritical+0x42>
 80091da:	2300      	movs	r3, #0
 80091dc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80091e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80091e6:	bf00      	nop
 80091e8:	370c      	adds	r7, #12
 80091ea:	46bd      	mov	sp, r7
 80091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f0:	4770      	bx	lr
 80091f2:	bf00      	nop
 80091f4:	2000012c 	.word	0x2000012c
	...

08009200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009200:	f3ef 8009 	mrs	r0, PSP
 8009204:	f3bf 8f6f 	isb	sy
 8009208:	4b15      	ldr	r3, [pc, #84]	; (8009260 <pxCurrentTCBConst>)
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	f01e 0f10 	tst.w	lr, #16
 8009210:	bf08      	it	eq
 8009212:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009216:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800921a:	6010      	str	r0, [r2, #0]
 800921c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009220:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009224:	f380 8811 	msr	BASEPRI, r0
 8009228:	f3bf 8f4f 	dsb	sy
 800922c:	f3bf 8f6f 	isb	sy
 8009230:	f7ff fcba 	bl	8008ba8 <vTaskSwitchContext>
 8009234:	f04f 0000 	mov.w	r0, #0
 8009238:	f380 8811 	msr	BASEPRI, r0
 800923c:	bc09      	pop	{r0, r3}
 800923e:	6819      	ldr	r1, [r3, #0]
 8009240:	6808      	ldr	r0, [r1, #0]
 8009242:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009246:	f01e 0f10 	tst.w	lr, #16
 800924a:	bf08      	it	eq
 800924c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009250:	f380 8809 	msr	PSP, r0
 8009254:	f3bf 8f6f 	isb	sy
 8009258:	4770      	bx	lr
 800925a:	bf00      	nop
 800925c:	f3af 8000 	nop.w

08009260 <pxCurrentTCBConst>:
 8009260:	20000844 	.word	0x20000844
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009264:	bf00      	nop
 8009266:	bf00      	nop

08009268 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
	__asm volatile
 800926e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009272:	f383 8811 	msr	BASEPRI, r3
 8009276:	f3bf 8f6f 	isb	sy
 800927a:	f3bf 8f4f 	dsb	sy
 800927e:	607b      	str	r3, [r7, #4]
}
 8009280:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009282:	f7ff fbd9 	bl	8008a38 <xTaskIncrementTick>
 8009286:	4603      	mov	r3, r0
 8009288:	2b00      	cmp	r3, #0
 800928a:	d003      	beq.n	8009294 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800928c:	4b06      	ldr	r3, [pc, #24]	; (80092a8 <SysTick_Handler+0x40>)
 800928e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009292:	601a      	str	r2, [r3, #0]
 8009294:	2300      	movs	r3, #0
 8009296:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	f383 8811 	msr	BASEPRI, r3
}
 800929e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80092a0:	bf00      	nop
 80092a2:	3708      	adds	r7, #8
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}
 80092a8:	e000ed04 	.word	0xe000ed04

080092ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80092ac:	b480      	push	{r7}
 80092ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80092b0:	4b0b      	ldr	r3, [pc, #44]	; (80092e0 <vPortSetupTimerInterrupt+0x34>)
 80092b2:	2200      	movs	r2, #0
 80092b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80092b6:	4b0b      	ldr	r3, [pc, #44]	; (80092e4 <vPortSetupTimerInterrupt+0x38>)
 80092b8:	2200      	movs	r2, #0
 80092ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80092bc:	4b0a      	ldr	r3, [pc, #40]	; (80092e8 <vPortSetupTimerInterrupt+0x3c>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a0a      	ldr	r2, [pc, #40]	; (80092ec <vPortSetupTimerInterrupt+0x40>)
 80092c2:	fba2 2303 	umull	r2, r3, r2, r3
 80092c6:	099b      	lsrs	r3, r3, #6
 80092c8:	4a09      	ldr	r2, [pc, #36]	; (80092f0 <vPortSetupTimerInterrupt+0x44>)
 80092ca:	3b01      	subs	r3, #1
 80092cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80092ce:	4b04      	ldr	r3, [pc, #16]	; (80092e0 <vPortSetupTimerInterrupt+0x34>)
 80092d0:	2207      	movs	r2, #7
 80092d2:	601a      	str	r2, [r3, #0]
}
 80092d4:	bf00      	nop
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr
 80092de:	bf00      	nop
 80092e0:	e000e010 	.word	0xe000e010
 80092e4:	e000e018 	.word	0xe000e018
 80092e8:	20000120 	.word	0x20000120
 80092ec:	10624dd3 	.word	0x10624dd3
 80092f0:	e000e014 	.word	0xe000e014

080092f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80092f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009304 <vPortEnableVFP+0x10>
 80092f8:	6801      	ldr	r1, [r0, #0]
 80092fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80092fe:	6001      	str	r1, [r0, #0]
 8009300:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009302:	bf00      	nop
 8009304:	e000ed88 	.word	0xe000ed88

08009308 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b08a      	sub	sp, #40	; 0x28
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009310:	2300      	movs	r3, #0
 8009312:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009314:	f7ff fae6 	bl	80088e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009318:	4b5b      	ldr	r3, [pc, #364]	; (8009488 <pvPortMalloc+0x180>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d101      	bne.n	8009324 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009320:	f000 f920 	bl	8009564 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009324:	4b59      	ldr	r3, [pc, #356]	; (800948c <pvPortMalloc+0x184>)
 8009326:	681a      	ldr	r2, [r3, #0]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	4013      	ands	r3, r2
 800932c:	2b00      	cmp	r3, #0
 800932e:	f040 8093 	bne.w	8009458 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d01d      	beq.n	8009374 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009338:	2208      	movs	r2, #8
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	4413      	add	r3, r2
 800933e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f003 0307 	and.w	r3, r3, #7
 8009346:	2b00      	cmp	r3, #0
 8009348:	d014      	beq.n	8009374 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f023 0307 	bic.w	r3, r3, #7
 8009350:	3308      	adds	r3, #8
 8009352:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f003 0307 	and.w	r3, r3, #7
 800935a:	2b00      	cmp	r3, #0
 800935c:	d00a      	beq.n	8009374 <pvPortMalloc+0x6c>
	__asm volatile
 800935e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009362:	f383 8811 	msr	BASEPRI, r3
 8009366:	f3bf 8f6f 	isb	sy
 800936a:	f3bf 8f4f 	dsb	sy
 800936e:	617b      	str	r3, [r7, #20]
}
 8009370:	bf00      	nop
 8009372:	e7fe      	b.n	8009372 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d06e      	beq.n	8009458 <pvPortMalloc+0x150>
 800937a:	4b45      	ldr	r3, [pc, #276]	; (8009490 <pvPortMalloc+0x188>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	687a      	ldr	r2, [r7, #4]
 8009380:	429a      	cmp	r2, r3
 8009382:	d869      	bhi.n	8009458 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009384:	4b43      	ldr	r3, [pc, #268]	; (8009494 <pvPortMalloc+0x18c>)
 8009386:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009388:	4b42      	ldr	r3, [pc, #264]	; (8009494 <pvPortMalloc+0x18c>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800938e:	e004      	b.n	800939a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009392:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800939a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	687a      	ldr	r2, [r7, #4]
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d903      	bls.n	80093ac <pvPortMalloc+0xa4>
 80093a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d1f1      	bne.n	8009390 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80093ac:	4b36      	ldr	r3, [pc, #216]	; (8009488 <pvPortMalloc+0x180>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093b2:	429a      	cmp	r2, r3
 80093b4:	d050      	beq.n	8009458 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80093b6:	6a3b      	ldr	r3, [r7, #32]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	2208      	movs	r2, #8
 80093bc:	4413      	add	r3, r2
 80093be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80093c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	6a3b      	ldr	r3, [r7, #32]
 80093c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80093c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ca:	685a      	ldr	r2, [r3, #4]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	1ad2      	subs	r2, r2, r3
 80093d0:	2308      	movs	r3, #8
 80093d2:	005b      	lsls	r3, r3, #1
 80093d4:	429a      	cmp	r2, r3
 80093d6:	d91f      	bls.n	8009418 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80093d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	4413      	add	r3, r2
 80093de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80093e0:	69bb      	ldr	r3, [r7, #24]
 80093e2:	f003 0307 	and.w	r3, r3, #7
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d00a      	beq.n	8009400 <pvPortMalloc+0xf8>
	__asm volatile
 80093ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ee:	f383 8811 	msr	BASEPRI, r3
 80093f2:	f3bf 8f6f 	isb	sy
 80093f6:	f3bf 8f4f 	dsb	sy
 80093fa:	613b      	str	r3, [r7, #16]
}
 80093fc:	bf00      	nop
 80093fe:	e7fe      	b.n	80093fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009402:	685a      	ldr	r2, [r3, #4]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	1ad2      	subs	r2, r2, r3
 8009408:	69bb      	ldr	r3, [r7, #24]
 800940a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800940c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009412:	69b8      	ldr	r0, [r7, #24]
 8009414:	f000 f908 	bl	8009628 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009418:	4b1d      	ldr	r3, [pc, #116]	; (8009490 <pvPortMalloc+0x188>)
 800941a:	681a      	ldr	r2, [r3, #0]
 800941c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	1ad3      	subs	r3, r2, r3
 8009422:	4a1b      	ldr	r2, [pc, #108]	; (8009490 <pvPortMalloc+0x188>)
 8009424:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009426:	4b1a      	ldr	r3, [pc, #104]	; (8009490 <pvPortMalloc+0x188>)
 8009428:	681a      	ldr	r2, [r3, #0]
 800942a:	4b1b      	ldr	r3, [pc, #108]	; (8009498 <pvPortMalloc+0x190>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	429a      	cmp	r2, r3
 8009430:	d203      	bcs.n	800943a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009432:	4b17      	ldr	r3, [pc, #92]	; (8009490 <pvPortMalloc+0x188>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a18      	ldr	r2, [pc, #96]	; (8009498 <pvPortMalloc+0x190>)
 8009438:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800943a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800943c:	685a      	ldr	r2, [r3, #4]
 800943e:	4b13      	ldr	r3, [pc, #76]	; (800948c <pvPortMalloc+0x184>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	431a      	orrs	r2, r3
 8009444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009446:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944a:	2200      	movs	r2, #0
 800944c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800944e:	4b13      	ldr	r3, [pc, #76]	; (800949c <pvPortMalloc+0x194>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	3301      	adds	r3, #1
 8009454:	4a11      	ldr	r2, [pc, #68]	; (800949c <pvPortMalloc+0x194>)
 8009456:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009458:	f7ff fa52 	bl	8008900 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800945c:	69fb      	ldr	r3, [r7, #28]
 800945e:	f003 0307 	and.w	r3, r3, #7
 8009462:	2b00      	cmp	r3, #0
 8009464:	d00a      	beq.n	800947c <pvPortMalloc+0x174>
	__asm volatile
 8009466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800946a:	f383 8811 	msr	BASEPRI, r3
 800946e:	f3bf 8f6f 	isb	sy
 8009472:	f3bf 8f4f 	dsb	sy
 8009476:	60fb      	str	r3, [r7, #12]
}
 8009478:	bf00      	nop
 800947a:	e7fe      	b.n	800947a <pvPortMalloc+0x172>
	return pvReturn;
 800947c:	69fb      	ldr	r3, [r7, #28]
}
 800947e:	4618      	mov	r0, r3
 8009480:	3728      	adds	r7, #40	; 0x28
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	20004580 	.word	0x20004580
 800948c:	20004594 	.word	0x20004594
 8009490:	20004584 	.word	0x20004584
 8009494:	20004578 	.word	0x20004578
 8009498:	20004588 	.word	0x20004588
 800949c:	2000458c 	.word	0x2000458c

080094a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b086      	sub	sp, #24
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d04d      	beq.n	800954e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80094b2:	2308      	movs	r3, #8
 80094b4:	425b      	negs	r3, r3
 80094b6:	697a      	ldr	r2, [r7, #20]
 80094b8:	4413      	add	r3, r2
 80094ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	685a      	ldr	r2, [r3, #4]
 80094c4:	4b24      	ldr	r3, [pc, #144]	; (8009558 <vPortFree+0xb8>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4013      	ands	r3, r2
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d10a      	bne.n	80094e4 <vPortFree+0x44>
	__asm volatile
 80094ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d2:	f383 8811 	msr	BASEPRI, r3
 80094d6:	f3bf 8f6f 	isb	sy
 80094da:	f3bf 8f4f 	dsb	sy
 80094de:	60fb      	str	r3, [r7, #12]
}
 80094e0:	bf00      	nop
 80094e2:	e7fe      	b.n	80094e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d00a      	beq.n	8009502 <vPortFree+0x62>
	__asm volatile
 80094ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f0:	f383 8811 	msr	BASEPRI, r3
 80094f4:	f3bf 8f6f 	isb	sy
 80094f8:	f3bf 8f4f 	dsb	sy
 80094fc:	60bb      	str	r3, [r7, #8]
}
 80094fe:	bf00      	nop
 8009500:	e7fe      	b.n	8009500 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	685a      	ldr	r2, [r3, #4]
 8009506:	4b14      	ldr	r3, [pc, #80]	; (8009558 <vPortFree+0xb8>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4013      	ands	r3, r2
 800950c:	2b00      	cmp	r3, #0
 800950e:	d01e      	beq.n	800954e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d11a      	bne.n	800954e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	685a      	ldr	r2, [r3, #4]
 800951c:	4b0e      	ldr	r3, [pc, #56]	; (8009558 <vPortFree+0xb8>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	43db      	mvns	r3, r3
 8009522:	401a      	ands	r2, r3
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009528:	f7ff f9dc 	bl	80088e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	685a      	ldr	r2, [r3, #4]
 8009530:	4b0a      	ldr	r3, [pc, #40]	; (800955c <vPortFree+0xbc>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4413      	add	r3, r2
 8009536:	4a09      	ldr	r2, [pc, #36]	; (800955c <vPortFree+0xbc>)
 8009538:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800953a:	6938      	ldr	r0, [r7, #16]
 800953c:	f000 f874 	bl	8009628 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009540:	4b07      	ldr	r3, [pc, #28]	; (8009560 <vPortFree+0xc0>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	3301      	adds	r3, #1
 8009546:	4a06      	ldr	r2, [pc, #24]	; (8009560 <vPortFree+0xc0>)
 8009548:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800954a:	f7ff f9d9 	bl	8008900 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800954e:	bf00      	nop
 8009550:	3718      	adds	r7, #24
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
 8009556:	bf00      	nop
 8009558:	20004594 	.word	0x20004594
 800955c:	20004584 	.word	0x20004584
 8009560:	20004590 	.word	0x20004590

08009564 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009564:	b480      	push	{r7}
 8009566:	b085      	sub	sp, #20
 8009568:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800956a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800956e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009570:	4b27      	ldr	r3, [pc, #156]	; (8009610 <prvHeapInit+0xac>)
 8009572:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f003 0307 	and.w	r3, r3, #7
 800957a:	2b00      	cmp	r3, #0
 800957c:	d00c      	beq.n	8009598 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	3307      	adds	r3, #7
 8009582:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f023 0307 	bic.w	r3, r3, #7
 800958a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800958c:	68ba      	ldr	r2, [r7, #8]
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	1ad3      	subs	r3, r2, r3
 8009592:	4a1f      	ldr	r2, [pc, #124]	; (8009610 <prvHeapInit+0xac>)
 8009594:	4413      	add	r3, r2
 8009596:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800959c:	4a1d      	ldr	r2, [pc, #116]	; (8009614 <prvHeapInit+0xb0>)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80095a2:	4b1c      	ldr	r3, [pc, #112]	; (8009614 <prvHeapInit+0xb0>)
 80095a4:	2200      	movs	r2, #0
 80095a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	68ba      	ldr	r2, [r7, #8]
 80095ac:	4413      	add	r3, r2
 80095ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80095b0:	2208      	movs	r2, #8
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	1a9b      	subs	r3, r3, r2
 80095b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f023 0307 	bic.w	r3, r3, #7
 80095be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	4a15      	ldr	r2, [pc, #84]	; (8009618 <prvHeapInit+0xb4>)
 80095c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80095c6:	4b14      	ldr	r3, [pc, #80]	; (8009618 <prvHeapInit+0xb4>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	2200      	movs	r2, #0
 80095cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80095ce:	4b12      	ldr	r3, [pc, #72]	; (8009618 <prvHeapInit+0xb4>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	2200      	movs	r2, #0
 80095d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	68fa      	ldr	r2, [r7, #12]
 80095de:	1ad2      	subs	r2, r2, r3
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80095e4:	4b0c      	ldr	r3, [pc, #48]	; (8009618 <prvHeapInit+0xb4>)
 80095e6:	681a      	ldr	r2, [r3, #0]
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	4a0a      	ldr	r2, [pc, #40]	; (800961c <prvHeapInit+0xb8>)
 80095f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	4a09      	ldr	r2, [pc, #36]	; (8009620 <prvHeapInit+0xbc>)
 80095fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80095fc:	4b09      	ldr	r3, [pc, #36]	; (8009624 <prvHeapInit+0xc0>)
 80095fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009602:	601a      	str	r2, [r3, #0]
}
 8009604:	bf00      	nop
 8009606:	3714      	adds	r7, #20
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr
 8009610:	20000978 	.word	0x20000978
 8009614:	20004578 	.word	0x20004578
 8009618:	20004580 	.word	0x20004580
 800961c:	20004588 	.word	0x20004588
 8009620:	20004584 	.word	0x20004584
 8009624:	20004594 	.word	0x20004594

08009628 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009628:	b480      	push	{r7}
 800962a:	b085      	sub	sp, #20
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009630:	4b28      	ldr	r3, [pc, #160]	; (80096d4 <prvInsertBlockIntoFreeList+0xac>)
 8009632:	60fb      	str	r3, [r7, #12]
 8009634:	e002      	b.n	800963c <prvInsertBlockIntoFreeList+0x14>
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	60fb      	str	r3, [r7, #12]
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	687a      	ldr	r2, [r7, #4]
 8009642:	429a      	cmp	r2, r3
 8009644:	d8f7      	bhi.n	8009636 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	685b      	ldr	r3, [r3, #4]
 800964e:	68ba      	ldr	r2, [r7, #8]
 8009650:	4413      	add	r3, r2
 8009652:	687a      	ldr	r2, [r7, #4]
 8009654:	429a      	cmp	r2, r3
 8009656:	d108      	bne.n	800966a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	685a      	ldr	r2, [r3, #4]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	441a      	add	r2, r3
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	68ba      	ldr	r2, [r7, #8]
 8009674:	441a      	add	r2, r3
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	429a      	cmp	r2, r3
 800967c:	d118      	bne.n	80096b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681a      	ldr	r2, [r3, #0]
 8009682:	4b15      	ldr	r3, [pc, #84]	; (80096d8 <prvInsertBlockIntoFreeList+0xb0>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	429a      	cmp	r2, r3
 8009688:	d00d      	beq.n	80096a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	685a      	ldr	r2, [r3, #4]
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	685b      	ldr	r3, [r3, #4]
 8009694:	441a      	add	r2, r3
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	681a      	ldr	r2, [r3, #0]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	601a      	str	r2, [r3, #0]
 80096a4:	e008      	b.n	80096b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80096a6:	4b0c      	ldr	r3, [pc, #48]	; (80096d8 <prvInsertBlockIntoFreeList+0xb0>)
 80096a8:	681a      	ldr	r2, [r3, #0]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	601a      	str	r2, [r3, #0]
 80096ae:	e003      	b.n	80096b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681a      	ldr	r2, [r3, #0]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80096b8:	68fa      	ldr	r2, [r7, #12]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	429a      	cmp	r2, r3
 80096be:	d002      	beq.n	80096c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	687a      	ldr	r2, [r7, #4]
 80096c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80096c6:	bf00      	nop
 80096c8:	3714      	adds	r7, #20
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr
 80096d2:	bf00      	nop
 80096d4:	20004578 	.word	0x20004578
 80096d8:	20004580 	.word	0x20004580

080096dc <memset>:
 80096dc:	4402      	add	r2, r0
 80096de:	4603      	mov	r3, r0
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d100      	bne.n	80096e6 <memset+0xa>
 80096e4:	4770      	bx	lr
 80096e6:	f803 1b01 	strb.w	r1, [r3], #1
 80096ea:	e7f9      	b.n	80096e0 <memset+0x4>

080096ec <_reclaim_reent>:
 80096ec:	4b29      	ldr	r3, [pc, #164]	; (8009794 <_reclaim_reent+0xa8>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4283      	cmp	r3, r0
 80096f2:	b570      	push	{r4, r5, r6, lr}
 80096f4:	4604      	mov	r4, r0
 80096f6:	d04b      	beq.n	8009790 <_reclaim_reent+0xa4>
 80096f8:	69c3      	ldr	r3, [r0, #28]
 80096fa:	b143      	cbz	r3, 800970e <_reclaim_reent+0x22>
 80096fc:	68db      	ldr	r3, [r3, #12]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d144      	bne.n	800978c <_reclaim_reent+0xa0>
 8009702:	69e3      	ldr	r3, [r4, #28]
 8009704:	6819      	ldr	r1, [r3, #0]
 8009706:	b111      	cbz	r1, 800970e <_reclaim_reent+0x22>
 8009708:	4620      	mov	r0, r4
 800970a:	f000 f86b 	bl	80097e4 <_free_r>
 800970e:	6961      	ldr	r1, [r4, #20]
 8009710:	b111      	cbz	r1, 8009718 <_reclaim_reent+0x2c>
 8009712:	4620      	mov	r0, r4
 8009714:	f000 f866 	bl	80097e4 <_free_r>
 8009718:	69e1      	ldr	r1, [r4, #28]
 800971a:	b111      	cbz	r1, 8009722 <_reclaim_reent+0x36>
 800971c:	4620      	mov	r0, r4
 800971e:	f000 f861 	bl	80097e4 <_free_r>
 8009722:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009724:	b111      	cbz	r1, 800972c <_reclaim_reent+0x40>
 8009726:	4620      	mov	r0, r4
 8009728:	f000 f85c 	bl	80097e4 <_free_r>
 800972c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800972e:	b111      	cbz	r1, 8009736 <_reclaim_reent+0x4a>
 8009730:	4620      	mov	r0, r4
 8009732:	f000 f857 	bl	80097e4 <_free_r>
 8009736:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009738:	b111      	cbz	r1, 8009740 <_reclaim_reent+0x54>
 800973a:	4620      	mov	r0, r4
 800973c:	f000 f852 	bl	80097e4 <_free_r>
 8009740:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009742:	b111      	cbz	r1, 800974a <_reclaim_reent+0x5e>
 8009744:	4620      	mov	r0, r4
 8009746:	f000 f84d 	bl	80097e4 <_free_r>
 800974a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800974c:	b111      	cbz	r1, 8009754 <_reclaim_reent+0x68>
 800974e:	4620      	mov	r0, r4
 8009750:	f000 f848 	bl	80097e4 <_free_r>
 8009754:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009756:	b111      	cbz	r1, 800975e <_reclaim_reent+0x72>
 8009758:	4620      	mov	r0, r4
 800975a:	f000 f843 	bl	80097e4 <_free_r>
 800975e:	6a23      	ldr	r3, [r4, #32]
 8009760:	b1b3      	cbz	r3, 8009790 <_reclaim_reent+0xa4>
 8009762:	4620      	mov	r0, r4
 8009764:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009768:	4718      	bx	r3
 800976a:	5949      	ldr	r1, [r1, r5]
 800976c:	b941      	cbnz	r1, 8009780 <_reclaim_reent+0x94>
 800976e:	3504      	adds	r5, #4
 8009770:	69e3      	ldr	r3, [r4, #28]
 8009772:	2d80      	cmp	r5, #128	; 0x80
 8009774:	68d9      	ldr	r1, [r3, #12]
 8009776:	d1f8      	bne.n	800976a <_reclaim_reent+0x7e>
 8009778:	4620      	mov	r0, r4
 800977a:	f000 f833 	bl	80097e4 <_free_r>
 800977e:	e7c0      	b.n	8009702 <_reclaim_reent+0x16>
 8009780:	680e      	ldr	r6, [r1, #0]
 8009782:	4620      	mov	r0, r4
 8009784:	f000 f82e 	bl	80097e4 <_free_r>
 8009788:	4631      	mov	r1, r6
 800978a:	e7ef      	b.n	800976c <_reclaim_reent+0x80>
 800978c:	2500      	movs	r5, #0
 800978e:	e7ef      	b.n	8009770 <_reclaim_reent+0x84>
 8009790:	bd70      	pop	{r4, r5, r6, pc}
 8009792:	bf00      	nop
 8009794:	2000017c 	.word	0x2000017c

08009798 <__libc_init_array>:
 8009798:	b570      	push	{r4, r5, r6, lr}
 800979a:	4d0d      	ldr	r5, [pc, #52]	; (80097d0 <__libc_init_array+0x38>)
 800979c:	4c0d      	ldr	r4, [pc, #52]	; (80097d4 <__libc_init_array+0x3c>)
 800979e:	1b64      	subs	r4, r4, r5
 80097a0:	10a4      	asrs	r4, r4, #2
 80097a2:	2600      	movs	r6, #0
 80097a4:	42a6      	cmp	r6, r4
 80097a6:	d109      	bne.n	80097bc <__libc_init_array+0x24>
 80097a8:	4d0b      	ldr	r5, [pc, #44]	; (80097d8 <__libc_init_array+0x40>)
 80097aa:	4c0c      	ldr	r4, [pc, #48]	; (80097dc <__libc_init_array+0x44>)
 80097ac:	f000 f872 	bl	8009894 <_init>
 80097b0:	1b64      	subs	r4, r4, r5
 80097b2:	10a4      	asrs	r4, r4, #2
 80097b4:	2600      	movs	r6, #0
 80097b6:	42a6      	cmp	r6, r4
 80097b8:	d105      	bne.n	80097c6 <__libc_init_array+0x2e>
 80097ba:	bd70      	pop	{r4, r5, r6, pc}
 80097bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80097c0:	4798      	blx	r3
 80097c2:	3601      	adds	r6, #1
 80097c4:	e7ee      	b.n	80097a4 <__libc_init_array+0xc>
 80097c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80097ca:	4798      	blx	r3
 80097cc:	3601      	adds	r6, #1
 80097ce:	e7f2      	b.n	80097b6 <__libc_init_array+0x1e>
 80097d0:	08009950 	.word	0x08009950
 80097d4:	08009950 	.word	0x08009950
 80097d8:	08009950 	.word	0x08009950
 80097dc:	08009954 	.word	0x08009954

080097e0 <__retarget_lock_acquire_recursive>:
 80097e0:	4770      	bx	lr

080097e2 <__retarget_lock_release_recursive>:
 80097e2:	4770      	bx	lr

080097e4 <_free_r>:
 80097e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097e6:	2900      	cmp	r1, #0
 80097e8:	d044      	beq.n	8009874 <_free_r+0x90>
 80097ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097ee:	9001      	str	r0, [sp, #4]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	f1a1 0404 	sub.w	r4, r1, #4
 80097f6:	bfb8      	it	lt
 80097f8:	18e4      	addlt	r4, r4, r3
 80097fa:	f000 f83f 	bl	800987c <__malloc_lock>
 80097fe:	4a1e      	ldr	r2, [pc, #120]	; (8009878 <_free_r+0x94>)
 8009800:	9801      	ldr	r0, [sp, #4]
 8009802:	6813      	ldr	r3, [r2, #0]
 8009804:	b933      	cbnz	r3, 8009814 <_free_r+0x30>
 8009806:	6063      	str	r3, [r4, #4]
 8009808:	6014      	str	r4, [r2, #0]
 800980a:	b003      	add	sp, #12
 800980c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009810:	f000 b83a 	b.w	8009888 <__malloc_unlock>
 8009814:	42a3      	cmp	r3, r4
 8009816:	d908      	bls.n	800982a <_free_r+0x46>
 8009818:	6825      	ldr	r5, [r4, #0]
 800981a:	1961      	adds	r1, r4, r5
 800981c:	428b      	cmp	r3, r1
 800981e:	bf01      	itttt	eq
 8009820:	6819      	ldreq	r1, [r3, #0]
 8009822:	685b      	ldreq	r3, [r3, #4]
 8009824:	1949      	addeq	r1, r1, r5
 8009826:	6021      	streq	r1, [r4, #0]
 8009828:	e7ed      	b.n	8009806 <_free_r+0x22>
 800982a:	461a      	mov	r2, r3
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	b10b      	cbz	r3, 8009834 <_free_r+0x50>
 8009830:	42a3      	cmp	r3, r4
 8009832:	d9fa      	bls.n	800982a <_free_r+0x46>
 8009834:	6811      	ldr	r1, [r2, #0]
 8009836:	1855      	adds	r5, r2, r1
 8009838:	42a5      	cmp	r5, r4
 800983a:	d10b      	bne.n	8009854 <_free_r+0x70>
 800983c:	6824      	ldr	r4, [r4, #0]
 800983e:	4421      	add	r1, r4
 8009840:	1854      	adds	r4, r2, r1
 8009842:	42a3      	cmp	r3, r4
 8009844:	6011      	str	r1, [r2, #0]
 8009846:	d1e0      	bne.n	800980a <_free_r+0x26>
 8009848:	681c      	ldr	r4, [r3, #0]
 800984a:	685b      	ldr	r3, [r3, #4]
 800984c:	6053      	str	r3, [r2, #4]
 800984e:	440c      	add	r4, r1
 8009850:	6014      	str	r4, [r2, #0]
 8009852:	e7da      	b.n	800980a <_free_r+0x26>
 8009854:	d902      	bls.n	800985c <_free_r+0x78>
 8009856:	230c      	movs	r3, #12
 8009858:	6003      	str	r3, [r0, #0]
 800985a:	e7d6      	b.n	800980a <_free_r+0x26>
 800985c:	6825      	ldr	r5, [r4, #0]
 800985e:	1961      	adds	r1, r4, r5
 8009860:	428b      	cmp	r3, r1
 8009862:	bf04      	itt	eq
 8009864:	6819      	ldreq	r1, [r3, #0]
 8009866:	685b      	ldreq	r3, [r3, #4]
 8009868:	6063      	str	r3, [r4, #4]
 800986a:	bf04      	itt	eq
 800986c:	1949      	addeq	r1, r1, r5
 800986e:	6021      	streq	r1, [r4, #0]
 8009870:	6054      	str	r4, [r2, #4]
 8009872:	e7ca      	b.n	800980a <_free_r+0x26>
 8009874:	b003      	add	sp, #12
 8009876:	bd30      	pop	{r4, r5, pc}
 8009878:	200046d4 	.word	0x200046d4

0800987c <__malloc_lock>:
 800987c:	4801      	ldr	r0, [pc, #4]	; (8009884 <__malloc_lock+0x8>)
 800987e:	f7ff bfaf 	b.w	80097e0 <__retarget_lock_acquire_recursive>
 8009882:	bf00      	nop
 8009884:	200046d0 	.word	0x200046d0

08009888 <__malloc_unlock>:
 8009888:	4801      	ldr	r0, [pc, #4]	; (8009890 <__malloc_unlock+0x8>)
 800988a:	f7ff bfaa 	b.w	80097e2 <__retarget_lock_release_recursive>
 800988e:	bf00      	nop
 8009890:	200046d0 	.word	0x200046d0

08009894 <_init>:
 8009894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009896:	bf00      	nop
 8009898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800989a:	bc08      	pop	{r3}
 800989c:	469e      	mov	lr, r3
 800989e:	4770      	bx	lr

080098a0 <_fini>:
 80098a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098a2:	bf00      	nop
 80098a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098a6:	bc08      	pop	{r3}
 80098a8:	469e      	mov	lr, r3
 80098aa:	4770      	bx	lr
