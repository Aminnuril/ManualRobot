
ManualRobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009adc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08009c8c  08009c8c  00019c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d28  08009d28  0002017c  2**0
                  CONTENTS
  4 .ARM          00000008  08009d28  08009d28  00019d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d30  08009d30  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d30  08009d30  00019d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d34  08009d34  00019d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08009d38  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002017c  2**0
                  CONTENTS
 10 .bss          00004558  20000180  20000180  00020180  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200046d8  200046d8  00020180  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   000197c6  00000000  00000000  000201ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003b15  00000000  00000000  000399b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000015a0  00000000  00000000  0003d4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000010c8  00000000  00000000  0003ea70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026d56  00000000  00000000  0003fb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00019e4e  00000000  00000000  0006688e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e6b3b  00000000  00000000  000806dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005e10  00000000  00000000  00167218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0016d028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000180 	.word	0x20000180
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009c74 	.word	0x08009c74

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000184 	.word	0x20000184
 80001ec:	08009c74 	.word	0x08009c74

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2iz>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d215      	bcs.n	8000ad2 <__aeabi_d2iz+0x36>
 8000aa6:	d511      	bpl.n	8000acc <__aeabi_d2iz+0x30>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d912      	bls.n	8000ad8 <__aeabi_d2iz+0x3c>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	4240      	negne	r0, r0
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad6:	d105      	bne.n	8000ae4 <__aeabi_d2iz+0x48>
 8000ad8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	bf08      	it	eq
 8000ade:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b970 	b.w	8000de4 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9e08      	ldr	r6, [sp, #32]
 8000b22:	460d      	mov	r5, r1
 8000b24:	4604      	mov	r4, r0
 8000b26:	460f      	mov	r7, r1
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d14a      	bne.n	8000bc2 <__udivmoddi4+0xa6>
 8000b2c:	428a      	cmp	r2, r1
 8000b2e:	4694      	mov	ip, r2
 8000b30:	d965      	bls.n	8000bfe <__udivmoddi4+0xe2>
 8000b32:	fab2 f382 	clz	r3, r2
 8000b36:	b143      	cbz	r3, 8000b4a <__udivmoddi4+0x2e>
 8000b38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b3c:	f1c3 0220 	rsb	r2, r3, #32
 8000b40:	409f      	lsls	r7, r3
 8000b42:	fa20 f202 	lsr.w	r2, r0, r2
 8000b46:	4317      	orrs	r7, r2
 8000b48:	409c      	lsls	r4, r3
 8000b4a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b4e:	fa1f f58c 	uxth.w	r5, ip
 8000b52:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b56:	0c22      	lsrs	r2, r4, #16
 8000b58:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b5c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b60:	fb01 f005 	mul.w	r0, r1, r5
 8000b64:	4290      	cmp	r0, r2
 8000b66:	d90a      	bls.n	8000b7e <__udivmoddi4+0x62>
 8000b68:	eb1c 0202 	adds.w	r2, ip, r2
 8000b6c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b70:	f080 811c 	bcs.w	8000dac <__udivmoddi4+0x290>
 8000b74:	4290      	cmp	r0, r2
 8000b76:	f240 8119 	bls.w	8000dac <__udivmoddi4+0x290>
 8000b7a:	3902      	subs	r1, #2
 8000b7c:	4462      	add	r2, ip
 8000b7e:	1a12      	subs	r2, r2, r0
 8000b80:	b2a4      	uxth	r4, r4
 8000b82:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b86:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b8a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b8e:	fb00 f505 	mul.w	r5, r0, r5
 8000b92:	42a5      	cmp	r5, r4
 8000b94:	d90a      	bls.n	8000bac <__udivmoddi4+0x90>
 8000b96:	eb1c 0404 	adds.w	r4, ip, r4
 8000b9a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b9e:	f080 8107 	bcs.w	8000db0 <__udivmoddi4+0x294>
 8000ba2:	42a5      	cmp	r5, r4
 8000ba4:	f240 8104 	bls.w	8000db0 <__udivmoddi4+0x294>
 8000ba8:	4464      	add	r4, ip
 8000baa:	3802      	subs	r0, #2
 8000bac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bb0:	1b64      	subs	r4, r4, r5
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	b11e      	cbz	r6, 8000bbe <__udivmoddi4+0xa2>
 8000bb6:	40dc      	lsrs	r4, r3
 8000bb8:	2300      	movs	r3, #0
 8000bba:	e9c6 4300 	strd	r4, r3, [r6]
 8000bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0xbc>
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	f000 80ed 	beq.w	8000da6 <__udivmoddi4+0x28a>
 8000bcc:	2100      	movs	r1, #0
 8000bce:	e9c6 0500 	strd	r0, r5, [r6]
 8000bd2:	4608      	mov	r0, r1
 8000bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd8:	fab3 f183 	clz	r1, r3
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	d149      	bne.n	8000c74 <__udivmoddi4+0x158>
 8000be0:	42ab      	cmp	r3, r5
 8000be2:	d302      	bcc.n	8000bea <__udivmoddi4+0xce>
 8000be4:	4282      	cmp	r2, r0
 8000be6:	f200 80f8 	bhi.w	8000dda <__udivmoddi4+0x2be>
 8000bea:	1a84      	subs	r4, r0, r2
 8000bec:	eb65 0203 	sbc.w	r2, r5, r3
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	4617      	mov	r7, r2
 8000bf4:	2e00      	cmp	r6, #0
 8000bf6:	d0e2      	beq.n	8000bbe <__udivmoddi4+0xa2>
 8000bf8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bfc:	e7df      	b.n	8000bbe <__udivmoddi4+0xa2>
 8000bfe:	b902      	cbnz	r2, 8000c02 <__udivmoddi4+0xe6>
 8000c00:	deff      	udf	#255	; 0xff
 8000c02:	fab2 f382 	clz	r3, r2
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	f040 8090 	bne.w	8000d2c <__udivmoddi4+0x210>
 8000c0c:	1a8a      	subs	r2, r1, r2
 8000c0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c12:	fa1f fe8c 	uxth.w	lr, ip
 8000c16:	2101      	movs	r1, #1
 8000c18:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c1c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c20:	0c22      	lsrs	r2, r4, #16
 8000c22:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c26:	fb0e f005 	mul.w	r0, lr, r5
 8000c2a:	4290      	cmp	r0, r2
 8000c2c:	d908      	bls.n	8000c40 <__udivmoddi4+0x124>
 8000c2e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c32:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x122>
 8000c38:	4290      	cmp	r0, r2
 8000c3a:	f200 80cb 	bhi.w	8000dd4 <__udivmoddi4+0x2b8>
 8000c3e:	4645      	mov	r5, r8
 8000c40:	1a12      	subs	r2, r2, r0
 8000c42:	b2a4      	uxth	r4, r4
 8000c44:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c48:	fb07 2210 	mls	r2, r7, r0, r2
 8000c4c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c50:	fb0e fe00 	mul.w	lr, lr, r0
 8000c54:	45a6      	cmp	lr, r4
 8000c56:	d908      	bls.n	8000c6a <__udivmoddi4+0x14e>
 8000c58:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c60:	d202      	bcs.n	8000c68 <__udivmoddi4+0x14c>
 8000c62:	45a6      	cmp	lr, r4
 8000c64:	f200 80bb 	bhi.w	8000dde <__udivmoddi4+0x2c2>
 8000c68:	4610      	mov	r0, r2
 8000c6a:	eba4 040e 	sub.w	r4, r4, lr
 8000c6e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c72:	e79f      	b.n	8000bb4 <__udivmoddi4+0x98>
 8000c74:	f1c1 0720 	rsb	r7, r1, #32
 8000c78:	408b      	lsls	r3, r1
 8000c7a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c82:	fa05 f401 	lsl.w	r4, r5, r1
 8000c86:	fa20 f307 	lsr.w	r3, r0, r7
 8000c8a:	40fd      	lsrs	r5, r7
 8000c8c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c90:	4323      	orrs	r3, r4
 8000c92:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c96:	fa1f fe8c 	uxth.w	lr, ip
 8000c9a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c9e:	0c1c      	lsrs	r4, r3, #16
 8000ca0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ca4:	fb08 f50e 	mul.w	r5, r8, lr
 8000ca8:	42a5      	cmp	r5, r4
 8000caa:	fa02 f201 	lsl.w	r2, r2, r1
 8000cae:	fa00 f001 	lsl.w	r0, r0, r1
 8000cb2:	d90b      	bls.n	8000ccc <__udivmoddi4+0x1b0>
 8000cb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cbc:	f080 8088 	bcs.w	8000dd0 <__udivmoddi4+0x2b4>
 8000cc0:	42a5      	cmp	r5, r4
 8000cc2:	f240 8085 	bls.w	8000dd0 <__udivmoddi4+0x2b4>
 8000cc6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cca:	4464      	add	r4, ip
 8000ccc:	1b64      	subs	r4, r4, r5
 8000cce:	b29d      	uxth	r5, r3
 8000cd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000cd8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cdc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ce0:	45a6      	cmp	lr, r4
 8000ce2:	d908      	bls.n	8000cf6 <__udivmoddi4+0x1da>
 8000ce4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cec:	d26c      	bcs.n	8000dc8 <__udivmoddi4+0x2ac>
 8000cee:	45a6      	cmp	lr, r4
 8000cf0:	d96a      	bls.n	8000dc8 <__udivmoddi4+0x2ac>
 8000cf2:	3b02      	subs	r3, #2
 8000cf4:	4464      	add	r4, ip
 8000cf6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfa:	fba3 9502 	umull	r9, r5, r3, r2
 8000cfe:	eba4 040e 	sub.w	r4, r4, lr
 8000d02:	42ac      	cmp	r4, r5
 8000d04:	46c8      	mov	r8, r9
 8000d06:	46ae      	mov	lr, r5
 8000d08:	d356      	bcc.n	8000db8 <__udivmoddi4+0x29c>
 8000d0a:	d053      	beq.n	8000db4 <__udivmoddi4+0x298>
 8000d0c:	b156      	cbz	r6, 8000d24 <__udivmoddi4+0x208>
 8000d0e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d12:	eb64 040e 	sbc.w	r4, r4, lr
 8000d16:	fa04 f707 	lsl.w	r7, r4, r7
 8000d1a:	40ca      	lsrs	r2, r1
 8000d1c:	40cc      	lsrs	r4, r1
 8000d1e:	4317      	orrs	r7, r2
 8000d20:	e9c6 7400 	strd	r7, r4, [r6]
 8000d24:	4618      	mov	r0, r3
 8000d26:	2100      	movs	r1, #0
 8000d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2c:	f1c3 0120 	rsb	r1, r3, #32
 8000d30:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d34:	fa20 f201 	lsr.w	r2, r0, r1
 8000d38:	fa25 f101 	lsr.w	r1, r5, r1
 8000d3c:	409d      	lsls	r5, r3
 8000d3e:	432a      	orrs	r2, r5
 8000d40:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d44:	fa1f fe8c 	uxth.w	lr, ip
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d50:	0c11      	lsrs	r1, r2, #16
 8000d52:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d56:	fb00 f50e 	mul.w	r5, r0, lr
 8000d5a:	428d      	cmp	r5, r1
 8000d5c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x258>
 8000d62:	eb1c 0101 	adds.w	r1, ip, r1
 8000d66:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d6a:	d22f      	bcs.n	8000dcc <__udivmoddi4+0x2b0>
 8000d6c:	428d      	cmp	r5, r1
 8000d6e:	d92d      	bls.n	8000dcc <__udivmoddi4+0x2b0>
 8000d70:	3802      	subs	r0, #2
 8000d72:	4461      	add	r1, ip
 8000d74:	1b49      	subs	r1, r1, r5
 8000d76:	b292      	uxth	r2, r2
 8000d78:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d7c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d84:	fb05 f10e 	mul.w	r1, r5, lr
 8000d88:	4291      	cmp	r1, r2
 8000d8a:	d908      	bls.n	8000d9e <__udivmoddi4+0x282>
 8000d8c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d90:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d94:	d216      	bcs.n	8000dc4 <__udivmoddi4+0x2a8>
 8000d96:	4291      	cmp	r1, r2
 8000d98:	d914      	bls.n	8000dc4 <__udivmoddi4+0x2a8>
 8000d9a:	3d02      	subs	r5, #2
 8000d9c:	4462      	add	r2, ip
 8000d9e:	1a52      	subs	r2, r2, r1
 8000da0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000da4:	e738      	b.n	8000c18 <__udivmoddi4+0xfc>
 8000da6:	4631      	mov	r1, r6
 8000da8:	4630      	mov	r0, r6
 8000daa:	e708      	b.n	8000bbe <__udivmoddi4+0xa2>
 8000dac:	4639      	mov	r1, r7
 8000dae:	e6e6      	b.n	8000b7e <__udivmoddi4+0x62>
 8000db0:	4610      	mov	r0, r2
 8000db2:	e6fb      	b.n	8000bac <__udivmoddi4+0x90>
 8000db4:	4548      	cmp	r0, r9
 8000db6:	d2a9      	bcs.n	8000d0c <__udivmoddi4+0x1f0>
 8000db8:	ebb9 0802 	subs.w	r8, r9, r2
 8000dbc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	e7a3      	b.n	8000d0c <__udivmoddi4+0x1f0>
 8000dc4:	4645      	mov	r5, r8
 8000dc6:	e7ea      	b.n	8000d9e <__udivmoddi4+0x282>
 8000dc8:	462b      	mov	r3, r5
 8000dca:	e794      	b.n	8000cf6 <__udivmoddi4+0x1da>
 8000dcc:	4640      	mov	r0, r8
 8000dce:	e7d1      	b.n	8000d74 <__udivmoddi4+0x258>
 8000dd0:	46d0      	mov	r8, sl
 8000dd2:	e77b      	b.n	8000ccc <__udivmoddi4+0x1b0>
 8000dd4:	3d02      	subs	r5, #2
 8000dd6:	4462      	add	r2, ip
 8000dd8:	e732      	b.n	8000c40 <__udivmoddi4+0x124>
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e70a      	b.n	8000bf4 <__udivmoddi4+0xd8>
 8000dde:	4464      	add	r4, ip
 8000de0:	3802      	subs	r0, #2
 8000de2:	e742      	b.n	8000c6a <__udivmoddi4+0x14e>

08000de4 <__aeabi_idiv0>:
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop

08000de8 <kinematikM1>:
 */
#include "4kinematik.h"

double out[4];

void kinematikM1(int x, int y, int th, double nos) {//maju awal
 8000de8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000dec:	b086      	sub	sp, #24
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6178      	str	r0, [r7, #20]
 8000df2:	6139      	str	r1, [r7, #16]
 8000df4:	60fa      	str	r2, [r7, #12]
 8000df6:	ed87 0b00 	vstr	d0, [r7]
	out[0] = nos*2*(-sin(d2r(135))*x + cos(d2r(135))*y + 0.25*th);
 8000dfa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000dfe:	4602      	mov	r2, r0
 8000e00:	460b      	mov	r3, r1
 8000e02:	f7ff f9fb 	bl	80001fc <__adddf3>
 8000e06:	4602      	mov	r2, r0
 8000e08:	460b      	mov	r3, r1
 8000e0a:	4614      	mov	r4, r2
 8000e0c:	461d      	mov	r5, r3
 8000e0e:	6978      	ldr	r0, [r7, #20]
 8000e10:	f7ff fb40 	bl	8000494 <__aeabi_i2d>
 8000e14:	a38c      	add	r3, pc, #560	; (adr r3, 8001048 <kinematikM1+0x260>)
 8000e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e1a:	f7ff fba5 	bl	8000568 <__aeabi_dmul>
 8000e1e:	4602      	mov	r2, r0
 8000e20:	460b      	mov	r3, r1
 8000e22:	4690      	mov	r8, r2
 8000e24:	4699      	mov	r9, r3
 8000e26:	6938      	ldr	r0, [r7, #16]
 8000e28:	f7ff fb34 	bl	8000494 <__aeabi_i2d>
 8000e2c:	a380      	add	r3, pc, #512	; (adr r3, 8001030 <kinematikM1+0x248>)
 8000e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e32:	f7ff fb99 	bl	8000568 <__aeabi_dmul>
 8000e36:	4602      	mov	r2, r0
 8000e38:	460b      	mov	r3, r1
 8000e3a:	4640      	mov	r0, r8
 8000e3c:	4649      	mov	r1, r9
 8000e3e:	f7ff f9dd 	bl	80001fc <__adddf3>
 8000e42:	4602      	mov	r2, r0
 8000e44:	460b      	mov	r3, r1
 8000e46:	4690      	mov	r8, r2
 8000e48:	4699      	mov	r9, r3
 8000e4a:	68f8      	ldr	r0, [r7, #12]
 8000e4c:	f7ff fb22 	bl	8000494 <__aeabi_i2d>
 8000e50:	f04f 0200 	mov.w	r2, #0
 8000e54:	4b7a      	ldr	r3, [pc, #488]	; (8001040 <kinematikM1+0x258>)
 8000e56:	f7ff fb87 	bl	8000568 <__aeabi_dmul>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	4640      	mov	r0, r8
 8000e60:	4649      	mov	r1, r9
 8000e62:	f7ff f9cb 	bl	80001fc <__adddf3>
 8000e66:	4602      	mov	r2, r0
 8000e68:	460b      	mov	r3, r1
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	4629      	mov	r1, r5
 8000e6e:	f7ff fb7b 	bl	8000568 <__aeabi_dmul>
 8000e72:	4602      	mov	r2, r0
 8000e74:	460b      	mov	r3, r1
 8000e76:	4973      	ldr	r1, [pc, #460]	; (8001044 <kinematikM1+0x25c>)
 8000e78:	e9c1 2300 	strd	r2, r3, [r1]
	out[1] = nos*2*(-sin(d2r(225))*x + cos(d2r(225))*y + 0.25*th);
 8000e7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000e80:	4602      	mov	r2, r0
 8000e82:	460b      	mov	r3, r1
 8000e84:	f7ff f9ba 	bl	80001fc <__adddf3>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	460b      	mov	r3, r1
 8000e8c:	4614      	mov	r4, r2
 8000e8e:	461d      	mov	r5, r3
 8000e90:	6978      	ldr	r0, [r7, #20]
 8000e92:	f7ff faff 	bl	8000494 <__aeabi_i2d>
 8000e96:	a35e      	add	r3, pc, #376	; (adr r3, 8001010 <kinematikM1+0x228>)
 8000e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e9c:	f7ff fb64 	bl	8000568 <__aeabi_dmul>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	4690      	mov	r8, r2
 8000ea6:	4699      	mov	r9, r3
 8000ea8:	6938      	ldr	r0, [r7, #16]
 8000eaa:	f7ff faf3 	bl	8000494 <__aeabi_i2d>
 8000eae:	a35a      	add	r3, pc, #360	; (adr r3, 8001018 <kinematikM1+0x230>)
 8000eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb4:	f7ff fb58 	bl	8000568 <__aeabi_dmul>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	460b      	mov	r3, r1
 8000ebc:	4640      	mov	r0, r8
 8000ebe:	4649      	mov	r1, r9
 8000ec0:	f7ff f99c 	bl	80001fc <__adddf3>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	4690      	mov	r8, r2
 8000eca:	4699      	mov	r9, r3
 8000ecc:	68f8      	ldr	r0, [r7, #12]
 8000ece:	f7ff fae1 	bl	8000494 <__aeabi_i2d>
 8000ed2:	f04f 0200 	mov.w	r2, #0
 8000ed6:	4b5a      	ldr	r3, [pc, #360]	; (8001040 <kinematikM1+0x258>)
 8000ed8:	f7ff fb46 	bl	8000568 <__aeabi_dmul>
 8000edc:	4602      	mov	r2, r0
 8000ede:	460b      	mov	r3, r1
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	f7ff f98a 	bl	80001fc <__adddf3>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	460b      	mov	r3, r1
 8000eec:	4620      	mov	r0, r4
 8000eee:	4629      	mov	r1, r5
 8000ef0:	f7ff fb3a 	bl	8000568 <__aeabi_dmul>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	4952      	ldr	r1, [pc, #328]	; (8001044 <kinematikM1+0x25c>)
 8000efa:	e9c1 2302 	strd	r2, r3, [r1, #8]
	out[2] = nos*2*(-sin(d2r(315))*x + cos(d2r(315))*y + 0.25*th);
 8000efe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f02:	4602      	mov	r2, r0
 8000f04:	460b      	mov	r3, r1
 8000f06:	f7ff f979 	bl	80001fc <__adddf3>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	4614      	mov	r4, r2
 8000f10:	461d      	mov	r5, r3
 8000f12:	6978      	ldr	r0, [r7, #20]
 8000f14:	f7ff fabe 	bl	8000494 <__aeabi_i2d>
 8000f18:	a341      	add	r3, pc, #260	; (adr r3, 8001020 <kinematikM1+0x238>)
 8000f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f1e:	f7ff fb23 	bl	8000568 <__aeabi_dmul>
 8000f22:	4602      	mov	r2, r0
 8000f24:	460b      	mov	r3, r1
 8000f26:	4690      	mov	r8, r2
 8000f28:	4699      	mov	r9, r3
 8000f2a:	6938      	ldr	r0, [r7, #16]
 8000f2c:	f7ff fab2 	bl	8000494 <__aeabi_i2d>
 8000f30:	a33d      	add	r3, pc, #244	; (adr r3, 8001028 <kinematikM1+0x240>)
 8000f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f36:	f7ff fb17 	bl	8000568 <__aeabi_dmul>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	4640      	mov	r0, r8
 8000f40:	4649      	mov	r1, r9
 8000f42:	f7ff f95b 	bl	80001fc <__adddf3>
 8000f46:	4602      	mov	r2, r0
 8000f48:	460b      	mov	r3, r1
 8000f4a:	4690      	mov	r8, r2
 8000f4c:	4699      	mov	r9, r3
 8000f4e:	68f8      	ldr	r0, [r7, #12]
 8000f50:	f7ff faa0 	bl	8000494 <__aeabi_i2d>
 8000f54:	f04f 0200 	mov.w	r2, #0
 8000f58:	4b39      	ldr	r3, [pc, #228]	; (8001040 <kinematikM1+0x258>)
 8000f5a:	f7ff fb05 	bl	8000568 <__aeabi_dmul>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	460b      	mov	r3, r1
 8000f62:	4640      	mov	r0, r8
 8000f64:	4649      	mov	r1, r9
 8000f66:	f7ff f949 	bl	80001fc <__adddf3>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	4620      	mov	r0, r4
 8000f70:	4629      	mov	r1, r5
 8000f72:	f7ff faf9 	bl	8000568 <__aeabi_dmul>
 8000f76:	4602      	mov	r2, r0
 8000f78:	460b      	mov	r3, r1
 8000f7a:	4932      	ldr	r1, [pc, #200]	; (8001044 <kinematikM1+0x25c>)
 8000f7c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	out[3] = nos*2*(-sin(d2r(45))*x + cos(d2r(45))*y + 0.25*th);
 8000f80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f84:	4602      	mov	r2, r0
 8000f86:	460b      	mov	r3, r1
 8000f88:	f7ff f938 	bl	80001fc <__adddf3>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	460b      	mov	r3, r1
 8000f90:	4614      	mov	r4, r2
 8000f92:	461d      	mov	r5, r3
 8000f94:	6978      	ldr	r0, [r7, #20]
 8000f96:	f7ff fa7d 	bl	8000494 <__aeabi_i2d>
 8000f9a:	a325      	add	r3, pc, #148	; (adr r3, 8001030 <kinematikM1+0x248>)
 8000f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa0:	f7ff fae2 	bl	8000568 <__aeabi_dmul>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	4690      	mov	r8, r2
 8000faa:	4699      	mov	r9, r3
 8000fac:	6938      	ldr	r0, [r7, #16]
 8000fae:	f7ff fa71 	bl	8000494 <__aeabi_i2d>
 8000fb2:	a321      	add	r3, pc, #132	; (adr r3, 8001038 <kinematikM1+0x250>)
 8000fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb8:	f7ff fad6 	bl	8000568 <__aeabi_dmul>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	4640      	mov	r0, r8
 8000fc2:	4649      	mov	r1, r9
 8000fc4:	f7ff f91a 	bl	80001fc <__adddf3>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	460b      	mov	r3, r1
 8000fcc:	4690      	mov	r8, r2
 8000fce:	4699      	mov	r9, r3
 8000fd0:	68f8      	ldr	r0, [r7, #12]
 8000fd2:	f7ff fa5f 	bl	8000494 <__aeabi_i2d>
 8000fd6:	f04f 0200 	mov.w	r2, #0
 8000fda:	4b19      	ldr	r3, [pc, #100]	; (8001040 <kinematikM1+0x258>)
 8000fdc:	f7ff fac4 	bl	8000568 <__aeabi_dmul>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	4649      	mov	r1, r9
 8000fe8:	f7ff f908 	bl	80001fc <__adddf3>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	4620      	mov	r0, r4
 8000ff2:	4629      	mov	r1, r5
 8000ff4:	f7ff fab8 	bl	8000568 <__aeabi_dmul>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	4911      	ldr	r1, [pc, #68]	; (8001044 <kinematikM1+0x25c>)
 8000ffe:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8001002:	bf00      	nop
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800100c:	f3af 8000 	nop.w
 8001010:	667f3bcc 	.word	0x667f3bcc
 8001014:	3fe6a09e 	.word	0x3fe6a09e
 8001018:	667f3bce 	.word	0x667f3bce
 800101c:	bfe6a09e 	.word	0xbfe6a09e
 8001020:	667f3bce 	.word	0x667f3bce
 8001024:	3fe6a09e 	.word	0x3fe6a09e
 8001028:	667f3bcb 	.word	0x667f3bcb
 800102c:	3fe6a09e 	.word	0x3fe6a09e
 8001030:	667f3bcc 	.word	0x667f3bcc
 8001034:	bfe6a09e 	.word	0xbfe6a09e
 8001038:	667f3bcd 	.word	0x667f3bcd
 800103c:	3fe6a09e 	.word	0x3fe6a09e
 8001040:	3fd00000 	.word	0x3fd00000
 8001044:	200001a0 	.word	0x200001a0
 8001048:	667f3bcd 	.word	0x667f3bcd
 800104c:	bfe6a09e 	.word	0xbfe6a09e

08001050 <kinematikM2>:

void kinematikM2(int x, int y, int th, double nos) {//maju padi
 8001050:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001054:	b086      	sub	sp, #24
 8001056:	af00      	add	r7, sp, #0
 8001058:	6178      	str	r0, [r7, #20]
 800105a:	6139      	str	r1, [r7, #16]
 800105c:	60fa      	str	r2, [r7, #12]
 800105e:	ed87 0b00 	vstr	d0, [r7]
	out[0] = nos*2*(-sin(d2r(45))*x + cos(d2r(45))*y + 0.25*th);
 8001062:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	f7ff f8c7 	bl	80001fc <__adddf3>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	4614      	mov	r4, r2
 8001074:	461d      	mov	r5, r3
 8001076:	6978      	ldr	r0, [r7, #20]
 8001078:	f7ff fa0c 	bl	8000494 <__aeabi_i2d>
 800107c:	a380      	add	r3, pc, #512	; (adr r3, 8001280 <kinematikM2+0x230>)
 800107e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001082:	f7ff fa71 	bl	8000568 <__aeabi_dmul>
 8001086:	4602      	mov	r2, r0
 8001088:	460b      	mov	r3, r1
 800108a:	4690      	mov	r8, r2
 800108c:	4699      	mov	r9, r3
 800108e:	6938      	ldr	r0, [r7, #16]
 8001090:	f7ff fa00 	bl	8000494 <__aeabi_i2d>
 8001094:	a386      	add	r3, pc, #536	; (adr r3, 80012b0 <kinematikM2+0x260>)
 8001096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109a:	f7ff fa65 	bl	8000568 <__aeabi_dmul>
 800109e:	4602      	mov	r2, r0
 80010a0:	460b      	mov	r3, r1
 80010a2:	4640      	mov	r0, r8
 80010a4:	4649      	mov	r1, r9
 80010a6:	f7ff f8a9 	bl	80001fc <__adddf3>
 80010aa:	4602      	mov	r2, r0
 80010ac:	460b      	mov	r3, r1
 80010ae:	4690      	mov	r8, r2
 80010b0:	4699      	mov	r9, r3
 80010b2:	68f8      	ldr	r0, [r7, #12]
 80010b4:	f7ff f9ee 	bl	8000494 <__aeabi_i2d>
 80010b8:	f04f 0200 	mov.w	r2, #0
 80010bc:	4b7a      	ldr	r3, [pc, #488]	; (80012a8 <kinematikM2+0x258>)
 80010be:	f7ff fa53 	bl	8000568 <__aeabi_dmul>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	4640      	mov	r0, r8
 80010c8:	4649      	mov	r1, r9
 80010ca:	f7ff f897 	bl	80001fc <__adddf3>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	4620      	mov	r0, r4
 80010d4:	4629      	mov	r1, r5
 80010d6:	f7ff fa47 	bl	8000568 <__aeabi_dmul>
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	4973      	ldr	r1, [pc, #460]	; (80012ac <kinematikM2+0x25c>)
 80010e0:	e9c1 2300 	strd	r2, r3, [r1]
	out[1] = nos*2*(-sin(d2r(135))*x + cos(d2r(135))*y + 0.25*th);
 80010e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	f7ff f886 	bl	80001fc <__adddf3>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4614      	mov	r4, r2
 80010f6:	461d      	mov	r5, r3
 80010f8:	6978      	ldr	r0, [r7, #20]
 80010fa:	f7ff f9cb 	bl	8000494 <__aeabi_i2d>
 80010fe:	a35e      	add	r3, pc, #376	; (adr r3, 8001278 <kinematikM2+0x228>)
 8001100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001104:	f7ff fa30 	bl	8000568 <__aeabi_dmul>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	4690      	mov	r8, r2
 800110e:	4699      	mov	r9, r3
 8001110:	6938      	ldr	r0, [r7, #16]
 8001112:	f7ff f9bf 	bl	8000494 <__aeabi_i2d>
 8001116:	a35a      	add	r3, pc, #360	; (adr r3, 8001280 <kinematikM2+0x230>)
 8001118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111c:	f7ff fa24 	bl	8000568 <__aeabi_dmul>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	4640      	mov	r0, r8
 8001126:	4649      	mov	r1, r9
 8001128:	f7ff f868 	bl	80001fc <__adddf3>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	4690      	mov	r8, r2
 8001132:	4699      	mov	r9, r3
 8001134:	68f8      	ldr	r0, [r7, #12]
 8001136:	f7ff f9ad 	bl	8000494 <__aeabi_i2d>
 800113a:	f04f 0200 	mov.w	r2, #0
 800113e:	4b5a      	ldr	r3, [pc, #360]	; (80012a8 <kinematikM2+0x258>)
 8001140:	f7ff fa12 	bl	8000568 <__aeabi_dmul>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	4640      	mov	r0, r8
 800114a:	4649      	mov	r1, r9
 800114c:	f7ff f856 	bl	80001fc <__adddf3>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	4620      	mov	r0, r4
 8001156:	4629      	mov	r1, r5
 8001158:	f7ff fa06 	bl	8000568 <__aeabi_dmul>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4952      	ldr	r1, [pc, #328]	; (80012ac <kinematikM2+0x25c>)
 8001162:	e9c1 2302 	strd	r2, r3, [r1, #8]
	out[2] = nos*2*(-sin(d2r(225))*x + cos(d2r(225))*y + 0.25*th);
 8001166:	e9d7 0100 	ldrd	r0, r1, [r7]
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	f7ff f845 	bl	80001fc <__adddf3>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	4614      	mov	r4, r2
 8001178:	461d      	mov	r5, r3
 800117a:	6978      	ldr	r0, [r7, #20]
 800117c:	f7ff f98a 	bl	8000494 <__aeabi_i2d>
 8001180:	a341      	add	r3, pc, #260	; (adr r3, 8001288 <kinematikM2+0x238>)
 8001182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001186:	f7ff f9ef 	bl	8000568 <__aeabi_dmul>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	4690      	mov	r8, r2
 8001190:	4699      	mov	r9, r3
 8001192:	6938      	ldr	r0, [r7, #16]
 8001194:	f7ff f97e 	bl	8000494 <__aeabi_i2d>
 8001198:	a33d      	add	r3, pc, #244	; (adr r3, 8001290 <kinematikM2+0x240>)
 800119a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119e:	f7ff f9e3 	bl	8000568 <__aeabi_dmul>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	4640      	mov	r0, r8
 80011a8:	4649      	mov	r1, r9
 80011aa:	f7ff f827 	bl	80001fc <__adddf3>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	4690      	mov	r8, r2
 80011b4:	4699      	mov	r9, r3
 80011b6:	68f8      	ldr	r0, [r7, #12]
 80011b8:	f7ff f96c 	bl	8000494 <__aeabi_i2d>
 80011bc:	f04f 0200 	mov.w	r2, #0
 80011c0:	4b39      	ldr	r3, [pc, #228]	; (80012a8 <kinematikM2+0x258>)
 80011c2:	f7ff f9d1 	bl	8000568 <__aeabi_dmul>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	4640      	mov	r0, r8
 80011cc:	4649      	mov	r1, r9
 80011ce:	f7ff f815 	bl	80001fc <__adddf3>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4620      	mov	r0, r4
 80011d8:	4629      	mov	r1, r5
 80011da:	f7ff f9c5 	bl	8000568 <__aeabi_dmul>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	4932      	ldr	r1, [pc, #200]	; (80012ac <kinematikM2+0x25c>)
 80011e4:	e9c1 2304 	strd	r2, r3, [r1, #16]
	out[3] = nos*2*(-sin(d2r(315))*x + cos(d2r(315))*y + 0.25*th);
 80011e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	f7ff f804 	bl	80001fc <__adddf3>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	4614      	mov	r4, r2
 80011fa:	461d      	mov	r5, r3
 80011fc:	6978      	ldr	r0, [r7, #20]
 80011fe:	f7ff f949 	bl	8000494 <__aeabi_i2d>
 8001202:	a325      	add	r3, pc, #148	; (adr r3, 8001298 <kinematikM2+0x248>)
 8001204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001208:	f7ff f9ae 	bl	8000568 <__aeabi_dmul>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4690      	mov	r8, r2
 8001212:	4699      	mov	r9, r3
 8001214:	6938      	ldr	r0, [r7, #16]
 8001216:	f7ff f93d 	bl	8000494 <__aeabi_i2d>
 800121a:	a321      	add	r3, pc, #132	; (adr r3, 80012a0 <kinematikM2+0x250>)
 800121c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001220:	f7ff f9a2 	bl	8000568 <__aeabi_dmul>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4640      	mov	r0, r8
 800122a:	4649      	mov	r1, r9
 800122c:	f7fe ffe6 	bl	80001fc <__adddf3>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	4690      	mov	r8, r2
 8001236:	4699      	mov	r9, r3
 8001238:	68f8      	ldr	r0, [r7, #12]
 800123a:	f7ff f92b 	bl	8000494 <__aeabi_i2d>
 800123e:	f04f 0200 	mov.w	r2, #0
 8001242:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <kinematikM2+0x258>)
 8001244:	f7ff f990 	bl	8000568 <__aeabi_dmul>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4640      	mov	r0, r8
 800124e:	4649      	mov	r1, r9
 8001250:	f7fe ffd4 	bl	80001fc <__adddf3>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4620      	mov	r0, r4
 800125a:	4629      	mov	r1, r5
 800125c:	f7ff f984 	bl	8000568 <__aeabi_dmul>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	4911      	ldr	r1, [pc, #68]	; (80012ac <kinematikM2+0x25c>)
 8001266:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 800126a:	bf00      	nop
 800126c:	3718      	adds	r7, #24
 800126e:	46bd      	mov	sp, r7
 8001270:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001274:	f3af 8000 	nop.w
 8001278:	667f3bcd 	.word	0x667f3bcd
 800127c:	bfe6a09e 	.word	0xbfe6a09e
 8001280:	667f3bcc 	.word	0x667f3bcc
 8001284:	bfe6a09e 	.word	0xbfe6a09e
 8001288:	667f3bcc 	.word	0x667f3bcc
 800128c:	3fe6a09e 	.word	0x3fe6a09e
 8001290:	667f3bce 	.word	0x667f3bce
 8001294:	bfe6a09e 	.word	0xbfe6a09e
 8001298:	667f3bce 	.word	0x667f3bce
 800129c:	3fe6a09e 	.word	0x3fe6a09e
 80012a0:	667f3bcb 	.word	0x667f3bcb
 80012a4:	3fe6a09e 	.word	0x3fe6a09e
 80012a8:	3fd00000 	.word	0x3fd00000
 80012ac:	200001a0 	.word	0x200001a0
 80012b0:	667f3bcd 	.word	0x667f3bcd
 80012b4:	3fe6a09e 	.word	0x3fe6a09e

080012b8 <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* CAN 통신 초기화  */
int CANSPI_Initialize(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af00      	add	r7, sp, #0
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;

  /* Rx Mask values 초기화 */
  RXM0reg.RXM0SIDH = 0x00;
 80012be:	2300      	movs	r3, #0
 80012c0:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 80012c2:	2300      	movs	r3, #0
 80012c4:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 80012c6:	2300      	movs	r3, #0
 80012c8:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 80012ca:	2300      	movs	r3, #0
 80012cc:	71fb      	strb	r3, [r7, #7]

  RXM1reg.RXM1SIDH = 0x00;
 80012ce:	2300      	movs	r3, #0
 80012d0:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 80012d2:	2300      	movs	r3, #0
 80012d4:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 80012d6:	2300      	movs	r3, #0
 80012d8:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 80012da:	2300      	movs	r3, #0
 80012dc:	70fb      	strb	r3, [r7, #3]

  /* Rx Filter values 초기화 */
  RXF0reg.RXF0SIDH = 0x00;
 80012de:	2300      	movs	r3, #0
 80012e0:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 80012e2:	2300      	movs	r3, #0
 80012e4:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 80012e6:	2300      	movs	r3, #0
 80012e8:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 80012ea:	2300      	movs	r3, #0
 80012ec:	77fb      	strb	r3, [r7, #31]

  RXF1reg.RXF1SIDH = 0x00;
 80012ee:	2300      	movs	r3, #0
 80012f0:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 80012f2:	2308      	movs	r3, #8
 80012f4:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 80012f6:	2300      	movs	r3, #0
 80012f8:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 80012fa:	2300      	movs	r3, #0
 80012fc:	76fb      	strb	r3, [r7, #27]

  RXF2reg.RXF2SIDH = 0x00;
 80012fe:	2300      	movs	r3, #0
 8001300:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 8001302:	2300      	movs	r3, #0
 8001304:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 8001306:	2300      	movs	r3, #0
 8001308:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 800130a:	2300      	movs	r3, #0
 800130c:	75fb      	strb	r3, [r7, #23]

  RXF3reg.RXF3SIDH = 0x00;
 800130e:	2300      	movs	r3, #0
 8001310:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 8001312:	2300      	movs	r3, #0
 8001314:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 8001316:	2300      	movs	r3, #0
 8001318:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 800131a:	2300      	movs	r3, #0
 800131c:	74fb      	strb	r3, [r7, #19]

  RXF4reg.RXF4SIDH = 0x00;
 800131e:	2300      	movs	r3, #0
 8001320:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 8001322:	2300      	movs	r3, #0
 8001324:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 8001326:	2300      	movs	r3, #0
 8001328:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 800132a:	2300      	movs	r3, #0
 800132c:	73fb      	strb	r3, [r7, #15]

  RXF5reg.RXF5SIDH = 0x00;
 800132e:	2300      	movs	r3, #0
 8001330:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 8001332:	2308      	movs	r3, #8
 8001334:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 8001336:	2300      	movs	r3, #0
 8001338:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 800133a:	2300      	movs	r3, #0
 800133c:	72fb      	strb	r3, [r7, #11]

  /* MCP2515 초기화, SPI 통신 상태 확인 */
  if(!MCP2515_Initialize())
 800133e:	f000 f945 	bl	80015cc <MCP2515_Initialize>
 8001342:	4603      	mov	r3, r0
 8001344:	f083 0301 	eor.w	r3, r3, #1
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	d002      	beq.n	8001354 <CANSPI_Initialize+0x9c>
    return -1;
 800134e:	f04f 33ff 	mov.w	r3, #4294967295
 8001352:	e060      	b.n	8001416 <CANSPI_Initialize+0x15e>

  /* Configuration 모드로 설정 */
  if(!MCP2515_SetConfigMode())
 8001354:	f000 f95c 	bl	8001610 <MCP2515_SetConfigMode>
 8001358:	4603      	mov	r3, r0
 800135a:	f083 0301 	eor.w	r3, r3, #1
 800135e:	b2db      	uxtb	r3, r3
 8001360:	2b00      	cmp	r3, #0
 8001362:	d002      	beq.n	800136a <CANSPI_Initialize+0xb2>
    return -2;
 8001364:	f06f 0301 	mvn.w	r3, #1
 8001368:	e055      	b.n	8001416 <CANSPI_Initialize+0x15e>

  /* Filter & Mask 값 설정 */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	461a      	mov	r2, r3
 800136e:	2123      	movs	r1, #35	; 0x23
 8001370:	2020      	movs	r0, #32
 8001372:	f000 f9f1 	bl	8001758 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 8001376:	463b      	mov	r3, r7
 8001378:	461a      	mov	r2, r3
 800137a:	2127      	movs	r1, #39	; 0x27
 800137c:	2024      	movs	r0, #36	; 0x24
 800137e:	f000 f9eb 	bl	8001758 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 8001382:	f107 031c 	add.w	r3, r7, #28
 8001386:	461a      	mov	r2, r3
 8001388:	2103      	movs	r1, #3
 800138a:	2000      	movs	r0, #0
 800138c:	f000 f9e4 	bl	8001758 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 8001390:	f107 0318 	add.w	r3, r7, #24
 8001394:	461a      	mov	r2, r3
 8001396:	2107      	movs	r1, #7
 8001398:	2004      	movs	r0, #4
 800139a:	f000 f9dd 	bl	8001758 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 800139e:	f107 0314 	add.w	r3, r7, #20
 80013a2:	461a      	mov	r2, r3
 80013a4:	210b      	movs	r1, #11
 80013a6:	2008      	movs	r0, #8
 80013a8:	f000 f9d6 	bl	8001758 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 80013ac:	f107 0310 	add.w	r3, r7, #16
 80013b0:	461a      	mov	r2, r3
 80013b2:	2113      	movs	r1, #19
 80013b4:	2010      	movs	r0, #16
 80013b6:	f000 f9cf 	bl	8001758 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 80013ba:	f107 030c 	add.w	r3, r7, #12
 80013be:	461a      	mov	r2, r3
 80013c0:	2117      	movs	r1, #23
 80013c2:	2014      	movs	r0, #20
 80013c4:	f000 f9c8 	bl	8001758 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 80013c8:	f107 0308 	add.w	r3, r7, #8
 80013cc:	461a      	mov	r2, r3
 80013ce:	211b      	movs	r1, #27
 80013d0:	2018      	movs	r0, #24
 80013d2:	f000 f9c1 	bl	8001758 <MCP2515_WriteByteSequence>

  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 80013d6:	2104      	movs	r1, #4
 80013d8:	2060      	movs	r0, #96	; 0x60
 80013da:	f000 f999 	bl	8001710 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 80013de:	2101      	movs	r1, #1
 80013e0:	2070      	movs	r0, #112	; 0x70
 80013e2:	f000 f995 	bl	8001710 <MCP2515_WriteByte>
  */

  //settingan speed tapi belum paham

  /* 00(SJW 1tq) 000000 */
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 80013e6:	2100      	movs	r1, #0
 80013e8:	202a      	movs	r0, #42	; 0x2a
 80013ea:	f000 f991 	bl	8001710 <MCP2515_WriteByte>

  /* 1 1 100(5tq) 101(6tq) */
  MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
 80013ee:	21e5      	movs	r1, #229	; 0xe5
 80013f0:	2029      	movs	r0, #41	; 0x29
 80013f2:	f000 f98d 	bl	8001710 <MCP2515_WriteByte>

  /* 1 0 000 011(4tq) */
  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 80013f6:	2183      	movs	r1, #131	; 0x83
 80013f8:	2028      	movs	r0, #40	; 0x28
 80013fa:	f000 f989 	bl	8001710 <MCP2515_WriteByte>

  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 80013fe:	f000 f925 	bl	800164c <MCP2515_SetNormalMode>
 8001402:	4603      	mov	r3, r0
 8001404:	f083 0301 	eor.w	r3, r3, #1
 8001408:	b2db      	uxtb	r3, r3
 800140a:	2b00      	cmp	r3, #0
 800140c:	d002      	beq.n	8001414 <CANSPI_Initialize+0x15c>
    return -3;
 800140e:	f06f 0302 	mvn.w	r3, #2
 8001412:	e000      	b.n	8001416 <CANSPI_Initialize+0x15e>

  return 1;
 8001414:	2301      	movs	r3, #1
}
 8001416:	4618      	mov	r0, r3
 8001418:	3720      	adds	r7, #32
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <CANSPI_Receive>:
  return (returnValue);
}

/* CAN 메시지 수신 */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b088      	sub	sp, #32
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	77fb      	strb	r3, [r7, #31]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;

  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 800142a:	f000 f9bf 	bl	80017ac <MCP2515_GetRxStatus>
 800142e:	4603      	mov	r3, r0
 8001430:	733b      	strb	r3, [r7, #12]

  /* 버퍼에 수신된 메시지가 있는지 확인 */
  if (rxStatus.rxBuffer != 0)
 8001432:	7b3b      	ldrb	r3, [r7, #12]
 8001434:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	d066      	beq.n	800150c <CANSPI_Receive+0xee>
  {
    /* 어떤 버퍼에 메시지가 있는지 확인 후 처리 */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 800143e:	7b3b      	ldrb	r3, [r7, #12]
 8001440:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2b40      	cmp	r3, #64	; 0x40
 8001448:	bf0c      	ite	eq
 800144a:	2301      	moveq	r3, #1
 800144c:	2300      	movne	r3, #0
 800144e:	b2da      	uxtb	r2, r3
 8001450:	7b3b      	ldrb	r3, [r7, #12]
 8001452:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001456:	b2db      	uxtb	r3, r3
 8001458:	2bc0      	cmp	r3, #192	; 0xc0
 800145a:	bf0c      	ite	eq
 800145c:	2301      	moveq	r3, #1
 800145e:	2300      	movne	r3, #0
 8001460:	b2db      	uxtb	r3, r3
 8001462:	4313      	orrs	r3, r2
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b00      	cmp	r3, #0
 8001468:	d007      	beq.n	800147a <CANSPI_Receive+0x5c>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 800146a:	f107 0310 	add.w	r3, r7, #16
 800146e:	220d      	movs	r2, #13
 8001470:	4619      	mov	r1, r3
 8001472:	2090      	movs	r0, #144	; 0x90
 8001474:	f000 f92a 	bl	80016cc <MCP2515_ReadRxSequence>
 8001478:	e00c      	b.n	8001494 <CANSPI_Receive+0x76>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 800147a:	7b3b      	ldrb	r3, [r7, #12]
 800147c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b80      	cmp	r3, #128	; 0x80
 8001484:	d106      	bne.n	8001494 <CANSPI_Receive+0x76>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8001486:	f107 0310 	add.w	r3, r7, #16
 800148a:	220d      	movs	r2, #13
 800148c:	4619      	mov	r1, r3
 800148e:	2094      	movs	r0, #148	; 0x94
 8001490:	f000 f91c 	bl	80016cc <MCP2515_ReadRxSequence>
    }

    /* Extended 타입 */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 8001494:	7b3b      	ldrb	r3, [r7, #12]
 8001496:	f003 0318 	and.w	r3, r3, #24
 800149a:	b2db      	uxtb	r3, r3
 800149c:	2b10      	cmp	r3, #16
 800149e:	d10c      	bne.n	80014ba <CANSPI_Receive+0x9c>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2202      	movs	r2, #2
 80014a4:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 80014a6:	7cb8      	ldrb	r0, [r7, #18]
 80014a8:	7cf9      	ldrb	r1, [r7, #19]
 80014aa:	7c3a      	ldrb	r2, [r7, #16]
 80014ac:	7c7b      	ldrb	r3, [r7, #17]
 80014ae:	f000 f832 	bl	8001516 <convertReg2ExtendedCANid>
 80014b2:	4602      	mov	r2, r0
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	e00b      	b.n	80014d2 <CANSPI_Receive+0xb4>
    }
    else
    {
      /* Standard 타입 */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2201      	movs	r2, #1
 80014be:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 80014c0:	7c3b      	ldrb	r3, [r7, #16]
 80014c2:	7c7a      	ldrb	r2, [r7, #17]
 80014c4:	4611      	mov	r1, r2
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 f863 	bl	8001592 <convertReg2StandardCANid>
 80014cc:	4602      	mov	r2, r0
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	605a      	str	r2, [r3, #4]
    }

    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 80014d2:	7d3a      	ldrb	r2, [r7, #20]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 80014d8:	7d7a      	ldrb	r2, [r7, #21]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 80014de:	7dba      	ldrb	r2, [r7, #22]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 80014e4:	7dfa      	ldrb	r2, [r7, #23]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 80014ea:	7e3a      	ldrb	r2, [r7, #24]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 80014f0:	7e7a      	ldrb	r2, [r7, #25]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	735a      	strb	r2, [r3, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 80014f6:	7eba      	ldrb	r2, [r7, #26]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	739a      	strb	r2, [r3, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 80014fc:	7efa      	ldrb	r2, [r7, #27]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	73da      	strb	r2, [r3, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 8001502:	7f3a      	ldrb	r2, [r7, #28]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	741a      	strb	r2, [r3, #16]

    returnValue = 1;
 8001508:	2301      	movs	r3, #1
 800150a:	77fb      	strb	r3, [r7, #31]
  }

  return (returnValue);
 800150c:	7ffb      	ldrb	r3, [r7, #31]
}
 800150e:	4618      	mov	r0, r3
 8001510:	3720      	adds	r7, #32
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* Register 저장값을 Extended ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 8001516:	b490      	push	{r4, r7}
 8001518:	b086      	sub	sp, #24
 800151a:	af00      	add	r7, sp, #0
 800151c:	4604      	mov	r4, r0
 800151e:	4608      	mov	r0, r1
 8001520:	4611      	mov	r1, r2
 8001522:	461a      	mov	r2, r3
 8001524:	4623      	mov	r3, r4
 8001526:	71fb      	strb	r3, [r7, #7]
 8001528:	4603      	mov	r3, r0
 800152a:	71bb      	strb	r3, [r7, #6]
 800152c:	460b      	mov	r3, r1
 800152e:	717b      	strb	r3, [r7, #5]
 8001530:	4613      	mov	r3, r2
 8001532:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;

  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 800153c:	793b      	ldrb	r3, [r7, #4]
 800153e:	f003 0303 	and.w	r3, r3, #3
 8001542:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 8001544:	793b      	ldrb	r3, [r7, #4]
 8001546:	095b      	lsrs	r3, r3, #5
 8001548:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 800154a:	797b      	ldrb	r3, [r7, #5]
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 8001550:	7bbb      	ldrb	r3, [r7, #14]
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4413      	add	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 800155e:	7bfb      	ldrb	r3, [r7, #15]
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	4413      	add	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	021b      	lsls	r3, r3, #8
 800156a:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	4413      	add	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	021b      	lsls	r3, r3, #8
 8001578:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 800157a:	79bb      	ldrb	r3, [r7, #6]
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	4413      	add	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	617b      	str	r3, [r7, #20]
  return (returnValue);
 8001586:	697b      	ldr	r3, [r7, #20]
}
 8001588:	4618      	mov	r0, r3
 800158a:	3718      	adds	r7, #24
 800158c:	46bd      	mov	sp, r7
 800158e:	bc90      	pop	{r4, r7}
 8001590:	4770      	bx	lr

08001592 <convertReg2StandardCANid>:

/* Register 저장값을 Standard ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 8001592:	b480      	push	{r7}
 8001594:	b085      	sub	sp, #20
 8001596:	af00      	add	r7, sp, #0
 8001598:	4603      	mov	r3, r0
 800159a:	460a      	mov	r2, r1
 800159c:	71fb      	strb	r3, [r7, #7]
 800159e:	4613      	mov	r3, r2
 80015a0:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;

  ConvertedID = (tempRXBn_SIDH << 3);
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 80015ac:	79bb      	ldrb	r3, [r7, #6]
 80015ae:	095b      	lsrs	r3, r3, #5
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	461a      	mov	r2, r3
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	4413      	add	r3, r2
 80015b8:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	60fb      	str	r3, [r7, #12]

  return (returnValue);
 80015be:	68fb      	ldr	r3, [r7, #12]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* MCP2515 초기화 */
bool MCP2515_Initialize(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();
 80015d2:	2201      	movs	r2, #1
 80015d4:	2140      	movs	r1, #64	; 0x40
 80015d6:	480c      	ldr	r0, [pc, #48]	; (8001608 <MCP2515_Initialize+0x3c>)
 80015d8:	f003 fd36 	bl	8005048 <HAL_GPIO_WritePin>

  uint8_t loop = 10;
 80015dc:	230a      	movs	r3, #10
 80015de:	71fb      	strb	r3, [r7, #7]

  do {
    /* SPI Ready 확인 */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 80015e0:	480a      	ldr	r0, [pc, #40]	; (800160c <MCP2515_Initialize+0x40>)
 80015e2:	f004 ff0f 	bl	8006404 <HAL_SPI_GetState>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d101      	bne.n	80015f0 <MCP2515_Initialize+0x24>
      return true;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e006      	b.n	80015fe <MCP2515_Initialize+0x32>

    loop--;
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	3b01      	subs	r3, #1
 80015f4:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d1f1      	bne.n	80015e0 <MCP2515_Initialize+0x14>

  return false;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40021400 	.word	0x40021400
 800160c:	20000460 	.word	0x20000460

08001610 <MCP2515_SetConfigMode>:

/* MCP2515 를 설정모드로 전환 */
bool MCP2515_SetConfigMode(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
  /* CANCTRL Register Configuration 모드 설정 */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 8001616:	2180      	movs	r1, #128	; 0x80
 8001618:	200f      	movs	r0, #15
 800161a:	f000 f879 	bl	8001710 <MCP2515_WriteByte>

  uint8_t loop = 10;
 800161e:	230a      	movs	r3, #10
 8001620:	71fb      	strb	r3, [r7, #7]

  do {
    /* 모드전환 확인 */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 8001622:	200e      	movs	r0, #14
 8001624:	f000 f830 	bl	8001688 <MCP2515_ReadByte>
 8001628:	4603      	mov	r3, r0
 800162a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800162e:	2b80      	cmp	r3, #128	; 0x80
 8001630:	d101      	bne.n	8001636 <MCP2515_SetConfigMode+0x26>
      return true;
 8001632:	2301      	movs	r3, #1
 8001634:	e006      	b.n	8001644 <MCP2515_SetConfigMode+0x34>

    loop--;
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	3b01      	subs	r3, #1
 800163a:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1ef      	bne.n	8001622 <MCP2515_SetConfigMode+0x12>

  return false;
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <MCP2515_SetNormalMode>:

/* MCP2515 를 Normal모드로 전환 */
bool MCP2515_SetNormalMode(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
  /* CANCTRL Register Normal 모드 설정 */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 8001652:	2100      	movs	r1, #0
 8001654:	200f      	movs	r0, #15
 8001656:	f000 f85b 	bl	8001710 <MCP2515_WriteByte>

  uint8_t loop = 10;
 800165a:	230a      	movs	r3, #10
 800165c:	71fb      	strb	r3, [r7, #7]

  do {
    /* 모드전환 확인 */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 800165e:	200e      	movs	r0, #14
 8001660:	f000 f812 	bl	8001688 <MCP2515_ReadByte>
 8001664:	4603      	mov	r3, r0
 8001666:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <MCP2515_SetNormalMode+0x26>
      return true;
 800166e:	2301      	movs	r3, #1
 8001670:	e006      	b.n	8001680 <MCP2515_SetNormalMode+0x34>

    loop--;
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	3b01      	subs	r3, #1
 8001676:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1ef      	bne.n	800165e <MCP2515_SetNormalMode+0x12>

  return false;
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* 1바이트 읽기 */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;

  MCP2515_CS_LOW();
 8001692:	2200      	movs	r2, #0
 8001694:	2140      	movs	r1, #64	; 0x40
 8001696:	480c      	ldr	r0, [pc, #48]	; (80016c8 <MCP2515_ReadByte+0x40>)
 8001698:	f003 fcd6 	bl	8005048 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ);
 800169c:	2003      	movs	r0, #3
 800169e:	f000 f8a1 	bl	80017e4 <SPI_Tx>
  SPI_Tx(address);
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f000 f89d 	bl	80017e4 <SPI_Tx>
  retVal = SPI_Rx();
 80016aa:	f000 f8c1 	bl	8001830 <SPI_Rx>
 80016ae:	4603      	mov	r3, r0
 80016b0:	73fb      	strb	r3, [r7, #15]

  MCP2515_CS_HIGH();
 80016b2:	2201      	movs	r2, #1
 80016b4:	2140      	movs	r1, #64	; 0x40
 80016b6:	4804      	ldr	r0, [pc, #16]	; (80016c8 <MCP2515_ReadByte+0x40>)
 80016b8:	f003 fcc6 	bl	8005048 <HAL_GPIO_WritePin>

  return retVal;
 80016bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40021400 	.word	0x40021400

080016cc <MCP2515_ReadRxSequence>:

/* Sequential Bytes 읽기 */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	6039      	str	r1, [r7, #0]
 80016d6:	71fb      	strb	r3, [r7, #7]
 80016d8:	4613      	mov	r3, r2
 80016da:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 80016dc:	2200      	movs	r2, #0
 80016de:	2140      	movs	r1, #64	; 0x40
 80016e0:	480a      	ldr	r0, [pc, #40]	; (800170c <MCP2515_ReadRxSequence+0x40>)
 80016e2:	f003 fcb1 	bl	8005048 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f000 f87b 	bl	80017e4 <SPI_Tx>
  SPI_RxBuffer(data, length);
 80016ee:	79bb      	ldrb	r3, [r7, #6]
 80016f0:	4619      	mov	r1, r3
 80016f2:	6838      	ldr	r0, [r7, #0]
 80016f4:	f000 f8ac 	bl	8001850 <SPI_RxBuffer>

  MCP2515_CS_HIGH();
 80016f8:	2201      	movs	r2, #1
 80016fa:	2140      	movs	r1, #64	; 0x40
 80016fc:	4803      	ldr	r0, [pc, #12]	; (800170c <MCP2515_ReadRxSequence+0x40>)
 80016fe:	f003 fca3 	bl	8005048 <HAL_GPIO_WritePin>
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40021400 	.word	0x40021400

08001710 <MCP2515_WriteByte>:

/* 1바이트 쓰기 */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	460a      	mov	r2, r1
 800171a:	71fb      	strb	r3, [r7, #7]
 800171c:	4613      	mov	r3, r2
 800171e:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8001720:	2200      	movs	r2, #0
 8001722:	2140      	movs	r1, #64	; 0x40
 8001724:	480b      	ldr	r0, [pc, #44]	; (8001754 <MCP2515_WriteByte+0x44>)
 8001726:	f003 fc8f 	bl	8005048 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 800172a:	2002      	movs	r0, #2
 800172c:	f000 f85a 	bl	80017e4 <SPI_Tx>
  SPI_Tx(address);
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	4618      	mov	r0, r3
 8001734:	f000 f856 	bl	80017e4 <SPI_Tx>
  SPI_Tx(data);
 8001738:	79bb      	ldrb	r3, [r7, #6]
 800173a:	4618      	mov	r0, r3
 800173c:	f000 f852 	bl	80017e4 <SPI_Tx>

  MCP2515_CS_HIGH();
 8001740:	2201      	movs	r2, #1
 8001742:	2140      	movs	r1, #64	; 0x40
 8001744:	4803      	ldr	r0, [pc, #12]	; (8001754 <MCP2515_WriteByte+0x44>)
 8001746:	f003 fc7f 	bl	8005048 <HAL_GPIO_WritePin>
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40021400 	.word	0x40021400

08001758 <MCP2515_WriteByteSequence>:

/* Sequential Bytes 쓰기 */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	603a      	str	r2, [r7, #0]
 8001762:	71fb      	strb	r3, [r7, #7]
 8001764:	460b      	mov	r3, r1
 8001766:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8001768:	2200      	movs	r2, #0
 800176a:	2140      	movs	r1, #64	; 0x40
 800176c:	480e      	ldr	r0, [pc, #56]	; (80017a8 <MCP2515_WriteByteSequence+0x50>)
 800176e:	f003 fc6b 	bl	8005048 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 8001772:	2002      	movs	r0, #2
 8001774:	f000 f836 	bl	80017e4 <SPI_Tx>
  SPI_Tx(startAddress);
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	4618      	mov	r0, r3
 800177c:	f000 f832 	bl	80017e4 <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 8001780:	79ba      	ldrb	r2, [r7, #6]
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	b2db      	uxtb	r3, r3
 8001788:	3301      	adds	r3, #1
 800178a:	b2db      	uxtb	r3, r3
 800178c:	4619      	mov	r1, r3
 800178e:	6838      	ldr	r0, [r7, #0]
 8001790:	f000 f83a 	bl	8001808 <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 8001794:	2201      	movs	r2, #1
 8001796:	2140      	movs	r1, #64	; 0x40
 8001798:	4803      	ldr	r0, [pc, #12]	; (80017a8 <MCP2515_WriteByteSequence+0x50>)
 800179a:	f003 fc55 	bl	8005048 <HAL_GPIO_WritePin>
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40021400 	.word	0x40021400

080017ac <MCP2515_GetRxStatus>:
  return retVal;
}

/* MCP2515 RxStatus 레지스터 확인 */
uint8_t MCP2515_GetRxStatus(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 80017b2:	2200      	movs	r2, #0
 80017b4:	2140      	movs	r1, #64	; 0x40
 80017b6:	480a      	ldr	r0, [pc, #40]	; (80017e0 <MCP2515_GetRxStatus+0x34>)
 80017b8:	f003 fc46 	bl	8005048 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_RX_STATUS);
 80017bc:	20b0      	movs	r0, #176	; 0xb0
 80017be:	f000 f811 	bl	80017e4 <SPI_Tx>
  retVal = SPI_Rx();
 80017c2:	f000 f835 	bl	8001830 <SPI_Rx>
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 80017ca:	2201      	movs	r2, #1
 80017cc:	2140      	movs	r1, #64	; 0x40
 80017ce:	4804      	ldr	r0, [pc, #16]	; (80017e0 <MCP2515_GetRxStatus+0x34>)
 80017d0:	f003 fc3a 	bl	8005048 <HAL_GPIO_WritePin>

  return retVal;
 80017d4:	79fb      	ldrb	r3, [r7, #7]
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40021400 	.word	0x40021400

080017e4 <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx Wrapper 함수 */
static void SPI_Tx(uint8_t data)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 80017ee:	1df9      	adds	r1, r7, #7
 80017f0:	230a      	movs	r3, #10
 80017f2:	2201      	movs	r2, #1
 80017f4:	4803      	ldr	r0, [pc, #12]	; (8001804 <SPI_Tx+0x20>)
 80017f6:	f004 fa16 	bl	8005c26 <HAL_SPI_Transmit>
}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000460 	.word	0x20000460

08001808 <SPI_TxBuffer>:

/* SPI Tx Wrapper 함수 */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	460b      	mov	r3, r1
 8001812:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8001814:	78fb      	ldrb	r3, [r7, #3]
 8001816:	b29a      	uxth	r2, r3
 8001818:	230a      	movs	r3, #10
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	4803      	ldr	r0, [pc, #12]	; (800182c <SPI_TxBuffer+0x24>)
 800181e:	f004 fa02 	bl	8005c26 <HAL_SPI_Transmit>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000460 	.word	0x20000460

08001830 <SPI_Rx>:

/* SPI Rx Wrapper 함수 */
static uint8_t SPI_Rx(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8001836:	1df9      	adds	r1, r7, #7
 8001838:	230a      	movs	r3, #10
 800183a:	2201      	movs	r2, #1
 800183c:	4803      	ldr	r0, [pc, #12]	; (800184c <SPI_Rx+0x1c>)
 800183e:	f004 fb2e 	bl	8005e9e <HAL_SPI_Receive>
  return retVal;
 8001842:	79fb      	ldrb	r3, [r7, #7]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000460 	.word	0x20000460

08001850 <SPI_RxBuffer>:

/* SPI Rx Wrapper 함수 */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 800185c:	78fb      	ldrb	r3, [r7, #3]
 800185e:	b29a      	uxth	r2, r3
 8001860:	230a      	movs	r3, #10
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	4803      	ldr	r0, [pc, #12]	; (8001874 <SPI_RxBuffer+0x24>)
 8001866:	f004 fb1a 	bl	8005e9e <HAL_SPI_Receive>
}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000460 	.word	0x20000460

08001878 <handleData0Buttons>:

#include "ds4.h"

int data0_buttons[] = {L1_KANAN_BIT, R1_BAWAH_BIT, L3_ATAS_BIT, R3_KIRI_BIT, SHARE_KOTAK_BIT, OPTIONS_SILANG_BIT, PS_BULAT_BIT, TPAD_SEGITIGA_BIT};

void handleData0Buttons(uint8_t data0) {
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
	   // Set nilai awal
	    kanan = 0;
 8001882:	4b33      	ldr	r3, [pc, #204]	; (8001950 <handleData0Buttons+0xd8>)
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
	    bawah = 0;
 8001888:	4b32      	ldr	r3, [pc, #200]	; (8001954 <handleData0Buttons+0xdc>)
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
	    atas = 0;
 800188e:	4b32      	ldr	r3, [pc, #200]	; (8001958 <handleData0Buttons+0xe0>)
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
	    kiri = 0;
 8001894:	4b31      	ldr	r3, [pc, #196]	; (800195c <handleData0Buttons+0xe4>)
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
	    kotak = 0;
 800189a:	4b31      	ldr	r3, [pc, #196]	; (8001960 <handleData0Buttons+0xe8>)
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
	    silang = 0;
 80018a0:	4b30      	ldr	r3, [pc, #192]	; (8001964 <handleData0Buttons+0xec>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
	    bulat = 0;
 80018a6:	4b30      	ldr	r3, [pc, #192]	; (8001968 <handleData0Buttons+0xf0>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
	    segitiga = 0;
 80018ac:	4b2f      	ldr	r3, [pc, #188]	; (800196c <handleData0Buttons+0xf4>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < sizeof(data0_buttons) / sizeof(data0_buttons[0]); i++) {
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	e040      	b.n	800193a <handleData0Buttons+0xc2>
        if (data0 & data0_buttons[i]) {
 80018b8:	79fa      	ldrb	r2, [r7, #7]
 80018ba:	492d      	ldr	r1, [pc, #180]	; (8001970 <handleData0Buttons+0xf8>)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80018c2:	4013      	ands	r3, r2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d035      	beq.n	8001934 <handleData0Buttons+0xbc>
            // Tombol aktif, lakukan sesuatu
            switch (i) {
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2b07      	cmp	r3, #7
 80018cc:	d832      	bhi.n	8001934 <handleData0Buttons+0xbc>
 80018ce:	a201      	add	r2, pc, #4	; (adr r2, 80018d4 <handleData0Buttons+0x5c>)
 80018d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018d4:	080018f5 	.word	0x080018f5
 80018d8:	080018fd 	.word	0x080018fd
 80018dc:	08001905 	.word	0x08001905
 80018e0:	0800190d 	.word	0x0800190d
 80018e4:	08001915 	.word	0x08001915
 80018e8:	0800191d 	.word	0x0800191d
 80018ec:	08001925 	.word	0x08001925
 80018f0:	0800192d 	.word	0x0800192d
                case 0: kanan = 1; break;
 80018f4:	4b16      	ldr	r3, [pc, #88]	; (8001950 <handleData0Buttons+0xd8>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	e01b      	b.n	8001934 <handleData0Buttons+0xbc>
                case 1: bawah = 1; break;
 80018fc:	4b15      	ldr	r3, [pc, #84]	; (8001954 <handleData0Buttons+0xdc>)
 80018fe:	2201      	movs	r2, #1
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	e017      	b.n	8001934 <handleData0Buttons+0xbc>
                case 2: atas = 1; break;
 8001904:	4b14      	ldr	r3, [pc, #80]	; (8001958 <handleData0Buttons+0xe0>)
 8001906:	2201      	movs	r2, #1
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	e013      	b.n	8001934 <handleData0Buttons+0xbc>
                case 3: kiri = 1; break;
 800190c:	4b13      	ldr	r3, [pc, #76]	; (800195c <handleData0Buttons+0xe4>)
 800190e:	2201      	movs	r2, #1
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	e00f      	b.n	8001934 <handleData0Buttons+0xbc>
                case 4: kotak = 1; break;
 8001914:	4b12      	ldr	r3, [pc, #72]	; (8001960 <handleData0Buttons+0xe8>)
 8001916:	2201      	movs	r2, #1
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	e00b      	b.n	8001934 <handleData0Buttons+0xbc>
                case 5: silang = 1; break;
 800191c:	4b11      	ldr	r3, [pc, #68]	; (8001964 <handleData0Buttons+0xec>)
 800191e:	2201      	movs	r2, #1
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	e007      	b.n	8001934 <handleData0Buttons+0xbc>
                case 6: bulat = 1; break;
 8001924:	4b10      	ldr	r3, [pc, #64]	; (8001968 <handleData0Buttons+0xf0>)
 8001926:	2201      	movs	r2, #1
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	e003      	b.n	8001934 <handleData0Buttons+0xbc>
                case 7: segitiga = 1; break;
 800192c:	4b0f      	ldr	r3, [pc, #60]	; (800196c <handleData0Buttons+0xf4>)
 800192e:	2201      	movs	r2, #1
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	bf00      	nop
    for (int i = 0; i < sizeof(data0_buttons) / sizeof(data0_buttons[0]); i++) {
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	3301      	adds	r3, #1
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2b07      	cmp	r3, #7
 800193e:	d9bb      	bls.n	80018b8 <handleData0Buttons+0x40>
            }
        }
    }
}
 8001940:	bf00      	nop
 8001942:	bf00      	nop
 8001944:	3714      	adds	r7, #20
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	20000708 	.word	0x20000708
 8001954:	20000704 	.word	0x20000704
 8001958:	20000700 	.word	0x20000700
 800195c:	2000070c 	.word	0x2000070c
 8001960:	20000710 	.word	0x20000710
 8001964:	20000714 	.word	0x20000714
 8001968:	20000718 	.word	0x20000718
 800196c:	2000071c 	.word	0x2000071c
 8001970:	20000000 	.word	0x20000000

08001974 <handleData1Buttons>:

void handleData1Buttons(uint8_t data1) {
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	71fb      	strb	r3, [r7, #7]
	// Set nilai awal
	    l1 = 0;
 800197e:	4b33      	ldr	r3, [pc, #204]	; (8001a4c <handleData1Buttons+0xd8>)
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
	    r1 = 0;
 8001984:	4b32      	ldr	r3, [pc, #200]	; (8001a50 <handleData1Buttons+0xdc>)
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
	    l3 = 0;
 800198a:	4b32      	ldr	r3, [pc, #200]	; (8001a54 <handleData1Buttons+0xe0>)
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
	    r3 = 0;
 8001990:	4b31      	ldr	r3, [pc, #196]	; (8001a58 <handleData1Buttons+0xe4>)
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
	    share = 0;
 8001996:	4b31      	ldr	r3, [pc, #196]	; (8001a5c <handleData1Buttons+0xe8>)
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
	    options = 0;
 800199c:	4b30      	ldr	r3, [pc, #192]	; (8001a60 <handleData1Buttons+0xec>)
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
	    ps = 0;
 80019a2:	4b30      	ldr	r3, [pc, #192]	; (8001a64 <handleData1Buttons+0xf0>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
	    tpad = 0;
 80019a8:	4b2f      	ldr	r3, [pc, #188]	; (8001a68 <handleData1Buttons+0xf4>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < sizeof(data0_buttons) / sizeof(data0_buttons[0]); i++) {
 80019ae:	2300      	movs	r3, #0
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	e040      	b.n	8001a36 <handleData1Buttons+0xc2>
        if (data1 & data0_buttons[i]) {
 80019b4:	79fa      	ldrb	r2, [r7, #7]
 80019b6:	492d      	ldr	r1, [pc, #180]	; (8001a6c <handleData1Buttons+0xf8>)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80019be:	4013      	ands	r3, r2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d035      	beq.n	8001a30 <handleData1Buttons+0xbc>
            // Tombol aktif, lakukan sesuatu
            switch (i) {
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2b07      	cmp	r3, #7
 80019c8:	d832      	bhi.n	8001a30 <handleData1Buttons+0xbc>
 80019ca:	a201      	add	r2, pc, #4	; (adr r2, 80019d0 <handleData1Buttons+0x5c>)
 80019cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d0:	080019f1 	.word	0x080019f1
 80019d4:	080019f9 	.word	0x080019f9
 80019d8:	08001a01 	.word	0x08001a01
 80019dc:	08001a09 	.word	0x08001a09
 80019e0:	08001a11 	.word	0x08001a11
 80019e4:	08001a19 	.word	0x08001a19
 80019e8:	08001a21 	.word	0x08001a21
 80019ec:	08001a29 	.word	0x08001a29
                case 0: l1 = 1; break;
 80019f0:	4b16      	ldr	r3, [pc, #88]	; (8001a4c <handleData1Buttons+0xd8>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	e01b      	b.n	8001a30 <handleData1Buttons+0xbc>
                case 1: r1 = 1; break;
 80019f8:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <handleData1Buttons+0xdc>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	e017      	b.n	8001a30 <handleData1Buttons+0xbc>
                case 2: l3 = 1; break;
 8001a00:	4b14      	ldr	r3, [pc, #80]	; (8001a54 <handleData1Buttons+0xe0>)
 8001a02:	2201      	movs	r2, #1
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	e013      	b.n	8001a30 <handleData1Buttons+0xbc>
                case 3: r3 = 1; break;
 8001a08:	4b13      	ldr	r3, [pc, #76]	; (8001a58 <handleData1Buttons+0xe4>)
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	e00f      	b.n	8001a30 <handleData1Buttons+0xbc>
                case 4: share = 1; break;
 8001a10:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <handleData1Buttons+0xe8>)
 8001a12:	2201      	movs	r2, #1
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	e00b      	b.n	8001a30 <handleData1Buttons+0xbc>
                case 5: options = 1; break;
 8001a18:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <handleData1Buttons+0xec>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	e007      	b.n	8001a30 <handleData1Buttons+0xbc>
                case 6: ps = 1; break;
 8001a20:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <handleData1Buttons+0xf0>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	e003      	b.n	8001a30 <handleData1Buttons+0xbc>
                case 7: tpad = 1; break;
 8001a28:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <handleData1Buttons+0xf4>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	bf00      	nop
    for (int i = 0; i < sizeof(data0_buttons) / sizeof(data0_buttons[0]); i++) {
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	3301      	adds	r3, #1
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2b07      	cmp	r3, #7
 8001a3a:	d9bb      	bls.n	80019b4 <handleData1Buttons+0x40>
            }
        }
    }
}
 8001a3c:	bf00      	nop
 8001a3e:	bf00      	nop
 8001a40:	3714      	adds	r7, #20
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	20000720 	.word	0x20000720
 8001a50:	20000724 	.word	0x20000724
 8001a54:	20000728 	.word	0x20000728
 8001a58:	2000072c 	.word	0x2000072c
 8001a5c:	20000730 	.word	0x20000730
 8001a60:	20000734 	.word	0x20000734
 8001a64:	20000738 	.word	0x20000738
 8001a68:	2000073c 	.word	0x2000073c
 8001a6c:	20000000 	.word	0x20000000

08001a70 <ds4>:

void ds4(){
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
	if (CANSPI_Receive(&rxMessage)){
 8001a74:	4819      	ldr	r0, [pc, #100]	; (8001adc <ds4+0x6c>)
 8001a76:	f7ff fcd2 	bl	800141e <CANSPI_Receive>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d02b      	beq.n	8001ad8 <ds4+0x68>
		if(rxMessage.frame.id == 0x36){
 8001a80:	4b16      	ldr	r3, [pc, #88]	; (8001adc <ds4+0x6c>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	2b36      	cmp	r3, #54	; 0x36
 8001a86:	d127      	bne.n	8001ad8 <ds4+0x68>
			handleData0Buttons(rxMessage.frame.data0);
 8001a88:	4b14      	ldr	r3, [pc, #80]	; (8001adc <ds4+0x6c>)
 8001a8a:	7a5b      	ldrb	r3, [r3, #9]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff fef3 	bl	8001878 <handleData0Buttons>
			handleData1Buttons(rxMessage.frame.data1);
 8001a92:	4b12      	ldr	r3, [pc, #72]	; (8001adc <ds4+0x6c>)
 8001a94:	7a9b      	ldrb	r3, [r3, #10]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff ff6c 	bl	8001974 <handleData1Buttons>
			l2 = rxMessage.frame.data2;
 8001a9c:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <ds4+0x6c>)
 8001a9e:	7adb      	ldrb	r3, [r3, #11]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <ds4+0x70>)
 8001aa4:	601a      	str	r2, [r3, #0]
			r2 = rxMessage.frame.data3;
 8001aa6:	4b0d      	ldr	r3, [pc, #52]	; (8001adc <ds4+0x6c>)
 8001aa8:	7b1b      	ldrb	r3, [r3, #12]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	4b0d      	ldr	r3, [pc, #52]	; (8001ae4 <ds4+0x74>)
 8001aae:	601a      	str	r2, [r3, #0]
			lx = rxMessage.frame.data4;
 8001ab0:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <ds4+0x6c>)
 8001ab2:	7b5b      	ldrb	r3, [r3, #13]
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <ds4+0x78>)
 8001ab8:	601a      	str	r2, [r3, #0]
			lxs = rxMessage.frame.data5;
 8001aba:	4b08      	ldr	r3, [pc, #32]	; (8001adc <ds4+0x6c>)
 8001abc:	7b9b      	ldrb	r3, [r3, #14]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	4b0a      	ldr	r3, [pc, #40]	; (8001aec <ds4+0x7c>)
 8001ac2:	601a      	str	r2, [r3, #0]
			lys = rxMessage.frame.data6;
 8001ac4:	4b05      	ldr	r3, [pc, #20]	; (8001adc <ds4+0x6c>)
 8001ac6:	7bdb      	ldrb	r3, [r3, #15]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <ds4+0x80>)
 8001acc:	601a      	str	r2, [r3, #0]
			ly = rxMessage.frame.data7;
 8001ace:	4b03      	ldr	r3, [pc, #12]	; (8001adc <ds4+0x6c>)
 8001ad0:	7c1b      	ldrb	r3, [r3, #16]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	4b07      	ldr	r3, [pc, #28]	; (8001af4 <ds4+0x84>)
 8001ad6:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001ad8:	bf00      	nop
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	200007e4 	.word	0x200007e4
 8001ae0:	20000748 	.word	0x20000748
 8001ae4:	2000074c 	.word	0x2000074c
 8001ae8:	20000740 	.word	0x20000740
 8001aec:	20000750 	.word	0x20000750
 8001af0:	20000754 	.word	0x20000754
 8001af4:	20000744 	.word	0x20000744

08001af8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4a07      	ldr	r2, [pc, #28]	; (8001b24 <vApplicationGetIdleTaskMemory+0x2c>)
 8001b08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	4a06      	ldr	r2, [pc, #24]	; (8001b28 <vApplicationGetIdleTaskMemory+0x30>)
 8001b0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2280      	movs	r2, #128	; 0x80
 8001b14:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001b16:	bf00      	nop
 8001b18:	3714      	adds	r7, #20
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	200001c0 	.word	0x200001c0
 8001b28:	20000260 	.word	0x20000260

08001b2c <map>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uCAN_MSG txMessage;
uCAN_MSG rxMessage;

int map(int value, int fromLow, int fromHigh, int toLow, int toHigh) {//map nilai
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
 8001b38:	603b      	str	r3, [r7, #0]
    return (int) (value - fromLow) * (toHigh - toLow) / (fromHigh - fromLow) + toLow;
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	69b9      	ldr	r1, [r7, #24]
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	1a8a      	subs	r2, r1, r2
 8001b46:	fb03 f202 	mul.w	r2, r3, r2
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	1acb      	subs	r3, r1, r3
 8001b50:	fb92 f2f3 	sdiv	r2, r2, r3
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	4413      	add	r3, r2
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <mode_padi>:

int _write(int file, char *ptr, int len){ //buat printf
	HAL_UART_Transmit_IT(&huart3, (uint8_t*)ptr, len);
	return len;
}
void mode_padi(){
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
	lsflag_3=HAL_GPIO_ReadPin(LS_3_GPIO_Port, LS_3_Pin);
 8001b68:	2120      	movs	r1, #32
 8001b6a:	489d      	ldr	r0, [pc, #628]	; (8001de0 <mode_padi+0x27c>)
 8001b6c:	f003 fa54 	bl	8005018 <HAL_GPIO_ReadPin>
 8001b70:	4603      	mov	r3, r0
 8001b72:	461a      	mov	r2, r3
 8001b74:	4b9b      	ldr	r3, [pc, #620]	; (8001de4 <mode_padi+0x280>)
 8001b76:	601a      	str	r2, [r3, #0]
	lsflag_4=HAL_GPIO_ReadPin(LS_4_GPIO_Port, LS_4_Pin);
 8001b78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b7c:	489a      	ldr	r0, [pc, #616]	; (8001de8 <mode_padi+0x284>)
 8001b7e:	f003 fa4b 	bl	8005018 <HAL_GPIO_ReadPin>
 8001b82:	4603      	mov	r3, r0
 8001b84:	461a      	mov	r2, r3
 8001b86:	4b99      	ldr	r3, [pc, #612]	; (8001dec <mode_padi+0x288>)
 8001b88:	601a      	str	r2, [r3, #0]
	lsflag_6=HAL_GPIO_ReadPin(LS_6_GPIO_Port, LS_6_Pin);
 8001b8a:	2180      	movs	r1, #128	; 0x80
 8001b8c:	4896      	ldr	r0, [pc, #600]	; (8001de8 <mode_padi+0x284>)
 8001b8e:	f003 fa43 	bl	8005018 <HAL_GPIO_ReadPin>
 8001b92:	4603      	mov	r3, r0
 8001b94:	461a      	mov	r2, r3
 8001b96:	4b96      	ldr	r3, [pc, #600]	; (8001df0 <mode_padi+0x28c>)
 8001b98:	601a      	str	r2, [r3, #0]
	lsflag_7=HAL_GPIO_ReadPin(LS_7_GPIO_Port, LS_7_Pin);
 8001b9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b9e:	4890      	ldr	r0, [pc, #576]	; (8001de0 <mode_padi+0x27c>)
 8001ba0:	f003 fa3a 	bl	8005018 <HAL_GPIO_ReadPin>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	4b92      	ldr	r3, [pc, #584]	; (8001df4 <mode_padi+0x290>)
 8001baa:	601a      	str	r2, [r3, #0]
	p4 = HAL_GPIO_ReadPin(PISTON_D_GPIO_Port, PISTON_D_Pin);
 8001bac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bb0:	4891      	ldr	r0, [pc, #580]	; (8001df8 <mode_padi+0x294>)
 8001bb2:	f003 fa31 	bl	8005018 <HAL_GPIO_ReadPin>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	461a      	mov	r2, r3
 8001bba:	4b90      	ldr	r3, [pc, #576]	; (8001dfc <mode_padi+0x298>)
 8001bbc:	601a      	str	r2, [r3, #0]
	p5 = HAL_GPIO_ReadPin(PISTON_PADI_GPIO_Port, PISTON_PADI_Pin);
 8001bbe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bc2:	488d      	ldr	r0, [pc, #564]	; (8001df8 <mode_padi+0x294>)
 8001bc4:	f003 fa28 	bl	8005018 <HAL_GPIO_ReadPin>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	461a      	mov	r2, r3
 8001bcc:	4b8c      	ldr	r3, [pc, #560]	; (8001e00 <mode_padi+0x29c>)
 8001bce:	601a      	str	r2, [r3, #0]
	if(l==-1){//kondisi awal masuk mode padi setelah kembali dari mode bola
 8001bd0:	4b8c      	ldr	r3, [pc, #560]	; (8001e04 <mode_padi+0x2a0>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd8:	d114      	bne.n	8001c04 <mode_padi+0xa0>
		motor_drive(&MBola, 1, 800);
 8001bda:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001bde:	2101      	movs	r1, #1
 8001be0:	4889      	ldr	r0, [pc, #548]	; (8001e08 <mode_padi+0x2a4>)
 8001be2:	f002 f92b 	bl	8003e3c <motor_drive>
		if(lsflag_1==1){
 8001be6:	4b89      	ldr	r3, [pc, #548]	; (8001e0c <mode_padi+0x2a8>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d10a      	bne.n	8001c04 <mode_padi+0xa0>
			motor_drive(&MBola, 0, 0);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	4885      	ldr	r0, [pc, #532]	; (8001e08 <mode_padi+0x2a4>)
 8001bf4:	f002 f922 	bl	8003e3c <motor_drive>
			lsflag_2=0;
 8001bf8:	4b85      	ldr	r3, [pc, #532]	; (8001e10 <mode_padi+0x2ac>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
			l=1;
 8001bfe:	4b81      	ldr	r3, [pc, #516]	; (8001e04 <mode_padi+0x2a0>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	601a      	str	r2, [r3, #0]
		}
	}
	if (kanan==1){//nutup manual 1, buka -1
 8001c04:	4b83      	ldr	r3, [pc, #524]	; (8001e14 <mode_padi+0x2b0>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d109      	bne.n	8001c20 <mode_padi+0xbc>
		motor_drive(&MExtendRight, 1, 750);//kanan 1
 8001c0c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001c10:	2101      	movs	r1, #1
 8001c12:	4881      	ldr	r0, [pc, #516]	; (8001e18 <mode_padi+0x2b4>)
 8001c14:	f002 f912 	bl	8003e3c <motor_drive>
		lsflag_7=1;
 8001c18:	4b76      	ldr	r3, [pc, #472]	; (8001df4 <mode_padi+0x290>)
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	e004      	b.n	8001c2a <mode_padi+0xc6>
	}
	else{
		motor_drive(&MExtendRight, 1, 0);
 8001c20:	2200      	movs	r2, #0
 8001c22:	2101      	movs	r1, #1
 8001c24:	487c      	ldr	r0, [pc, #496]	; (8001e18 <mode_padi+0x2b4>)
 8001c26:	f002 f909 	bl	8003e3c <motor_drive>
	}
	if (kiri==1){//nutup manual -1, buka 1
 8001c2a:	4b7c      	ldr	r3, [pc, #496]	; (8001e1c <mode_padi+0x2b8>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d10a      	bne.n	8001c48 <mode_padi+0xe4>
		motor_drive(&MExtendLeft, -1, 750);//kiri nutup -1
 8001c32:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001c36:	f04f 31ff 	mov.w	r1, #4294967295
 8001c3a:	4879      	ldr	r0, [pc, #484]	; (8001e20 <mode_padi+0x2bc>)
 8001c3c:	f002 f8fe 	bl	8003e3c <motor_drive>
		lsflag_6=1;
 8001c40:	4b6b      	ldr	r3, [pc, #428]	; (8001df0 <mode_padi+0x28c>)
 8001c42:	2201      	movs	r2, #1
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	e004      	b.n	8001c52 <mode_padi+0xee>
	}
	else{
		motor_drive(&MExtendLeft, 1, 0);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	4874      	ldr	r0, [pc, #464]	; (8001e20 <mode_padi+0x2bc>)
 8001c4e:	f002 f8f5 	bl	8003e3c <motor_drive>
	}

	if (atas==1) {//buka(extend) otomatis
 8001c52:	4b74      	ldr	r3, [pc, #464]	; (8001e24 <mode_padi+0x2c0>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d102      	bne.n	8001c60 <mode_padi+0xfc>
		atas1=1;
 8001c5a:	4b73      	ldr	r3, [pc, #460]	; (8001e28 <mode_padi+0x2c4>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]
	}
	if (atas1==1){//buka(extend) otomatis
 8001c60:	4b71      	ldr	r3, [pc, #452]	; (8001e28 <mode_padi+0x2c4>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d12b      	bne.n	8001cc0 <mode_padi+0x15c>
		if (lsflag_7==1){
 8001c68:	4b62      	ldr	r3, [pc, #392]	; (8001df4 <mode_padi+0x290>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d107      	bne.n	8001c80 <mode_padi+0x11c>
			motor_drive(&MExtendRight, -1, 750);//buka
 8001c70:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001c74:	f04f 31ff 	mov.w	r1, #4294967295
 8001c78:	4867      	ldr	r0, [pc, #412]	; (8001e18 <mode_padi+0x2b4>)
 8001c7a:	f002 f8df 	bl	8003e3c <motor_drive>
 8001c7e:	e004      	b.n	8001c8a <mode_padi+0x126>
		}
		else {
			motor_drive(&MExtendRight, 0, 0);
 8001c80:	2200      	movs	r2, #0
 8001c82:	2100      	movs	r1, #0
 8001c84:	4864      	ldr	r0, [pc, #400]	; (8001e18 <mode_padi+0x2b4>)
 8001c86:	f002 f8d9 	bl	8003e3c <motor_drive>
		}
		if (lsflag_6==1){
 8001c8a:	4b59      	ldr	r3, [pc, #356]	; (8001df0 <mode_padi+0x28c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d106      	bne.n	8001ca0 <mode_padi+0x13c>
			motor_drive(&MExtendLeft, 1, 750);//buka
 8001c92:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001c96:	2101      	movs	r1, #1
 8001c98:	4861      	ldr	r0, [pc, #388]	; (8001e20 <mode_padi+0x2bc>)
 8001c9a:	f002 f8cf 	bl	8003e3c <motor_drive>
 8001c9e:	e004      	b.n	8001caa <mode_padi+0x146>
		}
		else {
			motor_drive(&MExtendLeft, 0, 0);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	485e      	ldr	r0, [pc, #376]	; (8001e20 <mode_padi+0x2bc>)
 8001ca6:	f002 f8c9 	bl	8003e3c <motor_drive>
		}
		if(lsflag_6 == 0 && lsflag_7 == 0){
 8001caa:	4b51      	ldr	r3, [pc, #324]	; (8001df0 <mode_padi+0x28c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d106      	bne.n	8001cc0 <mode_padi+0x15c>
 8001cb2:	4b50      	ldr	r3, [pc, #320]	; (8001df4 <mode_padi+0x290>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d102      	bne.n	8001cc0 <mode_padi+0x15c>
			atas1=0;
 8001cba:	4b5b      	ldr	r3, [pc, #364]	; (8001e28 <mode_padi+0x2c4>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
		}
	}

	if (bawah==1){//reset buka oto, reset sequence padi
 8001cc0:	4b5a      	ldr	r3, [pc, #360]	; (8001e2c <mode_padi+0x2c8>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d108      	bne.n	8001cda <mode_padi+0x176>
		atas1=0;
 8001cc8:	4b57      	ldr	r3, [pc, #348]	; (8001e28 <mode_padi+0x2c4>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
		loopPadi=0;
 8001cce:	4b58      	ldr	r3, [pc, #352]	; (8001e30 <mode_padi+0x2cc>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
		stepPadi=0;
 8001cd4:	4b57      	ldr	r3, [pc, #348]	; (8001e34 <mode_padi+0x2d0>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
	}

	if (kotak==1){//japit 4 padi
 8001cda:	4b57      	ldr	r3, [pc, #348]	; (8001e38 <mode_padi+0x2d4>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d11c      	bne.n	8001d1c <mode_padi+0x1b8>
		if(currentTick-nowTick>200){
 8001ce2:	4b56      	ldr	r3, [pc, #344]	; (8001e3c <mode_padi+0x2d8>)
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	4b56      	ldr	r3, [pc, #344]	; (8001e40 <mode_padi+0x2dc>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2bc8      	cmp	r3, #200	; 0xc8
 8001cee:	d93e      	bls.n	8001d6e <mode_padi+0x20a>
			HAL_GPIO_TogglePin(PISTON_A_GPIO_Port, PISTON_A_Pin);
 8001cf0:	2102      	movs	r1, #2
 8001cf2:	4841      	ldr	r0, [pc, #260]	; (8001df8 <mode_padi+0x294>)
 8001cf4:	f003 f9c1 	bl	800507a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(PISTON_B_GPIO_Port, PISTON_B_Pin);
 8001cf8:	2104      	movs	r1, #4
 8001cfa:	483f      	ldr	r0, [pc, #252]	; (8001df8 <mode_padi+0x294>)
 8001cfc:	f003 f9bd 	bl	800507a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(PISTON_C_GPIO_Port, PISTON_C_Pin);
 8001d00:	2104      	movs	r1, #4
 8001d02:	4839      	ldr	r0, [pc, #228]	; (8001de8 <mode_padi+0x284>)
 8001d04:	f003 f9b9 	bl	800507a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(PISTON_D_GPIO_Port, PISTON_D_Pin);
 8001d08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d0c:	483a      	ldr	r0, [pc, #232]	; (8001df8 <mode_padi+0x294>)
 8001d0e:	f003 f9b4 	bl	800507a <HAL_GPIO_TogglePin>
			nowTick = currentTick;
 8001d12:	4b4a      	ldr	r3, [pc, #296]	; (8001e3c <mode_padi+0x2d8>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a4a      	ldr	r2, [pc, #296]	; (8001e40 <mode_padi+0x2dc>)
 8001d18:	6013      	str	r3, [r2, #0]
 8001d1a:	e028      	b.n	8001d6e <mode_padi+0x20a>
		}
	}
	else if (silang==1){//japit padi 1
 8001d1c:	4b49      	ldr	r3, [pc, #292]	; (8001e44 <mode_padi+0x2e0>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d110      	bne.n	8001d46 <mode_padi+0x1e2>
		if(currentTick-nowTick>500){
 8001d24:	4b45      	ldr	r3, [pc, #276]	; (8001e3c <mode_padi+0x2d8>)
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	4b45      	ldr	r3, [pc, #276]	; (8001e40 <mode_padi+0x2dc>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d32:	d91c      	bls.n	8001d6e <mode_padi+0x20a>
			HAL_GPIO_TogglePin(PISTON_A_GPIO_Port, PISTON_A_Pin);
 8001d34:	2102      	movs	r1, #2
 8001d36:	4830      	ldr	r0, [pc, #192]	; (8001df8 <mode_padi+0x294>)
 8001d38:	f003 f99f 	bl	800507a <HAL_GPIO_TogglePin>
			nowTick = currentTick;
 8001d3c:	4b3f      	ldr	r3, [pc, #252]	; (8001e3c <mode_padi+0x2d8>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a3f      	ldr	r2, [pc, #252]	; (8001e40 <mode_padi+0x2dc>)
 8001d42:	6013      	str	r3, [r2, #0]
 8001d44:	e013      	b.n	8001d6e <mode_padi+0x20a>
		}
	}
	else if (bulat==1){//japit padi 2
 8001d46:	4b40      	ldr	r3, [pc, #256]	; (8001e48 <mode_padi+0x2e4>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d10f      	bne.n	8001d6e <mode_padi+0x20a>
		if(currentTick-nowTick>500){
 8001d4e:	4b3b      	ldr	r3, [pc, #236]	; (8001e3c <mode_padi+0x2d8>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	4b3b      	ldr	r3, [pc, #236]	; (8001e40 <mode_padi+0x2dc>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d5c:	d907      	bls.n	8001d6e <mode_padi+0x20a>
			HAL_GPIO_TogglePin(PISTON_B_GPIO_Port, PISTON_B_Pin);
 8001d5e:	2104      	movs	r1, #4
 8001d60:	4825      	ldr	r0, [pc, #148]	; (8001df8 <mode_padi+0x294>)
 8001d62:	f003 f98a 	bl	800507a <HAL_GPIO_TogglePin>
			nowTick = currentTick;
 8001d66:	4b35      	ldr	r3, [pc, #212]	; (8001e3c <mode_padi+0x2d8>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a35      	ldr	r2, [pc, #212]	; (8001e40 <mode_padi+0x2dc>)
 8001d6c:	6013      	str	r3, [r2, #0]
		}
	}
	if (l1==1){//turun lift padi
 8001d6e:	4b37      	ldr	r3, [pc, #220]	; (8001e4c <mode_padi+0x2e8>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d111      	bne.n	8001d9a <mode_padi+0x236>
		if (lsflag_4==1){//turun
 8001d76:	4b1d      	ldr	r3, [pc, #116]	; (8001dec <mode_padi+0x288>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d107      	bne.n	8001d8e <mode_padi+0x22a>
			motor_drive(&MPadi, -1, 1000);
 8001d7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d82:	f04f 31ff 	mov.w	r1, #4294967295
 8001d86:	4832      	ldr	r0, [pc, #200]	; (8001e50 <mode_padi+0x2ec>)
 8001d88:	f002 f858 	bl	8003e3c <motor_drive>
 8001d8c:	e01f      	b.n	8001dce <mode_padi+0x26a>
		}
		else {
			motor_drive(&MPadi, 0 , 0);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2100      	movs	r1, #0
 8001d92:	482f      	ldr	r0, [pc, #188]	; (8001e50 <mode_padi+0x2ec>)
 8001d94:	f002 f852 	bl	8003e3c <motor_drive>
 8001d98:	e019      	b.n	8001dce <mode_padi+0x26a>
		}
	}
	else if (r1==1){//naik lift padi
 8001d9a:	4b2e      	ldr	r3, [pc, #184]	; (8001e54 <mode_padi+0x2f0>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d110      	bne.n	8001dc4 <mode_padi+0x260>
		if (lsflag_3==1){//naik
 8001da2:	4b10      	ldr	r3, [pc, #64]	; (8001de4 <mode_padi+0x280>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d106      	bne.n	8001db8 <mode_padi+0x254>
			motor_drive(&MPadi, 1, 1000);
 8001daa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001dae:	2101      	movs	r1, #1
 8001db0:	4827      	ldr	r0, [pc, #156]	; (8001e50 <mode_padi+0x2ec>)
 8001db2:	f002 f843 	bl	8003e3c <motor_drive>
 8001db6:	e00a      	b.n	8001dce <mode_padi+0x26a>
		}
		else {
			motor_drive(&MPadi, 0 , 0);
 8001db8:	2200      	movs	r2, #0
 8001dba:	2100      	movs	r1, #0
 8001dbc:	4824      	ldr	r0, [pc, #144]	; (8001e50 <mode_padi+0x2ec>)
 8001dbe:	f002 f83d 	bl	8003e3c <motor_drive>
 8001dc2:	e004      	b.n	8001dce <mode_padi+0x26a>
		}
	}
	else{//ketika l1 /r1 tidak ada aktivitas
		motor_drive(&MPadi, 1, 0);
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	4821      	ldr	r0, [pc, #132]	; (8001e50 <mode_padi+0x2ec>)
 8001dca:	f002 f837 	bl	8003e3c <motor_drive>
	}

	if (r3==1){//start zone/ posisi awal tekuk dan bawah nyentuh ls4
 8001dce:	4b22      	ldr	r3, [pc, #136]	; (8001e58 <mode_padi+0x2f4>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d144      	bne.n	8001e60 <mode_padi+0x2fc>
		r3a=1;
 8001dd6:	4b21      	ldr	r3, [pc, #132]	; (8001e5c <mode_padi+0x2f8>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	e0be      	b.n	8001f5c <mode_padi+0x3f8>
 8001dde:	bf00      	nop
 8001de0:	40021800 	.word	0x40021800
 8001de4:	20000794 	.word	0x20000794
 8001de8:	40020c00 	.word	0x40020c00
 8001dec:	20000798 	.word	0x20000798
 8001df0:	200007a0 	.word	0x200007a0
 8001df4:	200007a4 	.word	0x200007a4
 8001df8:	40020800 	.word	0x40020800
 8001dfc:	200007c8 	.word	0x200007c8
 8001e00:	200007cc 	.word	0x200007cc
 8001e04:	2000002c 	.word	0x2000002c
 8001e08:	200000bc 	.word	0x200000bc
 8001e0c:	2000078c 	.word	0x2000078c
 8001e10:	20000790 	.word	0x20000790
 8001e14:	20000708 	.word	0x20000708
 8001e18:	200000ec 	.word	0x200000ec
 8001e1c:	2000070c 	.word	0x2000070c
 8001e20:	200000d4 	.word	0x200000d4
 8001e24:	20000700 	.word	0x20000700
 8001e28:	20000764 	.word	0x20000764
 8001e2c:	20000704 	.word	0x20000704
 8001e30:	200007b4 	.word	0x200007b4
 8001e34:	200007b8 	.word	0x200007b8
 8001e38:	20000710 	.word	0x20000710
 8001e3c:	200007dc 	.word	0x200007dc
 8001e40:	200007e0 	.word	0x200007e0
 8001e44:	20000714 	.word	0x20000714
 8001e48:	20000718 	.word	0x20000718
 8001e4c:	20000720 	.word	0x20000720
 8001e50:	20000104 	.word	0x20000104
 8001e54:	20000724 	.word	0x20000724
 8001e58:	2000072c 	.word	0x2000072c
 8001e5c:	2000076c 	.word	0x2000076c
	}
	else if(r3a==1){//sequence posisi start
 8001e60:	4b97      	ldr	r3, [pc, #604]	; (80020c0 <mode_padi+0x55c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d136      	bne.n	8001ed6 <mode_padi+0x372>
		if(currentTick-nowTick>500){
 8001e68:	4b96      	ldr	r3, [pc, #600]	; (80020c4 <mode_padi+0x560>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	4b96      	ldr	r3, [pc, #600]	; (80020c8 <mode_padi+0x564>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e76:	d908      	bls.n	8001e8a <mode_padi+0x326>
			HAL_GPIO_TogglePin(PISTON_PADI_GPIO_Port, PISTON_PADI_Pin);
 8001e78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e7c:	4893      	ldr	r0, [pc, #588]	; (80020cc <mode_padi+0x568>)
 8001e7e:	f003 f8fc 	bl	800507a <HAL_GPIO_TogglePin>
			nowTick = currentTick;
 8001e82:	4b90      	ldr	r3, [pc, #576]	; (80020c4 <mode_padi+0x560>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a90      	ldr	r2, [pc, #576]	; (80020c8 <mode_padi+0x564>)
 8001e88:	6013      	str	r3, [r2, #0]
		}
		vTaskDelay(300);
 8001e8a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001e8e:	f006 fe77 	bl	8008b80 <vTaskDelay>
		if(p5==1){
 8001e92:	4b8f      	ldr	r3, [pc, #572]	; (80020d0 <mode_padi+0x56c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d109      	bne.n	8001eae <mode_padi+0x34a>
			atas1=1;
 8001e9a:	4b8e      	ldr	r3, [pc, #568]	; (80020d4 <mode_padi+0x570>)
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(PISTON_D_GPIO_Port, PISTON_D_Pin, RESET);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ea6:	4889      	ldr	r0, [pc, #548]	; (80020cc <mode_padi+0x568>)
 8001ea8:	f003 f8ce 	bl	8005048 <HAL_GPIO_WritePin>
 8001eac:	e009      	b.n	8001ec2 <mode_padi+0x35e>
		}
		else if(p5==0){
 8001eae:	4b88      	ldr	r3, [pc, #544]	; (80020d0 <mode_padi+0x56c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d105      	bne.n	8001ec2 <mode_padi+0x35e>
			HAL_GPIO_WritePin(PISTON_D_GPIO_Port, PISTON_D_Pin, SET);
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ebc:	4883      	ldr	r0, [pc, #524]	; (80020cc <mode_padi+0x568>)
 8001ebe:	f003 f8c3 	bl	8005048 <HAL_GPIO_WritePin>
		}
		loopPadi=0;
 8001ec2:	4b85      	ldr	r3, [pc, #532]	; (80020d8 <mode_padi+0x574>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
		stepPadi=0;
 8001ec8:	4b84      	ldr	r3, [pc, #528]	; (80020dc <mode_padi+0x578>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
		r3a=0;
 8001ece:	4b7c      	ldr	r3, [pc, #496]	; (80020c0 <mode_padi+0x55c>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	e042      	b.n	8001f5c <mode_padi+0x3f8>
	}
	else if (share==1){//japit padi 3
 8001ed6:	4b82      	ldr	r3, [pc, #520]	; (80020e0 <mode_padi+0x57c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d110      	bne.n	8001f00 <mode_padi+0x39c>
		if(currentTick-nowTick>500){
 8001ede:	4b79      	ldr	r3, [pc, #484]	; (80020c4 <mode_padi+0x560>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	4b79      	ldr	r3, [pc, #484]	; (80020c8 <mode_padi+0x564>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001eec:	d936      	bls.n	8001f5c <mode_padi+0x3f8>
			HAL_GPIO_TogglePin(PISTON_C_GPIO_Port, PISTON_C_Pin);
 8001eee:	2104      	movs	r1, #4
 8001ef0:	487c      	ldr	r0, [pc, #496]	; (80020e4 <mode_padi+0x580>)
 8001ef2:	f003 f8c2 	bl	800507a <HAL_GPIO_TogglePin>
			nowTick = currentTick;
 8001ef6:	4b73      	ldr	r3, [pc, #460]	; (80020c4 <mode_padi+0x560>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a73      	ldr	r2, [pc, #460]	; (80020c8 <mode_padi+0x564>)
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	e02d      	b.n	8001f5c <mode_padi+0x3f8>
		}
	}
	else if (options==1){//japit padi 4
 8001f00:	4b79      	ldr	r3, [pc, #484]	; (80020e8 <mode_padi+0x584>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d111      	bne.n	8001f2c <mode_padi+0x3c8>
		if(currentTick-nowTick>500){
 8001f08:	4b6e      	ldr	r3, [pc, #440]	; (80020c4 <mode_padi+0x560>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	4b6e      	ldr	r3, [pc, #440]	; (80020c8 <mode_padi+0x564>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f16:	d921      	bls.n	8001f5c <mode_padi+0x3f8>
			HAL_GPIO_TogglePin(PISTON_D_GPIO_Port, PISTON_D_Pin);
 8001f18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f1c:	486b      	ldr	r0, [pc, #428]	; (80020cc <mode_padi+0x568>)
 8001f1e:	f003 f8ac 	bl	800507a <HAL_GPIO_TogglePin>
			nowTick = currentTick;
 8001f22:	4b68      	ldr	r3, [pc, #416]	; (80020c4 <mode_padi+0x560>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a68      	ldr	r2, [pc, #416]	; (80020c8 <mode_padi+0x564>)
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	e017      	b.n	8001f5c <mode_padi+0x3f8>
		}
	}
	else if (tpad==1){//masuk mode sequence semi auto padi
 8001f2c:	4b6f      	ldr	r3, [pc, #444]	; (80020ec <mode_padi+0x588>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d113      	bne.n	8001f5c <mode_padi+0x3f8>
		if(currentTick-nowTick>500){
 8001f34:	4b63      	ldr	r3, [pc, #396]	; (80020c4 <mode_padi+0x560>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	4b63      	ldr	r3, [pc, #396]	; (80020c8 <mode_padi+0x564>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f42:	d908      	bls.n	8001f56 <mode_padi+0x3f2>
			loopPadi+=1;
 8001f44:	4b64      	ldr	r3, [pc, #400]	; (80020d8 <mode_padi+0x574>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	4a63      	ldr	r2, [pc, #396]	; (80020d8 <mode_padi+0x574>)
 8001f4c:	6013      	str	r3, [r2, #0]
			nowTick = currentTick;
 8001f4e:	4b5d      	ldr	r3, [pc, #372]	; (80020c4 <mode_padi+0x560>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a5d      	ldr	r2, [pc, #372]	; (80020c8 <mode_padi+0x564>)
 8001f54:	6013      	str	r3, [r2, #0]
		}
		stepPadi=0;
 8001f56:	4b61      	ldr	r3, [pc, #388]	; (80020dc <mode_padi+0x578>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
	}
	if (loopPadi==1){//sequence semi auto padi
 8001f5c:	4b5e      	ldr	r3, [pc, #376]	; (80020d8 <mode_padi+0x574>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	f040 80eb 	bne.w	800213c <mode_padi+0x5d8>
		if (stepPadi==0) {//posisi awal dibawah
 8001f66:	4b5d      	ldr	r3, [pc, #372]	; (80020dc <mode_padi+0x578>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d114      	bne.n	8001f98 <mode_padi+0x434>
			if (lsflag_4==1){//turun
 8001f6e:	4b60      	ldr	r3, [pc, #384]	; (80020f0 <mode_padi+0x58c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d107      	bne.n	8001f86 <mode_padi+0x422>
				motor_drive(&MPadi, -1, 1000);
 8001f76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f7a:	f04f 31ff 	mov.w	r1, #4294967295
 8001f7e:	485d      	ldr	r0, [pc, #372]	; (80020f4 <mode_padi+0x590>)
 8001f80:	f001 ff5c 	bl	8003e3c <motor_drive>
 8001f84:	e1ac      	b.n	80022e0 <mode_padi+0x77c>
			}
			else {
				motor_drive(&MPadi, 0 , 0);
 8001f86:	2200      	movs	r2, #0
 8001f88:	2100      	movs	r1, #0
 8001f8a:	485a      	ldr	r0, [pc, #360]	; (80020f4 <mode_padi+0x590>)
 8001f8c:	f001 ff56 	bl	8003e3c <motor_drive>
				stepPadi=1;
 8001f90:	4b52      	ldr	r3, [pc, #328]	; (80020dc <mode_padi+0x578>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	e1a3      	b.n	80022e0 <mode_padi+0x77c>
			}
		}
		else if (stepPadi==1) {//cek buka capit padi
 8001f98:	4b50      	ldr	r3, [pc, #320]	; (80020dc <mode_padi+0x578>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	f040 819f 	bne.w	80022e0 <mode_padi+0x77c>
			p1 = HAL_GPIO_ReadPin(PISTON_A_GPIO_Port, PISTON_A_Pin);
 8001fa2:	2102      	movs	r1, #2
 8001fa4:	4849      	ldr	r0, [pc, #292]	; (80020cc <mode_padi+0x568>)
 8001fa6:	f003 f837 	bl	8005018 <HAL_GPIO_ReadPin>
 8001faa:	4603      	mov	r3, r0
 8001fac:	461a      	mov	r2, r3
 8001fae:	4b52      	ldr	r3, [pc, #328]	; (80020f8 <mode_padi+0x594>)
 8001fb0:	601a      	str	r2, [r3, #0]
			p2 = HAL_GPIO_ReadPin(PISTON_B_GPIO_Port, PISTON_B_Pin);
 8001fb2:	2104      	movs	r1, #4
 8001fb4:	4845      	ldr	r0, [pc, #276]	; (80020cc <mode_padi+0x568>)
 8001fb6:	f003 f82f 	bl	8005018 <HAL_GPIO_ReadPin>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	4b4f      	ldr	r3, [pc, #316]	; (80020fc <mode_padi+0x598>)
 8001fc0:	601a      	str	r2, [r3, #0]
			p3 = HAL_GPIO_ReadPin(PISTON_C_GPIO_Port, PISTON_C_Pin);
 8001fc2:	2104      	movs	r1, #4
 8001fc4:	4847      	ldr	r0, [pc, #284]	; (80020e4 <mode_padi+0x580>)
 8001fc6:	f003 f827 	bl	8005018 <HAL_GPIO_ReadPin>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4b4c      	ldr	r3, [pc, #304]	; (8002100 <mode_padi+0x59c>)
 8001fd0:	601a      	str	r2, [r3, #0]
			p4 = HAL_GPIO_ReadPin(PISTON_D_GPIO_Port, PISTON_D_Pin);
 8001fd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fd6:	483d      	ldr	r0, [pc, #244]	; (80020cc <mode_padi+0x568>)
 8001fd8:	f003 f81e 	bl	8005018 <HAL_GPIO_ReadPin>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	461a      	mov	r2, r3
 8001fe0:	4b48      	ldr	r3, [pc, #288]	; (8002104 <mode_padi+0x5a0>)
 8001fe2:	601a      	str	r2, [r3, #0]
			if(p1==1 && p2==1 && p3==1 && p4==1){
 8001fe4:	4b44      	ldr	r3, [pc, #272]	; (80020f8 <mode_padi+0x594>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d129      	bne.n	8002040 <mode_padi+0x4dc>
 8001fec:	4b43      	ldr	r3, [pc, #268]	; (80020fc <mode_padi+0x598>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d125      	bne.n	8002040 <mode_padi+0x4dc>
 8001ff4:	4b42      	ldr	r3, [pc, #264]	; (8002100 <mode_padi+0x59c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d121      	bne.n	8002040 <mode_padi+0x4dc>
 8001ffc:	4b41      	ldr	r3, [pc, #260]	; (8002104 <mode_padi+0x5a0>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d11d      	bne.n	8002040 <mode_padi+0x4dc>
				if(currentTick-nowTick>200){ //ketika ke4 japit posisi tutup
 8002004:	4b2f      	ldr	r3, [pc, #188]	; (80020c4 <mode_padi+0x560>)
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	4b2f      	ldr	r3, [pc, #188]	; (80020c8 <mode_padi+0x564>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2bc8      	cmp	r3, #200	; 0xc8
 8002010:	f240 8166 	bls.w	80022e0 <mode_padi+0x77c>
					HAL_GPIO_TogglePin(PISTON_A_GPIO_Port, PISTON_A_Pin);
 8002014:	2102      	movs	r1, #2
 8002016:	482d      	ldr	r0, [pc, #180]	; (80020cc <mode_padi+0x568>)
 8002018:	f003 f82f 	bl	800507a <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(PISTON_B_GPIO_Port, PISTON_B_Pin);
 800201c:	2104      	movs	r1, #4
 800201e:	482b      	ldr	r0, [pc, #172]	; (80020cc <mode_padi+0x568>)
 8002020:	f003 f82b 	bl	800507a <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(PISTON_C_GPIO_Port, PISTON_C_Pin);
 8002024:	2104      	movs	r1, #4
 8002026:	482f      	ldr	r0, [pc, #188]	; (80020e4 <mode_padi+0x580>)
 8002028:	f003 f827 	bl	800507a <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(PISTON_D_GPIO_Port, PISTON_D_Pin);
 800202c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002030:	4826      	ldr	r0, [pc, #152]	; (80020cc <mode_padi+0x568>)
 8002032:	f003 f822 	bl	800507a <HAL_GPIO_TogglePin>
					nowTick = currentTick;
 8002036:	4b23      	ldr	r3, [pc, #140]	; (80020c4 <mode_padi+0x560>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a23      	ldr	r2, [pc, #140]	; (80020c8 <mode_padi+0x564>)
 800203c:	6013      	str	r3, [r2, #0]
				if(currentTick-nowTick>200){ //ketika ke4 japit posisi tutup
 800203e:	e14f      	b.n	80022e0 <mode_padi+0x77c>
				}
			}
			else if(p1==1){//ketika japit 1 posisi tutup
 8002040:	4b2d      	ldr	r3, [pc, #180]	; (80020f8 <mode_padi+0x594>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d110      	bne.n	800206a <mode_padi+0x506>
				if(currentTick-nowTick>200){
 8002048:	4b1e      	ldr	r3, [pc, #120]	; (80020c4 <mode_padi+0x560>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	4b1e      	ldr	r3, [pc, #120]	; (80020c8 <mode_padi+0x564>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2bc8      	cmp	r3, #200	; 0xc8
 8002054:	f240 8144 	bls.w	80022e0 <mode_padi+0x77c>
					HAL_GPIO_TogglePin(PISTON_A_GPIO_Port, PISTON_A_Pin);
 8002058:	2102      	movs	r1, #2
 800205a:	481c      	ldr	r0, [pc, #112]	; (80020cc <mode_padi+0x568>)
 800205c:	f003 f80d 	bl	800507a <HAL_GPIO_TogglePin>
					nowTick = currentTick;
 8002060:	4b18      	ldr	r3, [pc, #96]	; (80020c4 <mode_padi+0x560>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a18      	ldr	r2, [pc, #96]	; (80020c8 <mode_padi+0x564>)
 8002066:	6013      	str	r3, [r2, #0]
 8002068:	e13a      	b.n	80022e0 <mode_padi+0x77c>
				}
			}
			else if(p2==1){//ketika japit 2 posisi tutup
 800206a:	4b24      	ldr	r3, [pc, #144]	; (80020fc <mode_padi+0x598>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d110      	bne.n	8002094 <mode_padi+0x530>
				if(currentTick-nowTick>200){
 8002072:	4b14      	ldr	r3, [pc, #80]	; (80020c4 <mode_padi+0x560>)
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	4b14      	ldr	r3, [pc, #80]	; (80020c8 <mode_padi+0x564>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2bc8      	cmp	r3, #200	; 0xc8
 800207e:	f240 812f 	bls.w	80022e0 <mode_padi+0x77c>
					HAL_GPIO_TogglePin(PISTON_B_GPIO_Port, PISTON_B_Pin);
 8002082:	2104      	movs	r1, #4
 8002084:	4811      	ldr	r0, [pc, #68]	; (80020cc <mode_padi+0x568>)
 8002086:	f002 fff8 	bl	800507a <HAL_GPIO_TogglePin>
					nowTick = currentTick;
 800208a:	4b0e      	ldr	r3, [pc, #56]	; (80020c4 <mode_padi+0x560>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a0e      	ldr	r2, [pc, #56]	; (80020c8 <mode_padi+0x564>)
 8002090:	6013      	str	r3, [r2, #0]
 8002092:	e125      	b.n	80022e0 <mode_padi+0x77c>
				}
			}
			else if(p3==1){//ketika japit 3 posisi tutup
 8002094:	4b1a      	ldr	r3, [pc, #104]	; (8002100 <mode_padi+0x59c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d135      	bne.n	8002108 <mode_padi+0x5a4>
				if(currentTick-nowTick>200){
 800209c:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <mode_padi+0x560>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <mode_padi+0x564>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2bc8      	cmp	r3, #200	; 0xc8
 80020a8:	f240 811a 	bls.w	80022e0 <mode_padi+0x77c>
					HAL_GPIO_TogglePin(PISTON_C_GPIO_Port, PISTON_C_Pin);
 80020ac:	2104      	movs	r1, #4
 80020ae:	480d      	ldr	r0, [pc, #52]	; (80020e4 <mode_padi+0x580>)
 80020b0:	f002 ffe3 	bl	800507a <HAL_GPIO_TogglePin>
					nowTick = currentTick;
 80020b4:	4b03      	ldr	r3, [pc, #12]	; (80020c4 <mode_padi+0x560>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a03      	ldr	r2, [pc, #12]	; (80020c8 <mode_padi+0x564>)
 80020ba:	6013      	str	r3, [r2, #0]
 80020bc:	e110      	b.n	80022e0 <mode_padi+0x77c>
 80020be:	bf00      	nop
 80020c0:	2000076c 	.word	0x2000076c
 80020c4:	200007dc 	.word	0x200007dc
 80020c8:	200007e0 	.word	0x200007e0
 80020cc:	40020800 	.word	0x40020800
 80020d0:	200007cc 	.word	0x200007cc
 80020d4:	20000764 	.word	0x20000764
 80020d8:	200007b4 	.word	0x200007b4
 80020dc:	200007b8 	.word	0x200007b8
 80020e0:	20000730 	.word	0x20000730
 80020e4:	40020c00 	.word	0x40020c00
 80020e8:	20000734 	.word	0x20000734
 80020ec:	2000073c 	.word	0x2000073c
 80020f0:	20000798 	.word	0x20000798
 80020f4:	20000104 	.word	0x20000104
 80020f8:	200007bc 	.word	0x200007bc
 80020fc:	200007c0 	.word	0x200007c0
 8002100:	200007c4 	.word	0x200007c4
 8002104:	200007c8 	.word	0x200007c8
				}
			}
			else if(p4==1){//ketika japit 4 posisi tutup
 8002108:	4b7e      	ldr	r3, [pc, #504]	; (8002304 <mode_padi+0x7a0>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d111      	bne.n	8002134 <mode_padi+0x5d0>
				if(currentTick-nowTick>200){
 8002110:	4b7d      	ldr	r3, [pc, #500]	; (8002308 <mode_padi+0x7a4>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	4b7d      	ldr	r3, [pc, #500]	; (800230c <mode_padi+0x7a8>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2bc8      	cmp	r3, #200	; 0xc8
 800211c:	f240 80e0 	bls.w	80022e0 <mode_padi+0x77c>
					HAL_GPIO_TogglePin(PISTON_D_GPIO_Port, PISTON_D_Pin);
 8002120:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002124:	487a      	ldr	r0, [pc, #488]	; (8002310 <mode_padi+0x7ac>)
 8002126:	f002 ffa8 	bl	800507a <HAL_GPIO_TogglePin>
					nowTick = currentTick;
 800212a:	4b77      	ldr	r3, [pc, #476]	; (8002308 <mode_padi+0x7a4>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a77      	ldr	r2, [pc, #476]	; (800230c <mode_padi+0x7a8>)
 8002130:	6013      	str	r3, [r2, #0]
 8002132:	e0d5      	b.n	80022e0 <mode_padi+0x77c>
				}
			}
			else {//untuk mengecek ulang kesiapan posisi awal sequence
				stepPadi=0;
 8002134:	4b77      	ldr	r3, [pc, #476]	; (8002314 <mode_padi+0x7b0>)
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	e0d1      	b.n	80022e0 <mode_padi+0x77c>
			}
		}
	}
	else if (loopPadi==2){//langkah 2, ambil 4 padi dan naik
 800213c:	4b76      	ldr	r3, [pc, #472]	; (8002318 <mode_padi+0x7b4>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2b02      	cmp	r3, #2
 8002142:	d125      	bne.n	8002190 <mode_padi+0x62c>
		if(stepPadi==0){
 8002144:	4b73      	ldr	r3, [pc, #460]	; (8002314 <mode_padi+0x7b0>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d108      	bne.n	800215e <mode_padi+0x5fa>
			if(kotak==1){
 800214c:	4b73      	ldr	r3, [pc, #460]	; (800231c <mode_padi+0x7b8>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2b01      	cmp	r3, #1
 8002152:	f040 80c5 	bne.w	80022e0 <mode_padi+0x77c>
				stepPadi=1;
 8002156:	4b6f      	ldr	r3, [pc, #444]	; (8002314 <mode_padi+0x7b0>)
 8002158:	2201      	movs	r2, #1
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	e0c0      	b.n	80022e0 <mode_padi+0x77c>
			}
		}
		else if (stepPadi==1){
 800215e:	4b6d      	ldr	r3, [pc, #436]	; (8002314 <mode_padi+0x7b0>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2b01      	cmp	r3, #1
 8002164:	f040 80bc 	bne.w	80022e0 <mode_padi+0x77c>
			if (lsflag_3==1){//naik
 8002168:	4b6d      	ldr	r3, [pc, #436]	; (8002320 <mode_padi+0x7bc>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d106      	bne.n	800217e <mode_padi+0x61a>
				motor_drive(&MPadi, 1, 1000);
 8002170:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002174:	2101      	movs	r1, #1
 8002176:	486b      	ldr	r0, [pc, #428]	; (8002324 <mode_padi+0x7c0>)
 8002178:	f001 fe60 	bl	8003e3c <motor_drive>
 800217c:	e0b0      	b.n	80022e0 <mode_padi+0x77c>
			}
			else {
				motor_drive(&MPadi, 1 , 0);
 800217e:	2200      	movs	r2, #0
 8002180:	2101      	movs	r1, #1
 8002182:	4868      	ldr	r0, [pc, #416]	; (8002324 <mode_padi+0x7c0>)
 8002184:	f001 fe5a 	bl	8003e3c <motor_drive>
				stepPadi=5;
 8002188:	4b62      	ldr	r3, [pc, #392]	; (8002314 <mode_padi+0x7b0>)
 800218a:	2205      	movs	r2, #5
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	e0a7      	b.n	80022e0 <mode_padi+0x77c>
			}
		}
	}
	else if(loopPadi==3){//turun dan letakkan 2 padi(1 dan 3)
 8002190:	4b61      	ldr	r3, [pc, #388]	; (8002318 <mode_padi+0x7b4>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2b03      	cmp	r3, #3
 8002196:	d140      	bne.n	800221a <mode_padi+0x6b6>
		if(stepPadi==0){
 8002198:	4b5e      	ldr	r3, [pc, #376]	; (8002314 <mode_padi+0x7b0>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d114      	bne.n	80021ca <mode_padi+0x666>
			if (lsflag_4==1){//turun
 80021a0:	4b61      	ldr	r3, [pc, #388]	; (8002328 <mode_padi+0x7c4>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d107      	bne.n	80021b8 <mode_padi+0x654>
				motor_drive(&MPadi, -1, 1000);
 80021a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021ac:	f04f 31ff 	mov.w	r1, #4294967295
 80021b0:	485c      	ldr	r0, [pc, #368]	; (8002324 <mode_padi+0x7c0>)
 80021b2:	f001 fe43 	bl	8003e3c <motor_drive>
 80021b6:	e093      	b.n	80022e0 <mode_padi+0x77c>
			}
			else {
				motor_drive(&MPadi, 0 , 0);
 80021b8:	2200      	movs	r2, #0
 80021ba:	2100      	movs	r1, #0
 80021bc:	4859      	ldr	r0, [pc, #356]	; (8002324 <mode_padi+0x7c0>)
 80021be:	f001 fe3d 	bl	8003e3c <motor_drive>
				stepPadi=1;
 80021c2:	4b54      	ldr	r3, [pc, #336]	; (8002314 <mode_padi+0x7b0>)
 80021c4:	2201      	movs	r2, #1
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	e08a      	b.n	80022e0 <mode_padi+0x77c>
			}
		}
		else if(stepPadi==1){
 80021ca:	4b52      	ldr	r3, [pc, #328]	; (8002314 <mode_padi+0x7b0>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d10b      	bne.n	80021ea <mode_padi+0x686>
				HAL_GPIO_TogglePin(PISTON_A_GPIO_Port, PISTON_A_Pin);
 80021d2:	2102      	movs	r1, #2
 80021d4:	484e      	ldr	r0, [pc, #312]	; (8002310 <mode_padi+0x7ac>)
 80021d6:	f002 ff50 	bl	800507a <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(PISTON_C_GPIO_Port, PISTON_C_Pin);
 80021da:	2104      	movs	r1, #4
 80021dc:	4853      	ldr	r0, [pc, #332]	; (800232c <mode_padi+0x7c8>)
 80021de:	f002 ff4c 	bl	800507a <HAL_GPIO_TogglePin>
			stepPadi=2;
 80021e2:	4b4c      	ldr	r3, [pc, #304]	; (8002314 <mode_padi+0x7b0>)
 80021e4:	2202      	movs	r2, #2
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	e07a      	b.n	80022e0 <mode_padi+0x77c>
		}
		else if (stepPadi==2){
 80021ea:	4b4a      	ldr	r3, [pc, #296]	; (8002314 <mode_padi+0x7b0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d176      	bne.n	80022e0 <mode_padi+0x77c>
			if (lsflag_3==1){//naik
 80021f2:	4b4b      	ldr	r3, [pc, #300]	; (8002320 <mode_padi+0x7bc>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d106      	bne.n	8002208 <mode_padi+0x6a4>
				motor_drive(&MPadi, 1, 1000);
 80021fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021fe:	2101      	movs	r1, #1
 8002200:	4848      	ldr	r0, [pc, #288]	; (8002324 <mode_padi+0x7c0>)
 8002202:	f001 fe1b 	bl	8003e3c <motor_drive>
 8002206:	e06b      	b.n	80022e0 <mode_padi+0x77c>
			}
			else {
				motor_drive(&MPadi, 0 , 0);
 8002208:	2200      	movs	r2, #0
 800220a:	2100      	movs	r1, #0
 800220c:	4845      	ldr	r0, [pc, #276]	; (8002324 <mode_padi+0x7c0>)
 800220e:	f001 fe15 	bl	8003e3c <motor_drive>
				stepPadi=5;
 8002212:	4b40      	ldr	r3, [pc, #256]	; (8002314 <mode_padi+0x7b0>)
 8002214:	2205      	movs	r2, #5
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	e062      	b.n	80022e0 <mode_padi+0x77c>
			}
		}
	}
	else if(loopPadi==4){//turun dan letakkan 2 padi(2 dan 4)
 800221a:	4b3f      	ldr	r3, [pc, #252]	; (8002318 <mode_padi+0x7b4>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2b04      	cmp	r3, #4
 8002220:	d158      	bne.n	80022d4 <mode_padi+0x770>
		if(stepPadi==0){
 8002222:	4b3c      	ldr	r3, [pc, #240]	; (8002314 <mode_padi+0x7b0>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d114      	bne.n	8002254 <mode_padi+0x6f0>
			if (lsflag_4==1){//turun
 800222a:	4b3f      	ldr	r3, [pc, #252]	; (8002328 <mode_padi+0x7c4>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d107      	bne.n	8002242 <mode_padi+0x6de>
				motor_drive(&MPadi, -1, 1000);
 8002232:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002236:	f04f 31ff 	mov.w	r1, #4294967295
 800223a:	483a      	ldr	r0, [pc, #232]	; (8002324 <mode_padi+0x7c0>)
 800223c:	f001 fdfe 	bl	8003e3c <motor_drive>
 8002240:	e04e      	b.n	80022e0 <mode_padi+0x77c>
			}
			else {
				motor_drive(&MPadi, 0 , 0);
 8002242:	2200      	movs	r2, #0
 8002244:	2100      	movs	r1, #0
 8002246:	4837      	ldr	r0, [pc, #220]	; (8002324 <mode_padi+0x7c0>)
 8002248:	f001 fdf8 	bl	8003e3c <motor_drive>
				stepPadi=1;
 800224c:	4b31      	ldr	r3, [pc, #196]	; (8002314 <mode_padi+0x7b0>)
 800224e:	2201      	movs	r2, #1
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	e045      	b.n	80022e0 <mode_padi+0x77c>
			}
		}
		else if(stepPadi==1){
 8002254:	4b2f      	ldr	r3, [pc, #188]	; (8002314 <mode_padi+0x7b0>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d118      	bne.n	800228e <mode_padi+0x72a>
			if(currentTick-nowTick>500){
 800225c:	4b2a      	ldr	r3, [pc, #168]	; (8002308 <mode_padi+0x7a4>)
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	4b2a      	ldr	r3, [pc, #168]	; (800230c <mode_padi+0x7a8>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800226a:	d90c      	bls.n	8002286 <mode_padi+0x722>
				HAL_GPIO_TogglePin(PISTON_B_GPIO_Port, PISTON_B_Pin);
 800226c:	2104      	movs	r1, #4
 800226e:	4828      	ldr	r0, [pc, #160]	; (8002310 <mode_padi+0x7ac>)
 8002270:	f002 ff03 	bl	800507a <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(PISTON_D_GPIO_Port, PISTON_D_Pin);
 8002274:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002278:	4825      	ldr	r0, [pc, #148]	; (8002310 <mode_padi+0x7ac>)
 800227a:	f002 fefe 	bl	800507a <HAL_GPIO_TogglePin>
				nowTick = currentTick;
 800227e:	4b22      	ldr	r3, [pc, #136]	; (8002308 <mode_padi+0x7a4>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a22      	ldr	r2, [pc, #136]	; (800230c <mode_padi+0x7a8>)
 8002284:	6013      	str	r3, [r2, #0]
			}
			stepPadi=2;
 8002286:	4b23      	ldr	r3, [pc, #140]	; (8002314 <mode_padi+0x7b0>)
 8002288:	2202      	movs	r2, #2
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	e028      	b.n	80022e0 <mode_padi+0x77c>
		}
		else if (stepPadi==2){
 800228e:	4b21      	ldr	r3, [pc, #132]	; (8002314 <mode_padi+0x7b0>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2b02      	cmp	r3, #2
 8002294:	d113      	bne.n	80022be <mode_padi+0x75a>
			if (lsflag_3==1){//naik
 8002296:	4b22      	ldr	r3, [pc, #136]	; (8002320 <mode_padi+0x7bc>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d106      	bne.n	80022ac <mode_padi+0x748>
				motor_drive(&MPadi, 1, 1000);
 800229e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022a2:	2101      	movs	r1, #1
 80022a4:	481f      	ldr	r0, [pc, #124]	; (8002324 <mode_padi+0x7c0>)
 80022a6:	f001 fdc9 	bl	8003e3c <motor_drive>
 80022aa:	e019      	b.n	80022e0 <mode_padi+0x77c>
			}
			else {
				motor_drive(&MPadi, 0 , 0);
 80022ac:	2200      	movs	r2, #0
 80022ae:	2100      	movs	r1, #0
 80022b0:	481c      	ldr	r0, [pc, #112]	; (8002324 <mode_padi+0x7c0>)
 80022b2:	f001 fdc3 	bl	8003e3c <motor_drive>
				stepPadi=3;
 80022b6:	4b17      	ldr	r3, [pc, #92]	; (8002314 <mode_padi+0x7b0>)
 80022b8:	2203      	movs	r2, #3
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	e010      	b.n	80022e0 <mode_padi+0x77c>
			}
		}
		else if(stepPadi==3){//sequence selesai
 80022be:	4b15      	ldr	r3, [pc, #84]	; (8002314 <mode_padi+0x7b0>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2b03      	cmp	r3, #3
 80022c4:	d10c      	bne.n	80022e0 <mode_padi+0x77c>
			stepPadi=0;
 80022c6:	4b13      	ldr	r3, [pc, #76]	; (8002314 <mode_padi+0x7b0>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
			loopPadi=0;
 80022cc:	4b12      	ldr	r3, [pc, #72]	; (8002318 <mode_padi+0x7b4>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	e005      	b.n	80022e0 <mode_padi+0x77c>
		}
	}
	else{//sequence selesai
		stepPadi=0;
 80022d4:	4b0f      	ldr	r3, [pc, #60]	; (8002314 <mode_padi+0x7b0>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
		loopPadi=0;
 80022da:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <mode_padi+0x7b4>)
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
	}
	bldc_drive(&roller1, 3000);
 80022e0:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80022e4:	4812      	ldr	r0, [pc, #72]	; (8002330 <mode_padi+0x7cc>)
 80022e6:	f001 fef4 	bl	80040d2 <bldc_drive>
	bldc_drive(&roller2, 3000);
 80022ea:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80022ee:	4811      	ldr	r0, [pc, #68]	; (8002334 <mode_padi+0x7d0>)
 80022f0:	f001 feef 	bl	80040d2 <bldc_drive>
	motor_drive(&MPelontar, 0, 0);
 80022f4:	2200      	movs	r2, #0
 80022f6:	2100      	movs	r1, #0
 80022f8:	480f      	ldr	r0, [pc, #60]	; (8002338 <mode_padi+0x7d4>)
 80022fa:	f001 fd9f 	bl	8003e3c <motor_drive>
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	200007c8 	.word	0x200007c8
 8002308:	200007dc 	.word	0x200007dc
 800230c:	200007e0 	.word	0x200007e0
 8002310:	40020800 	.word	0x40020800
 8002314:	200007b8 	.word	0x200007b8
 8002318:	200007b4 	.word	0x200007b4
 800231c:	20000710 	.word	0x20000710
 8002320:	20000794 	.word	0x20000794
 8002324:	20000104 	.word	0x20000104
 8002328:	20000798 	.word	0x20000798
 800232c:	40020c00 	.word	0x40020c00
 8002330:	20000034 	.word	0x20000034
 8002334:	2000003c 	.word	0x2000003c
 8002338:	200000a4 	.word	0x200000a4

0800233c <mode_bola>:

void mode_bola(){
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
	lsflag_2=HAL_GPIO_ReadPin(LS_2_GPIO_Port, LS_2_Pin);
 8002340:	2101      	movs	r1, #1
 8002342:	488c      	ldr	r0, [pc, #560]	; (8002574 <mode_bola+0x238>)
 8002344:	f002 fe68 	bl	8005018 <HAL_GPIO_ReadPin>
 8002348:	4603      	mov	r3, r0
 800234a:	461a      	mov	r2, r3
 800234c:	4b8a      	ldr	r3, [pc, #552]	; (8002578 <mode_bola+0x23c>)
 800234e:	601a      	str	r2, [r3, #0]
	if (bawah==1) {//pelontar turun
 8002350:	4b8a      	ldr	r3, [pc, #552]	; (800257c <mode_bola+0x240>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d111      	bne.n	800237c <mode_bola+0x40>
		if (lsflag_5==0){//turun
 8002358:	4b89      	ldr	r3, [pc, #548]	; (8002580 <mode_bola+0x244>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d107      	bne.n	8002370 <mode_bola+0x34>
			motor_drive(&MPelontar, -1, 550);
 8002360:	f240 2226 	movw	r2, #550	; 0x226
 8002364:	f04f 31ff 	mov.w	r1, #4294967295
 8002368:	4886      	ldr	r0, [pc, #536]	; (8002584 <mode_bola+0x248>)
 800236a:	f001 fd67 	bl	8003e3c <motor_drive>
 800236e:	e018      	b.n	80023a2 <mode_bola+0x66>
		}
		else {
			motor_drive(&MPelontar, 0 , 0);
 8002370:	2200      	movs	r2, #0
 8002372:	2100      	movs	r1, #0
 8002374:	4883      	ldr	r0, [pc, #524]	; (8002584 <mode_bola+0x248>)
 8002376:	f001 fd61 	bl	8003e3c <motor_drive>
 800237a:	e012      	b.n	80023a2 <mode_bola+0x66>
		}
	}
	else if (atas==1){////pelontar turun
 800237c:	4b82      	ldr	r3, [pc, #520]	; (8002588 <mode_bola+0x24c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d109      	bne.n	8002398 <mode_bola+0x5c>
		motor_drive(&MPelontar, 1, 450);
 8002384:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8002388:	2101      	movs	r1, #1
 800238a:	487e      	ldr	r0, [pc, #504]	; (8002584 <mode_bola+0x248>)
 800238c:	f001 fd56 	bl	8003e3c <motor_drive>
		lsflag_5=0;
 8002390:	4b7b      	ldr	r3, [pc, #492]	; (8002580 <mode_bola+0x244>)
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	e004      	b.n	80023a2 <mode_bola+0x66>
	}
	else{
		motor_drive(&MPelontar, 0, 0);
 8002398:	2200      	movs	r2, #0
 800239a:	2100      	movs	r1, #0
 800239c:	4879      	ldr	r0, [pc, #484]	; (8002584 <mode_bola+0x248>)
 800239e:	f001 fd4d 	bl	8003e3c <motor_drive>
	}

	if (kanan==1){//menurunkan level kecepatan bldc
 80023a2:	4b7a      	ldr	r3, [pc, #488]	; (800258c <mode_bola+0x250>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d118      	bne.n	80023dc <mode_bola+0xa0>
		if(currentTick-nowTick>500 && kec<5){
 80023aa:	4b79      	ldr	r3, [pc, #484]	; (8002590 <mode_bola+0x254>)
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	4b79      	ldr	r3, [pc, #484]	; (8002594 <mode_bola+0x258>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80023b8:	d92c      	bls.n	8002414 <mode_bola+0xd8>
 80023ba:	4b77      	ldr	r3, [pc, #476]	; (8002598 <mode_bola+0x25c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2b04      	cmp	r3, #4
 80023c0:	dc28      	bgt.n	8002414 <mode_bola+0xd8>
			adj=0;
 80023c2:	4b76      	ldr	r3, [pc, #472]	; (800259c <mode_bola+0x260>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
			kec+=1;
 80023c8:	4b73      	ldr	r3, [pc, #460]	; (8002598 <mode_bola+0x25c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	3301      	adds	r3, #1
 80023ce:	4a72      	ldr	r2, [pc, #456]	; (8002598 <mode_bola+0x25c>)
 80023d0:	6013      	str	r3, [r2, #0]
			nowTick = currentTick;
 80023d2:	4b6f      	ldr	r3, [pc, #444]	; (8002590 <mode_bola+0x254>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a6f      	ldr	r2, [pc, #444]	; (8002594 <mode_bola+0x258>)
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	e01b      	b.n	8002414 <mode_bola+0xd8>
		}
	}

	else if (kiri==1){//menurunkan level kecepatan bldc
 80023dc:	4b70      	ldr	r3, [pc, #448]	; (80025a0 <mode_bola+0x264>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d117      	bne.n	8002414 <mode_bola+0xd8>
		if(currentTick-nowTick>500 && kec>0){
 80023e4:	4b6a      	ldr	r3, [pc, #424]	; (8002590 <mode_bola+0x254>)
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	4b6a      	ldr	r3, [pc, #424]	; (8002594 <mode_bola+0x258>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80023f2:	d90f      	bls.n	8002414 <mode_bola+0xd8>
 80023f4:	4b68      	ldr	r3, [pc, #416]	; (8002598 <mode_bola+0x25c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	dd0b      	ble.n	8002414 <mode_bola+0xd8>
			adj=0;
 80023fc:	4b67      	ldr	r3, [pc, #412]	; (800259c <mode_bola+0x260>)
 80023fe:	2200      	movs	r2, #0
 8002400:	601a      	str	r2, [r3, #0]
			kec-=1;
 8002402:	4b65      	ldr	r3, [pc, #404]	; (8002598 <mode_bola+0x25c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	3b01      	subs	r3, #1
 8002408:	4a63      	ldr	r2, [pc, #396]	; (8002598 <mode_bola+0x25c>)
 800240a:	6013      	str	r3, [r2, #0]
			nowTick = currentTick;
 800240c:	4b60      	ldr	r3, [pc, #384]	; (8002590 <mode_bola+0x254>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a60      	ldr	r2, [pc, #384]	; (8002594 <mode_bola+0x258>)
 8002412:	6013      	str	r3, [r2, #0]
		}
	}
	if (kec==0 && adj==0){dutyR=3000;kec1=3000;}//kec bldc
 8002414:	4b60      	ldr	r3, [pc, #384]	; (8002598 <mode_bola+0x25c>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10c      	bne.n	8002436 <mode_bola+0xfa>
 800241c:	4b5f      	ldr	r3, [pc, #380]	; (800259c <mode_bola+0x260>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d108      	bne.n	8002436 <mode_bola+0xfa>
 8002424:	4b5f      	ldr	r3, [pc, #380]	; (80025a4 <mode_bola+0x268>)
 8002426:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	4b5e      	ldr	r3, [pc, #376]	; (80025a8 <mode_bola+0x26c>)
 800242e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	e042      	b.n	80024bc <mode_bola+0x180>
	else if (kec==1 && adj==0){dutyR=3300;kec1=3300;}
 8002436:	4b58      	ldr	r3, [pc, #352]	; (8002598 <mode_bola+0x25c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d10c      	bne.n	8002458 <mode_bola+0x11c>
 800243e:	4b57      	ldr	r3, [pc, #348]	; (800259c <mode_bola+0x260>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d108      	bne.n	8002458 <mode_bola+0x11c>
 8002446:	4b57      	ldr	r3, [pc, #348]	; (80025a4 <mode_bola+0x268>)
 8002448:	f640 42e4 	movw	r2, #3300	; 0xce4
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	4b56      	ldr	r3, [pc, #344]	; (80025a8 <mode_bola+0x26c>)
 8002450:	f640 42e4 	movw	r2, #3300	; 0xce4
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	e031      	b.n	80024bc <mode_bola+0x180>
	else if (kec==2 && adj==0){dutyR=3450;kec1=3450;}//kec bldc
 8002458:	4b4f      	ldr	r3, [pc, #316]	; (8002598 <mode_bola+0x25c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b02      	cmp	r3, #2
 800245e:	d10c      	bne.n	800247a <mode_bola+0x13e>
 8002460:	4b4e      	ldr	r3, [pc, #312]	; (800259c <mode_bola+0x260>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d108      	bne.n	800247a <mode_bola+0x13e>
 8002468:	4b4e      	ldr	r3, [pc, #312]	; (80025a4 <mode_bola+0x268>)
 800246a:	f640 527a 	movw	r2, #3450	; 0xd7a
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	4b4d      	ldr	r3, [pc, #308]	; (80025a8 <mode_bola+0x26c>)
 8002472:	f640 527a 	movw	r2, #3450	; 0xd7a
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	e020      	b.n	80024bc <mode_bola+0x180>
	else if (kec==3 && adj==0){dutyR=3600;kec1=3600;}//kec bldc
 800247a:	4b47      	ldr	r3, [pc, #284]	; (8002598 <mode_bola+0x25c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2b03      	cmp	r3, #3
 8002480:	d10c      	bne.n	800249c <mode_bola+0x160>
 8002482:	4b46      	ldr	r3, [pc, #280]	; (800259c <mode_bola+0x260>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d108      	bne.n	800249c <mode_bola+0x160>
 800248a:	4b46      	ldr	r3, [pc, #280]	; (80025a4 <mode_bola+0x268>)
 800248c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	4b45      	ldr	r3, [pc, #276]	; (80025a8 <mode_bola+0x26c>)
 8002494:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	e00f      	b.n	80024bc <mode_bola+0x180>
	else if (kec==4 && adj==0){dutyR=4000;kec1=4000;}//kec bldc
 800249c:	4b3e      	ldr	r3, [pc, #248]	; (8002598 <mode_bola+0x25c>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2b04      	cmp	r3, #4
 80024a2:	d10b      	bne.n	80024bc <mode_bola+0x180>
 80024a4:	4b3d      	ldr	r3, [pc, #244]	; (800259c <mode_bola+0x260>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d107      	bne.n	80024bc <mode_bola+0x180>
 80024ac:	4b3d      	ldr	r3, [pc, #244]	; (80025a4 <mode_bola+0x268>)
 80024ae:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	4b3c      	ldr	r3, [pc, #240]	; (80025a8 <mode_bola+0x26c>)
 80024b6:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80024ba:	601a      	str	r2, [r3, #0]

	if (kotak==1){//SHOOOOT DARDERDOR
 80024bc:	4b3b      	ldr	r3, [pc, #236]	; (80025ac <mode_bola+0x270>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d10d      	bne.n	80024e0 <mode_bola+0x1a4>
		HAL_GPIO_WritePin(PISTON_PELONTAR_GPIO_Port, PISTON_PELONTAR_Pin, 1);
 80024c4:	2201      	movs	r2, #1
 80024c6:	2101      	movs	r1, #1
 80024c8:	4839      	ldr	r0, [pc, #228]	; (80025b0 <mode_bola+0x274>)
 80024ca:	f002 fdbd 	bl	8005048 <HAL_GPIO_WritePin>
		adj=0;
 80024ce:	4b33      	ldr	r3, [pc, #204]	; (800259c <mode_bola+0x260>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
		dutyR=dutyR+200;
 80024d4:	4b33      	ldr	r3, [pc, #204]	; (80025a4 <mode_bola+0x268>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	33c8      	adds	r3, #200	; 0xc8
 80024da:	4a32      	ldr	r2, [pc, #200]	; (80025a4 <mode_bola+0x268>)
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	e079      	b.n	80025d4 <mode_bola+0x298>
	}
	else {
		HAL_GPIO_WritePin(PISTON_PELONTAR_GPIO_Port, PISTON_PELONTAR_Pin, 0);
 80024e0:	2200      	movs	r2, #0
 80024e2:	2101      	movs	r1, #1
 80024e4:	4832      	ldr	r0, [pc, #200]	; (80025b0 <mode_bola+0x274>)
 80024e6:	f002 fdaf 	bl	8005048 <HAL_GPIO_WritePin>
		if (kec==0 && adj==0){dutyR=3000;kec1=3000;}//kec bldc
 80024ea:	4b2b      	ldr	r3, [pc, #172]	; (8002598 <mode_bola+0x25c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10c      	bne.n	800250c <mode_bola+0x1d0>
 80024f2:	4b2a      	ldr	r3, [pc, #168]	; (800259c <mode_bola+0x260>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d108      	bne.n	800250c <mode_bola+0x1d0>
 80024fa:	4b2a      	ldr	r3, [pc, #168]	; (80025a4 <mode_bola+0x268>)
 80024fc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	4b29      	ldr	r3, [pc, #164]	; (80025a8 <mode_bola+0x26c>)
 8002504:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002508:	601a      	str	r2, [r3, #0]
 800250a:	e063      	b.n	80025d4 <mode_bola+0x298>
		else if (kec==1 && adj==0){dutyR=3300;kec1=3300;}
 800250c:	4b22      	ldr	r3, [pc, #136]	; (8002598 <mode_bola+0x25c>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d10c      	bne.n	800252e <mode_bola+0x1f2>
 8002514:	4b21      	ldr	r3, [pc, #132]	; (800259c <mode_bola+0x260>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d108      	bne.n	800252e <mode_bola+0x1f2>
 800251c:	4b21      	ldr	r3, [pc, #132]	; (80025a4 <mode_bola+0x268>)
 800251e:	f640 42e4 	movw	r2, #3300	; 0xce4
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	4b20      	ldr	r3, [pc, #128]	; (80025a8 <mode_bola+0x26c>)
 8002526:	f640 42e4 	movw	r2, #3300	; 0xce4
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	e052      	b.n	80025d4 <mode_bola+0x298>
		else if (kec==2 && adj==0){dutyR=3450;kec1=3450;}//kec bldc
 800252e:	4b1a      	ldr	r3, [pc, #104]	; (8002598 <mode_bola+0x25c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2b02      	cmp	r3, #2
 8002534:	d10c      	bne.n	8002550 <mode_bola+0x214>
 8002536:	4b19      	ldr	r3, [pc, #100]	; (800259c <mode_bola+0x260>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d108      	bne.n	8002550 <mode_bola+0x214>
 800253e:	4b19      	ldr	r3, [pc, #100]	; (80025a4 <mode_bola+0x268>)
 8002540:	f640 527a 	movw	r2, #3450	; 0xd7a
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	4b18      	ldr	r3, [pc, #96]	; (80025a8 <mode_bola+0x26c>)
 8002548:	f640 527a 	movw	r2, #3450	; 0xd7a
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	e041      	b.n	80025d4 <mode_bola+0x298>
		else if (kec==3 && adj==0){dutyR=3600;kec1=3600;}//kec bldc
 8002550:	4b11      	ldr	r3, [pc, #68]	; (8002598 <mode_bola+0x25c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2b03      	cmp	r3, #3
 8002556:	d12d      	bne.n	80025b4 <mode_bola+0x278>
 8002558:	4b10      	ldr	r3, [pc, #64]	; (800259c <mode_bola+0x260>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d129      	bne.n	80025b4 <mode_bola+0x278>
 8002560:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <mode_bola+0x268>)
 8002562:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	4b0f      	ldr	r3, [pc, #60]	; (80025a8 <mode_bola+0x26c>)
 800256a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	e030      	b.n	80025d4 <mode_bola+0x298>
 8002572:	bf00      	nop
 8002574:	40021800 	.word	0x40021800
 8002578:	20000790 	.word	0x20000790
 800257c:	20000704 	.word	0x20000704
 8002580:	2000079c 	.word	0x2000079c
 8002584:	200000a4 	.word	0x200000a4
 8002588:	20000700 	.word	0x20000700
 800258c:	20000708 	.word	0x20000708
 8002590:	200007dc 	.word	0x200007dc
 8002594:	200007e0 	.word	0x200007e0
 8002598:	200007d0 	.word	0x200007d0
 800259c:	200007d8 	.word	0x200007d8
 80025a0:	2000070c 	.word	0x2000070c
 80025a4:	20000030 	.word	0x20000030
 80025a8:	200007d4 	.word	0x200007d4
 80025ac:	20000710 	.word	0x20000710
 80025b0:	40020800 	.word	0x40020800
		else if (kec==4 && adj==0){dutyR=4000;kec1=4000;}//kec bldc
 80025b4:	4b8f      	ldr	r3, [pc, #572]	; (80027f4 <mode_bola+0x4b8>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2b04      	cmp	r3, #4
 80025ba:	d10b      	bne.n	80025d4 <mode_bola+0x298>
 80025bc:	4b8e      	ldr	r3, [pc, #568]	; (80027f8 <mode_bola+0x4bc>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d107      	bne.n	80025d4 <mode_bola+0x298>
 80025c4:	4b8d      	ldr	r3, [pc, #564]	; (80027fc <mode_bola+0x4c0>)
 80025c6:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	4b8c      	ldr	r3, [pc, #560]	; (8002800 <mode_bola+0x4c4>)
 80025ce:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80025d2:	601a      	str	r2, [r3, #0]
	}

	if (silang==1){//capit bola
 80025d4:	4b8b      	ldr	r3, [pc, #556]	; (8002804 <mode_bola+0x4c8>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d117      	bne.n	800260c <mode_bola+0x2d0>
		if (currentTick - nowTick > 500) {
 80025dc:	4b8a      	ldr	r3, [pc, #552]	; (8002808 <mode_bola+0x4cc>)
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	4b8a      	ldr	r3, [pc, #552]	; (800280c <mode_bola+0x4d0>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80025ea:	d90f      	bls.n	800260c <mode_bola+0x2d0>
			HAL_GPIO_TogglePin(PISTON_BOLA_GPIO_Port, PISTON_BOLA_Pin);
 80025ec:	2108      	movs	r1, #8
 80025ee:	4888      	ldr	r0, [pc, #544]	; (8002810 <mode_bola+0x4d4>)
 80025f0:	f002 fd43 	bl	800507a <HAL_GPIO_TogglePin>
			capit = HAL_GPIO_ReadPin(PISTON_BOLA_GPIO_Port, PISTON_BOLA_Pin);
 80025f4:	2108      	movs	r1, #8
 80025f6:	4886      	ldr	r0, [pc, #536]	; (8002810 <mode_bola+0x4d4>)
 80025f8:	f002 fd0e 	bl	8005018 <HAL_GPIO_ReadPin>
 80025fc:	4603      	mov	r3, r0
 80025fe:	461a      	mov	r2, r3
 8002600:	4b84      	ldr	r3, [pc, #528]	; (8002814 <mode_bola+0x4d8>)
 8002602:	601a      	str	r2, [r3, #0]
			nowTick = currentTick;
 8002604:	4b80      	ldr	r3, [pc, #512]	; (8002808 <mode_bola+0x4cc>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a80      	ldr	r2, [pc, #512]	; (800280c <mode_bola+0x4d0>)
 800260a:	6013      	str	r3, [r2, #0]
		}
	}
	if (bulat==1){//jika pelontar error (saat ini tidak difungsikan)
 800260c:	4b82      	ldr	r3, [pc, #520]	; (8002818 <mode_bola+0x4dc>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d10a      	bne.n	800262a <mode_bola+0x2ee>
		motor_drive(&MPelontar, 0, 0);
 8002614:	2200      	movs	r2, #0
 8002616:	2100      	movs	r1, #0
 8002618:	4880      	ldr	r0, [pc, #512]	; (800281c <mode_bola+0x4e0>)
 800261a:	f001 fc0f 	bl	8003e3c <motor_drive>
		lsflag_5=1;
 800261e:	4b80      	ldr	r3, [pc, #512]	; (8002820 <mode_bola+0x4e4>)
 8002620:	2201      	movs	r2, #1
 8002622:	601a      	str	r2, [r3, #0]
		stepLoading=0;
 8002624:	4b7f      	ldr	r3, [pc, #508]	; (8002824 <mode_bola+0x4e8>)
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]
	}
	if (l1==1){//pencapit turun
 800262a:	4b7f      	ldr	r3, [pc, #508]	; (8002828 <mode_bola+0x4ec>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d114      	bne.n	800265c <mode_bola+0x320>
		if(lsflag_2==0){
 8002632:	4b7e      	ldr	r3, [pc, #504]	; (800282c <mode_bola+0x4f0>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d10a      	bne.n	8002650 <mode_bola+0x314>
			motor_drive(&MBola, -1, 800);
 800263a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800263e:	f04f 31ff 	mov.w	r1, #4294967295
 8002642:	487b      	ldr	r0, [pc, #492]	; (8002830 <mode_bola+0x4f4>)
 8002644:	f001 fbfa 	bl	8003e3c <motor_drive>
			lsflag_1=0;
 8002648:	4b7a      	ldr	r3, [pc, #488]	; (8002834 <mode_bola+0x4f8>)
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	e022      	b.n	8002696 <mode_bola+0x35a>
		}
		else{
			motor_drive(&MBola, 0, 0);
 8002650:	2200      	movs	r2, #0
 8002652:	2100      	movs	r1, #0
 8002654:	4876      	ldr	r0, [pc, #472]	; (8002830 <mode_bola+0x4f4>)
 8002656:	f001 fbf1 	bl	8003e3c <motor_drive>
 800265a:	e01c      	b.n	8002696 <mode_bola+0x35a>
		}
	}
	else if (r1==1){//pencapit naik
 800265c:	4b76      	ldr	r3, [pc, #472]	; (8002838 <mode_bola+0x4fc>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d113      	bne.n	800268c <mode_bola+0x350>
		if(lsflag_1==0){
 8002664:	4b73      	ldr	r3, [pc, #460]	; (8002834 <mode_bola+0x4f8>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d109      	bne.n	8002680 <mode_bola+0x344>
			motor_drive(&MBola, 1, 800);
 800266c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002670:	2101      	movs	r1, #1
 8002672:	486f      	ldr	r0, [pc, #444]	; (8002830 <mode_bola+0x4f4>)
 8002674:	f001 fbe2 	bl	8003e3c <motor_drive>
			lsflag_2=0;
 8002678:	4b6c      	ldr	r3, [pc, #432]	; (800282c <mode_bola+0x4f0>)
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	e00a      	b.n	8002696 <mode_bola+0x35a>
		}
		else{
			motor_drive(&MBola, 0, 0);
 8002680:	2200      	movs	r2, #0
 8002682:	2100      	movs	r1, #0
 8002684:	486a      	ldr	r0, [pc, #424]	; (8002830 <mode_bola+0x4f4>)
 8002686:	f001 fbd9 	bl	8003e3c <motor_drive>
 800268a:	e004      	b.n	8002696 <mode_bola+0x35a>
		}
	}
	else{//ketika r1 / l1 tidak ada aktivitas
		motor_drive(&MBola, 0, 0);
 800268c:	2200      	movs	r2, #0
 800268e:	2100      	movs	r1, #0
 8002690:	4867      	ldr	r0, [pc, #412]	; (8002830 <mode_bola+0x4f4>)
 8002692:	f001 fbd3 	bl	8003e3c <motor_drive>
	}
	if(l==-1){ //pertama kali masuk mode bola, posisikan pencapit ke bawah dan putar bldc
 8002696:	4b69      	ldr	r3, [pc, #420]	; (800283c <mode_bola+0x500>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800269e:	d14e      	bne.n	800273e <mode_bola+0x402>
		motor_drive(&MBola, -1, 800);
 80026a0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80026a4:	f04f 31ff 	mov.w	r1, #4294967295
 80026a8:	4861      	ldr	r0, [pc, #388]	; (8002830 <mode_bola+0x4f4>)
 80026aa:	f001 fbc7 	bl	8003e3c <motor_drive>
		if(lsflag_2==1){
 80026ae:	4b5f      	ldr	r3, [pc, #380]	; (800282c <mode_bola+0x4f0>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d143      	bne.n	800273e <mode_bola+0x402>
			motor_drive(&MBola, 0, 0);
 80026b6:	2200      	movs	r2, #0
 80026b8:	2100      	movs	r1, #0
 80026ba:	485d      	ldr	r0, [pc, #372]	; (8002830 <mode_bola+0x4f4>)
 80026bc:	f001 fbbe 	bl	8003e3c <motor_drive>
			lsflag_1=0;
 80026c0:	4b5c      	ldr	r3, [pc, #368]	; (8002834 <mode_bola+0x4f8>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]
			dutyR=3300;
 80026c6:	4b4d      	ldr	r3, [pc, #308]	; (80027fc <mode_bola+0x4c0>)
 80026c8:	f640 42e4 	movw	r2, #3300	; 0xce4
 80026cc:	601a      	str	r2, [r3, #0]
			bldc_drive(&roller1, dutyR);
 80026ce:	4b4b      	ldr	r3, [pc, #300]	; (80027fc <mode_bola+0x4c0>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4619      	mov	r1, r3
 80026d4:	485a      	ldr	r0, [pc, #360]	; (8002840 <mode_bola+0x504>)
 80026d6:	f001 fcfc 	bl	80040d2 <bldc_drive>
			bldc_drive(&roller2, dutyR);
 80026da:	4b48      	ldr	r3, [pc, #288]	; (80027fc <mode_bola+0x4c0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4619      	mov	r1, r3
 80026e0:	4858      	ldr	r0, [pc, #352]	; (8002844 <mode_bola+0x508>)
 80026e2:	f001 fcf6 	bl	80040d2 <bldc_drive>
			vTaskDelay(600);
 80026e6:	f44f 7016 	mov.w	r0, #600	; 0x258
 80026ea:	f006 fa49 	bl	8008b80 <vTaskDelay>
			kec1=3000;
 80026ee:	4b44      	ldr	r3, [pc, #272]	; (8002800 <mode_bola+0x4c4>)
 80026f0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80026f4:	601a      	str	r2, [r3, #0]
			bldc_drive(&roller1, dutyR);
 80026f6:	4b41      	ldr	r3, [pc, #260]	; (80027fc <mode_bola+0x4c0>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4619      	mov	r1, r3
 80026fc:	4850      	ldr	r0, [pc, #320]	; (8002840 <mode_bola+0x504>)
 80026fe:	f001 fce8 	bl	80040d2 <bldc_drive>
			bldc_drive(&roller2, dutyR);
 8002702:	4b3e      	ldr	r3, [pc, #248]	; (80027fc <mode_bola+0x4c0>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4619      	mov	r1, r3
 8002708:	484e      	ldr	r0, [pc, #312]	; (8002844 <mode_bola+0x508>)
 800270a:	f001 fce2 	bl	80040d2 <bldc_drive>
			vTaskDelay(300);
 800270e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002712:	f006 fa35 	bl	8008b80 <vTaskDelay>
			dutyR=3300;
 8002716:	4b39      	ldr	r3, [pc, #228]	; (80027fc <mode_bola+0x4c0>)
 8002718:	f640 42e4 	movw	r2, #3300	; 0xce4
 800271c:	601a      	str	r2, [r3, #0]
			kec1=3300;
 800271e:	4b38      	ldr	r3, [pc, #224]	; (8002800 <mode_bola+0x4c4>)
 8002720:	f640 42e4 	movw	r2, #3300	; 0xce4
 8002724:	601a      	str	r2, [r3, #0]
			kec=1;
 8002726:	4b33      	ldr	r3, [pc, #204]	; (80027f4 <mode_bola+0x4b8>)
 8002728:	2201      	movs	r2, #1
 800272a:	601a      	str	r2, [r3, #0]
			lsflag_5=1;
 800272c:	4b3c      	ldr	r3, [pc, #240]	; (8002820 <mode_bola+0x4e4>)
 800272e:	2201      	movs	r2, #1
 8002730:	601a      	str	r2, [r3, #0]
			stepLoading=0;
 8002732:	4b3c      	ldr	r3, [pc, #240]	; (8002824 <mode_bola+0x4e8>)
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
			l=1;
 8002738:	4b40      	ldr	r3, [pc, #256]	; (800283c <mode_bola+0x500>)
 800273a:	2201      	movs	r2, #1
 800273c:	601a      	str	r2, [r3, #0]
		}
	}
	if (share==1){//kurangi nilai variabel kecepatan bldc
 800273e:	4b42      	ldr	r3, [pc, #264]	; (8002848 <mode_bola+0x50c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d119      	bne.n	800277a <mode_bola+0x43e>
		adj=1;
 8002746:	4b2c      	ldr	r3, [pc, #176]	; (80027f8 <mode_bola+0x4bc>)
 8002748:	2201      	movs	r2, #1
 800274a:	601a      	str	r2, [r3, #0]
		if(currentTick-nowTick>100 && kec1>3000){
 800274c:	4b2e      	ldr	r3, [pc, #184]	; (8002808 <mode_bola+0x4cc>)
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	4b2e      	ldr	r3, [pc, #184]	; (800280c <mode_bola+0x4d0>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b64      	cmp	r3, #100	; 0x64
 8002758:	d937      	bls.n	80027ca <mode_bola+0x48e>
 800275a:	4b29      	ldr	r3, [pc, #164]	; (8002800 <mode_bola+0x4c4>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002762:	4293      	cmp	r3, r2
 8002764:	dd31      	ble.n	80027ca <mode_bola+0x48e>
			kec1-=10;
 8002766:	4b26      	ldr	r3, [pc, #152]	; (8002800 <mode_bola+0x4c4>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	3b0a      	subs	r3, #10
 800276c:	4a24      	ldr	r2, [pc, #144]	; (8002800 <mode_bola+0x4c4>)
 800276e:	6013      	str	r3, [r2, #0]
			nowTick = currentTick;
 8002770:	4b25      	ldr	r3, [pc, #148]	; (8002808 <mode_bola+0x4cc>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a25      	ldr	r2, [pc, #148]	; (800280c <mode_bola+0x4d0>)
 8002776:	6013      	str	r3, [r2, #0]
 8002778:	e027      	b.n	80027ca <mode_bola+0x48e>
		}
	}
	else if (options==1){//menambah nilai variabel kecepatan bldc
 800277a:	4b34      	ldr	r3, [pc, #208]	; (800284c <mode_bola+0x510>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d119      	bne.n	80027b6 <mode_bola+0x47a>
		adj=1;
 8002782:	4b1d      	ldr	r3, [pc, #116]	; (80027f8 <mode_bola+0x4bc>)
 8002784:	2201      	movs	r2, #1
 8002786:	601a      	str	r2, [r3, #0]
		if(currentTick-nowTick>100 && kec1<6000){
 8002788:	4b1f      	ldr	r3, [pc, #124]	; (8002808 <mode_bola+0x4cc>)
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	4b1f      	ldr	r3, [pc, #124]	; (800280c <mode_bola+0x4d0>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b64      	cmp	r3, #100	; 0x64
 8002794:	d919      	bls.n	80027ca <mode_bola+0x48e>
 8002796:	4b1a      	ldr	r3, [pc, #104]	; (8002800 <mode_bola+0x4c4>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f241 726f 	movw	r2, #5999	; 0x176f
 800279e:	4293      	cmp	r3, r2
 80027a0:	dc13      	bgt.n	80027ca <mode_bola+0x48e>
			kec1+=10;
 80027a2:	4b17      	ldr	r3, [pc, #92]	; (8002800 <mode_bola+0x4c4>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	330a      	adds	r3, #10
 80027a8:	4a15      	ldr	r2, [pc, #84]	; (8002800 <mode_bola+0x4c4>)
 80027aa:	6013      	str	r3, [r2, #0]
			nowTick = currentTick;
 80027ac:	4b16      	ldr	r3, [pc, #88]	; (8002808 <mode_bola+0x4cc>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a16      	ldr	r2, [pc, #88]	; (800280c <mode_bola+0x4d0>)
 80027b2:	6013      	str	r3, [r2, #0]
 80027b4:	e009      	b.n	80027ca <mode_bola+0x48e>
		}
	}
	else if (tpad==1){//touchpad untuk masuk sequence semi auto loading bola
 80027b6:	4b26      	ldr	r3, [pc, #152]	; (8002850 <mode_bola+0x514>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d105      	bne.n	80027ca <mode_bola+0x48e>
		tpad1=1;
 80027be:	4b25      	ldr	r3, [pc, #148]	; (8002854 <mode_bola+0x518>)
 80027c0:	2201      	movs	r2, #1
 80027c2:	601a      	str	r2, [r3, #0]
		stepLoading=0;
 80027c4:	4b17      	ldr	r3, [pc, #92]	; (8002824 <mode_bola+0x4e8>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]
	}
	if(tpad1==1){ // semi auto loading bola
 80027ca:	4b22      	ldr	r3, [pc, #136]	; (8002854 <mode_bola+0x518>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	f040 80a7 	bne.w	8002922 <mode_bola+0x5e6>
		if(stepLoading==0){//ambil bola
 80027d4:	4b13      	ldr	r3, [pc, #76]	; (8002824 <mode_bola+0x4e8>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d155      	bne.n	8002888 <mode_bola+0x54c>
			if	(lsflag_2==0){
 80027dc:	4b13      	ldr	r3, [pc, #76]	; (800282c <mode_bola+0x4f0>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d139      	bne.n	8002858 <mode_bola+0x51c>
				motor_drive(&MBola, -1, 800);
 80027e4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80027e8:	f04f 31ff 	mov.w	r1, #4294967295
 80027ec:	4810      	ldr	r0, [pc, #64]	; (8002830 <mode_bola+0x4f4>)
 80027ee:	f001 fb25 	bl	8003e3c <motor_drive>
 80027f2:	e039      	b.n	8002868 <mode_bola+0x52c>
 80027f4:	200007d0 	.word	0x200007d0
 80027f8:	200007d8 	.word	0x200007d8
 80027fc:	20000030 	.word	0x20000030
 8002800:	200007d4 	.word	0x200007d4
 8002804:	20000714 	.word	0x20000714
 8002808:	200007dc 	.word	0x200007dc
 800280c:	200007e0 	.word	0x200007e0
 8002810:	40020800 	.word	0x40020800
 8002814:	200007ac 	.word	0x200007ac
 8002818:	20000718 	.word	0x20000718
 800281c:	200000a4 	.word	0x200000a4
 8002820:	2000079c 	.word	0x2000079c
 8002824:	200007b0 	.word	0x200007b0
 8002828:	20000720 	.word	0x20000720
 800282c:	20000790 	.word	0x20000790
 8002830:	200000bc 	.word	0x200000bc
 8002834:	2000078c 	.word	0x2000078c
 8002838:	20000724 	.word	0x20000724
 800283c:	2000002c 	.word	0x2000002c
 8002840:	20000034 	.word	0x20000034
 8002844:	2000003c 	.word	0x2000003c
 8002848:	20000730 	.word	0x20000730
 800284c:	20000734 	.word	0x20000734
 8002850:	2000073c 	.word	0x2000073c
 8002854:	20000768 	.word	0x20000768
			}
			else{
				motor_drive(&MBola, 0, 0);
 8002858:	2200      	movs	r2, #0
 800285a:	2100      	movs	r1, #0
 800285c:	4857      	ldr	r0, [pc, #348]	; (80029bc <mode_bola+0x680>)
 800285e:	f001 faed 	bl	8003e3c <motor_drive>
				lsflag_1=0;
 8002862:	4b57      	ldr	r3, [pc, #348]	; (80029c0 <mode_bola+0x684>)
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]
			}
			if (lsflag_5==1 && lsflag_2==1 && capit==1){
 8002868:	4b56      	ldr	r3, [pc, #344]	; (80029c4 <mode_bola+0x688>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d15e      	bne.n	800292e <mode_bola+0x5f2>
 8002870:	4b55      	ldr	r3, [pc, #340]	; (80029c8 <mode_bola+0x68c>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d15a      	bne.n	800292e <mode_bola+0x5f2>
 8002878:	4b54      	ldr	r3, [pc, #336]	; (80029cc <mode_bola+0x690>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d156      	bne.n	800292e <mode_bola+0x5f2>
				stepLoading=1;
 8002880:	4b53      	ldr	r3, [pc, #332]	; (80029d0 <mode_bola+0x694>)
 8002882:	2201      	movs	r2, #1
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	e052      	b.n	800292e <mode_bola+0x5f2>
			}
		}
		else if(stepLoading==1){//taruh ke pelontar
 8002888:	4b51      	ldr	r3, [pc, #324]	; (80029d0 <mode_bola+0x694>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d125      	bne.n	80028dc <mode_bola+0x5a0>
			if(lsflag_1==0){
 8002890:	4b4b      	ldr	r3, [pc, #300]	; (80029c0 <mode_bola+0x684>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d106      	bne.n	80028a6 <mode_bola+0x56a>
				motor_drive(&MBola, 1, 1000);
 8002898:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800289c:	2101      	movs	r1, #1
 800289e:	4847      	ldr	r0, [pc, #284]	; (80029bc <mode_bola+0x680>)
 80028a0:	f001 facc 	bl	8003e3c <motor_drive>
 80028a4:	e016      	b.n	80028d4 <mode_bola+0x598>
			}
			else {
				motor_drive(&MBola, 0, 0);
 80028a6:	2200      	movs	r2, #0
 80028a8:	2100      	movs	r1, #0
 80028aa:	4844      	ldr	r0, [pc, #272]	; (80029bc <mode_bola+0x680>)
 80028ac:	f001 fac6 	bl	8003e3c <motor_drive>
				HAL_GPIO_TogglePin(PISTON_BOLA_GPIO_Port, PISTON_BOLA_Pin);
 80028b0:	2108      	movs	r1, #8
 80028b2:	4848      	ldr	r0, [pc, #288]	; (80029d4 <mode_bola+0x698>)
 80028b4:	f002 fbe1 	bl	800507a <HAL_GPIO_TogglePin>
				capit = HAL_GPIO_ReadPin(PISTON_BOLA_GPIO_Port, PISTON_BOLA_Pin);
 80028b8:	2108      	movs	r1, #8
 80028ba:	4846      	ldr	r0, [pc, #280]	; (80029d4 <mode_bola+0x698>)
 80028bc:	f002 fbac 	bl	8005018 <HAL_GPIO_ReadPin>
 80028c0:	4603      	mov	r3, r0
 80028c2:	461a      	mov	r2, r3
 80028c4:	4b41      	ldr	r3, [pc, #260]	; (80029cc <mode_bola+0x690>)
 80028c6:	601a      	str	r2, [r3, #0]
				osDelay(3);
 80028c8:	2003      	movs	r0, #3
 80028ca:	f005 fee6 	bl	800869a <osDelay>
				stepLoading=2;
 80028ce:	4b40      	ldr	r3, [pc, #256]	; (80029d0 <mode_bola+0x694>)
 80028d0:	2202      	movs	r2, #2
 80028d2:	601a      	str	r2, [r3, #0]
			}
			lsflag_2=0;
 80028d4:	4b3c      	ldr	r3, [pc, #240]	; (80029c8 <mode_bola+0x68c>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	e028      	b.n	800292e <mode_bola+0x5f2>
		}
		else if(stepLoading==2){//kembali posisi ambil
 80028dc:	4b3c      	ldr	r3, [pc, #240]	; (80029d0 <mode_bola+0x694>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d117      	bne.n	8002914 <mode_bola+0x5d8>
			if	(lsflag_2==0){
 80028e4:	4b38      	ldr	r3, [pc, #224]	; (80029c8 <mode_bola+0x68c>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d107      	bne.n	80028fc <mode_bola+0x5c0>
				motor_drive(&MBola, -1, 800);
 80028ec:	f44f 7248 	mov.w	r2, #800	; 0x320
 80028f0:	f04f 31ff 	mov.w	r1, #4294967295
 80028f4:	4831      	ldr	r0, [pc, #196]	; (80029bc <mode_bola+0x680>)
 80028f6:	f001 faa1 	bl	8003e3c <motor_drive>
 80028fa:	e018      	b.n	800292e <mode_bola+0x5f2>
			}
			else{
				motor_drive(&MBola, 0, 0);
 80028fc:	2200      	movs	r2, #0
 80028fe:	2100      	movs	r1, #0
 8002900:	482e      	ldr	r0, [pc, #184]	; (80029bc <mode_bola+0x680>)
 8002902:	f001 fa9b 	bl	8003e3c <motor_drive>
				lsflag_1=0;
 8002906:	4b2e      	ldr	r3, [pc, #184]	; (80029c0 <mode_bola+0x684>)
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
				stepLoading=3;//end
 800290c:	4b30      	ldr	r3, [pc, #192]	; (80029d0 <mode_bola+0x694>)
 800290e:	2203      	movs	r2, #3
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	e00c      	b.n	800292e <mode_bola+0x5f2>
			}
		}
		else{//selesai sequence
			tpad1=0;
 8002914:	4b30      	ldr	r3, [pc, #192]	; (80029d8 <mode_bola+0x69c>)
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]
			stepLoading=0;
 800291a:	4b2d      	ldr	r3, [pc, #180]	; (80029d0 <mode_bola+0x694>)
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	e005      	b.n	800292e <mode_bola+0x5f2>
		}
	}
	else{//ketika tidak ada aktivitas maka mode sequence tidak aktif(diposisikan untuk siap siaga)
		tpad1=0;
 8002922:	4b2d      	ldr	r3, [pc, #180]	; (80029d8 <mode_bola+0x69c>)
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]
		stepLoading=0;
 8002928:	4b29      	ldr	r3, [pc, #164]	; (80029d0 <mode_bola+0x694>)
 800292a:	2200      	movs	r2, #0
 800292c:	601a      	str	r2, [r3, #0]
	}
	if (r3==1){ //reset sistem semi-auto loading ketika ada error
 800292e:	4b2b      	ldr	r3, [pc, #172]	; (80029dc <mode_bola+0x6a0>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d10b      	bne.n	800294e <mode_bola+0x612>
		flagFirst=1;
 8002936:	4b2a      	ldr	r3, [pc, #168]	; (80029e0 <mode_bola+0x6a4>)
 8002938:	2201      	movs	r2, #1
 800293a:	601a      	str	r2, [r3, #0]
		lsflag_5=1;
 800293c:	4b21      	ldr	r3, [pc, #132]	; (80029c4 <mode_bola+0x688>)
 800293e:	2201      	movs	r2, #1
 8002940:	601a      	str	r2, [r3, #0]
		lsflag_1=0;
 8002942:	4b1f      	ldr	r3, [pc, #124]	; (80029c0 <mode_bola+0x684>)
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
		tpad1=0;
 8002948:	4b23      	ldr	r3, [pc, #140]	; (80029d8 <mode_bola+0x69c>)
 800294a:	2200      	movs	r2, #0
 800294c:	601a      	str	r2, [r3, #0]
	}

	if (flagFirst==1){//gandengan e r3
 800294e:	4b24      	ldr	r3, [pc, #144]	; (80029e0 <mode_bola+0x6a4>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d113      	bne.n	800297e <mode_bola+0x642>
		if(lsflag_2==0){
 8002956:	4b1c      	ldr	r3, [pc, #112]	; (80029c8 <mode_bola+0x68c>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d107      	bne.n	800296e <mode_bola+0x632>
			motor_drive(&MBola, -1, 800);
 800295e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002962:	f04f 31ff 	mov.w	r1, #4294967295
 8002966:	4815      	ldr	r0, [pc, #84]	; (80029bc <mode_bola+0x680>)
 8002968:	f001 fa68 	bl	8003e3c <motor_drive>
 800296c:	e007      	b.n	800297e <mode_bola+0x642>
		}
		else{
			motor_drive(&MBola, 0, 0);
 800296e:	2200      	movs	r2, #0
 8002970:	2100      	movs	r1, #0
 8002972:	4812      	ldr	r0, [pc, #72]	; (80029bc <mode_bola+0x680>)
 8002974:	f001 fa62 	bl	8003e3c <motor_drive>
			flagFirst=0;
 8002978:	4b19      	ldr	r3, [pc, #100]	; (80029e0 <mode_bola+0x6a4>)
 800297a:	2200      	movs	r2, #0
 800297c:	601a      	str	r2, [r3, #0]
		}
	}

	if(adj==1){//ketika nilai variabel kecepatan bldc diatur dengan tombol share/option
 800297e:	4b19      	ldr	r3, [pc, #100]	; (80029e4 <mode_bola+0x6a8>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d10c      	bne.n	80029a0 <mode_bola+0x664>
		bldc_drive(&roller1, kec1);
 8002986:	4b18      	ldr	r3, [pc, #96]	; (80029e8 <mode_bola+0x6ac>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4619      	mov	r1, r3
 800298c:	4817      	ldr	r0, [pc, #92]	; (80029ec <mode_bola+0x6b0>)
 800298e:	f001 fba0 	bl	80040d2 <bldc_drive>
		bldc_drive(&roller2, kec1);
 8002992:	4b15      	ldr	r3, [pc, #84]	; (80029e8 <mode_bola+0x6ac>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4619      	mov	r1, r3
 8002998:	4815      	ldr	r0, [pc, #84]	; (80029f0 <mode_bola+0x6b4>)
 800299a:	f001 fb9a 	bl	80040d2 <bldc_drive>
	}
	else{//ketika nilai variabel kecepatan bldc diatur dengan dengan nilai tetap(tombol kanan/kiri)
		bldc_drive(&roller1, dutyR);
		bldc_drive(&roller2, dutyR);
	}
}
 800299e:	e00b      	b.n	80029b8 <mode_bola+0x67c>
		bldc_drive(&roller1, dutyR);
 80029a0:	4b14      	ldr	r3, [pc, #80]	; (80029f4 <mode_bola+0x6b8>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4619      	mov	r1, r3
 80029a6:	4811      	ldr	r0, [pc, #68]	; (80029ec <mode_bola+0x6b0>)
 80029a8:	f001 fb93 	bl	80040d2 <bldc_drive>
		bldc_drive(&roller2, dutyR);
 80029ac:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <mode_bola+0x6b8>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4619      	mov	r1, r3
 80029b2:	480f      	ldr	r0, [pc, #60]	; (80029f0 <mode_bola+0x6b4>)
 80029b4:	f001 fb8d 	bl	80040d2 <bldc_drive>
}
 80029b8:	bf00      	nop
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	200000bc 	.word	0x200000bc
 80029c0:	2000078c 	.word	0x2000078c
 80029c4:	2000079c 	.word	0x2000079c
 80029c8:	20000790 	.word	0x20000790
 80029cc:	200007ac 	.word	0x200007ac
 80029d0:	200007b0 	.word	0x200007b0
 80029d4:	40020800 	.word	0x40020800
 80029d8:	20000768 	.word	0x20000768
 80029dc:	2000072c 	.word	0x2000072c
 80029e0:	200007a8 	.word	0x200007a8
 80029e4:	200007d8 	.word	0x200007d8
 80029e8:	200007d4 	.word	0x200007d4
 80029ec:	20000034 	.word	0x20000034
 80029f0:	2000003c 	.word	0x2000003c
 80029f4:	20000030 	.word	0x20000030

080029f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029f8:	b5b0      	push	{r4, r5, r7, lr}
 80029fa:	b096      	sub	sp, #88	; 0x58
 80029fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029fe:	f001 ff85 	bl	800490c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a02:	f000 f8db 	bl	8002bbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a06:	f000 fda7 	bl	8003558 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002a0a:	f000 fd7b 	bl	8003504 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8002a0e:	f000 fa3f 	bl	8002e90 <MX_TIM3_Init>
  MX_TIM12_Init();
 8002a12:	f000 fd09 	bl	8003428 <MX_TIM12_Init>
  MX_TIM1_Init();
 8002a16:	f000 f977 	bl	8002d08 <MX_TIM1_Init>
  MX_SPI5_Init();
 8002a1a:	f000 f93f 	bl	8002c9c <MX_SPI5_Init>
  MX_TIM4_Init();
 8002a1e:	f000 facf 	bl	8002fc0 <MX_TIM4_Init>
  MX_TIM5_Init();
 8002a22:	f000 fb65 	bl	80030f0 <MX_TIM5_Init>
  MX_TIM8_Init();
 8002a26:	f000 fbe5 	bl	80031f4 <MX_TIM8_Init>
  MX_TIM9_Init();
 8002a2a:	f000 fc8f 	bl	800334c <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
	#if Calibrate
	TIM12->CCR1 = 6000;  // Set the maximum pulse (2ms)
 8002a2e:	4b4f      	ldr	r3, [pc, #316]	; (8002b6c <main+0x174>)
 8002a30:	f241 7270 	movw	r2, #6000	; 0x1770
 8002a34:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay (2000);  // wait for 1 beep
 8002a36:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002a3a:	f001 ffa9 	bl	8004990 <HAL_Delay>
	TIM12->CCR1 = 3000;   // Set the minimum Pulse (1ms)
 8002a3e:	4b4b      	ldr	r3, [pc, #300]	; (8002b6c <main+0x174>)
 8002a40:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002a44:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay (1000);  // wait for 2 beeps
 8002a46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a4a:	f001 ffa1 	bl	8004990 <HAL_Delay>
	#endif
  //inisiasi bldc roller
  bldc_init(&roller1, 3000);
 8002a4e:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002a52:	4847      	ldr	r0, [pc, #284]	; (8002b70 <main+0x178>)
 8002a54:	f001 fb09 	bl	800406a <bldc_init>
  bldc_init(&roller2, 3000);
 8002a58:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002a5c:	4845      	ldr	r0, [pc, #276]	; (8002b74 <main+0x17c>)
 8002a5e:	f001 fb04 	bl	800406a <bldc_init>

//inisiasi canbus spi
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002a62:	2200      	movs	r2, #0
 8002a64:	2180      	movs	r1, #128	; 0x80
 8002a66:	4844      	ldr	r0, [pc, #272]	; (8002b78 <main+0x180>)
 8002a68:	f002 faee 	bl	8005048 <HAL_GPIO_WritePin>

    ret = CANSPI_Initialize();
 8002a6c:	f7fe fc24 	bl	80012b8 <CANSPI_Initialize>
 8002a70:	4603      	mov	r3, r0
 8002a72:	4a42      	ldr	r2, [pc, #264]	; (8002b7c <main+0x184>)
 8002a74:	6013      	str	r3, [r2, #0]
    if(ret < 0){
 8002a76:	4b41      	ldr	r3, [pc, #260]	; (8002b7c <main+0x184>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	da05      	bge.n	8002a8a <main+0x92>
    	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8002a7e:	2201      	movs	r2, #1
 8002a80:	2180      	movs	r1, #128	; 0x80
 8002a82:	483d      	ldr	r0, [pc, #244]	; (8002b78 <main+0x180>)
 8002a84:	f002 fae0 	bl	8005048 <HAL_GPIO_WritePin>
    	  while(1){}
 8002a88:	e7fe      	b.n	8002a88 <main+0x90>
    }

  motor_init(&LeftFront);
 8002a8a:	483d      	ldr	r0, [pc, #244]	; (8002b80 <main+0x188>)
 8002a8c:	f001 f96f 	bl	8003d6e <motor_init>
  motor_init(&LeftBack);
 8002a90:	483c      	ldr	r0, [pc, #240]	; (8002b84 <main+0x18c>)
 8002a92:	f001 f96c 	bl	8003d6e <motor_init>
  motor_init(&RightBack);
 8002a96:	483c      	ldr	r0, [pc, #240]	; (8002b88 <main+0x190>)
 8002a98:	f001 f969 	bl	8003d6e <motor_init>
  motor_init(&RightFront);
 8002a9c:	483b      	ldr	r0, [pc, #236]	; (8002b8c <main+0x194>)
 8002a9e:	f001 f966 	bl	8003d6e <motor_init>
  motor_init(&MPelontar);
 8002aa2:	483b      	ldr	r0, [pc, #236]	; (8002b90 <main+0x198>)
 8002aa4:	f001 f963 	bl	8003d6e <motor_init>
  motor_init(&MBola);
 8002aa8:	483a      	ldr	r0, [pc, #232]	; (8002b94 <main+0x19c>)
 8002aaa:	f001 f960 	bl	8003d6e <motor_init>
  motor_init(&MExtendLeft);
 8002aae:	483a      	ldr	r0, [pc, #232]	; (8002b98 <main+0x1a0>)
 8002ab0:	f001 f95d 	bl	8003d6e <motor_init>
  motor_init(&MExtendRight);
 8002ab4:	4839      	ldr	r0, [pc, #228]	; (8002b9c <main+0x1a4>)
 8002ab6:	f001 f95a 	bl	8003d6e <motor_init>
  motor_init(&MPadi);
 8002aba:	4839      	ldr	r0, [pc, #228]	; (8002ba0 <main+0x1a8>)
 8002abc:	f001 f957 	bl	8003d6e <motor_init>

  enable_motor(&LeftFront);
 8002ac0:	482f      	ldr	r0, [pc, #188]	; (8002b80 <main+0x188>)
 8002ac2:	f001 fac1 	bl	8004048 <enable_motor>
  enable_motor(&LeftBack);
 8002ac6:	482f      	ldr	r0, [pc, #188]	; (8002b84 <main+0x18c>)
 8002ac8:	f001 fabe 	bl	8004048 <enable_motor>
  enable_motor(&RightBack);
 8002acc:	482e      	ldr	r0, [pc, #184]	; (8002b88 <main+0x190>)
 8002ace:	f001 fabb 	bl	8004048 <enable_motor>
  enable_motor(&RightFront);
 8002ad2:	482e      	ldr	r0, [pc, #184]	; (8002b8c <main+0x194>)
 8002ad4:	f001 fab8 	bl	8004048 <enable_motor>
  enable_motor(&MPelontar);
 8002ad8:	482d      	ldr	r0, [pc, #180]	; (8002b90 <main+0x198>)
 8002ada:	f001 fab5 	bl	8004048 <enable_motor>
  enable_motor(&MBola);
 8002ade:	482d      	ldr	r0, [pc, #180]	; (8002b94 <main+0x19c>)
 8002ae0:	f001 fab2 	bl	8004048 <enable_motor>
  enable_motor(&MExtendLeft);
 8002ae4:	482c      	ldr	r0, [pc, #176]	; (8002b98 <main+0x1a0>)
 8002ae6:	f001 faaf 	bl	8004048 <enable_motor>
  enable_motor(&MExtendRight);
 8002aea:	482c      	ldr	r0, [pc, #176]	; (8002b9c <main+0x1a4>)
 8002aec:	f001 faac 	bl	8004048 <enable_motor>
  enable_motor(&MPadi);
 8002af0:	482b      	ldr	r0, [pc, #172]	; (8002ba0 <main+0x1a8>)
 8002af2:	f001 faa9 	bl	8004048 <enable_motor>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of InputTask */
  osThreadDef(InputTask, InputHandle_Task, osPriorityAboveNormal, 0, 512);
 8002af6:	4b2b      	ldr	r3, [pc, #172]	; (8002ba4 <main+0x1ac>)
 8002af8:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8002afc:	461d      	mov	r5, r3
 8002afe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b02:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002b06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  InputTaskHandle = osThreadCreate(osThread(InputTask), NULL);
 8002b0a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b0e:	2100      	movs	r1, #0
 8002b10:	4618      	mov	r0, r3
 8002b12:	f005 fd76 	bl	8008602 <osThreadCreate>
 8002b16:	4603      	mov	r3, r0
 8002b18:	4a23      	ldr	r2, [pc, #140]	; (8002ba8 <main+0x1b0>)
 8002b1a:	6013      	str	r3, [r2, #0]

  /* definition and creation of MechanismTask */
  osThreadDef(MechanismTask, MechanismHandle_Task, osPriorityNormal, 0, 512);
 8002b1c:	4b23      	ldr	r3, [pc, #140]	; (8002bac <main+0x1b4>)
 8002b1e:	f107 0420 	add.w	r4, r7, #32
 8002b22:	461d      	mov	r5, r3
 8002b24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002b2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MechanismTaskHandle = osThreadCreate(osThread(MechanismTask), NULL);
 8002b30:	f107 0320 	add.w	r3, r7, #32
 8002b34:	2100      	movs	r1, #0
 8002b36:	4618      	mov	r0, r3
 8002b38:	f005 fd63 	bl	8008602 <osThreadCreate>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	4a1c      	ldr	r2, [pc, #112]	; (8002bb0 <main+0x1b8>)
 8002b40:	6013      	str	r3, [r2, #0]

  /* definition and creation of OmniTask */
  osThreadDef(OmniTask, OmniHandle_Task, osPriorityNormal, 0, 512);
 8002b42:	4b1c      	ldr	r3, [pc, #112]	; (8002bb4 <main+0x1bc>)
 8002b44:	1d3c      	adds	r4, r7, #4
 8002b46:	461d      	mov	r5, r3
 8002b48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b4c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002b50:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  OmniTaskHandle = osThreadCreate(osThread(OmniTask), NULL);
 8002b54:	1d3b      	adds	r3, r7, #4
 8002b56:	2100      	movs	r1, #0
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f005 fd52 	bl	8008602 <osThreadCreate>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	4a15      	ldr	r2, [pc, #84]	; (8002bb8 <main+0x1c0>)
 8002b62:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002b64:	f005 fd46 	bl	80085f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002b68:	e7fe      	b.n	8002b68 <main+0x170>
 8002b6a:	bf00      	nop
 8002b6c:	40001800 	.word	0x40001800
 8002b70:	20000034 	.word	0x20000034
 8002b74:	2000003c 	.word	0x2000003c
 8002b78:	40020400 	.word	0x40020400
 8002b7c:	20000780 	.word	0x20000780
 8002b80:	20000044 	.word	0x20000044
 8002b84:	2000005c 	.word	0x2000005c
 8002b88:	2000008c 	.word	0x2000008c
 8002b8c:	20000074 	.word	0x20000074
 8002b90:	200000a4 	.word	0x200000a4
 8002b94:	200000bc 	.word	0x200000bc
 8002b98:	200000d4 	.word	0x200000d4
 8002b9c:	200000ec 	.word	0x200000ec
 8002ba0:	20000104 	.word	0x20000104
 8002ba4:	08009c98 	.word	0x08009c98
 8002ba8:	200006f4 	.word	0x200006f4
 8002bac:	08009cc4 	.word	0x08009cc4
 8002bb0:	200006f8 	.word	0x200006f8
 8002bb4:	08009cec 	.word	0x08009cec
 8002bb8:	200006fc 	.word	0x200006fc

08002bbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b094      	sub	sp, #80	; 0x50
 8002bc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bc2:	f107 0320 	add.w	r3, r7, #32
 8002bc6:	2230      	movs	r2, #48	; 0x30
 8002bc8:	2100      	movs	r1, #0
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f006 ff76 	bl	8009abc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bd0:	f107 030c 	add.w	r3, r7, #12
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	60da      	str	r2, [r3, #12]
 8002bde:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002be0:	2300      	movs	r3, #0
 8002be2:	60bb      	str	r3, [r7, #8]
 8002be4:	4b2b      	ldr	r3, [pc, #172]	; (8002c94 <SystemClock_Config+0xd8>)
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	4a2a      	ldr	r2, [pc, #168]	; (8002c94 <SystemClock_Config+0xd8>)
 8002bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bee:	6413      	str	r3, [r2, #64]	; 0x40
 8002bf0:	4b28      	ldr	r3, [pc, #160]	; (8002c94 <SystemClock_Config+0xd8>)
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf8:	60bb      	str	r3, [r7, #8]
 8002bfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	607b      	str	r3, [r7, #4]
 8002c00:	4b25      	ldr	r3, [pc, #148]	; (8002c98 <SystemClock_Config+0xdc>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a24      	ldr	r2, [pc, #144]	; (8002c98 <SystemClock_Config+0xdc>)
 8002c06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c0a:	6013      	str	r3, [r2, #0]
 8002c0c:	4b22      	ldr	r3, [pc, #136]	; (8002c98 <SystemClock_Config+0xdc>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c14:	607b      	str	r3, [r7, #4]
 8002c16:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002c1c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002c20:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c22:	2302      	movs	r3, #2
 8002c24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c26:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002c2c:	2304      	movs	r3, #4
 8002c2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002c30:	23b4      	movs	r3, #180	; 0xb4
 8002c32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c34:	2302      	movs	r3, #2
 8002c36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002c38:	2307      	movs	r3, #7
 8002c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c3c:	f107 0320 	add.w	r3, r7, #32
 8002c40:	4618      	mov	r0, r3
 8002c42:	f002 fa9d 	bl	8005180 <HAL_RCC_OscConfig>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002c4c:	f001 f88a 	bl	8003d64 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002c50:	f002 fa46 	bl	80050e0 <HAL_PWREx_EnableOverDrive>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8002c5a:	f001 f883 	bl	8003d64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c5e:	230f      	movs	r3, #15
 8002c60:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c62:	2302      	movs	r3, #2
 8002c64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c66:	2300      	movs	r3, #0
 8002c68:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002c6a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002c6e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002c70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c74:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002c76:	f107 030c 	add.w	r3, r7, #12
 8002c7a:	2105      	movs	r1, #5
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f002 fcf7 	bl	8005670 <HAL_RCC_ClockConfig>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8002c88:	f001 f86c 	bl	8003d64 <Error_Handler>
  }
}
 8002c8c:	bf00      	nop
 8002c8e:	3750      	adds	r7, #80	; 0x50
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40023800 	.word	0x40023800
 8002c98:	40007000 	.word	0x40007000

08002c9c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8002ca0:	4b17      	ldr	r3, [pc, #92]	; (8002d00 <MX_SPI5_Init+0x64>)
 8002ca2:	4a18      	ldr	r2, [pc, #96]	; (8002d04 <MX_SPI5_Init+0x68>)
 8002ca4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002ca6:	4b16      	ldr	r3, [pc, #88]	; (8002d00 <MX_SPI5_Init+0x64>)
 8002ca8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002cac:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002cae:	4b14      	ldr	r3, [pc, #80]	; (8002d00 <MX_SPI5_Init+0x64>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002cb4:	4b12      	ldr	r3, [pc, #72]	; (8002d00 <MX_SPI5_Init+0x64>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cba:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <MX_SPI5_Init+0x64>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002cc0:	4b0f      	ldr	r3, [pc, #60]	; (8002d00 <MX_SPI5_Init+0x64>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002cc6:	4b0e      	ldr	r3, [pc, #56]	; (8002d00 <MX_SPI5_Init+0x64>)
 8002cc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ccc:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002cce:	4b0c      	ldr	r3, [pc, #48]	; (8002d00 <MX_SPI5_Init+0x64>)
 8002cd0:	2210      	movs	r2, #16
 8002cd2:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cd4:	4b0a      	ldr	r3, [pc, #40]	; (8002d00 <MX_SPI5_Init+0x64>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cda:	4b09      	ldr	r3, [pc, #36]	; (8002d00 <MX_SPI5_Init+0x64>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ce0:	4b07      	ldr	r3, [pc, #28]	; (8002d00 <MX_SPI5_Init+0x64>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8002ce6:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <MX_SPI5_Init+0x64>)
 8002ce8:	220a      	movs	r2, #10
 8002cea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002cec:	4804      	ldr	r0, [pc, #16]	; (8002d00 <MX_SPI5_Init+0x64>)
 8002cee:	f002 ff11 	bl	8005b14 <HAL_SPI_Init>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8002cf8:	f001 f834 	bl	8003d64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002cfc:	bf00      	nop
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	20000460 	.word	0x20000460
 8002d04:	40015000 	.word	0x40015000

08002d08 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b096      	sub	sp, #88	; 0x58
 8002d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d0e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002d12:	2200      	movs	r2, #0
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	605a      	str	r2, [r3, #4]
 8002d18:	609a      	str	r2, [r3, #8]
 8002d1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d1c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	605a      	str	r2, [r3, #4]
 8002d30:	609a      	str	r2, [r3, #8]
 8002d32:	60da      	str	r2, [r3, #12]
 8002d34:	611a      	str	r2, [r3, #16]
 8002d36:	615a      	str	r2, [r3, #20]
 8002d38:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002d3a:	1d3b      	adds	r3, r7, #4
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	2100      	movs	r1, #0
 8002d40:	4618      	mov	r0, r3
 8002d42:	f006 febb 	bl	8009abc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002d46:	4b50      	ldr	r3, [pc, #320]	; (8002e88 <MX_TIM1_Init+0x180>)
 8002d48:	4a50      	ldr	r2, [pc, #320]	; (8002e8c <MX_TIM1_Init+0x184>)
 8002d4a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10-1;
 8002d4c:	4b4e      	ldr	r3, [pc, #312]	; (8002e88 <MX_TIM1_Init+0x180>)
 8002d4e:	2209      	movs	r2, #9
 8002d50:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d52:	4b4d      	ldr	r3, [pc, #308]	; (8002e88 <MX_TIM1_Init+0x180>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8002d58:	4b4b      	ldr	r3, [pc, #300]	; (8002e88 <MX_TIM1_Init+0x180>)
 8002d5a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d5e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d60:	4b49      	ldr	r3, [pc, #292]	; (8002e88 <MX_TIM1_Init+0x180>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002d66:	4b48      	ldr	r3, [pc, #288]	; (8002e88 <MX_TIM1_Init+0x180>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d6c:	4b46      	ldr	r3, [pc, #280]	; (8002e88 <MX_TIM1_Init+0x180>)
 8002d6e:	2280      	movs	r2, #128	; 0x80
 8002d70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002d72:	4845      	ldr	r0, [pc, #276]	; (8002e88 <MX_TIM1_Init+0x180>)
 8002d74:	f003 fc84 	bl	8006680 <HAL_TIM_Base_Init>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002d7e:	f000 fff1 	bl	8003d64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d86:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002d88:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	483e      	ldr	r0, [pc, #248]	; (8002e88 <MX_TIM1_Init+0x180>)
 8002d90:	f004 f822 	bl	8006dd8 <HAL_TIM_ConfigClockSource>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002d9a:	f000 ffe3 	bl	8003d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002d9e:	483a      	ldr	r0, [pc, #232]	; (8002e88 <MX_TIM1_Init+0x180>)
 8002da0:	f003 fd2e 	bl	8006800 <HAL_TIM_PWM_Init>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002daa:	f000 ffdb 	bl	8003d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dae:	2300      	movs	r3, #0
 8002db0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002db2:	2300      	movs	r3, #0
 8002db4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002db6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4832      	ldr	r0, [pc, #200]	; (8002e88 <MX_TIM1_Init+0x180>)
 8002dbe:	f004 fc0b 	bl	80075d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002dc8:	f000 ffcc 	bl	8003d64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002dcc:	2360      	movs	r3, #96	; 0x60
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002de0:	2300      	movs	r3, #0
 8002de2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002de4:	2300      	movs	r3, #0
 8002de6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dec:	2200      	movs	r2, #0
 8002dee:	4619      	mov	r1, r3
 8002df0:	4825      	ldr	r0, [pc, #148]	; (8002e88 <MX_TIM1_Init+0x180>)
 8002df2:	f003 ff2f 	bl	8006c54 <HAL_TIM_PWM_ConfigChannel>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002dfc:	f000 ffb2 	bl	8003d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e04:	2204      	movs	r2, #4
 8002e06:	4619      	mov	r1, r3
 8002e08:	481f      	ldr	r0, [pc, #124]	; (8002e88 <MX_TIM1_Init+0x180>)
 8002e0a:	f003 ff23 	bl	8006c54 <HAL_TIM_PWM_ConfigChannel>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002e14:	f000 ffa6 	bl	8003d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002e18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e1c:	2208      	movs	r2, #8
 8002e1e:	4619      	mov	r1, r3
 8002e20:	4819      	ldr	r0, [pc, #100]	; (8002e88 <MX_TIM1_Init+0x180>)
 8002e22:	f003 ff17 	bl	8006c54 <HAL_TIM_PWM_ConfigChannel>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002e2c:	f000 ff9a 	bl	8003d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002e30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e34:	220c      	movs	r2, #12
 8002e36:	4619      	mov	r1, r3
 8002e38:	4813      	ldr	r0, [pc, #76]	; (8002e88 <MX_TIM1_Init+0x180>)
 8002e3a:	f003 ff0b 	bl	8006c54 <HAL_TIM_PWM_ConfigChannel>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8002e44:	f000 ff8e 	bl	8003d64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e50:	2300      	movs	r3, #0
 8002e52:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002e54:	2300      	movs	r3, #0
 8002e56:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e60:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002e62:	2300      	movs	r3, #0
 8002e64:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002e66:	1d3b      	adds	r3, r7, #4
 8002e68:	4619      	mov	r1, r3
 8002e6a:	4807      	ldr	r0, [pc, #28]	; (8002e88 <MX_TIM1_Init+0x180>)
 8002e6c:	f004 fc30 	bl	80076d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8002e76:	f000 ff75 	bl	8003d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002e7a:	4803      	ldr	r0, [pc, #12]	; (8002e88 <MX_TIM1_Init+0x180>)
 8002e7c:	f001 fa72 	bl	8004364 <HAL_TIM_MspPostInit>

}
 8002e80:	bf00      	nop
 8002e82:	3758      	adds	r7, #88	; 0x58
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	200004b8 	.word	0x200004b8
 8002e8c:	40010000 	.word	0x40010000

08002e90 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b08e      	sub	sp, #56	; 0x38
 8002e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	605a      	str	r2, [r3, #4]
 8002ea0:	609a      	str	r2, [r3, #8]
 8002ea2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ea4:	f107 0320 	add.w	r3, r7, #32
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002eae:	1d3b      	adds	r3, r7, #4
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	605a      	str	r2, [r3, #4]
 8002eb6:	609a      	str	r2, [r3, #8]
 8002eb8:	60da      	str	r2, [r3, #12]
 8002eba:	611a      	str	r2, [r3, #16]
 8002ebc:	615a      	str	r2, [r3, #20]
 8002ebe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ec0:	4b3d      	ldr	r3, [pc, #244]	; (8002fb8 <MX_TIM3_Init+0x128>)
 8002ec2:	4a3e      	ldr	r2, [pc, #248]	; (8002fbc <MX_TIM3_Init+0x12c>)
 8002ec4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5-1;
 8002ec6:	4b3c      	ldr	r3, [pc, #240]	; (8002fb8 <MX_TIM3_Init+0x128>)
 8002ec8:	2204      	movs	r2, #4
 8002eca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ecc:	4b3a      	ldr	r3, [pc, #232]	; (8002fb8 <MX_TIM3_Init+0x128>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8002ed2:	4b39      	ldr	r3, [pc, #228]	; (8002fb8 <MX_TIM3_Init+0x128>)
 8002ed4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ed8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eda:	4b37      	ldr	r3, [pc, #220]	; (8002fb8 <MX_TIM3_Init+0x128>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ee0:	4b35      	ldr	r3, [pc, #212]	; (8002fb8 <MX_TIM3_Init+0x128>)
 8002ee2:	2280      	movs	r2, #128	; 0x80
 8002ee4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002ee6:	4834      	ldr	r0, [pc, #208]	; (8002fb8 <MX_TIM3_Init+0x128>)
 8002ee8:	f003 fbca 	bl	8006680 <HAL_TIM_Base_Init>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002ef2:	f000 ff37 	bl	8003d64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ef6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002efa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002efc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f00:	4619      	mov	r1, r3
 8002f02:	482d      	ldr	r0, [pc, #180]	; (8002fb8 <MX_TIM3_Init+0x128>)
 8002f04:	f003 ff68 	bl	8006dd8 <HAL_TIM_ConfigClockSource>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002f0e:	f000 ff29 	bl	8003d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002f12:	4829      	ldr	r0, [pc, #164]	; (8002fb8 <MX_TIM3_Init+0x128>)
 8002f14:	f003 fc74 	bl	8006800 <HAL_TIM_PWM_Init>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002f1e:	f000 ff21 	bl	8003d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f22:	2300      	movs	r3, #0
 8002f24:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f26:	2300      	movs	r3, #0
 8002f28:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f2a:	f107 0320 	add.w	r3, r7, #32
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4821      	ldr	r0, [pc, #132]	; (8002fb8 <MX_TIM3_Init+0x128>)
 8002f32:	f004 fb51 	bl	80075d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002f3c:	f000 ff12 	bl	8003d64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f40:	2360      	movs	r3, #96	; 0x60
 8002f42:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002f44:	2300      	movs	r3, #0
 8002f46:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f50:	1d3b      	adds	r3, r7, #4
 8002f52:	2200      	movs	r2, #0
 8002f54:	4619      	mov	r1, r3
 8002f56:	4818      	ldr	r0, [pc, #96]	; (8002fb8 <MX_TIM3_Init+0x128>)
 8002f58:	f003 fe7c 	bl	8006c54 <HAL_TIM_PWM_ConfigChannel>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002f62:	f000 feff 	bl	8003d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f66:	1d3b      	adds	r3, r7, #4
 8002f68:	2204      	movs	r2, #4
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	4812      	ldr	r0, [pc, #72]	; (8002fb8 <MX_TIM3_Init+0x128>)
 8002f6e:	f003 fe71 	bl	8006c54 <HAL_TIM_PWM_ConfigChannel>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002f78:	f000 fef4 	bl	8003d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002f7c:	1d3b      	adds	r3, r7, #4
 8002f7e:	2208      	movs	r2, #8
 8002f80:	4619      	mov	r1, r3
 8002f82:	480d      	ldr	r0, [pc, #52]	; (8002fb8 <MX_TIM3_Init+0x128>)
 8002f84:	f003 fe66 	bl	8006c54 <HAL_TIM_PWM_ConfigChannel>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8002f8e:	f000 fee9 	bl	8003d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002f92:	1d3b      	adds	r3, r7, #4
 8002f94:	220c      	movs	r2, #12
 8002f96:	4619      	mov	r1, r3
 8002f98:	4807      	ldr	r0, [pc, #28]	; (8002fb8 <MX_TIM3_Init+0x128>)
 8002f9a:	f003 fe5b 	bl	8006c54 <HAL_TIM_PWM_ConfigChannel>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8002fa4:	f000 fede 	bl	8003d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002fa8:	4803      	ldr	r0, [pc, #12]	; (8002fb8 <MX_TIM3_Init+0x128>)
 8002faa:	f001 f9db 	bl	8004364 <HAL_TIM_MspPostInit>

}
 8002fae:	bf00      	nop
 8002fb0:	3738      	adds	r7, #56	; 0x38
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	20000500 	.word	0x20000500
 8002fbc:	40000400 	.word	0x40000400

08002fc0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b08e      	sub	sp, #56	; 0x38
 8002fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	605a      	str	r2, [r3, #4]
 8002fd0:	609a      	str	r2, [r3, #8]
 8002fd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fd4:	f107 0320 	add.w	r3, r7, #32
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fde:	1d3b      	adds	r3, r7, #4
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	605a      	str	r2, [r3, #4]
 8002fe6:	609a      	str	r2, [r3, #8]
 8002fe8:	60da      	str	r2, [r3, #12]
 8002fea:	611a      	str	r2, [r3, #16]
 8002fec:	615a      	str	r2, [r3, #20]
 8002fee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002ff0:	4b3d      	ldr	r3, [pc, #244]	; (80030e8 <MX_TIM4_Init+0x128>)
 8002ff2:	4a3e      	ldr	r2, [pc, #248]	; (80030ec <MX_TIM4_Init+0x12c>)
 8002ff4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 5-1;
 8002ff6:	4b3c      	ldr	r3, [pc, #240]	; (80030e8 <MX_TIM4_Init+0x128>)
 8002ff8:	2204      	movs	r2, #4
 8002ffa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ffc:	4b3a      	ldr	r3, [pc, #232]	; (80030e8 <MX_TIM4_Init+0x128>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8003002:	4b39      	ldr	r3, [pc, #228]	; (80030e8 <MX_TIM4_Init+0x128>)
 8003004:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003008:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800300a:	4b37      	ldr	r3, [pc, #220]	; (80030e8 <MX_TIM4_Init+0x128>)
 800300c:	2200      	movs	r2, #0
 800300e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003010:	4b35      	ldr	r3, [pc, #212]	; (80030e8 <MX_TIM4_Init+0x128>)
 8003012:	2280      	movs	r2, #128	; 0x80
 8003014:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003016:	4834      	ldr	r0, [pc, #208]	; (80030e8 <MX_TIM4_Init+0x128>)
 8003018:	f003 fb32 	bl	8006680 <HAL_TIM_Base_Init>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8003022:	f000 fe9f 	bl	8003d64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003026:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800302a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800302c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003030:	4619      	mov	r1, r3
 8003032:	482d      	ldr	r0, [pc, #180]	; (80030e8 <MX_TIM4_Init+0x128>)
 8003034:	f003 fed0 	bl	8006dd8 <HAL_TIM_ConfigClockSource>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800303e:	f000 fe91 	bl	8003d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003042:	4829      	ldr	r0, [pc, #164]	; (80030e8 <MX_TIM4_Init+0x128>)
 8003044:	f003 fbdc 	bl	8006800 <HAL_TIM_PWM_Init>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800304e:	f000 fe89 	bl	8003d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003052:	2300      	movs	r3, #0
 8003054:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003056:	2300      	movs	r3, #0
 8003058:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800305a:	f107 0320 	add.w	r3, r7, #32
 800305e:	4619      	mov	r1, r3
 8003060:	4821      	ldr	r0, [pc, #132]	; (80030e8 <MX_TIM4_Init+0x128>)
 8003062:	f004 fab9 	bl	80075d8 <HAL_TIMEx_MasterConfigSynchronization>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d001      	beq.n	8003070 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800306c:	f000 fe7a 	bl	8003d64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003070:	2360      	movs	r3, #96	; 0x60
 8003072:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003074:	2300      	movs	r3, #0
 8003076:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003078:	2300      	movs	r3, #0
 800307a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800307c:	2300      	movs	r3, #0
 800307e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003080:	1d3b      	adds	r3, r7, #4
 8003082:	2200      	movs	r2, #0
 8003084:	4619      	mov	r1, r3
 8003086:	4818      	ldr	r0, [pc, #96]	; (80030e8 <MX_TIM4_Init+0x128>)
 8003088:	f003 fde4 	bl	8006c54 <HAL_TIM_PWM_ConfigChannel>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8003092:	f000 fe67 	bl	8003d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003096:	1d3b      	adds	r3, r7, #4
 8003098:	2204      	movs	r2, #4
 800309a:	4619      	mov	r1, r3
 800309c:	4812      	ldr	r0, [pc, #72]	; (80030e8 <MX_TIM4_Init+0x128>)
 800309e:	f003 fdd9 	bl	8006c54 <HAL_TIM_PWM_ConfigChannel>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80030a8:	f000 fe5c 	bl	8003d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80030ac:	1d3b      	adds	r3, r7, #4
 80030ae:	2208      	movs	r2, #8
 80030b0:	4619      	mov	r1, r3
 80030b2:	480d      	ldr	r0, [pc, #52]	; (80030e8 <MX_TIM4_Init+0x128>)
 80030b4:	f003 fdce 	bl	8006c54 <HAL_TIM_PWM_ConfigChannel>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 80030be:	f000 fe51 	bl	8003d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80030c2:	1d3b      	adds	r3, r7, #4
 80030c4:	220c      	movs	r2, #12
 80030c6:	4619      	mov	r1, r3
 80030c8:	4807      	ldr	r0, [pc, #28]	; (80030e8 <MX_TIM4_Init+0x128>)
 80030ca:	f003 fdc3 	bl	8006c54 <HAL_TIM_PWM_ConfigChannel>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 80030d4:	f000 fe46 	bl	8003d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80030d8:	4803      	ldr	r0, [pc, #12]	; (80030e8 <MX_TIM4_Init+0x128>)
 80030da:	f001 f943 	bl	8004364 <HAL_TIM_MspPostInit>

}
 80030de:	bf00      	nop
 80030e0:	3738      	adds	r7, #56	; 0x38
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	20000548 	.word	0x20000548
 80030ec:	40000800 	.word	0x40000800

080030f0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b08e      	sub	sp, #56	; 0x38
 80030f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	605a      	str	r2, [r3, #4]
 8003100:	609a      	str	r2, [r3, #8]
 8003102:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003104:	f107 0320 	add.w	r3, r7, #32
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800310e:	1d3b      	adds	r3, r7, #4
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]
 8003114:	605a      	str	r2, [r3, #4]
 8003116:	609a      	str	r2, [r3, #8]
 8003118:	60da      	str	r2, [r3, #12]
 800311a:	611a      	str	r2, [r3, #16]
 800311c:	615a      	str	r2, [r3, #20]
 800311e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003120:	4b32      	ldr	r3, [pc, #200]	; (80031ec <MX_TIM5_Init+0xfc>)
 8003122:	4a33      	ldr	r2, [pc, #204]	; (80031f0 <MX_TIM5_Init+0x100>)
 8003124:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 5-1;
 8003126:	4b31      	ldr	r3, [pc, #196]	; (80031ec <MX_TIM5_Init+0xfc>)
 8003128:	2204      	movs	r2, #4
 800312a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800312c:	4b2f      	ldr	r3, [pc, #188]	; (80031ec <MX_TIM5_Init+0xfc>)
 800312e:	2200      	movs	r2, #0
 8003130:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8003132:	4b2e      	ldr	r3, [pc, #184]	; (80031ec <MX_TIM5_Init+0xfc>)
 8003134:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003138:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800313a:	4b2c      	ldr	r3, [pc, #176]	; (80031ec <MX_TIM5_Init+0xfc>)
 800313c:	2200      	movs	r2, #0
 800313e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003140:	4b2a      	ldr	r3, [pc, #168]	; (80031ec <MX_TIM5_Init+0xfc>)
 8003142:	2280      	movs	r2, #128	; 0x80
 8003144:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003146:	4829      	ldr	r0, [pc, #164]	; (80031ec <MX_TIM5_Init+0xfc>)
 8003148:	f003 fa9a 	bl	8006680 <HAL_TIM_Base_Init>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8003152:	f000 fe07 	bl	8003d64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003156:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800315a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800315c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003160:	4619      	mov	r1, r3
 8003162:	4822      	ldr	r0, [pc, #136]	; (80031ec <MX_TIM5_Init+0xfc>)
 8003164:	f003 fe38 	bl	8006dd8 <HAL_TIM_ConfigClockSource>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800316e:	f000 fdf9 	bl	8003d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8003172:	481e      	ldr	r0, [pc, #120]	; (80031ec <MX_TIM5_Init+0xfc>)
 8003174:	f003 fb44 	bl	8006800 <HAL_TIM_PWM_Init>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800317e:	f000 fdf1 	bl	8003d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003182:	2300      	movs	r3, #0
 8003184:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003186:	2300      	movs	r3, #0
 8003188:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800318a:	f107 0320 	add.w	r3, r7, #32
 800318e:	4619      	mov	r1, r3
 8003190:	4816      	ldr	r0, [pc, #88]	; (80031ec <MX_TIM5_Init+0xfc>)
 8003192:	f004 fa21 	bl	80075d8 <HAL_TIMEx_MasterConfigSynchronization>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800319c:	f000 fde2 	bl	8003d64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80031a0:	2360      	movs	r3, #96	; 0x60
 80031a2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80031a4:	2300      	movs	r3, #0
 80031a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80031a8:	2300      	movs	r3, #0
 80031aa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031ac:	2300      	movs	r3, #0
 80031ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80031b0:	1d3b      	adds	r3, r7, #4
 80031b2:	2200      	movs	r2, #0
 80031b4:	4619      	mov	r1, r3
 80031b6:	480d      	ldr	r0, [pc, #52]	; (80031ec <MX_TIM5_Init+0xfc>)
 80031b8:	f003 fd4c 	bl	8006c54 <HAL_TIM_PWM_ConfigChannel>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80031c2:	f000 fdcf 	bl	8003d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80031c6:	1d3b      	adds	r3, r7, #4
 80031c8:	2204      	movs	r2, #4
 80031ca:	4619      	mov	r1, r3
 80031cc:	4807      	ldr	r0, [pc, #28]	; (80031ec <MX_TIM5_Init+0xfc>)
 80031ce:	f003 fd41 	bl	8006c54 <HAL_TIM_PWM_ConfigChannel>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 80031d8:	f000 fdc4 	bl	8003d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80031dc:	4803      	ldr	r0, [pc, #12]	; (80031ec <MX_TIM5_Init+0xfc>)
 80031de:	f001 f8c1 	bl	8004364 <HAL_TIM_MspPostInit>

}
 80031e2:	bf00      	nop
 80031e4:	3738      	adds	r7, #56	; 0x38
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	20000590 	.word	0x20000590
 80031f0:	40000c00 	.word	0x40000c00

080031f4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b096      	sub	sp, #88	; 0x58
 80031f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80031fe:	2200      	movs	r2, #0
 8003200:	601a      	str	r2, [r3, #0]
 8003202:	605a      	str	r2, [r3, #4]
 8003204:	609a      	str	r2, [r3, #8]
 8003206:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003208:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800320c:	2200      	movs	r2, #0
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003212:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003216:	2200      	movs	r2, #0
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	605a      	str	r2, [r3, #4]
 800321c:	609a      	str	r2, [r3, #8]
 800321e:	60da      	str	r2, [r3, #12]
 8003220:	611a      	str	r2, [r3, #16]
 8003222:	615a      	str	r2, [r3, #20]
 8003224:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003226:	1d3b      	adds	r3, r7, #4
 8003228:	2220      	movs	r2, #32
 800322a:	2100      	movs	r1, #0
 800322c:	4618      	mov	r0, r3
 800322e:	f006 fc45 	bl	8009abc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003232:	4b44      	ldr	r3, [pc, #272]	; (8003344 <MX_TIM8_Init+0x150>)
 8003234:	4a44      	ldr	r2, [pc, #272]	; (8003348 <MX_TIM8_Init+0x154>)
 8003236:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 10-1;
 8003238:	4b42      	ldr	r3, [pc, #264]	; (8003344 <MX_TIM8_Init+0x150>)
 800323a:	2209      	movs	r2, #9
 800323c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800323e:	4b41      	ldr	r3, [pc, #260]	; (8003344 <MX_TIM8_Init+0x150>)
 8003240:	2200      	movs	r2, #0
 8003242:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000-1;
 8003244:	4b3f      	ldr	r3, [pc, #252]	; (8003344 <MX_TIM8_Init+0x150>)
 8003246:	f240 32e7 	movw	r2, #999	; 0x3e7
 800324a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800324c:	4b3d      	ldr	r3, [pc, #244]	; (8003344 <MX_TIM8_Init+0x150>)
 800324e:	2200      	movs	r2, #0
 8003250:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003252:	4b3c      	ldr	r3, [pc, #240]	; (8003344 <MX_TIM8_Init+0x150>)
 8003254:	2200      	movs	r2, #0
 8003256:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003258:	4b3a      	ldr	r3, [pc, #232]	; (8003344 <MX_TIM8_Init+0x150>)
 800325a:	2280      	movs	r2, #128	; 0x80
 800325c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800325e:	4839      	ldr	r0, [pc, #228]	; (8003344 <MX_TIM8_Init+0x150>)
 8003260:	f003 fa0e 	bl	8006680 <HAL_TIM_Base_Init>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800326a:	f000 fd7b 	bl	8003d64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800326e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003272:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003274:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003278:	4619      	mov	r1, r3
 800327a:	4832      	ldr	r0, [pc, #200]	; (8003344 <MX_TIM8_Init+0x150>)
 800327c:	f003 fdac 	bl	8006dd8 <HAL_TIM_ConfigClockSource>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8003286:	f000 fd6d 	bl	8003d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800328a:	482e      	ldr	r0, [pc, #184]	; (8003344 <MX_TIM8_Init+0x150>)
 800328c:	f003 fab8 	bl	8006800 <HAL_TIM_PWM_Init>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8003296:	f000 fd65 	bl	8003d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800329a:	2300      	movs	r3, #0
 800329c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800329e:	2300      	movs	r3, #0
 80032a0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80032a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80032a6:	4619      	mov	r1, r3
 80032a8:	4826      	ldr	r0, [pc, #152]	; (8003344 <MX_TIM8_Init+0x150>)
 80032aa:	f004 f995 	bl	80075d8 <HAL_TIMEx_MasterConfigSynchronization>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80032b4:	f000 fd56 	bl	8003d64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032b8:	2360      	movs	r3, #96	; 0x60
 80032ba:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80032bc:	2300      	movs	r3, #0
 80032be:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032c0:	2300      	movs	r3, #0
 80032c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80032c4:	2300      	movs	r3, #0
 80032c6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032c8:	2300      	movs	r3, #0
 80032ca:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80032cc:	2300      	movs	r3, #0
 80032ce:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80032d0:	2300      	movs	r3, #0
 80032d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032d8:	2200      	movs	r2, #0
 80032da:	4619      	mov	r1, r3
 80032dc:	4819      	ldr	r0, [pc, #100]	; (8003344 <MX_TIM8_Init+0x150>)
 80032de:	f003 fcb9 	bl	8006c54 <HAL_TIM_PWM_ConfigChannel>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80032e8:	f000 fd3c 	bl	8003d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80032ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032f0:	2204      	movs	r2, #4
 80032f2:	4619      	mov	r1, r3
 80032f4:	4813      	ldr	r0, [pc, #76]	; (8003344 <MX_TIM8_Init+0x150>)
 80032f6:	f003 fcad 	bl	8006c54 <HAL_TIM_PWM_ConfigChannel>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8003300:	f000 fd30 	bl	8003d64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003304:	2300      	movs	r3, #0
 8003306:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003308:	2300      	movs	r3, #0
 800330a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800330c:	2300      	movs	r3, #0
 800330e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003310:	2300      	movs	r3, #0
 8003312:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003314:	2300      	movs	r3, #0
 8003316:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003318:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800331c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800331e:	2300      	movs	r3, #0
 8003320:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003322:	1d3b      	adds	r3, r7, #4
 8003324:	4619      	mov	r1, r3
 8003326:	4807      	ldr	r0, [pc, #28]	; (8003344 <MX_TIM8_Init+0x150>)
 8003328:	f004 f9d2 	bl	80076d0 <HAL_TIMEx_ConfigBreakDeadTime>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8003332:	f000 fd17 	bl	8003d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003336:	4803      	ldr	r0, [pc, #12]	; (8003344 <MX_TIM8_Init+0x150>)
 8003338:	f001 f814 	bl	8004364 <HAL_TIM_MspPostInit>

}
 800333c:	bf00      	nop
 800333e:	3758      	adds	r7, #88	; 0x58
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	200005d8 	.word	0x200005d8
 8003348:	40010400 	.word	0x40010400

0800334c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b08c      	sub	sp, #48	; 0x30
 8003350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003352:	f107 0320 	add.w	r3, r7, #32
 8003356:	2200      	movs	r2, #0
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	605a      	str	r2, [r3, #4]
 800335c:	609a      	str	r2, [r3, #8]
 800335e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003360:	1d3b      	adds	r3, r7, #4
 8003362:	2200      	movs	r2, #0
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	605a      	str	r2, [r3, #4]
 8003368:	609a      	str	r2, [r3, #8]
 800336a:	60da      	str	r2, [r3, #12]
 800336c:	611a      	str	r2, [r3, #16]
 800336e:	615a      	str	r2, [r3, #20]
 8003370:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003372:	4b2b      	ldr	r3, [pc, #172]	; (8003420 <MX_TIM9_Init+0xd4>)
 8003374:	4a2b      	ldr	r2, [pc, #172]	; (8003424 <MX_TIM9_Init+0xd8>)
 8003376:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 10-1;
 8003378:	4b29      	ldr	r3, [pc, #164]	; (8003420 <MX_TIM9_Init+0xd4>)
 800337a:	2209      	movs	r2, #9
 800337c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800337e:	4b28      	ldr	r3, [pc, #160]	; (8003420 <MX_TIM9_Init+0xd4>)
 8003380:	2200      	movs	r2, #0
 8003382:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 8003384:	4b26      	ldr	r3, [pc, #152]	; (8003420 <MX_TIM9_Init+0xd4>)
 8003386:	f240 32e7 	movw	r2, #999	; 0x3e7
 800338a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800338c:	4b24      	ldr	r3, [pc, #144]	; (8003420 <MX_TIM9_Init+0xd4>)
 800338e:	2200      	movs	r2, #0
 8003390:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003392:	4b23      	ldr	r3, [pc, #140]	; (8003420 <MX_TIM9_Init+0xd4>)
 8003394:	2280      	movs	r2, #128	; 0x80
 8003396:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8003398:	4821      	ldr	r0, [pc, #132]	; (8003420 <MX_TIM9_Init+0xd4>)
 800339a:	f003 f971 	bl	8006680 <HAL_TIM_Base_Init>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 80033a4:	f000 fcde 	bl	8003d64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033ac:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80033ae:	f107 0320 	add.w	r3, r7, #32
 80033b2:	4619      	mov	r1, r3
 80033b4:	481a      	ldr	r0, [pc, #104]	; (8003420 <MX_TIM9_Init+0xd4>)
 80033b6:	f003 fd0f 	bl	8006dd8 <HAL_TIM_ConfigClockSource>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d001      	beq.n	80033c4 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 80033c0:	f000 fcd0 	bl	8003d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80033c4:	4816      	ldr	r0, [pc, #88]	; (8003420 <MX_TIM9_Init+0xd4>)
 80033c6:	f003 fa1b 	bl	8006800 <HAL_TIM_PWM_Init>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 80033d0:	f000 fcc8 	bl	8003d64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033d4:	2360      	movs	r3, #96	; 0x60
 80033d6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80033d8:	2300      	movs	r3, #0
 80033da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033dc:	2300      	movs	r3, #0
 80033de:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033e0:	2300      	movs	r3, #0
 80033e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80033e4:	1d3b      	adds	r3, r7, #4
 80033e6:	2200      	movs	r2, #0
 80033e8:	4619      	mov	r1, r3
 80033ea:	480d      	ldr	r0, [pc, #52]	; (8003420 <MX_TIM9_Init+0xd4>)
 80033ec:	f003 fc32 	bl	8006c54 <HAL_TIM_PWM_ConfigChannel>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 80033f6:	f000 fcb5 	bl	8003d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80033fa:	1d3b      	adds	r3, r7, #4
 80033fc:	2204      	movs	r2, #4
 80033fe:	4619      	mov	r1, r3
 8003400:	4807      	ldr	r0, [pc, #28]	; (8003420 <MX_TIM9_Init+0xd4>)
 8003402:	f003 fc27 	bl	8006c54 <HAL_TIM_PWM_ConfigChannel>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <MX_TIM9_Init+0xc4>
  {
    Error_Handler();
 800340c:	f000 fcaa 	bl	8003d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8003410:	4803      	ldr	r0, [pc, #12]	; (8003420 <MX_TIM9_Init+0xd4>)
 8003412:	f000 ffa7 	bl	8004364 <HAL_TIM_MspPostInit>

}
 8003416:	bf00      	nop
 8003418:	3730      	adds	r7, #48	; 0x30
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	20000620 	.word	0x20000620
 8003424:	40014000 	.word	0x40014000

08003428 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b08c      	sub	sp, #48	; 0x30
 800342c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800342e:	f107 0320 	add.w	r3, r7, #32
 8003432:	2200      	movs	r2, #0
 8003434:	601a      	str	r2, [r3, #0]
 8003436:	605a      	str	r2, [r3, #4]
 8003438:	609a      	str	r2, [r3, #8]
 800343a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800343c:	1d3b      	adds	r3, r7, #4
 800343e:	2200      	movs	r2, #0
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	605a      	str	r2, [r3, #4]
 8003444:	609a      	str	r2, [r3, #8]
 8003446:	60da      	str	r2, [r3, #12]
 8003448:	611a      	str	r2, [r3, #16]
 800344a:	615a      	str	r2, [r3, #20]
 800344c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800344e:	4b2b      	ldr	r3, [pc, #172]	; (80034fc <MX_TIM12_Init+0xd4>)
 8003450:	4a2b      	ldr	r2, [pc, #172]	; (8003500 <MX_TIM12_Init+0xd8>)
 8003452:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 30-1;
 8003454:	4b29      	ldr	r3, [pc, #164]	; (80034fc <MX_TIM12_Init+0xd4>)
 8003456:	221d      	movs	r2, #29
 8003458:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800345a:	4b28      	ldr	r3, [pc, #160]	; (80034fc <MX_TIM12_Init+0xd4>)
 800345c:	2200      	movs	r2, #0
 800345e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 60000-1;
 8003460:	4b26      	ldr	r3, [pc, #152]	; (80034fc <MX_TIM12_Init+0xd4>)
 8003462:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8003466:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003468:	4b24      	ldr	r3, [pc, #144]	; (80034fc <MX_TIM12_Init+0xd4>)
 800346a:	2200      	movs	r2, #0
 800346c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800346e:	4b23      	ldr	r3, [pc, #140]	; (80034fc <MX_TIM12_Init+0xd4>)
 8003470:	2280      	movs	r2, #128	; 0x80
 8003472:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8003474:	4821      	ldr	r0, [pc, #132]	; (80034fc <MX_TIM12_Init+0xd4>)
 8003476:	f003 f903 	bl	8006680 <HAL_TIM_Base_Init>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8003480:	f000 fc70 	bl	8003d64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003488:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800348a:	f107 0320 	add.w	r3, r7, #32
 800348e:	4619      	mov	r1, r3
 8003490:	481a      	ldr	r0, [pc, #104]	; (80034fc <MX_TIM12_Init+0xd4>)
 8003492:	f003 fca1 	bl	8006dd8 <HAL_TIM_ConfigClockSource>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 800349c:	f000 fc62 	bl	8003d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80034a0:	4816      	ldr	r0, [pc, #88]	; (80034fc <MX_TIM12_Init+0xd4>)
 80034a2:	f003 f9ad 	bl	8006800 <HAL_TIM_PWM_Init>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 80034ac:	f000 fc5a 	bl	8003d64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034b0:	2360      	movs	r3, #96	; 0x60
 80034b2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80034b4:	2300      	movs	r3, #0
 80034b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034b8:	2300      	movs	r3, #0
 80034ba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034bc:	2300      	movs	r3, #0
 80034be:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80034c0:	1d3b      	adds	r3, r7, #4
 80034c2:	2200      	movs	r2, #0
 80034c4:	4619      	mov	r1, r3
 80034c6:	480d      	ldr	r0, [pc, #52]	; (80034fc <MX_TIM12_Init+0xd4>)
 80034c8:	f003 fbc4 	bl	8006c54 <HAL_TIM_PWM_ConfigChannel>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 80034d2:	f000 fc47 	bl	8003d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80034d6:	1d3b      	adds	r3, r7, #4
 80034d8:	2204      	movs	r2, #4
 80034da:	4619      	mov	r1, r3
 80034dc:	4807      	ldr	r0, [pc, #28]	; (80034fc <MX_TIM12_Init+0xd4>)
 80034de:	f003 fbb9 	bl	8006c54 <HAL_TIM_PWM_ConfigChannel>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 80034e8:	f000 fc3c 	bl	8003d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80034ec:	4803      	ldr	r0, [pc, #12]	; (80034fc <MX_TIM12_Init+0xd4>)
 80034ee:	f000 ff39 	bl	8004364 <HAL_TIM_MspPostInit>

}
 80034f2:	bf00      	nop
 80034f4:	3730      	adds	r7, #48	; 0x30
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	20000668 	.word	0x20000668
 8003500:	40001800 	.word	0x40001800

08003504 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003508:	4b11      	ldr	r3, [pc, #68]	; (8003550 <MX_USART3_UART_Init+0x4c>)
 800350a:	4a12      	ldr	r2, [pc, #72]	; (8003554 <MX_USART3_UART_Init+0x50>)
 800350c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800350e:	4b10      	ldr	r3, [pc, #64]	; (8003550 <MX_USART3_UART_Init+0x4c>)
 8003510:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003514:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003516:	4b0e      	ldr	r3, [pc, #56]	; (8003550 <MX_USART3_UART_Init+0x4c>)
 8003518:	2200      	movs	r2, #0
 800351a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800351c:	4b0c      	ldr	r3, [pc, #48]	; (8003550 <MX_USART3_UART_Init+0x4c>)
 800351e:	2200      	movs	r2, #0
 8003520:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003522:	4b0b      	ldr	r3, [pc, #44]	; (8003550 <MX_USART3_UART_Init+0x4c>)
 8003524:	2200      	movs	r2, #0
 8003526:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003528:	4b09      	ldr	r3, [pc, #36]	; (8003550 <MX_USART3_UART_Init+0x4c>)
 800352a:	220c      	movs	r2, #12
 800352c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800352e:	4b08      	ldr	r3, [pc, #32]	; (8003550 <MX_USART3_UART_Init+0x4c>)
 8003530:	2200      	movs	r2, #0
 8003532:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003534:	4b06      	ldr	r3, [pc, #24]	; (8003550 <MX_USART3_UART_Init+0x4c>)
 8003536:	2200      	movs	r2, #0
 8003538:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800353a:	4805      	ldr	r0, [pc, #20]	; (8003550 <MX_USART3_UART_Init+0x4c>)
 800353c:	f004 f92e 	bl	800779c <HAL_UART_Init>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003546:	f000 fc0d 	bl	8003d64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800354a:	bf00      	nop
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	200006b0 	.word	0x200006b0
 8003554:	40004800 	.word	0x40004800

08003558 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b08e      	sub	sp, #56	; 0x38
 800355c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800355e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003562:	2200      	movs	r2, #0
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	605a      	str	r2, [r3, #4]
 8003568:	609a      	str	r2, [r3, #8]
 800356a:	60da      	str	r2, [r3, #12]
 800356c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800356e:	2300      	movs	r3, #0
 8003570:	623b      	str	r3, [r7, #32]
 8003572:	4bba      	ldr	r3, [pc, #744]	; (800385c <MX_GPIO_Init+0x304>)
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	4ab9      	ldr	r2, [pc, #740]	; (800385c <MX_GPIO_Init+0x304>)
 8003578:	f043 0310 	orr.w	r3, r3, #16
 800357c:	6313      	str	r3, [r2, #48]	; 0x30
 800357e:	4bb7      	ldr	r3, [pc, #732]	; (800385c <MX_GPIO_Init+0x304>)
 8003580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003582:	f003 0310 	and.w	r3, r3, #16
 8003586:	623b      	str	r3, [r7, #32]
 8003588:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800358a:	2300      	movs	r3, #0
 800358c:	61fb      	str	r3, [r7, #28]
 800358e:	4bb3      	ldr	r3, [pc, #716]	; (800385c <MX_GPIO_Init+0x304>)
 8003590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003592:	4ab2      	ldr	r2, [pc, #712]	; (800385c <MX_GPIO_Init+0x304>)
 8003594:	f043 0304 	orr.w	r3, r3, #4
 8003598:	6313      	str	r3, [r2, #48]	; 0x30
 800359a:	4bb0      	ldr	r3, [pc, #704]	; (800385c <MX_GPIO_Init+0x304>)
 800359c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359e:	f003 0304 	and.w	r3, r3, #4
 80035a2:	61fb      	str	r3, [r7, #28]
 80035a4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80035a6:	2300      	movs	r3, #0
 80035a8:	61bb      	str	r3, [r7, #24]
 80035aa:	4bac      	ldr	r3, [pc, #688]	; (800385c <MX_GPIO_Init+0x304>)
 80035ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ae:	4aab      	ldr	r2, [pc, #684]	; (800385c <MX_GPIO_Init+0x304>)
 80035b0:	f043 0320 	orr.w	r3, r3, #32
 80035b4:	6313      	str	r3, [r2, #48]	; 0x30
 80035b6:	4ba9      	ldr	r3, [pc, #676]	; (800385c <MX_GPIO_Init+0x304>)
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	f003 0320 	and.w	r3, r3, #32
 80035be:	61bb      	str	r3, [r7, #24]
 80035c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80035c2:	2300      	movs	r3, #0
 80035c4:	617b      	str	r3, [r7, #20]
 80035c6:	4ba5      	ldr	r3, [pc, #660]	; (800385c <MX_GPIO_Init+0x304>)
 80035c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ca:	4aa4      	ldr	r2, [pc, #656]	; (800385c <MX_GPIO_Init+0x304>)
 80035cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035d0:	6313      	str	r3, [r2, #48]	; 0x30
 80035d2:	4ba2      	ldr	r3, [pc, #648]	; (800385c <MX_GPIO_Init+0x304>)
 80035d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035da:	617b      	str	r3, [r7, #20]
 80035dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035de:	2300      	movs	r3, #0
 80035e0:	613b      	str	r3, [r7, #16]
 80035e2:	4b9e      	ldr	r3, [pc, #632]	; (800385c <MX_GPIO_Init+0x304>)
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	4a9d      	ldr	r2, [pc, #628]	; (800385c <MX_GPIO_Init+0x304>)
 80035e8:	f043 0301 	orr.w	r3, r3, #1
 80035ec:	6313      	str	r3, [r2, #48]	; 0x30
 80035ee:	4b9b      	ldr	r3, [pc, #620]	; (800385c <MX_GPIO_Init+0x304>)
 80035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	613b      	str	r3, [r7, #16]
 80035f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035fa:	2300      	movs	r3, #0
 80035fc:	60fb      	str	r3, [r7, #12]
 80035fe:	4b97      	ldr	r3, [pc, #604]	; (800385c <MX_GPIO_Init+0x304>)
 8003600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003602:	4a96      	ldr	r2, [pc, #600]	; (800385c <MX_GPIO_Init+0x304>)
 8003604:	f043 0302 	orr.w	r3, r3, #2
 8003608:	6313      	str	r3, [r2, #48]	; 0x30
 800360a:	4b94      	ldr	r3, [pc, #592]	; (800385c <MX_GPIO_Init+0x304>)
 800360c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	60fb      	str	r3, [r7, #12]
 8003614:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003616:	2300      	movs	r3, #0
 8003618:	60bb      	str	r3, [r7, #8]
 800361a:	4b90      	ldr	r3, [pc, #576]	; (800385c <MX_GPIO_Init+0x304>)
 800361c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361e:	4a8f      	ldr	r2, [pc, #572]	; (800385c <MX_GPIO_Init+0x304>)
 8003620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003624:	6313      	str	r3, [r2, #48]	; 0x30
 8003626:	4b8d      	ldr	r3, [pc, #564]	; (800385c <MX_GPIO_Init+0x304>)
 8003628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362e:	60bb      	str	r3, [r7, #8]
 8003630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003632:	2300      	movs	r3, #0
 8003634:	607b      	str	r3, [r7, #4]
 8003636:	4b89      	ldr	r3, [pc, #548]	; (800385c <MX_GPIO_Init+0x304>)
 8003638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363a:	4a88      	ldr	r2, [pc, #544]	; (800385c <MX_GPIO_Init+0x304>)
 800363c:	f043 0308 	orr.w	r3, r3, #8
 8003640:	6313      	str	r3, [r2, #48]	; 0x30
 8003642:	4b86      	ldr	r3, [pc, #536]	; (800385c <MX_GPIO_Init+0x304>)
 8003644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003646:	f003 0308 	and.w	r3, r3, #8
 800364a:	607b      	str	r3, [r7, #4]
 800364c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800364e:	2200      	movs	r2, #0
 8003650:	2140      	movs	r1, #64	; 0x40
 8003652:	4883      	ldr	r0, [pc, #524]	; (8003860 <MX_GPIO_Init+0x308>)
 8003654:	f001 fcf8 	bl	8005048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PISTON_PELONTAR_Pin|PISTON_A_Pin|PISTON_B_Pin|PISTON_BOLA_Pin
 8003658:	2200      	movs	r2, #0
 800365a:	f641 010f 	movw	r1, #6159	; 0x180f
 800365e:	4881      	ldr	r0, [pc, #516]	; (8003864 <MX_GPIO_Init+0x30c>)
 8003660:	f001 fcf2 	bl	8005048 <HAL_GPIO_WritePin>
                          |PISTON_PADI_Pin|PISTON_D_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|EN_EXDR_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003664:	2200      	movs	r2, #0
 8003666:	21c1      	movs	r1, #193	; 0xc1
 8003668:	487f      	ldr	r0, [pc, #508]	; (8003868 <MX_GPIO_Init+0x310>)
 800366a:	f001 fced 	bl	8005048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, EN_LF_Pin|EN_RF_Pin|EN_EXDL_Pin|EN_RB_Pin
 800366e:	2200      	movs	r2, #0
 8003670:	f64b 4102 	movw	r1, #48130	; 0xbc02
 8003674:	487d      	ldr	r0, [pc, #500]	; (800386c <MX_GPIO_Init+0x314>)
 8003676:	f001 fce7 	bl	8005048 <HAL_GPIO_WritePin>
                          |EN_PADI_Pin|EN_PELONTAR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, EN_LB_Pin|PISTON_C_Pin, GPIO_PIN_RESET);
 800367a:	2200      	movs	r2, #0
 800367c:	2105      	movs	r1, #5
 800367e:	487c      	ldr	r0, [pc, #496]	; (8003870 <MX_GPIO_Init+0x318>)
 8003680:	f001 fce2 	bl	8005048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_BOLA_GPIO_Port, EN_BOLA_Pin, GPIO_PIN_RESET);
 8003684:	2200      	movs	r2, #0
 8003686:	2102      	movs	r1, #2
 8003688:	487a      	ldr	r0, [pc, #488]	; (8003874 <MX_GPIO_Init+0x31c>)
 800368a:	f001 fcdd 	bl	8005048 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENC4_A_Pin ENC4_B_Pin ENC3_B_Pin ENC1_A_Pin
                           ENC2_A_Pin ENC3_A_Pin ENC2_B_Pin */
  GPIO_InitStruct.Pin = ENC4_A_Pin|ENC4_B_Pin|ENC3_B_Pin|ENC1_A_Pin
 800368e:	f64b 030e 	movw	r3, #47118	; 0xb80e
 8003692:	627b      	str	r3, [r7, #36]	; 0x24
                          |ENC2_A_Pin|ENC3_A_Pin|ENC2_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003694:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003698:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800369a:	2301      	movs	r3, #1
 800369c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800369e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036a2:	4619      	mov	r1, r3
 80036a4:	486e      	ldr	r0, [pc, #440]	; (8003860 <MX_GPIO_Init+0x308>)
 80036a6:	f001 fb0b 	bl	8004cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 80036aa:	2340      	movs	r3, #64	; 0x40
 80036ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036ae:	2301      	movs	r3, #1
 80036b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b2:	2300      	movs	r3, #0
 80036b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036b6:	2300      	movs	r3, #0
 80036b8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80036ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036be:	4619      	mov	r1, r3
 80036c0:	4867      	ldr	r0, [pc, #412]	; (8003860 <MX_GPIO_Init+0x308>)
 80036c2:	f001 fafd 	bl	8004cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PISTON_PELONTAR_Pin PISTON_A_Pin PISTON_B_Pin PISTON_BOLA_Pin
                           PISTON_PADI_Pin PISTON_D_Pin */
  GPIO_InitStruct.Pin = PISTON_PELONTAR_Pin|PISTON_A_Pin|PISTON_B_Pin|PISTON_BOLA_Pin
 80036c6:	f641 030f 	movw	r3, #6159	; 0x180f
 80036ca:	627b      	str	r3, [r7, #36]	; 0x24
                          |PISTON_PADI_Pin|PISTON_D_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036cc:	2301      	movs	r3, #1
 80036ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d0:	2300      	movs	r3, #0
 80036d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80036d4:	2301      	movs	r3, #1
 80036d6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036dc:	4619      	mov	r1, r3
 80036de:	4861      	ldr	r0, [pc, #388]	; (8003864 <MX_GPIO_Init+0x30c>)
 80036e0:	f001 faee 	bl	8004cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin EN_EXDR_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|EN_EXDR_Pin|LD2_Pin;
 80036e4:	23c1      	movs	r3, #193	; 0xc1
 80036e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036e8:	2301      	movs	r3, #1
 80036ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ec:	2300      	movs	r3, #0
 80036ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036f0:	2300      	movs	r3, #0
 80036f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036f8:	4619      	mov	r1, r3
 80036fa:	485b      	ldr	r0, [pc, #364]	; (8003868 <MX_GPIO_Init+0x310>)
 80036fc:	f001 fae0 	bl	8004cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LS_2_Pin LS_3_Pin LS_7_Pin */
  GPIO_InitStruct.Pin = LS_2_Pin|LS_3_Pin|LS_7_Pin;
 8003700:	f240 1321 	movw	r3, #289	; 0x121
 8003704:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003706:	2300      	movs	r3, #0
 8003708:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800370a:	2301      	movs	r3, #1
 800370c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800370e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003712:	4619      	mov	r1, r3
 8003714:	4855      	ldr	r0, [pc, #340]	; (800386c <MX_GPIO_Init+0x314>)
 8003716:	f001 fad3 	bl	8004cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_LF_Pin EN_RF_Pin EN_EXDL_Pin EN_RB_Pin
                           EN_PADI_Pin EN_PELONTAR_Pin */
  GPIO_InitStruct.Pin = EN_LF_Pin|EN_RF_Pin|EN_EXDL_Pin|EN_RB_Pin
 800371a:	f64b 4302 	movw	r3, #48130	; 0xbc02
 800371e:	627b      	str	r3, [r7, #36]	; 0x24
                          |EN_PADI_Pin|EN_PELONTAR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003720:	2301      	movs	r3, #1
 8003722:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003724:	2300      	movs	r3, #0
 8003726:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003728:	2300      	movs	r3, #0
 800372a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800372c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003730:	4619      	mov	r1, r3
 8003732:	484e      	ldr	r0, [pc, #312]	; (800386c <MX_GPIO_Init+0x314>)
 8003734:	f001 fac4 	bl	8004cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LS_4_Pin LS_6_Pin */
  GPIO_InitStruct.Pin = LS_4_Pin|LS_6_Pin;
 8003738:	f44f 6390 	mov.w	r3, #1152	; 0x480
 800373c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800373e:	2300      	movs	r3, #0
 8003740:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003742:	2301      	movs	r3, #1
 8003744:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003746:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800374a:	4619      	mov	r1, r3
 800374c:	4848      	ldr	r0, [pc, #288]	; (8003870 <MX_GPIO_Init+0x318>)
 800374e:	f001 fab7 	bl	8004cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003752:	2380      	movs	r3, #128	; 0x80
 8003754:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003756:	2300      	movs	r3, #0
 8003758:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800375a:	2300      	movs	r3, #0
 800375c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800375e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003762:	4619      	mov	r1, r3
 8003764:	4841      	ldr	r0, [pc, #260]	; (800386c <MX_GPIO_Init+0x314>)
 8003766:	f001 faab 	bl	8004cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_LB_Pin */
  GPIO_InitStruct.Pin = EN_LB_Pin;
 800376a:	2301      	movs	r3, #1
 800376c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800376e:	2301      	movs	r3, #1
 8003770:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003772:	2300      	movs	r3, #0
 8003774:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003776:	2300      	movs	r3, #0
 8003778:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(EN_LB_GPIO_Port, &GPIO_InitStruct);
 800377a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800377e:	4619      	mov	r1, r3
 8003780:	483b      	ldr	r0, [pc, #236]	; (8003870 <MX_GPIO_Init+0x318>)
 8003782:	f001 fa9d 	bl	8004cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PISTON_C_Pin */
  GPIO_InitStruct.Pin = PISTON_C_Pin;
 8003786:	2304      	movs	r3, #4
 8003788:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800378a:	2301      	movs	r3, #1
 800378c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800378e:	2300      	movs	r3, #0
 8003790:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003792:	2301      	movs	r3, #1
 8003794:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PISTON_C_GPIO_Port, &GPIO_InitStruct);
 8003796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800379a:	4619      	mov	r1, r3
 800379c:	4834      	ldr	r0, [pc, #208]	; (8003870 <MX_GPIO_Init+0x318>)
 800379e:	f001 fa8f 	bl	8004cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LS_5_Pin */
  GPIO_InitStruct.Pin = LS_5_Pin;
 80037a2:	2310      	movs	r3, #16
 80037a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80037a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80037aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037ac:	2301      	movs	r3, #1
 80037ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LS_5_GPIO_Port, &GPIO_InitStruct);
 80037b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037b4:	4619      	mov	r1, r3
 80037b6:	482e      	ldr	r0, [pc, #184]	; (8003870 <MX_GPIO_Init+0x318>)
 80037b8:	f001 fa82 	bl	8004cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LS_1_Pin ENC1_B_Pin */
  GPIO_InitStruct.Pin = LS_1_Pin|ENC1_B_Pin;
 80037bc:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80037c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80037c2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80037c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037c8:	2301      	movs	r3, #1
 80037ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80037cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037d0:	4619      	mov	r1, r3
 80037d2:	4826      	ldr	r0, [pc, #152]	; (800386c <MX_GPIO_Init+0x314>)
 80037d4:	f001 fa74 	bl	8004cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_BOLA_Pin */
  GPIO_InitStruct.Pin = EN_BOLA_Pin;
 80037d8:	2302      	movs	r3, #2
 80037da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037dc:	2301      	movs	r3, #1
 80037de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e0:	2300      	movs	r3, #0
 80037e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037e4:	2300      	movs	r3, #0
 80037e6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(EN_BOLA_GPIO_Port, &GPIO_InitStruct);
 80037e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037ec:	4619      	mov	r1, r3
 80037ee:	4821      	ldr	r0, [pc, #132]	; (8003874 <MX_GPIO_Init+0x31c>)
 80037f0:	f001 fa66 	bl	8004cc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80037f4:	2200      	movs	r2, #0
 80037f6:	2105      	movs	r1, #5
 80037f8:	2007      	movs	r0, #7
 80037fa:	f001 f9a5 	bl	8004b48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80037fe:	2007      	movs	r0, #7
 8003800:	f001 f9be 	bl	8004b80 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8003804:	2200      	movs	r2, #0
 8003806:	2105      	movs	r1, #5
 8003808:	2008      	movs	r0, #8
 800380a:	f001 f99d 	bl	8004b48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800380e:	2008      	movs	r0, #8
 8003810:	f001 f9b6 	bl	8004b80 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8003814:	2200      	movs	r2, #0
 8003816:	2105      	movs	r1, #5
 8003818:	2009      	movs	r0, #9
 800381a:	f001 f995 	bl	8004b48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800381e:	2009      	movs	r0, #9
 8003820:	f001 f9ae 	bl	8004b80 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8003824:	2200      	movs	r2, #0
 8003826:	2105      	movs	r1, #5
 8003828:	200a      	movs	r0, #10
 800382a:	f001 f98d 	bl	8004b48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800382e:	200a      	movs	r0, #10
 8003830:	f001 f9a6 	bl	8004b80 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8003834:	2200      	movs	r2, #0
 8003836:	2105      	movs	r1, #5
 8003838:	2017      	movs	r0, #23
 800383a:	f001 f985 	bl	8004b48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800383e:	2017      	movs	r0, #23
 8003840:	f001 f99e 	bl	8004b80 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8003844:	2200      	movs	r2, #0
 8003846:	2105      	movs	r1, #5
 8003848:	2028      	movs	r0, #40	; 0x28
 800384a:	f001 f97d 	bl	8004b48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800384e:	2028      	movs	r0, #40	; 0x28
 8003850:	f001 f996 	bl	8004b80 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003854:	bf00      	nop
 8003856:	3738      	adds	r7, #56	; 0x38
 8003858:	46bd      	mov	sp, r7
 800385a:	e00d      	b.n	8003878 <MX_GPIO_Init+0x320>
 800385c:	40023800 	.word	0x40023800
 8003860:	40021400 	.word	0x40021400
 8003864:	40020800 	.word	0x40020800
 8003868:	40020400 	.word	0x40020400
 800386c:	40021800 	.word	0x40021800
 8003870:	40020c00 	.word	0x40020c00
 8003874:	40021000 	.word	0x40021000
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop

0800387c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	4603      	mov	r3, r0
 8003884:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == LS_1_Pin) {
 8003886:	88fb      	ldrh	r3, [r7, #6]
 8003888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800388c:	d102      	bne.n	8003894 <HAL_GPIO_EXTI_Callback+0x18>
		lsflag_1 = 1;
 800388e:	4b07      	ldr	r3, [pc, #28]	; (80038ac <HAL_GPIO_EXTI_Callback+0x30>)
 8003890:	2201      	movs	r2, #1
 8003892:	601a      	str	r2, [r3, #0]
//
//	if (GPIO_Pin == LS_4_Pin) {
//		lsflag_4 = 1;
//	}

	if (GPIO_Pin == LS_5_Pin) {
 8003894:	88fb      	ldrh	r3, [r7, #6]
 8003896:	2b10      	cmp	r3, #16
 8003898:	d102      	bne.n	80038a0 <HAL_GPIO_EXTI_Callback+0x24>
		lsflag_5 = 1;
 800389a:	4b05      	ldr	r3, [pc, #20]	; (80038b0 <HAL_GPIO_EXTI_Callback+0x34>)
 800389c:	2201      	movs	r2, #1
 800389e:	601a      	str	r2, [r3, #0]
	}

//	if(GPIO_Pin == ENC1_A_Pin) read_pulse_A(&R_front);
//	else if(GPIO_Pin == ENC1_B_Pin) read_pulse_B(&R_front);

}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr
 80038ac:	2000078c 	.word	0x2000078c
 80038b0:	2000079c 	.word	0x2000079c
 80038b4:	00000000 	.word	0x00000000

080038b8 <InputHandle_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_InputHandle_Task */
void InputHandle_Task(void const * argument)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
//	  printf("input task\r\n");
	  currentTick = HAL_GetTick(); //kayak millis
 80038c0:	f001 f85a 	bl	8004978 <HAL_GetTick>
 80038c4:	4603      	mov	r3, r0
 80038c6:	4a24      	ldr	r2, [pc, #144]	; (8003958 <InputHandle_Task+0xa0>)
 80038c8:	6013      	str	r3, [r2, #0]
	  ds4();
 80038ca:	f7fe f8d1 	bl	8001a70 <ds4>
	  lxm = lx - lxs;
 80038ce:	4b23      	ldr	r3, [pc, #140]	; (800395c <InputHandle_Task+0xa4>)
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	4b23      	ldr	r3, [pc, #140]	; (8003960 <InputHandle_Task+0xa8>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	4a22      	ldr	r2, [pc, #136]	; (8003964 <InputHandle_Task+0xac>)
 80038da:	6013      	str	r3, [r2, #0]
	  lym = ly - lys;
 80038dc:	4b22      	ldr	r3, [pc, #136]	; (8003968 <InputHandle_Task+0xb0>)
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	4b22      	ldr	r3, [pc, #136]	; (800396c <InputHandle_Task+0xb4>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	4a22      	ldr	r2, [pc, #136]	; (8003970 <InputHandle_Task+0xb8>)
 80038e8:	6013      	str	r3, [r2, #0]
	  if(segitiga==1){
 80038ea:	4b22      	ldr	r3, [pc, #136]	; (8003974 <InputHandle_Task+0xbc>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d124      	bne.n	800393c <InputHandle_Task+0x84>
		  if(currentTick-nowTick>100 && nos<2){
 80038f2:	4b19      	ldr	r3, [pc, #100]	; (8003958 <InputHandle_Task+0xa0>)
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	4b20      	ldr	r3, [pc, #128]	; (8003978 <InputHandle_Task+0xc0>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b64      	cmp	r3, #100	; 0x64
 80038fe:	d923      	bls.n	8003948 <InputHandle_Task+0x90>
 8003900:	4b1e      	ldr	r3, [pc, #120]	; (800397c <InputHandle_Task+0xc4>)
 8003902:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003906:	f04f 0200 	mov.w	r2, #0
 800390a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800390e:	f7fd f89d 	bl	8000a4c <__aeabi_dcmplt>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d017      	beq.n	8003948 <InputHandle_Task+0x90>
			  nos+=0.2;
 8003918:	4b18      	ldr	r3, [pc, #96]	; (800397c <InputHandle_Task+0xc4>)
 800391a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800391e:	a30c      	add	r3, pc, #48	; (adr r3, 8003950 <InputHandle_Task+0x98>)
 8003920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003924:	f7fc fc6a 	bl	80001fc <__adddf3>
 8003928:	4602      	mov	r2, r0
 800392a:	460b      	mov	r3, r1
 800392c:	4913      	ldr	r1, [pc, #76]	; (800397c <InputHandle_Task+0xc4>)
 800392e:	e9c1 2300 	strd	r2, r3, [r1]
			  nowTick = currentTick;
 8003932:	4b09      	ldr	r3, [pc, #36]	; (8003958 <InputHandle_Task+0xa0>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a10      	ldr	r2, [pc, #64]	; (8003978 <InputHandle_Task+0xc0>)
 8003938:	6013      	str	r3, [r2, #0]
 800393a:	e005      	b.n	8003948 <InputHandle_Task+0x90>
		  }
	  }
	  else nos = 1;
 800393c:	490f      	ldr	r1, [pc, #60]	; (800397c <InputHandle_Task+0xc4>)
 800393e:	f04f 0200 	mov.w	r2, #0
 8003942:	4b0f      	ldr	r3, [pc, #60]	; (8003980 <InputHandle_Task+0xc8>)
 8003944:	e9c1 2300 	strd	r2, r3, [r1]
//	  printf("\r\n at:%d, ki:%d, bw:%d, ka:%d, se3:%d, se4:%d, x:%d, o:%d,r1:%d, l1:%d, r3:%d, l3:%d, shr:%d, opt:%d, ps:%d, tpad:%d, lx:%d, ly:%d  ",
//			  atas, kiri, bawah, kanan, segitiga, kotak,silang,bulat,r1, l1, r3, l3, share, options,ps,tpad, lxm, lym);
//	  printf("\r\n lxs:%d , lys:%d, lx:%d, ly:%d, lxm:%d, lym:%d",
//	  			   lxs, lys, lx, ly, lxm, lym);
//	  printf("w1:%d, w2:%d, w3:%d, w4:%d, putar:%d", wheel[0], wheel[1], wheel[2], wheel[3], putar);
	  osDelay(1);
 8003948:	2001      	movs	r0, #1
 800394a:	f004 fea6 	bl	800869a <osDelay>
	  currentTick = HAL_GetTick(); //kayak millis
 800394e:	e7b7      	b.n	80038c0 <InputHandle_Task+0x8>
 8003950:	9999999a 	.word	0x9999999a
 8003954:	3fc99999 	.word	0x3fc99999
 8003958:	200007dc 	.word	0x200007dc
 800395c:	20000740 	.word	0x20000740
 8003960:	20000750 	.word	0x20000750
 8003964:	20000758 	.word	0x20000758
 8003968:	20000744 	.word	0x20000744
 800396c:	20000754 	.word	0x20000754
 8003970:	2000075c 	.word	0x2000075c
 8003974:	2000071c 	.word	0x2000071c
 8003978:	200007e0 	.word	0x200007e0
 800397c:	20000020 	.word	0x20000020
 8003980:	3ff00000 	.word	0x3ff00000

08003984 <MechanismHandle_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MechanismHandle_Task */
void MechanismHandle_Task(void const * argument)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
//			  nos+=0.2;
//			  nowTick = currentTick;
//		  }
//	  }
//	  else nos = 1;
	  if (ps == 1) {
 800398c:	4b18      	ldr	r3, [pc, #96]	; (80039f0 <MechanismHandle_Task+0x6c>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d11b      	bne.n	80039cc <MechanismHandle_Task+0x48>
		  if (currentTick - nowTick > 500) {
 8003994:	4b17      	ldr	r3, [pc, #92]	; (80039f4 <MechanismHandle_Task+0x70>)
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	4b17      	ldr	r3, [pc, #92]	; (80039f8 <MechanismHandle_Task+0x74>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80039a2:	d913      	bls.n	80039cc <MechanismHandle_Task+0x48>
			  kec=0;
 80039a4:	4b15      	ldr	r3, [pc, #84]	; (80039fc <MechanismHandle_Task+0x78>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	601a      	str	r2, [r3, #0]
			  adj=0;
 80039aa:	4b15      	ldr	r3, [pc, #84]	; (8003a00 <MechanismHandle_Task+0x7c>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	601a      	str	r2, [r3, #0]
			  mode=mode*-1;
 80039b0:	4b14      	ldr	r3, [pc, #80]	; (8003a04 <MechanismHandle_Task+0x80>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	425b      	negs	r3, r3
 80039b6:	4a13      	ldr	r2, [pc, #76]	; (8003a04 <MechanismHandle_Task+0x80>)
 80039b8:	6013      	str	r3, [r2, #0]
			  l = l*-1;
 80039ba:	4b13      	ldr	r3, [pc, #76]	; (8003a08 <MechanismHandle_Task+0x84>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	425b      	negs	r3, r3
 80039c0:	4a11      	ldr	r2, [pc, #68]	; (8003a08 <MechanismHandle_Task+0x84>)
 80039c2:	6013      	str	r3, [r2, #0]
			  nowTick = currentTick;
 80039c4:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <MechanismHandle_Task+0x70>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a0b      	ldr	r2, [pc, #44]	; (80039f8 <MechanismHandle_Task+0x74>)
 80039ca:	6013      	str	r3, [r2, #0]
		  }
	  }

	  if (mode>0) {
 80039cc:	4b0d      	ldr	r3, [pc, #52]	; (8003a04 <MechanismHandle_Task+0x80>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	dd02      	ble.n	80039da <MechanismHandle_Task+0x56>
		  mode_padi();
 80039d4:	f7fe f8c6 	bl	8001b64 <mode_padi>
 80039d8:	e005      	b.n	80039e6 <MechanismHandle_Task+0x62>
	  }
	  else if (mode<0) {
 80039da:	4b0a      	ldr	r3, [pc, #40]	; (8003a04 <MechanismHandle_Task+0x80>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	da01      	bge.n	80039e6 <MechanismHandle_Task+0x62>
		  mode_bola();
 80039e2:	f7fe fcab 	bl	800233c <mode_bola>
	  }

	  //printf("mechanism task\r\n");
	  osDelay(1);
 80039e6:	2001      	movs	r0, #1
 80039e8:	f004 fe57 	bl	800869a <osDelay>
	  if (ps == 1) {
 80039ec:	e7ce      	b.n	800398c <MechanismHandle_Task+0x8>
 80039ee:	bf00      	nop
 80039f0:	20000738 	.word	0x20000738
 80039f4:	200007dc 	.word	0x200007dc
 80039f8:	200007e0 	.word	0x200007e0
 80039fc:	200007d0 	.word	0x200007d0
 8003a00:	200007d8 	.word	0x200007d8
 8003a04:	20000028 	.word	0x20000028
 8003a08:	2000002c 	.word	0x2000002c
 8003a0c:	00000000 	.word	0x00000000

08003a10 <OmniHandle_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OmniHandle_Task */
void OmniHandle_Task(void const * argument)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af02      	add	r7, sp, #8
 8003a16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OmniHandle_Task */
  /* Infinite loop */
  for(;;)
  {
//	  printf("omni task\r\n");
	  if (l2 < r2) putar = -1*r2;
 8003a18:	4b69      	ldr	r3, [pc, #420]	; (8003bc0 <OmniHandle_Task+0x1b0>)
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	4b69      	ldr	r3, [pc, #420]	; (8003bc4 <OmniHandle_Task+0x1b4>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	da05      	bge.n	8003a30 <OmniHandle_Task+0x20>
 8003a24:	4b67      	ldr	r3, [pc, #412]	; (8003bc4 <OmniHandle_Task+0x1b4>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	425b      	negs	r3, r3
 8003a2a:	4a67      	ldr	r2, [pc, #412]	; (8003bc8 <OmniHandle_Task+0x1b8>)
 8003a2c:	6013      	str	r3, [r2, #0]
 8003a2e:	e00d      	b.n	8003a4c <OmniHandle_Task+0x3c>
	  else if (l2 > r2) putar = l2;
 8003a30:	4b63      	ldr	r3, [pc, #396]	; (8003bc0 <OmniHandle_Task+0x1b0>)
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	4b63      	ldr	r3, [pc, #396]	; (8003bc4 <OmniHandle_Task+0x1b4>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	dd04      	ble.n	8003a46 <OmniHandle_Task+0x36>
 8003a3c:	4b60      	ldr	r3, [pc, #384]	; (8003bc0 <OmniHandle_Task+0x1b0>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a61      	ldr	r2, [pc, #388]	; (8003bc8 <OmniHandle_Task+0x1b8>)
 8003a42:	6013      	str	r3, [r2, #0]
 8003a44:	e002      	b.n	8003a4c <OmniHandle_Task+0x3c>
	  else putar = 0;
 8003a46:	4b60      	ldr	r3, [pc, #384]	; (8003bc8 <OmniHandle_Task+0x1b8>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]

	  if (mode>0) putar1=putar/1.6;
 8003a4c:	4b5f      	ldr	r3, [pc, #380]	; (8003bcc <OmniHandle_Task+0x1bc>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	dd13      	ble.n	8003a7c <OmniHandle_Task+0x6c>
 8003a54:	4b5c      	ldr	r3, [pc, #368]	; (8003bc8 <OmniHandle_Task+0x1b8>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7fc fd1b 	bl	8000494 <__aeabi_i2d>
 8003a5e:	a356      	add	r3, pc, #344	; (adr r3, 8003bb8 <OmniHandle_Task+0x1a8>)
 8003a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a64:	f7fc feaa 	bl	80007bc <__aeabi_ddiv>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	4610      	mov	r0, r2
 8003a6e:	4619      	mov	r1, r3
 8003a70:	f7fd f814 	bl	8000a9c <__aeabi_d2iz>
 8003a74:	4603      	mov	r3, r0
 8003a76:	4a56      	ldr	r2, [pc, #344]	; (8003bd0 <OmniHandle_Task+0x1c0>)
 8003a78:	6013      	str	r3, [r2, #0]
 8003a7a:	e016      	b.n	8003aaa <OmniHandle_Task+0x9a>
	  else if (mode<0) putar1=putar/1.6;
 8003a7c:	4b53      	ldr	r3, [pc, #332]	; (8003bcc <OmniHandle_Task+0x1bc>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	da12      	bge.n	8003aaa <OmniHandle_Task+0x9a>
 8003a84:	4b50      	ldr	r3, [pc, #320]	; (8003bc8 <OmniHandle_Task+0x1b8>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7fc fd03 	bl	8000494 <__aeabi_i2d>
 8003a8e:	a34a      	add	r3, pc, #296	; (adr r3, 8003bb8 <OmniHandle_Task+0x1a8>)
 8003a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a94:	f7fc fe92 	bl	80007bc <__aeabi_ddiv>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	4610      	mov	r0, r2
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	f7fc fffc 	bl	8000a9c <__aeabi_d2iz>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	4a4a      	ldr	r2, [pc, #296]	; (8003bd0 <OmniHandle_Task+0x1c0>)
 8003aa8:	6013      	str	r3, [r2, #0]

	  th = putar1;
 8003aaa:	4b49      	ldr	r3, [pc, #292]	; (8003bd0 <OmniHandle_Task+0x1c0>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a49      	ldr	r2, [pc, #292]	; (8003bd4 <OmniHandle_Task+0x1c4>)
 8003ab0:	6013      	str	r3, [r2, #0]

	  if (mode==1){
 8003ab2:	4b46      	ldr	r3, [pc, #280]	; (8003bcc <OmniHandle_Task+0x1bc>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d165      	bne.n	8003b86 <OmniHandle_Task+0x176>
		  kinematikM2(lxm, lym, th, nos);
 8003aba:	4b47      	ldr	r3, [pc, #284]	; (8003bd8 <OmniHandle_Task+0x1c8>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a47      	ldr	r2, [pc, #284]	; (8003bdc <OmniHandle_Task+0x1cc>)
 8003ac0:	6811      	ldr	r1, [r2, #0]
 8003ac2:	4a44      	ldr	r2, [pc, #272]	; (8003bd4 <OmniHandle_Task+0x1c4>)
 8003ac4:	6812      	ldr	r2, [r2, #0]
 8003ac6:	4846      	ldr	r0, [pc, #280]	; (8003be0 <OmniHandle_Task+0x1d0>)
 8003ac8:	ed90 7b00 	vldr	d7, [r0]
 8003acc:	eeb0 0a47 	vmov.f32	s0, s14
 8003ad0:	eef0 0a67 	vmov.f32	s1, s15
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7fd fabb 	bl	8001050 <kinematikM2>
		  	  for (uint8_t i = 0; i < 4; i++) {
 8003ada:	2300      	movs	r3, #0
 8003adc:	73fb      	strb	r3, [r7, #15]
 8003ade:	e04e      	b.n	8003b7e <OmniHandle_Task+0x16e>
		  		  wheel[0] = map(out[0], -360, 360, -1000, 1000);//386
 8003ae0:	4b40      	ldr	r3, [pc, #256]	; (8003be4 <OmniHandle_Task+0x1d4>)
 8003ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae6:	4610      	mov	r0, r2
 8003ae8:	4619      	mov	r1, r3
 8003aea:	f7fc ffd7 	bl	8000a9c <__aeabi_d2iz>
 8003aee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	4b3c      	ldr	r3, [pc, #240]	; (8003be8 <OmniHandle_Task+0x1d8>)
 8003af6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8003afa:	493c      	ldr	r1, [pc, #240]	; (8003bec <OmniHandle_Task+0x1dc>)
 8003afc:	f7fe f816 	bl	8001b2c <map>
 8003b00:	4603      	mov	r3, r0
 8003b02:	4a3b      	ldr	r2, [pc, #236]	; (8003bf0 <OmniHandle_Task+0x1e0>)
 8003b04:	6013      	str	r3, [r2, #0]
		  		  wheel[1] = map(out[1], -360, 360, -1000, 1000);//360
 8003b06:	4b37      	ldr	r3, [pc, #220]	; (8003be4 <OmniHandle_Task+0x1d4>)
 8003b08:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003b0c:	4610      	mov	r0, r2
 8003b0e:	4619      	mov	r1, r3
 8003b10:	f7fc ffc4 	bl	8000a9c <__aeabi_d2iz>
 8003b14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b18:	9300      	str	r3, [sp, #0]
 8003b1a:	4b33      	ldr	r3, [pc, #204]	; (8003be8 <OmniHandle_Task+0x1d8>)
 8003b1c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8003b20:	4932      	ldr	r1, [pc, #200]	; (8003bec <OmniHandle_Task+0x1dc>)
 8003b22:	f7fe f803 	bl	8001b2c <map>
 8003b26:	4603      	mov	r3, r0
 8003b28:	4a31      	ldr	r2, [pc, #196]	; (8003bf0 <OmniHandle_Task+0x1e0>)
 8003b2a:	6053      	str	r3, [r2, #4]
		  		  wheel[2] = map(out[2], -360, 360, -1000, 1000);
 8003b2c:	4b2d      	ldr	r3, [pc, #180]	; (8003be4 <OmniHandle_Task+0x1d4>)
 8003b2e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003b32:	4610      	mov	r0, r2
 8003b34:	4619      	mov	r1, r3
 8003b36:	f7fc ffb1 	bl	8000a9c <__aeabi_d2iz>
 8003b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b3e:	9300      	str	r3, [sp, #0]
 8003b40:	4b29      	ldr	r3, [pc, #164]	; (8003be8 <OmniHandle_Task+0x1d8>)
 8003b42:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8003b46:	4929      	ldr	r1, [pc, #164]	; (8003bec <OmniHandle_Task+0x1dc>)
 8003b48:	f7fd fff0 	bl	8001b2c <map>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	4a28      	ldr	r2, [pc, #160]	; (8003bf0 <OmniHandle_Task+0x1e0>)
 8003b50:	6093      	str	r3, [r2, #8]
		  		  wheel[3] = map(out[3], -360, 360, -1000, 1000);
 8003b52:	4b24      	ldr	r3, [pc, #144]	; (8003be4 <OmniHandle_Task+0x1d4>)
 8003b54:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003b58:	4610      	mov	r0, r2
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	f7fc ff9e 	bl	8000a9c <__aeabi_d2iz>
 8003b60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	4b20      	ldr	r3, [pc, #128]	; (8003be8 <OmniHandle_Task+0x1d8>)
 8003b68:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8003b6c:	491f      	ldr	r1, [pc, #124]	; (8003bec <OmniHandle_Task+0x1dc>)
 8003b6e:	f7fd ffdd 	bl	8001b2c <map>
 8003b72:	4603      	mov	r3, r0
 8003b74:	4a1e      	ldr	r2, [pc, #120]	; (8003bf0 <OmniHandle_Task+0x1e0>)
 8003b76:	60d3      	str	r3, [r2, #12]
		  	  for (uint8_t i = 0; i < 4; i++) {
 8003b78:	7bfb      	ldrb	r3, [r7, #15]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	73fb      	strb	r3, [r7, #15]
 8003b7e:	7bfb      	ldrb	r3, [r7, #15]
 8003b80:	2b03      	cmp	r3, #3
 8003b82:	d9ad      	bls.n	8003ae0 <OmniHandle_Task+0xd0>
 8003b84:	e088      	b.n	8003c98 <OmniHandle_Task+0x288>
		  	  }
	  }
	  else if(mode==-1){
 8003b86:	4b11      	ldr	r3, [pc, #68]	; (8003bcc <OmniHandle_Task+0x1bc>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b8e:	f040 8083 	bne.w	8003c98 <OmniHandle_Task+0x288>
		  kinematikM1(lxm, lym, th, nos);
 8003b92:	4b11      	ldr	r3, [pc, #68]	; (8003bd8 <OmniHandle_Task+0x1c8>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a11      	ldr	r2, [pc, #68]	; (8003bdc <OmniHandle_Task+0x1cc>)
 8003b98:	6811      	ldr	r1, [r2, #0]
 8003b9a:	4a0e      	ldr	r2, [pc, #56]	; (8003bd4 <OmniHandle_Task+0x1c4>)
 8003b9c:	6812      	ldr	r2, [r2, #0]
 8003b9e:	4810      	ldr	r0, [pc, #64]	; (8003be0 <OmniHandle_Task+0x1d0>)
 8003ba0:	ed90 7b00 	vldr	d7, [r0]
 8003ba4:	eeb0 0a47 	vmov.f32	s0, s14
 8003ba8:	eef0 0a67 	vmov.f32	s1, s15
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7fd f91b 	bl	8000de8 <kinematikM1>
		  	  for (uint8_t i = 0; i < 4; i++) {
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	73bb      	strb	r3, [r7, #14]
 8003bb6:	e06c      	b.n	8003c92 <OmniHandle_Task+0x282>
 8003bb8:	9999999a 	.word	0x9999999a
 8003bbc:	3ff99999 	.word	0x3ff99999
 8003bc0:	20000748 	.word	0x20000748
 8003bc4:	2000074c 	.word	0x2000074c
 8003bc8:	20000784 	.word	0x20000784
 8003bcc:	20000028 	.word	0x20000028
 8003bd0:	20000788 	.word	0x20000788
 8003bd4:	20000760 	.word	0x20000760
 8003bd8:	20000758 	.word	0x20000758
 8003bdc:	2000075c 	.word	0x2000075c
 8003be0:	20000020 	.word	0x20000020
 8003be4:	200001a0 	.word	0x200001a0
 8003be8:	fffffc18 	.word	0xfffffc18
 8003bec:	fffffe98 	.word	0xfffffe98
 8003bf0:	20000770 	.word	0x20000770
		  		  wheel[0] = map(out[0], -360, 360, -1000, 1000);//386
 8003bf4:	4b4a      	ldr	r3, [pc, #296]	; (8003d20 <OmniHandle_Task+0x310>)
 8003bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bfa:	4610      	mov	r0, r2
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	f7fc ff4d 	bl	8000a9c <__aeabi_d2iz>
 8003c02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	4b46      	ldr	r3, [pc, #280]	; (8003d24 <OmniHandle_Task+0x314>)
 8003c0a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8003c0e:	4946      	ldr	r1, [pc, #280]	; (8003d28 <OmniHandle_Task+0x318>)
 8003c10:	f7fd ff8c 	bl	8001b2c <map>
 8003c14:	4603      	mov	r3, r0
 8003c16:	4a45      	ldr	r2, [pc, #276]	; (8003d2c <OmniHandle_Task+0x31c>)
 8003c18:	6013      	str	r3, [r2, #0]
		  		  wheel[1] = map(out[1], -360, 360, -1000, 1000);//360
 8003c1a:	4b41      	ldr	r3, [pc, #260]	; (8003d20 <OmniHandle_Task+0x310>)
 8003c1c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003c20:	4610      	mov	r0, r2
 8003c22:	4619      	mov	r1, r3
 8003c24:	f7fc ff3a 	bl	8000a9c <__aeabi_d2iz>
 8003c28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	4b3d      	ldr	r3, [pc, #244]	; (8003d24 <OmniHandle_Task+0x314>)
 8003c30:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8003c34:	493c      	ldr	r1, [pc, #240]	; (8003d28 <OmniHandle_Task+0x318>)
 8003c36:	f7fd ff79 	bl	8001b2c <map>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	4a3b      	ldr	r2, [pc, #236]	; (8003d2c <OmniHandle_Task+0x31c>)
 8003c3e:	6053      	str	r3, [r2, #4]
		  		  wheel[2] = map(out[2], -360, 360, -1000, 1000);
 8003c40:	4b37      	ldr	r3, [pc, #220]	; (8003d20 <OmniHandle_Task+0x310>)
 8003c42:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003c46:	4610      	mov	r0, r2
 8003c48:	4619      	mov	r1, r3
 8003c4a:	f7fc ff27 	bl	8000a9c <__aeabi_d2iz>
 8003c4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c52:	9300      	str	r3, [sp, #0]
 8003c54:	4b33      	ldr	r3, [pc, #204]	; (8003d24 <OmniHandle_Task+0x314>)
 8003c56:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8003c5a:	4933      	ldr	r1, [pc, #204]	; (8003d28 <OmniHandle_Task+0x318>)
 8003c5c:	f7fd ff66 	bl	8001b2c <map>
 8003c60:	4603      	mov	r3, r0
 8003c62:	4a32      	ldr	r2, [pc, #200]	; (8003d2c <OmniHandle_Task+0x31c>)
 8003c64:	6093      	str	r3, [r2, #8]
		  		  wheel[3] = map(out[3], -360, 360, -1000, 1000);
 8003c66:	4b2e      	ldr	r3, [pc, #184]	; (8003d20 <OmniHandle_Task+0x310>)
 8003c68:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003c6c:	4610      	mov	r0, r2
 8003c6e:	4619      	mov	r1, r3
 8003c70:	f7fc ff14 	bl	8000a9c <__aeabi_d2iz>
 8003c74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	4b2a      	ldr	r3, [pc, #168]	; (8003d24 <OmniHandle_Task+0x314>)
 8003c7c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8003c80:	4929      	ldr	r1, [pc, #164]	; (8003d28 <OmniHandle_Task+0x318>)
 8003c82:	f7fd ff53 	bl	8001b2c <map>
 8003c86:	4603      	mov	r3, r0
 8003c88:	4a28      	ldr	r2, [pc, #160]	; (8003d2c <OmniHandle_Task+0x31c>)
 8003c8a:	60d3      	str	r3, [r2, #12]
		  	  for (uint8_t i = 0; i < 4; i++) {
 8003c8c:	7bbb      	ldrb	r3, [r7, #14]
 8003c8e:	3301      	adds	r3, #1
 8003c90:	73bb      	strb	r3, [r7, #14]
 8003c92:	7bbb      	ldrb	r3, [r7, #14]
 8003c94:	2b03      	cmp	r3, #3
 8003c96:	d9ad      	bls.n	8003bf4 <OmniHandle_Task+0x1e4>
//	  motor_drive(&LeftFront, out[0], lf.output);
//	  motor_drive(&LeftBack, out[1], lb.output);
//	  motor_drive(&RightBack, out[2], rb.output);
//	  motor_drive(&RightFront, out[3], rf.output);
	  */
	  motor_drive(&LeftFront, out[0], wheel[0]);
 8003c98:	4b21      	ldr	r3, [pc, #132]	; (8003d20 <OmniHandle_Task+0x310>)
 8003c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c9e:	4610      	mov	r0, r2
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	f7fc fefb 	bl	8000a9c <__aeabi_d2iz>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	b21b      	sxth	r3, r3
 8003caa:	4a20      	ldr	r2, [pc, #128]	; (8003d2c <OmniHandle_Task+0x31c>)
 8003cac:	6812      	ldr	r2, [r2, #0]
 8003cae:	b212      	sxth	r2, r2
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	481f      	ldr	r0, [pc, #124]	; (8003d30 <OmniHandle_Task+0x320>)
 8003cb4:	f000 f8c2 	bl	8003e3c <motor_drive>
	  motor_drive(&LeftBack, out[1], wheel[1]);
 8003cb8:	4b19      	ldr	r3, [pc, #100]	; (8003d20 <OmniHandle_Task+0x310>)
 8003cba:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003cbe:	4610      	mov	r0, r2
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	f7fc feeb 	bl	8000a9c <__aeabi_d2iz>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	b21b      	sxth	r3, r3
 8003cca:	4a18      	ldr	r2, [pc, #96]	; (8003d2c <OmniHandle_Task+0x31c>)
 8003ccc:	6852      	ldr	r2, [r2, #4]
 8003cce:	b212      	sxth	r2, r2
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	4818      	ldr	r0, [pc, #96]	; (8003d34 <OmniHandle_Task+0x324>)
 8003cd4:	f000 f8b2 	bl	8003e3c <motor_drive>
	  motor_drive(&RightBack, out[2], wheel[2]);
 8003cd8:	4b11      	ldr	r3, [pc, #68]	; (8003d20 <OmniHandle_Task+0x310>)
 8003cda:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003cde:	4610      	mov	r0, r2
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	f7fc fedb 	bl	8000a9c <__aeabi_d2iz>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	b21b      	sxth	r3, r3
 8003cea:	4a10      	ldr	r2, [pc, #64]	; (8003d2c <OmniHandle_Task+0x31c>)
 8003cec:	6892      	ldr	r2, [r2, #8]
 8003cee:	b212      	sxth	r2, r2
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	4811      	ldr	r0, [pc, #68]	; (8003d38 <OmniHandle_Task+0x328>)
 8003cf4:	f000 f8a2 	bl	8003e3c <motor_drive>
	  motor_drive(&RightFront, out[3], wheel[3]);
 8003cf8:	4b09      	ldr	r3, [pc, #36]	; (8003d20 <OmniHandle_Task+0x310>)
 8003cfa:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003cfe:	4610      	mov	r0, r2
 8003d00:	4619      	mov	r1, r3
 8003d02:	f7fc fecb 	bl	8000a9c <__aeabi_d2iz>
 8003d06:	4603      	mov	r3, r0
 8003d08:	b21b      	sxth	r3, r3
 8003d0a:	4a08      	ldr	r2, [pc, #32]	; (8003d2c <OmniHandle_Task+0x31c>)
 8003d0c:	68d2      	ldr	r2, [r2, #12]
 8003d0e:	b212      	sxth	r2, r2
 8003d10:	4619      	mov	r1, r3
 8003d12:	480a      	ldr	r0, [pc, #40]	; (8003d3c <OmniHandle_Task+0x32c>)
 8003d14:	f000 f892 	bl	8003e3c <motor_drive>
//	  printf("out0:%d,out1:%d,out2:%d,out3:%d", out[0],out[1],out[2],out[3]);
	  osDelay(1);
 8003d18:	2001      	movs	r0, #1
 8003d1a:	f004 fcbe 	bl	800869a <osDelay>
	  if (l2 < r2) putar = -1*r2;
 8003d1e:	e67b      	b.n	8003a18 <OmniHandle_Task+0x8>
 8003d20:	200001a0 	.word	0x200001a0
 8003d24:	fffffc18 	.word	0xfffffc18
 8003d28:	fffffe98 	.word	0xfffffe98
 8003d2c:	20000770 	.word	0x20000770
 8003d30:	20000044 	.word	0x20000044
 8003d34:	2000005c 	.word	0x2000005c
 8003d38:	2000008c 	.word	0x2000008c
 8003d3c:	20000074 	.word	0x20000074

08003d40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a04      	ldr	r2, [pc, #16]	; (8003d60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d101      	bne.n	8003d56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003d52:	f000 fdfd 	bl	8004950 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003d56:	bf00      	nop
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	40001400 	.word	0x40001400

08003d64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d68:	b672      	cpsid	i
}
 8003d6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d6c:	e7fe      	b.n	8003d6c <Error_Handler+0x8>

08003d6e <motor_init>:
		.ch1_ = TIM_CHANNEL_2, .ch2_ = TIM_CHANNEL_1,
		.en_port = EN_PADI_GPIO_Port,
		.en_pin = EN_PADI_Pin
};

void motor_init(motor_channel *wheel_n){
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b082      	sub	sp, #8
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(wheel_n->en_port, wheel_n->en_pin, GPIO_PIN_SET);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6918      	ldr	r0, [r3, #16]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	8a9b      	ldrh	r3, [r3, #20]
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	2201      	movs	r2, #1
 8003d82:	4619      	mov	r1, r3
 8003d84:	f001 f960 	bl	8005048 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(wheel_n->in1_, wheel_n->ch1_);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	4619      	mov	r1, r3
 8003d92:	4610      	mov	r0, r2
 8003d94:	f002 fd8e 	bl	80068b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(wheel_n->in2_, wheel_n->ch2_);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685a      	ldr	r2, [r3, #4]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	4619      	mov	r1, r3
 8003da2:	4610      	mov	r0, r2
 8003da4:	f002 fd86 	bl	80068b4 <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(wheel_n->in1_, wheel_n->ch1_, 0);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d105      	bne.n	8003dbc <motor_init+0x4e>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2200      	movs	r2, #0
 8003db8:	635a      	str	r2, [r3, #52]	; 0x34
 8003dba:	e018      	b.n	8003dee <motor_init+0x80>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	2b04      	cmp	r3, #4
 8003dc2:	d105      	bne.n	8003dd0 <motor_init+0x62>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	2300      	movs	r3, #0
 8003dcc:	6393      	str	r3, [r2, #56]	; 0x38
 8003dce:	e00e      	b.n	8003dee <motor_init+0x80>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	2b08      	cmp	r3, #8
 8003dd6:	d105      	bne.n	8003de4 <motor_init+0x76>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	2300      	movs	r3, #0
 8003de0:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003de2:	e004      	b.n	8003dee <motor_init+0x80>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	2300      	movs	r3, #0
 8003dec:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(wheel_n->in2_, wheel_n->ch2_, 0);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d105      	bne.n	8003e02 <motor_init+0x94>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003e00:	e018      	b.n	8003e34 <motor_init+0xc6>
	__HAL_TIM_SET_COMPARE(wheel_n->in2_, wheel_n->ch2_, 0);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	2b04      	cmp	r3, #4
 8003e08:	d105      	bne.n	8003e16 <motor_init+0xa8>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	2300      	movs	r3, #0
 8003e12:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003e14:	e00e      	b.n	8003e34 <motor_init+0xc6>
	__HAL_TIM_SET_COMPARE(wheel_n->in2_, wheel_n->ch2_, 0);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	2b08      	cmp	r3, #8
 8003e1c:	d105      	bne.n	8003e2a <motor_init+0xbc>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	2300      	movs	r3, #0
 8003e26:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8003e28:	e004      	b.n	8003e34 <motor_init+0xc6>
	__HAL_TIM_SET_COMPARE(wheel_n->in2_, wheel_n->ch2_, 0);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	2300      	movs	r3, #0
 8003e32:	6413      	str	r3, [r2, #64]	; 0x40
}
 8003e34:	bf00      	nop
 8003e36:	3708      	adds	r7, #8
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <motor_drive>:

void motor_drive(motor_channel *wheel_n, int16_t dir, int16_t rpm){
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	460b      	mov	r3, r1
 8003e46:	807b      	strh	r3, [r7, #2]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	803b      	strh	r3, [r7, #0]
	if(dir > 0){
 8003e4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	dd4a      	ble.n	8003eea <motor_drive+0xae>
		__HAL_TIM_SET_COMPARE(wheel_n->in1_, wheel_n->ch1_, rpm);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d106      	bne.n	8003e6a <motor_drive+0x2e>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003e66:	635a      	str	r2, [r3, #52]	; 0x34
 8003e68:	e01b      	b.n	8003ea2 <motor_drive+0x66>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	2b04      	cmp	r3, #4
 8003e70:	d106      	bne.n	8003e80 <motor_drive+0x44>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003e7c:	6393      	str	r3, [r2, #56]	; 0x38
 8003e7e:	e010      	b.n	8003ea2 <motor_drive+0x66>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	2b08      	cmp	r3, #8
 8003e86:	d106      	bne.n	8003e96 <motor_drive+0x5a>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003e92:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003e94:	e005      	b.n	8003ea2 <motor_drive+0x66>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003ea0:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(wheel_n->in2_, wheel_n->ch2_, 0);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d105      	bne.n	8003eb6 <motor_drive+0x7a>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else{
		__HAL_TIM_SET_COMPARE(wheel_n->in1_, wheel_n->ch1_, 0);
		__HAL_TIM_SET_COMPARE(wheel_n->in2_, wheel_n->ch2_, 0);
	}
}
 8003eb4:	e0c2      	b.n	800403c <motor_drive+0x200>
		__HAL_TIM_SET_COMPARE(wheel_n->in2_, wheel_n->ch2_, 0);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	2b04      	cmp	r3, #4
 8003ebc:	d105      	bne.n	8003eca <motor_drive+0x8e>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	6393      	str	r3, [r2, #56]	; 0x38
 8003ec8:	e0b8      	b.n	800403c <motor_drive+0x200>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	2b08      	cmp	r3, #8
 8003ed0:	d105      	bne.n	8003ede <motor_drive+0xa2>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	2300      	movs	r3, #0
 8003eda:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003edc:	e0ae      	b.n	800403c <motor_drive+0x200>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	6413      	str	r3, [r2, #64]	; 0x40
}
 8003ee8:	e0a8      	b.n	800403c <motor_drive+0x200>
	else if(dir < 0){
 8003eea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	da5d      	bge.n	8003fae <motor_drive+0x172>
		__HAL_TIM_SET_COMPARE(wheel_n->in1_, wheel_n->ch1_, 0);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d105      	bne.n	8003f06 <motor_drive+0xca>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2200      	movs	r2, #0
 8003f02:	635a      	str	r2, [r3, #52]	; 0x34
 8003f04:	e018      	b.n	8003f38 <motor_drive+0xfc>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	2b04      	cmp	r3, #4
 8003f0c:	d105      	bne.n	8003f1a <motor_drive+0xde>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	2300      	movs	r3, #0
 8003f16:	6393      	str	r3, [r2, #56]	; 0x38
 8003f18:	e00e      	b.n	8003f38 <motor_drive+0xfc>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	2b08      	cmp	r3, #8
 8003f20:	d105      	bne.n	8003f2e <motor_drive+0xf2>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	2300      	movs	r3, #0
 8003f2a:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003f2c:	e004      	b.n	8003f38 <motor_drive+0xfc>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	2300      	movs	r3, #0
 8003f36:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(wheel_n->in2_, wheel_n->ch2_, abs(rpm));
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10a      	bne.n	8003f56 <motor_drive+0x11a>
 8003f40:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	bfb8      	it	lt
 8003f48:	425b      	neglt	r3, r3
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003f54:	e072      	b.n	800403c <motor_drive+0x200>
		__HAL_TIM_SET_COMPARE(wheel_n->in2_, wheel_n->ch2_, abs(rpm));
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	2b04      	cmp	r3, #4
 8003f5c:	d10b      	bne.n	8003f76 <motor_drive+0x13a>
 8003f5e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	bfb8      	it	lt
 8003f66:	425b      	neglt	r3, r3
 8003f68:	b299      	uxth	r1, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	460b      	mov	r3, r1
 8003f72:	6393      	str	r3, [r2, #56]	; 0x38
 8003f74:	e062      	b.n	800403c <motor_drive+0x200>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	2b08      	cmp	r3, #8
 8003f7c:	d10b      	bne.n	8003f96 <motor_drive+0x15a>
 8003f7e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	bfb8      	it	lt
 8003f86:	425b      	neglt	r3, r3
 8003f88:	b299      	uxth	r1, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	460b      	mov	r3, r1
 8003f92:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003f94:	e052      	b.n	800403c <motor_drive+0x200>
 8003f96:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	bfb8      	it	lt
 8003f9e:	425b      	neglt	r3, r3
 8003fa0:	b299      	uxth	r1, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	460b      	mov	r3, r1
 8003faa:	6413      	str	r3, [r2, #64]	; 0x40
}
 8003fac:	e046      	b.n	800403c <motor_drive+0x200>
		__HAL_TIM_SET_COMPARE(wheel_n->in1_, wheel_n->ch1_, 0);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d105      	bne.n	8003fc2 <motor_drive+0x186>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	635a      	str	r2, [r3, #52]	; 0x34
 8003fc0:	e018      	b.n	8003ff4 <motor_drive+0x1b8>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	2b04      	cmp	r3, #4
 8003fc8:	d105      	bne.n	8003fd6 <motor_drive+0x19a>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	6393      	str	r3, [r2, #56]	; 0x38
 8003fd4:	e00e      	b.n	8003ff4 <motor_drive+0x1b8>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	2b08      	cmp	r3, #8
 8003fdc:	d105      	bne.n	8003fea <motor_drive+0x1ae>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003fe8:	e004      	b.n	8003ff4 <motor_drive+0x1b8>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(wheel_n->in2_, wheel_n->ch2_, 0);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d105      	bne.n	8004008 <motor_drive+0x1cc>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2200      	movs	r2, #0
 8004004:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004006:	e019      	b.n	800403c <motor_drive+0x200>
		__HAL_TIM_SET_COMPARE(wheel_n->in2_, wheel_n->ch2_, 0);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	2b04      	cmp	r3, #4
 800400e:	d105      	bne.n	800401c <motor_drive+0x1e0>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	2300      	movs	r3, #0
 8004018:	6393      	str	r3, [r2, #56]	; 0x38
}
 800401a:	e00f      	b.n	800403c <motor_drive+0x200>
		__HAL_TIM_SET_COMPARE(wheel_n->in2_, wheel_n->ch2_, 0);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	2b08      	cmp	r3, #8
 8004022:	d105      	bne.n	8004030 <motor_drive+0x1f4>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	2300      	movs	r3, #0
 800402c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800402e:	e005      	b.n	800403c <motor_drive+0x200>
		__HAL_TIM_SET_COMPARE(wheel_n->in2_, wheel_n->ch2_, 0);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	2300      	movs	r3, #0
 8004038:	6413      	str	r3, [r2, #64]	; 0x40
}
 800403a:	e7ff      	b.n	800403c <motor_drive+0x200>
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <enable_motor>:

void disable_motor(motor_channel *wheel_n){
	HAL_GPIO_WritePin(wheel_n->en_port, wheel_n->en_pin, GPIO_PIN_RESET);
}

void enable_motor(motor_channel *wheel_n){
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(wheel_n->en_port, wheel_n->en_pin, GPIO_PIN_SET);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6918      	ldr	r0, [r3, #16]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	8a9b      	ldrh	r3, [r3, #20]
 8004058:	b29b      	uxth	r3, r3
 800405a:	2201      	movs	r2, #1
 800405c:	4619      	mov	r1, r3
 800405e:	f000 fff3 	bl	8005048 <HAL_GPIO_WritePin>
}
 8004062:	bf00      	nop
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <bldc_init>:

void bldc_init(esc *servo, uint32_t sp) {
 800406a:	b580      	push	{r7, lr}
 800406c:	b082      	sub	sp, #8
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
 8004072:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Start(servo->htim, servo->channel);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	4619      	mov	r1, r3
 800407e:	4610      	mov	r0, r2
 8004080:	f002 fc18 	bl	80068b4 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(servo->htim, servo->channel, sp);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d105      	bne.n	8004098 <bldc_init+0x2e>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	683a      	ldr	r2, [r7, #0]
 8004094:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004096:	e018      	b.n	80040ca <bldc_init+0x60>
	__HAL_TIM_SET_COMPARE(servo->htim, servo->channel, sp);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	2b04      	cmp	r3, #4
 800409e:	d105      	bne.n	80040ac <bldc_init+0x42>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80040aa:	e00e      	b.n	80040ca <bldc_init+0x60>
	__HAL_TIM_SET_COMPARE(servo->htim, servo->channel, sp);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	2b08      	cmp	r3, #8
 80040b2:	d105      	bne.n	80040c0 <bldc_init+0x56>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80040be:	e004      	b.n	80040ca <bldc_init+0x60>
	__HAL_TIM_SET_COMPARE(servo->htim, servo->channel, sp);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80040ca:	bf00      	nop
 80040cc:	3708      	adds	r7, #8
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}

080040d2 <bldc_drive>:

void bldc_drive(esc *servo, uint32_t duty) {
 80040d2:	b480      	push	{r7}
 80040d4:	b083      	sub	sp, #12
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
 80040da:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COMPARE(servo->htim, servo->channel, duty);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d105      	bne.n	80040f0 <bldc_drive+0x1e>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	635a      	str	r2, [r3, #52]	; 0x34
}
 80040ee:	e018      	b.n	8004122 <bldc_drive+0x50>
	__HAL_TIM_SET_COMPARE(servo->htim, servo->channel, duty);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	2b04      	cmp	r3, #4
 80040f6:	d105      	bne.n	8004104 <bldc_drive+0x32>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004102:	e00e      	b.n	8004122 <bldc_drive+0x50>
	__HAL_TIM_SET_COMPARE(servo->htim, servo->channel, duty);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	2b08      	cmp	r3, #8
 800410a:	d105      	bne.n	8004118 <bldc_drive+0x46>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8004116:	e004      	b.n	8004122 <bldc_drive+0x50>
	__HAL_TIM_SET_COMPARE(servo->htim, servo->channel, duty);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	6413      	str	r3, [r2, #64]	; 0x40
}
 8004122:	bf00      	nop
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
	...

08004130 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004136:	2300      	movs	r3, #0
 8004138:	607b      	str	r3, [r7, #4]
 800413a:	4b12      	ldr	r3, [pc, #72]	; (8004184 <HAL_MspInit+0x54>)
 800413c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800413e:	4a11      	ldr	r2, [pc, #68]	; (8004184 <HAL_MspInit+0x54>)
 8004140:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004144:	6453      	str	r3, [r2, #68]	; 0x44
 8004146:	4b0f      	ldr	r3, [pc, #60]	; (8004184 <HAL_MspInit+0x54>)
 8004148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800414e:	607b      	str	r3, [r7, #4]
 8004150:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004152:	2300      	movs	r3, #0
 8004154:	603b      	str	r3, [r7, #0]
 8004156:	4b0b      	ldr	r3, [pc, #44]	; (8004184 <HAL_MspInit+0x54>)
 8004158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415a:	4a0a      	ldr	r2, [pc, #40]	; (8004184 <HAL_MspInit+0x54>)
 800415c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004160:	6413      	str	r3, [r2, #64]	; 0x40
 8004162:	4b08      	ldr	r3, [pc, #32]	; (8004184 <HAL_MspInit+0x54>)
 8004164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800416a:	603b      	str	r3, [r7, #0]
 800416c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800416e:	2200      	movs	r2, #0
 8004170:	210f      	movs	r1, #15
 8004172:	f06f 0001 	mvn.w	r0, #1
 8004176:	f000 fce7 	bl	8004b48 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800417a:	bf00      	nop
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	40023800 	.word	0x40023800

08004188 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b08a      	sub	sp, #40	; 0x28
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004190:	f107 0314 	add.w	r3, r7, #20
 8004194:	2200      	movs	r2, #0
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	605a      	str	r2, [r3, #4]
 800419a:	609a      	str	r2, [r3, #8]
 800419c:	60da      	str	r2, [r3, #12]
 800419e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a19      	ldr	r2, [pc, #100]	; (800420c <HAL_SPI_MspInit+0x84>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d12c      	bne.n	8004204 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80041aa:	2300      	movs	r3, #0
 80041ac:	613b      	str	r3, [r7, #16]
 80041ae:	4b18      	ldr	r3, [pc, #96]	; (8004210 <HAL_SPI_MspInit+0x88>)
 80041b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b2:	4a17      	ldr	r2, [pc, #92]	; (8004210 <HAL_SPI_MspInit+0x88>)
 80041b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041b8:	6453      	str	r3, [r2, #68]	; 0x44
 80041ba:	4b15      	ldr	r3, [pc, #84]	; (8004210 <HAL_SPI_MspInit+0x88>)
 80041bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041c2:	613b      	str	r3, [r7, #16]
 80041c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80041c6:	2300      	movs	r3, #0
 80041c8:	60fb      	str	r3, [r7, #12]
 80041ca:	4b11      	ldr	r3, [pc, #68]	; (8004210 <HAL_SPI_MspInit+0x88>)
 80041cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ce:	4a10      	ldr	r2, [pc, #64]	; (8004210 <HAL_SPI_MspInit+0x88>)
 80041d0:	f043 0320 	orr.w	r3, r3, #32
 80041d4:	6313      	str	r3, [r2, #48]	; 0x30
 80041d6:	4b0e      	ldr	r3, [pc, #56]	; (8004210 <HAL_SPI_MspInit+0x88>)
 80041d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041da:	f003 0320 	and.w	r3, r3, #32
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80041e2:	f44f 7360 	mov.w	r3, #896	; 0x380
 80041e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041e8:	2302      	movs	r3, #2
 80041ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ec:	2300      	movs	r3, #0
 80041ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041f0:	2303      	movs	r3, #3
 80041f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80041f4:	2305      	movs	r3, #5
 80041f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80041f8:	f107 0314 	add.w	r3, r7, #20
 80041fc:	4619      	mov	r1, r3
 80041fe:	4805      	ldr	r0, [pc, #20]	; (8004214 <HAL_SPI_MspInit+0x8c>)
 8004200:	f000 fd5e 	bl	8004cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8004204:	bf00      	nop
 8004206:	3728      	adds	r7, #40	; 0x28
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	40015000 	.word	0x40015000
 8004210:	40023800 	.word	0x40023800
 8004214:	40021400 	.word	0x40021400

08004218 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004218:	b480      	push	{r7}
 800421a:	b08b      	sub	sp, #44	; 0x2c
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a47      	ldr	r2, [pc, #284]	; (8004344 <HAL_TIM_Base_MspInit+0x12c>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d10e      	bne.n	8004248 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800422a:	2300      	movs	r3, #0
 800422c:	627b      	str	r3, [r7, #36]	; 0x24
 800422e:	4b46      	ldr	r3, [pc, #280]	; (8004348 <HAL_TIM_Base_MspInit+0x130>)
 8004230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004232:	4a45      	ldr	r2, [pc, #276]	; (8004348 <HAL_TIM_Base_MspInit+0x130>)
 8004234:	f043 0301 	orr.w	r3, r3, #1
 8004238:	6453      	str	r3, [r2, #68]	; 0x44
 800423a:	4b43      	ldr	r3, [pc, #268]	; (8004348 <HAL_TIM_Base_MspInit+0x130>)
 800423c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	627b      	str	r3, [r7, #36]	; 0x24
 8004244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8004246:	e076      	b.n	8004336 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM3)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a3f      	ldr	r2, [pc, #252]	; (800434c <HAL_TIM_Base_MspInit+0x134>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d10e      	bne.n	8004270 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004252:	2300      	movs	r3, #0
 8004254:	623b      	str	r3, [r7, #32]
 8004256:	4b3c      	ldr	r3, [pc, #240]	; (8004348 <HAL_TIM_Base_MspInit+0x130>)
 8004258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425a:	4a3b      	ldr	r2, [pc, #236]	; (8004348 <HAL_TIM_Base_MspInit+0x130>)
 800425c:	f043 0302 	orr.w	r3, r3, #2
 8004260:	6413      	str	r3, [r2, #64]	; 0x40
 8004262:	4b39      	ldr	r3, [pc, #228]	; (8004348 <HAL_TIM_Base_MspInit+0x130>)
 8004264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	623b      	str	r3, [r7, #32]
 800426c:	6a3b      	ldr	r3, [r7, #32]
}
 800426e:	e062      	b.n	8004336 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM4)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a36      	ldr	r2, [pc, #216]	; (8004350 <HAL_TIM_Base_MspInit+0x138>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d10e      	bne.n	8004298 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800427a:	2300      	movs	r3, #0
 800427c:	61fb      	str	r3, [r7, #28]
 800427e:	4b32      	ldr	r3, [pc, #200]	; (8004348 <HAL_TIM_Base_MspInit+0x130>)
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	4a31      	ldr	r2, [pc, #196]	; (8004348 <HAL_TIM_Base_MspInit+0x130>)
 8004284:	f043 0304 	orr.w	r3, r3, #4
 8004288:	6413      	str	r3, [r2, #64]	; 0x40
 800428a:	4b2f      	ldr	r3, [pc, #188]	; (8004348 <HAL_TIM_Base_MspInit+0x130>)
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	f003 0304 	and.w	r3, r3, #4
 8004292:	61fb      	str	r3, [r7, #28]
 8004294:	69fb      	ldr	r3, [r7, #28]
}
 8004296:	e04e      	b.n	8004336 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM5)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a2d      	ldr	r2, [pc, #180]	; (8004354 <HAL_TIM_Base_MspInit+0x13c>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d10e      	bne.n	80042c0 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80042a2:	2300      	movs	r3, #0
 80042a4:	61bb      	str	r3, [r7, #24]
 80042a6:	4b28      	ldr	r3, [pc, #160]	; (8004348 <HAL_TIM_Base_MspInit+0x130>)
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	4a27      	ldr	r2, [pc, #156]	; (8004348 <HAL_TIM_Base_MspInit+0x130>)
 80042ac:	f043 0308 	orr.w	r3, r3, #8
 80042b0:	6413      	str	r3, [r2, #64]	; 0x40
 80042b2:	4b25      	ldr	r3, [pc, #148]	; (8004348 <HAL_TIM_Base_MspInit+0x130>)
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	f003 0308 	and.w	r3, r3, #8
 80042ba:	61bb      	str	r3, [r7, #24]
 80042bc:	69bb      	ldr	r3, [r7, #24]
}
 80042be:	e03a      	b.n	8004336 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM8)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a24      	ldr	r2, [pc, #144]	; (8004358 <HAL_TIM_Base_MspInit+0x140>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d10e      	bne.n	80042e8 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80042ca:	2300      	movs	r3, #0
 80042cc:	617b      	str	r3, [r7, #20]
 80042ce:	4b1e      	ldr	r3, [pc, #120]	; (8004348 <HAL_TIM_Base_MspInit+0x130>)
 80042d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d2:	4a1d      	ldr	r2, [pc, #116]	; (8004348 <HAL_TIM_Base_MspInit+0x130>)
 80042d4:	f043 0302 	orr.w	r3, r3, #2
 80042d8:	6453      	str	r3, [r2, #68]	; 0x44
 80042da:	4b1b      	ldr	r3, [pc, #108]	; (8004348 <HAL_TIM_Base_MspInit+0x130>)
 80042dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	617b      	str	r3, [r7, #20]
 80042e4:	697b      	ldr	r3, [r7, #20]
}
 80042e6:	e026      	b.n	8004336 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM9)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a1b      	ldr	r2, [pc, #108]	; (800435c <HAL_TIM_Base_MspInit+0x144>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d10e      	bne.n	8004310 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80042f2:	2300      	movs	r3, #0
 80042f4:	613b      	str	r3, [r7, #16]
 80042f6:	4b14      	ldr	r3, [pc, #80]	; (8004348 <HAL_TIM_Base_MspInit+0x130>)
 80042f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042fa:	4a13      	ldr	r2, [pc, #76]	; (8004348 <HAL_TIM_Base_MspInit+0x130>)
 80042fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004300:	6453      	str	r3, [r2, #68]	; 0x44
 8004302:	4b11      	ldr	r3, [pc, #68]	; (8004348 <HAL_TIM_Base_MspInit+0x130>)
 8004304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004306:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800430a:	613b      	str	r3, [r7, #16]
 800430c:	693b      	ldr	r3, [r7, #16]
}
 800430e:	e012      	b.n	8004336 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM12)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a12      	ldr	r2, [pc, #72]	; (8004360 <HAL_TIM_Base_MspInit+0x148>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d10d      	bne.n	8004336 <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800431a:	2300      	movs	r3, #0
 800431c:	60fb      	str	r3, [r7, #12]
 800431e:	4b0a      	ldr	r3, [pc, #40]	; (8004348 <HAL_TIM_Base_MspInit+0x130>)
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	4a09      	ldr	r2, [pc, #36]	; (8004348 <HAL_TIM_Base_MspInit+0x130>)
 8004324:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004328:	6413      	str	r3, [r2, #64]	; 0x40
 800432a:	4b07      	ldr	r3, [pc, #28]	; (8004348 <HAL_TIM_Base_MspInit+0x130>)
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	68fb      	ldr	r3, [r7, #12]
}
 8004336:	bf00      	nop
 8004338:	372c      	adds	r7, #44	; 0x2c
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	40010000 	.word	0x40010000
 8004348:	40023800 	.word	0x40023800
 800434c:	40000400 	.word	0x40000400
 8004350:	40000800 	.word	0x40000800
 8004354:	40000c00 	.word	0x40000c00
 8004358:	40010400 	.word	0x40010400
 800435c:	40014000 	.word	0x40014000
 8004360:	40001800 	.word	0x40001800

08004364 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b090      	sub	sp, #64	; 0x40
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800436c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004370:	2200      	movs	r2, #0
 8004372:	601a      	str	r2, [r3, #0]
 8004374:	605a      	str	r2, [r3, #4]
 8004376:	609a      	str	r2, [r3, #8]
 8004378:	60da      	str	r2, [r3, #12]
 800437a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a9e      	ldr	r2, [pc, #632]	; (80045fc <HAL_TIM_MspPostInit+0x298>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d11f      	bne.n	80043c6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004386:	2300      	movs	r3, #0
 8004388:	62bb      	str	r3, [r7, #40]	; 0x28
 800438a:	4b9d      	ldr	r3, [pc, #628]	; (8004600 <HAL_TIM_MspPostInit+0x29c>)
 800438c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438e:	4a9c      	ldr	r2, [pc, #624]	; (8004600 <HAL_TIM_MspPostInit+0x29c>)
 8004390:	f043 0310 	orr.w	r3, r3, #16
 8004394:	6313      	str	r3, [r2, #48]	; 0x30
 8004396:	4b9a      	ldr	r3, [pc, #616]	; (8004600 <HAL_TIM_MspPostInit+0x29c>)
 8004398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439a:	f003 0310 	and.w	r3, r3, #16
 800439e:	62bb      	str	r3, [r7, #40]	; 0x28
 80043a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LF_CH1_Pin|LF_CH2_Pin|LB_CH1_Pin|LB_CH2_Pin;
 80043a2:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80043a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043a8:	2302      	movs	r3, #2
 80043aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ac:	2300      	movs	r3, #0
 80043ae:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043b0:	2300      	movs	r3, #0
 80043b2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80043b4:	2301      	movs	r3, #1
 80043b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80043b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80043bc:	4619      	mov	r1, r3
 80043be:	4891      	ldr	r0, [pc, #580]	; (8004604 <HAL_TIM_MspPostInit+0x2a0>)
 80043c0:	f000 fc7e 	bl	8004cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80043c4:	e115      	b.n	80045f2 <HAL_TIM_MspPostInit+0x28e>
  else if(htim->Instance==TIM3)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a8f      	ldr	r2, [pc, #572]	; (8004608 <HAL_TIM_MspPostInit+0x2a4>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d15b      	bne.n	8004488 <HAL_TIM_MspPostInit+0x124>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043d0:	2300      	movs	r3, #0
 80043d2:	627b      	str	r3, [r7, #36]	; 0x24
 80043d4:	4b8a      	ldr	r3, [pc, #552]	; (8004600 <HAL_TIM_MspPostInit+0x29c>)
 80043d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d8:	4a89      	ldr	r2, [pc, #548]	; (8004600 <HAL_TIM_MspPostInit+0x29c>)
 80043da:	f043 0301 	orr.w	r3, r3, #1
 80043de:	6313      	str	r3, [r2, #48]	; 0x30
 80043e0:	4b87      	ldr	r3, [pc, #540]	; (8004600 <HAL_TIM_MspPostInit+0x29c>)
 80043e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	627b      	str	r3, [r7, #36]	; 0x24
 80043ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043ec:	2300      	movs	r3, #0
 80043ee:	623b      	str	r3, [r7, #32]
 80043f0:	4b83      	ldr	r3, [pc, #524]	; (8004600 <HAL_TIM_MspPostInit+0x29c>)
 80043f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f4:	4a82      	ldr	r2, [pc, #520]	; (8004600 <HAL_TIM_MspPostInit+0x29c>)
 80043f6:	f043 0302 	orr.w	r3, r3, #2
 80043fa:	6313      	str	r3, [r2, #48]	; 0x30
 80043fc:	4b80      	ldr	r3, [pc, #512]	; (8004600 <HAL_TIM_MspPostInit+0x29c>)
 80043fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	623b      	str	r3, [r7, #32]
 8004406:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004408:	2300      	movs	r3, #0
 800440a:	61fb      	str	r3, [r7, #28]
 800440c:	4b7c      	ldr	r3, [pc, #496]	; (8004600 <HAL_TIM_MspPostInit+0x29c>)
 800440e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004410:	4a7b      	ldr	r2, [pc, #492]	; (8004600 <HAL_TIM_MspPostInit+0x29c>)
 8004412:	f043 0304 	orr.w	r3, r3, #4
 8004416:	6313      	str	r3, [r2, #48]	; 0x30
 8004418:	4b79      	ldr	r3, [pc, #484]	; (8004600 <HAL_TIM_MspPostInit+0x29c>)
 800441a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	61fb      	str	r3, [r7, #28]
 8004422:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = RF_CH1_Pin|RF_CH2_Pin;
 8004424:	23c0      	movs	r3, #192	; 0xc0
 8004426:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004428:	2302      	movs	r3, #2
 800442a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800442c:	2300      	movs	r3, #0
 800442e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004430:	2300      	movs	r3, #0
 8004432:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004434:	2302      	movs	r3, #2
 8004436:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004438:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800443c:	4619      	mov	r1, r3
 800443e:	4873      	ldr	r0, [pc, #460]	; (800460c <HAL_TIM_MspPostInit+0x2a8>)
 8004440:	f000 fc3e 	bl	8004cc0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RB_CH2_Pin;
 8004444:	2302      	movs	r3, #2
 8004446:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004448:	2302      	movs	r3, #2
 800444a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800444c:	2300      	movs	r3, #0
 800444e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004450:	2300      	movs	r3, #0
 8004452:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004454:	2302      	movs	r3, #2
 8004456:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(RB_CH2_GPIO_Port, &GPIO_InitStruct);
 8004458:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800445c:	4619      	mov	r1, r3
 800445e:	486c      	ldr	r0, [pc, #432]	; (8004610 <HAL_TIM_MspPostInit+0x2ac>)
 8004460:	f000 fc2e 	bl	8004cc0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RB_CH1_Pin;
 8004464:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004468:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800446a:	2302      	movs	r3, #2
 800446c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800446e:	2300      	movs	r3, #0
 8004470:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004472:	2300      	movs	r3, #0
 8004474:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004476:	2302      	movs	r3, #2
 8004478:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(RB_CH1_GPIO_Port, &GPIO_InitStruct);
 800447a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800447e:	4619      	mov	r1, r3
 8004480:	4864      	ldr	r0, [pc, #400]	; (8004614 <HAL_TIM_MspPostInit+0x2b0>)
 8004482:	f000 fc1d 	bl	8004cc0 <HAL_GPIO_Init>
}
 8004486:	e0b4      	b.n	80045f2 <HAL_TIM_MspPostInit+0x28e>
  else if(htim->Instance==TIM4)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a62      	ldr	r2, [pc, #392]	; (8004618 <HAL_TIM_MspPostInit+0x2b4>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d11f      	bne.n	80044d2 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004492:	2300      	movs	r3, #0
 8004494:	61bb      	str	r3, [r7, #24]
 8004496:	4b5a      	ldr	r3, [pc, #360]	; (8004600 <HAL_TIM_MspPostInit+0x29c>)
 8004498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449a:	4a59      	ldr	r2, [pc, #356]	; (8004600 <HAL_TIM_MspPostInit+0x29c>)
 800449c:	f043 0308 	orr.w	r3, r3, #8
 80044a0:	6313      	str	r3, [r2, #48]	; 0x30
 80044a2:	4b57      	ldr	r3, [pc, #348]	; (8004600 <HAL_TIM_MspPostInit+0x29c>)
 80044a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a6:	f003 0308 	and.w	r3, r3, #8
 80044aa:	61bb      	str	r3, [r7, #24]
 80044ac:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = M_PELONTAR_CH1_Pin|M_PELONTAR_CH2_Pin|M_BOLA_CH1_Pin|M_BOLA_CH2_Pin;
 80044ae:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80044b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044b4:	2302      	movs	r3, #2
 80044b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044b8:	2300      	movs	r3, #0
 80044ba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044bc:	2300      	movs	r3, #0
 80044be:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80044c0:	2302      	movs	r3, #2
 80044c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044c8:	4619      	mov	r1, r3
 80044ca:	4854      	ldr	r0, [pc, #336]	; (800461c <HAL_TIM_MspPostInit+0x2b8>)
 80044cc:	f000 fbf8 	bl	8004cc0 <HAL_GPIO_Init>
}
 80044d0:	e08f      	b.n	80045f2 <HAL_TIM_MspPostInit+0x28e>
  else if(htim->Instance==TIM5)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a52      	ldr	r2, [pc, #328]	; (8004620 <HAL_TIM_MspPostInit+0x2bc>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d11e      	bne.n	800451a <HAL_TIM_MspPostInit+0x1b6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044dc:	2300      	movs	r3, #0
 80044de:	617b      	str	r3, [r7, #20]
 80044e0:	4b47      	ldr	r3, [pc, #284]	; (8004600 <HAL_TIM_MspPostInit+0x29c>)
 80044e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e4:	4a46      	ldr	r2, [pc, #280]	; (8004600 <HAL_TIM_MspPostInit+0x29c>)
 80044e6:	f043 0301 	orr.w	r3, r3, #1
 80044ea:	6313      	str	r3, [r2, #48]	; 0x30
 80044ec:	4b44      	ldr	r3, [pc, #272]	; (8004600 <HAL_TIM_MspPostInit+0x29c>)
 80044ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	617b      	str	r3, [r7, #20]
 80044f6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = M_EXDL_CH1_Pin|M_EXDL_CH2_Pin;
 80044f8:	2303      	movs	r3, #3
 80044fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044fc:	2302      	movs	r3, #2
 80044fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004500:	2300      	movs	r3, #0
 8004502:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004504:	2300      	movs	r3, #0
 8004506:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004508:	2302      	movs	r3, #2
 800450a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800450c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004510:	4619      	mov	r1, r3
 8004512:	483e      	ldr	r0, [pc, #248]	; (800460c <HAL_TIM_MspPostInit+0x2a8>)
 8004514:	f000 fbd4 	bl	8004cc0 <HAL_GPIO_Init>
}
 8004518:	e06b      	b.n	80045f2 <HAL_TIM_MspPostInit+0x28e>
  else if(htim->Instance==TIM8)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a41      	ldr	r2, [pc, #260]	; (8004624 <HAL_TIM_MspPostInit+0x2c0>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d11e      	bne.n	8004562 <HAL_TIM_MspPostInit+0x1fe>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004524:	2300      	movs	r3, #0
 8004526:	613b      	str	r3, [r7, #16]
 8004528:	4b35      	ldr	r3, [pc, #212]	; (8004600 <HAL_TIM_MspPostInit+0x29c>)
 800452a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452c:	4a34      	ldr	r2, [pc, #208]	; (8004600 <HAL_TIM_MspPostInit+0x29c>)
 800452e:	f043 0304 	orr.w	r3, r3, #4
 8004532:	6313      	str	r3, [r2, #48]	; 0x30
 8004534:	4b32      	ldr	r3, [pc, #200]	; (8004600 <HAL_TIM_MspPostInit+0x29c>)
 8004536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004538:	f003 0304 	and.w	r3, r3, #4
 800453c:	613b      	str	r3, [r7, #16]
 800453e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = M_EXDR_CH1_Pin|M_EXDR_CH2_Pin;
 8004540:	23c0      	movs	r3, #192	; 0xc0
 8004542:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004544:	2302      	movs	r3, #2
 8004546:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004548:	2300      	movs	r3, #0
 800454a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800454c:	2300      	movs	r3, #0
 800454e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004550:	2303      	movs	r3, #3
 8004552:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004554:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004558:	4619      	mov	r1, r3
 800455a:	482e      	ldr	r0, [pc, #184]	; (8004614 <HAL_TIM_MspPostInit+0x2b0>)
 800455c:	f000 fbb0 	bl	8004cc0 <HAL_GPIO_Init>
}
 8004560:	e047      	b.n	80045f2 <HAL_TIM_MspPostInit+0x28e>
  else if(htim->Instance==TIM9)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a30      	ldr	r2, [pc, #192]	; (8004628 <HAL_TIM_MspPostInit+0x2c4>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d11e      	bne.n	80045aa <HAL_TIM_MspPostInit+0x246>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800456c:	2300      	movs	r3, #0
 800456e:	60fb      	str	r3, [r7, #12]
 8004570:	4b23      	ldr	r3, [pc, #140]	; (8004600 <HAL_TIM_MspPostInit+0x29c>)
 8004572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004574:	4a22      	ldr	r2, [pc, #136]	; (8004600 <HAL_TIM_MspPostInit+0x29c>)
 8004576:	f043 0310 	orr.w	r3, r3, #16
 800457a:	6313      	str	r3, [r2, #48]	; 0x30
 800457c:	4b20      	ldr	r3, [pc, #128]	; (8004600 <HAL_TIM_MspPostInit+0x29c>)
 800457e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004580:	f003 0310 	and.w	r3, r3, #16
 8004584:	60fb      	str	r3, [r7, #12]
 8004586:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M_PADI_CH1_Pin|M_PADI_CH2_Pin;
 8004588:	2360      	movs	r3, #96	; 0x60
 800458a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800458c:	2302      	movs	r3, #2
 800458e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004590:	2300      	movs	r3, #0
 8004592:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004594:	2300      	movs	r3, #0
 8004596:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8004598:	2303      	movs	r3, #3
 800459a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800459c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045a0:	4619      	mov	r1, r3
 80045a2:	4818      	ldr	r0, [pc, #96]	; (8004604 <HAL_TIM_MspPostInit+0x2a0>)
 80045a4:	f000 fb8c 	bl	8004cc0 <HAL_GPIO_Init>
}
 80045a8:	e023      	b.n	80045f2 <HAL_TIM_MspPostInit+0x28e>
  else if(htim->Instance==TIM12)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a1f      	ldr	r2, [pc, #124]	; (800462c <HAL_TIM_MspPostInit+0x2c8>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d11e      	bne.n	80045f2 <HAL_TIM_MspPostInit+0x28e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045b4:	2300      	movs	r3, #0
 80045b6:	60bb      	str	r3, [r7, #8]
 80045b8:	4b11      	ldr	r3, [pc, #68]	; (8004600 <HAL_TIM_MspPostInit+0x29c>)
 80045ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045bc:	4a10      	ldr	r2, [pc, #64]	; (8004600 <HAL_TIM_MspPostInit+0x29c>)
 80045be:	f043 0302 	orr.w	r3, r3, #2
 80045c2:	6313      	str	r3, [r2, #48]	; 0x30
 80045c4:	4b0e      	ldr	r3, [pc, #56]	; (8004600 <HAL_TIM_MspPostInit+0x29c>)
 80045c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	60bb      	str	r3, [r7, #8]
 80045ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ESC1_Pin|ESC2_Pin;
 80045d0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80045d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045d6:	2302      	movs	r3, #2
 80045d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045da:	2300      	movs	r3, #0
 80045dc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045de:	2300      	movs	r3, #0
 80045e0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80045e2:	2309      	movs	r3, #9
 80045e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045ea:	4619      	mov	r1, r3
 80045ec:	4808      	ldr	r0, [pc, #32]	; (8004610 <HAL_TIM_MspPostInit+0x2ac>)
 80045ee:	f000 fb67 	bl	8004cc0 <HAL_GPIO_Init>
}
 80045f2:	bf00      	nop
 80045f4:	3740      	adds	r7, #64	; 0x40
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	40010000 	.word	0x40010000
 8004600:	40023800 	.word	0x40023800
 8004604:	40021000 	.word	0x40021000
 8004608:	40000400 	.word	0x40000400
 800460c:	40020000 	.word	0x40020000
 8004610:	40020400 	.word	0x40020400
 8004614:	40020800 	.word	0x40020800
 8004618:	40000800 	.word	0x40000800
 800461c:	40020c00 	.word	0x40020c00
 8004620:	40000c00 	.word	0x40000c00
 8004624:	40010400 	.word	0x40010400
 8004628:	40014000 	.word	0x40014000
 800462c:	40001800 	.word	0x40001800

08004630 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b08a      	sub	sp, #40	; 0x28
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004638:	f107 0314 	add.w	r3, r7, #20
 800463c:	2200      	movs	r2, #0
 800463e:	601a      	str	r2, [r3, #0]
 8004640:	605a      	str	r2, [r3, #4]
 8004642:	609a      	str	r2, [r3, #8]
 8004644:	60da      	str	r2, [r3, #12]
 8004646:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a1d      	ldr	r2, [pc, #116]	; (80046c4 <HAL_UART_MspInit+0x94>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d134      	bne.n	80046bc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004652:	2300      	movs	r3, #0
 8004654:	613b      	str	r3, [r7, #16]
 8004656:	4b1c      	ldr	r3, [pc, #112]	; (80046c8 <HAL_UART_MspInit+0x98>)
 8004658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465a:	4a1b      	ldr	r2, [pc, #108]	; (80046c8 <HAL_UART_MspInit+0x98>)
 800465c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004660:	6413      	str	r3, [r2, #64]	; 0x40
 8004662:	4b19      	ldr	r3, [pc, #100]	; (80046c8 <HAL_UART_MspInit+0x98>)
 8004664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004666:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800466a:	613b      	str	r3, [r7, #16]
 800466c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800466e:	2300      	movs	r3, #0
 8004670:	60fb      	str	r3, [r7, #12]
 8004672:	4b15      	ldr	r3, [pc, #84]	; (80046c8 <HAL_UART_MspInit+0x98>)
 8004674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004676:	4a14      	ldr	r2, [pc, #80]	; (80046c8 <HAL_UART_MspInit+0x98>)
 8004678:	f043 0308 	orr.w	r3, r3, #8
 800467c:	6313      	str	r3, [r2, #48]	; 0x30
 800467e:	4b12      	ldr	r3, [pc, #72]	; (80046c8 <HAL_UART_MspInit+0x98>)
 8004680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004682:	f003 0308 	and.w	r3, r3, #8
 8004686:	60fb      	str	r3, [r7, #12]
 8004688:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800468a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800468e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004690:	2302      	movs	r3, #2
 8004692:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004694:	2300      	movs	r3, #0
 8004696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004698:	2303      	movs	r3, #3
 800469a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800469c:	2307      	movs	r3, #7
 800469e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80046a0:	f107 0314 	add.w	r3, r7, #20
 80046a4:	4619      	mov	r1, r3
 80046a6:	4809      	ldr	r0, [pc, #36]	; (80046cc <HAL_UART_MspInit+0x9c>)
 80046a8:	f000 fb0a 	bl	8004cc0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80046ac:	2200      	movs	r2, #0
 80046ae:	2105      	movs	r1, #5
 80046b0:	2027      	movs	r0, #39	; 0x27
 80046b2:	f000 fa49 	bl	8004b48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80046b6:	2027      	movs	r0, #39	; 0x27
 80046b8:	f000 fa62 	bl	8004b80 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80046bc:	bf00      	nop
 80046be:	3728      	adds	r7, #40	; 0x28
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	40004800 	.word	0x40004800
 80046c8:	40023800 	.word	0x40023800
 80046cc:	40020c00 	.word	0x40020c00

080046d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b08e      	sub	sp, #56	; 0x38
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80046d8:	2300      	movs	r3, #0
 80046da:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80046dc:	2300      	movs	r3, #0
 80046de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80046e0:	2300      	movs	r3, #0
 80046e2:	60fb      	str	r3, [r7, #12]
 80046e4:	4b33      	ldr	r3, [pc, #204]	; (80047b4 <HAL_InitTick+0xe4>)
 80046e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e8:	4a32      	ldr	r2, [pc, #200]	; (80047b4 <HAL_InitTick+0xe4>)
 80046ea:	f043 0320 	orr.w	r3, r3, #32
 80046ee:	6413      	str	r3, [r2, #64]	; 0x40
 80046f0:	4b30      	ldr	r3, [pc, #192]	; (80047b4 <HAL_InitTick+0xe4>)
 80046f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f4:	f003 0320 	and.w	r3, r3, #32
 80046f8:	60fb      	str	r3, [r7, #12]
 80046fa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80046fc:	f107 0210 	add.w	r2, r7, #16
 8004700:	f107 0314 	add.w	r3, r7, #20
 8004704:	4611      	mov	r1, r2
 8004706:	4618      	mov	r0, r3
 8004708:	f001 f9d2 	bl	8005ab0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800470c:	6a3b      	ldr	r3, [r7, #32]
 800470e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004712:	2b00      	cmp	r3, #0
 8004714:	d103      	bne.n	800471e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004716:	f001 f9a3 	bl	8005a60 <HAL_RCC_GetPCLK1Freq>
 800471a:	6378      	str	r0, [r7, #52]	; 0x34
 800471c:	e004      	b.n	8004728 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800471e:	f001 f99f 	bl	8005a60 <HAL_RCC_GetPCLK1Freq>
 8004722:	4603      	mov	r3, r0
 8004724:	005b      	lsls	r3, r3, #1
 8004726:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800472a:	4a23      	ldr	r2, [pc, #140]	; (80047b8 <HAL_InitTick+0xe8>)
 800472c:	fba2 2303 	umull	r2, r3, r2, r3
 8004730:	0c9b      	lsrs	r3, r3, #18
 8004732:	3b01      	subs	r3, #1
 8004734:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8004736:	4b21      	ldr	r3, [pc, #132]	; (80047bc <HAL_InitTick+0xec>)
 8004738:	4a21      	ldr	r2, [pc, #132]	; (80047c0 <HAL_InitTick+0xf0>)
 800473a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800473c:	4b1f      	ldr	r3, [pc, #124]	; (80047bc <HAL_InitTick+0xec>)
 800473e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004742:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8004744:	4a1d      	ldr	r2, [pc, #116]	; (80047bc <HAL_InitTick+0xec>)
 8004746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004748:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800474a:	4b1c      	ldr	r3, [pc, #112]	; (80047bc <HAL_InitTick+0xec>)
 800474c:	2200      	movs	r2, #0
 800474e:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004750:	4b1a      	ldr	r3, [pc, #104]	; (80047bc <HAL_InitTick+0xec>)
 8004752:	2200      	movs	r2, #0
 8004754:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004756:	4b19      	ldr	r3, [pc, #100]	; (80047bc <HAL_InitTick+0xec>)
 8004758:	2200      	movs	r2, #0
 800475a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 800475c:	4817      	ldr	r0, [pc, #92]	; (80047bc <HAL_InitTick+0xec>)
 800475e:	f001 ff8f 	bl	8006680 <HAL_TIM_Base_Init>
 8004762:	4603      	mov	r3, r0
 8004764:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8004768:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800476c:	2b00      	cmp	r3, #0
 800476e:	d11b      	bne.n	80047a8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8004770:	4812      	ldr	r0, [pc, #72]	; (80047bc <HAL_InitTick+0xec>)
 8004772:	f001 ffd5 	bl	8006720 <HAL_TIM_Base_Start_IT>
 8004776:	4603      	mov	r3, r0
 8004778:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800477c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004780:	2b00      	cmp	r3, #0
 8004782:	d111      	bne.n	80047a8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004784:	2037      	movs	r0, #55	; 0x37
 8004786:	f000 f9fb 	bl	8004b80 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b0f      	cmp	r3, #15
 800478e:	d808      	bhi.n	80047a2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8004790:	2200      	movs	r2, #0
 8004792:	6879      	ldr	r1, [r7, #4]
 8004794:	2037      	movs	r0, #55	; 0x37
 8004796:	f000 f9d7 	bl	8004b48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800479a:	4a0a      	ldr	r2, [pc, #40]	; (80047c4 <HAL_InitTick+0xf4>)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6013      	str	r3, [r2, #0]
 80047a0:	e002      	b.n	80047a8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80047a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3738      	adds	r7, #56	; 0x38
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	40023800 	.word	0x40023800
 80047b8:	431bde83 	.word	0x431bde83
 80047bc:	200007f8 	.word	0x200007f8
 80047c0:	40001400 	.word	0x40001400
 80047c4:	20000120 	.word	0x20000120

080047c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80047c8:	b480      	push	{r7}
 80047ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80047cc:	e7fe      	b.n	80047cc <NMI_Handler+0x4>

080047ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80047ce:	b480      	push	{r7}
 80047d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80047d2:	e7fe      	b.n	80047d2 <HardFault_Handler+0x4>

080047d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80047d4:	b480      	push	{r7}
 80047d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80047d8:	e7fe      	b.n	80047d8 <MemManage_Handler+0x4>

080047da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80047da:	b480      	push	{r7}
 80047dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80047de:	e7fe      	b.n	80047de <BusFault_Handler+0x4>

080047e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80047e0:	b480      	push	{r7}
 80047e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80047e4:	e7fe      	b.n	80047e4 <UsageFault_Handler+0x4>

080047e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80047e6:	b480      	push	{r7}
 80047e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80047ea:	bf00      	nop
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC4_A_Pin);
 80047f8:	2002      	movs	r0, #2
 80047fa:	f000 fc59 	bl	80050b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80047fe:	bf00      	nop
 8004800:	bd80      	pop	{r7, pc}

08004802 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8004802:	b580      	push	{r7, lr}
 8004804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC4_B_Pin);
 8004806:	2004      	movs	r0, #4
 8004808:	f000 fc52 	bl	80050b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800480c:	bf00      	nop
 800480e:	bd80      	pop	{r7, pc}

08004810 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC3_B_Pin);
 8004814:	2008      	movs	r0, #8
 8004816:	f000 fc4b 	bl	80050b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800481a:	bf00      	nop
 800481c:	bd80      	pop	{r7, pc}

0800481e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800481e:	b580      	push	{r7, lr}
 8004820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LS_5_Pin);
 8004822:	2010      	movs	r0, #16
 8004824:	f000 fc44 	bl	80050b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004828:	bf00      	nop
 800482a:	bd80      	pop	{r7, pc}

0800482c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LS_1_Pin);
 8004830:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004834:	f000 fc3c 	bl	80050b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004838:	bf00      	nop
 800483a:	bd80      	pop	{r7, pc}

0800483c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004840:	4802      	ldr	r0, [pc, #8]	; (800484c <USART3_IRQHandler+0x10>)
 8004842:	f002 fff9 	bl	8007838 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004846:	bf00      	nop
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	200006b0 	.word	0x200006b0

08004850 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC1_A_Pin);
 8004854:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004858:	f000 fc2a 	bl	80050b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC2_A_Pin);
 800485c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004860:	f000 fc26 	bl	80050b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC3_A_Pin);
 8004864:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004868:	f000 fc22 	bl	80050b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC1_B_Pin);
 800486c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004870:	f000 fc1e 	bl	80050b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC2_B_Pin);
 8004874:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004878:	f000 fc1a 	bl	80050b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800487c:	bf00      	nop
 800487e:	bd80      	pop	{r7, pc}

08004880 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004884:	4802      	ldr	r0, [pc, #8]	; (8004890 <TIM7_IRQHandler+0x10>)
 8004886:	f002 f8dd 	bl	8006a44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800488a:	bf00      	nop
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	200007f8 	.word	0x200007f8

08004894 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004894:	b480      	push	{r7}
 8004896:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004898:	4b06      	ldr	r3, [pc, #24]	; (80048b4 <SystemInit+0x20>)
 800489a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800489e:	4a05      	ldr	r2, [pc, #20]	; (80048b4 <SystemInit+0x20>)
 80048a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80048a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80048a8:	bf00      	nop
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	e000ed00 	.word	0xe000ed00

080048b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80048b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80048f0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80048bc:	480d      	ldr	r0, [pc, #52]	; (80048f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80048be:	490e      	ldr	r1, [pc, #56]	; (80048f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80048c0:	4a0e      	ldr	r2, [pc, #56]	; (80048fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80048c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80048c4:	e002      	b.n	80048cc <LoopCopyDataInit>

080048c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80048c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80048c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80048ca:	3304      	adds	r3, #4

080048cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80048cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80048ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80048d0:	d3f9      	bcc.n	80048c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80048d2:	4a0b      	ldr	r2, [pc, #44]	; (8004900 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80048d4:	4c0b      	ldr	r4, [pc, #44]	; (8004904 <LoopFillZerobss+0x26>)
  movs r3, #0
 80048d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80048d8:	e001      	b.n	80048de <LoopFillZerobss>

080048da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80048da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80048dc:	3204      	adds	r2, #4

080048de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80048de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80048e0:	d3fb      	bcc.n	80048da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80048e2:	f7ff ffd7 	bl	8004894 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80048e6:	f005 f947 	bl	8009b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80048ea:	f7fe f885 	bl	80029f8 <main>
  bx  lr    
 80048ee:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80048f0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80048f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80048f8:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 80048fc:	08009d38 	.word	0x08009d38
  ldr r2, =_sbss
 8004900:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8004904:	200046d8 	.word	0x200046d8

08004908 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004908:	e7fe      	b.n	8004908 <ADC_IRQHandler>
	...

0800490c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004910:	4b0e      	ldr	r3, [pc, #56]	; (800494c <HAL_Init+0x40>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a0d      	ldr	r2, [pc, #52]	; (800494c <HAL_Init+0x40>)
 8004916:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800491a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800491c:	4b0b      	ldr	r3, [pc, #44]	; (800494c <HAL_Init+0x40>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a0a      	ldr	r2, [pc, #40]	; (800494c <HAL_Init+0x40>)
 8004922:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004926:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004928:	4b08      	ldr	r3, [pc, #32]	; (800494c <HAL_Init+0x40>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a07      	ldr	r2, [pc, #28]	; (800494c <HAL_Init+0x40>)
 800492e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004932:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004934:	2003      	movs	r0, #3
 8004936:	f000 f8fc 	bl	8004b32 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800493a:	200f      	movs	r0, #15
 800493c:	f7ff fec8 	bl	80046d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004940:	f7ff fbf6 	bl	8004130 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	40023c00 	.word	0x40023c00

08004950 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004950:	b480      	push	{r7}
 8004952:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004954:	4b06      	ldr	r3, [pc, #24]	; (8004970 <HAL_IncTick+0x20>)
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	461a      	mov	r2, r3
 800495a:	4b06      	ldr	r3, [pc, #24]	; (8004974 <HAL_IncTick+0x24>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4413      	add	r3, r2
 8004960:	4a04      	ldr	r2, [pc, #16]	; (8004974 <HAL_IncTick+0x24>)
 8004962:	6013      	str	r3, [r2, #0]
}
 8004964:	bf00      	nop
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	20000124 	.word	0x20000124
 8004974:	20000840 	.word	0x20000840

08004978 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004978:	b480      	push	{r7}
 800497a:	af00      	add	r7, sp, #0
  return uwTick;
 800497c:	4b03      	ldr	r3, [pc, #12]	; (800498c <HAL_GetTick+0x14>)
 800497e:	681b      	ldr	r3, [r3, #0]
}
 8004980:	4618      	mov	r0, r3
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	20000840 	.word	0x20000840

08004990 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004998:	f7ff ffee 	bl	8004978 <HAL_GetTick>
 800499c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a8:	d005      	beq.n	80049b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80049aa:	4b0a      	ldr	r3, [pc, #40]	; (80049d4 <HAL_Delay+0x44>)
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	461a      	mov	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	4413      	add	r3, r2
 80049b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80049b6:	bf00      	nop
 80049b8:	f7ff ffde 	bl	8004978 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d8f7      	bhi.n	80049b8 <HAL_Delay+0x28>
  {
  }
}
 80049c8:	bf00      	nop
 80049ca:	bf00      	nop
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	20000124 	.word	0x20000124

080049d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f003 0307 	and.w	r3, r3, #7
 80049e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049e8:	4b0c      	ldr	r3, [pc, #48]	; (8004a1c <__NVIC_SetPriorityGrouping+0x44>)
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049ee:	68ba      	ldr	r2, [r7, #8]
 80049f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80049f4:	4013      	ands	r3, r2
 80049f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a0a:	4a04      	ldr	r2, [pc, #16]	; (8004a1c <__NVIC_SetPriorityGrouping+0x44>)
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	60d3      	str	r3, [r2, #12]
}
 8004a10:	bf00      	nop
 8004a12:	3714      	adds	r7, #20
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr
 8004a1c:	e000ed00 	.word	0xe000ed00

08004a20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a20:	b480      	push	{r7}
 8004a22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a24:	4b04      	ldr	r3, [pc, #16]	; (8004a38 <__NVIC_GetPriorityGrouping+0x18>)
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	0a1b      	lsrs	r3, r3, #8
 8004a2a:	f003 0307 	and.w	r3, r3, #7
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr
 8004a38:	e000ed00 	.word	0xe000ed00

08004a3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	4603      	mov	r3, r0
 8004a44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	db0b      	blt.n	8004a66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a4e:	79fb      	ldrb	r3, [r7, #7]
 8004a50:	f003 021f 	and.w	r2, r3, #31
 8004a54:	4907      	ldr	r1, [pc, #28]	; (8004a74 <__NVIC_EnableIRQ+0x38>)
 8004a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a5a:	095b      	lsrs	r3, r3, #5
 8004a5c:	2001      	movs	r0, #1
 8004a5e:	fa00 f202 	lsl.w	r2, r0, r2
 8004a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a66:	bf00      	nop
 8004a68:	370c      	adds	r7, #12
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	e000e100 	.word	0xe000e100

08004a78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	4603      	mov	r3, r0
 8004a80:	6039      	str	r1, [r7, #0]
 8004a82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	db0a      	blt.n	8004aa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	b2da      	uxtb	r2, r3
 8004a90:	490c      	ldr	r1, [pc, #48]	; (8004ac4 <__NVIC_SetPriority+0x4c>)
 8004a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a96:	0112      	lsls	r2, r2, #4
 8004a98:	b2d2      	uxtb	r2, r2
 8004a9a:	440b      	add	r3, r1
 8004a9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004aa0:	e00a      	b.n	8004ab8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	b2da      	uxtb	r2, r3
 8004aa6:	4908      	ldr	r1, [pc, #32]	; (8004ac8 <__NVIC_SetPriority+0x50>)
 8004aa8:	79fb      	ldrb	r3, [r7, #7]
 8004aaa:	f003 030f 	and.w	r3, r3, #15
 8004aae:	3b04      	subs	r3, #4
 8004ab0:	0112      	lsls	r2, r2, #4
 8004ab2:	b2d2      	uxtb	r2, r2
 8004ab4:	440b      	add	r3, r1
 8004ab6:	761a      	strb	r2, [r3, #24]
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr
 8004ac4:	e000e100 	.word	0xe000e100
 8004ac8:	e000ed00 	.word	0xe000ed00

08004acc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b089      	sub	sp, #36	; 0x24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f003 0307 	and.w	r3, r3, #7
 8004ade:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	f1c3 0307 	rsb	r3, r3, #7
 8004ae6:	2b04      	cmp	r3, #4
 8004ae8:	bf28      	it	cs
 8004aea:	2304      	movcs	r3, #4
 8004aec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	3304      	adds	r3, #4
 8004af2:	2b06      	cmp	r3, #6
 8004af4:	d902      	bls.n	8004afc <NVIC_EncodePriority+0x30>
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	3b03      	subs	r3, #3
 8004afa:	e000      	b.n	8004afe <NVIC_EncodePriority+0x32>
 8004afc:	2300      	movs	r3, #0
 8004afe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b00:	f04f 32ff 	mov.w	r2, #4294967295
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0a:	43da      	mvns	r2, r3
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	401a      	ands	r2, r3
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b14:	f04f 31ff 	mov.w	r1, #4294967295
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b1e:	43d9      	mvns	r1, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b24:	4313      	orrs	r3, r2
         );
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3724      	adds	r7, #36	; 0x24
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b082      	sub	sp, #8
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f7ff ff4c 	bl	80049d8 <__NVIC_SetPriorityGrouping>
}
 8004b40:	bf00      	nop
 8004b42:	3708      	adds	r7, #8
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b086      	sub	sp, #24
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	4603      	mov	r3, r0
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
 8004b54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b56:	2300      	movs	r3, #0
 8004b58:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b5a:	f7ff ff61 	bl	8004a20 <__NVIC_GetPriorityGrouping>
 8004b5e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	68b9      	ldr	r1, [r7, #8]
 8004b64:	6978      	ldr	r0, [r7, #20]
 8004b66:	f7ff ffb1 	bl	8004acc <NVIC_EncodePriority>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b70:	4611      	mov	r1, r2
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7ff ff80 	bl	8004a78 <__NVIC_SetPriority>
}
 8004b78:	bf00      	nop
 8004b7a:	3718      	adds	r7, #24
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	4603      	mov	r3, r0
 8004b88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7ff ff54 	bl	8004a3c <__NVIC_EnableIRQ>
}
 8004b94:	bf00      	nop
 8004b96:	3708      	adds	r7, #8
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004baa:	f7ff fee5 	bl	8004978 <HAL_GetTick>
 8004bae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d008      	beq.n	8004bce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2280      	movs	r2, #128	; 0x80
 8004bc0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e052      	b.n	8004c74 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f022 0216 	bic.w	r2, r2, #22
 8004bdc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	695a      	ldr	r2, [r3, #20]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d103      	bne.n	8004bfe <HAL_DMA_Abort+0x62>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d007      	beq.n	8004c0e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 0208 	bic.w	r2, r2, #8
 8004c0c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f022 0201 	bic.w	r2, r2, #1
 8004c1c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c1e:	e013      	b.n	8004c48 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c20:	f7ff feaa 	bl	8004978 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b05      	cmp	r3, #5
 8004c2c:	d90c      	bls.n	8004c48 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2220      	movs	r2, #32
 8004c32:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2203      	movs	r2, #3
 8004c38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e015      	b.n	8004c74 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1e4      	bne.n	8004c20 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c5a:	223f      	movs	r2, #63	; 0x3f
 8004c5c:	409a      	lsls	r2, r3
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d004      	beq.n	8004c9a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2280      	movs	r2, #128	; 0x80
 8004c94:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e00c      	b.n	8004cb4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2205      	movs	r2, #5
 8004c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 0201 	bic.w	r2, r2, #1
 8004cb0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b089      	sub	sp, #36	; 0x24
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	61fb      	str	r3, [r7, #28]
 8004cda:	e177      	b.n	8004fcc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004cdc:	2201      	movs	r2, #1
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	4013      	ands	r3, r2
 8004cee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	f040 8166 	bne.w	8004fc6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f003 0303 	and.w	r3, r3, #3
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d005      	beq.n	8004d12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d130      	bne.n	8004d74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	005b      	lsls	r3, r3, #1
 8004d1c:	2203      	movs	r2, #3
 8004d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d22:	43db      	mvns	r3, r3
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	4013      	ands	r3, r2
 8004d28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	68da      	ldr	r2, [r3, #12]
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	005b      	lsls	r3, r3, #1
 8004d32:	fa02 f303 	lsl.w	r3, r2, r3
 8004d36:	69ba      	ldr	r2, [r7, #24]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	69ba      	ldr	r2, [r7, #24]
 8004d40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d48:	2201      	movs	r2, #1
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d50:	43db      	mvns	r3, r3
 8004d52:	69ba      	ldr	r2, [r7, #24]
 8004d54:	4013      	ands	r3, r2
 8004d56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	091b      	lsrs	r3, r3, #4
 8004d5e:	f003 0201 	and.w	r2, r3, #1
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	fa02 f303 	lsl.w	r3, r2, r3
 8004d68:	69ba      	ldr	r2, [r7, #24]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	69ba      	ldr	r2, [r7, #24]
 8004d72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f003 0303 	and.w	r3, r3, #3
 8004d7c:	2b03      	cmp	r3, #3
 8004d7e:	d017      	beq.n	8004db0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	005b      	lsls	r3, r3, #1
 8004d8a:	2203      	movs	r2, #3
 8004d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d90:	43db      	mvns	r3, r3
 8004d92:	69ba      	ldr	r2, [r7, #24]
 8004d94:	4013      	ands	r3, r2
 8004d96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	689a      	ldr	r2, [r3, #8]
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	005b      	lsls	r3, r3, #1
 8004da0:	fa02 f303 	lsl.w	r3, r2, r3
 8004da4:	69ba      	ldr	r2, [r7, #24]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	f003 0303 	and.w	r3, r3, #3
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d123      	bne.n	8004e04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	08da      	lsrs	r2, r3, #3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	3208      	adds	r2, #8
 8004dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	f003 0307 	and.w	r3, r3, #7
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	220f      	movs	r2, #15
 8004dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd8:	43db      	mvns	r3, r3
 8004dda:	69ba      	ldr	r2, [r7, #24]
 8004ddc:	4013      	ands	r3, r2
 8004dde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	691a      	ldr	r2, [r3, #16]
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	f003 0307 	and.w	r3, r3, #7
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	fa02 f303 	lsl.w	r3, r2, r3
 8004df0:	69ba      	ldr	r2, [r7, #24]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	08da      	lsrs	r2, r3, #3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	3208      	adds	r2, #8
 8004dfe:	69b9      	ldr	r1, [r7, #24]
 8004e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	005b      	lsls	r3, r3, #1
 8004e0e:	2203      	movs	r2, #3
 8004e10:	fa02 f303 	lsl.w	r3, r2, r3
 8004e14:	43db      	mvns	r3, r3
 8004e16:	69ba      	ldr	r2, [r7, #24]
 8004e18:	4013      	ands	r3, r2
 8004e1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f003 0203 	and.w	r2, r3, #3
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	005b      	lsls	r3, r3, #1
 8004e28:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	69ba      	ldr	r2, [r7, #24]
 8004e36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f000 80c0 	beq.w	8004fc6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e46:	2300      	movs	r3, #0
 8004e48:	60fb      	str	r3, [r7, #12]
 8004e4a:	4b66      	ldr	r3, [pc, #408]	; (8004fe4 <HAL_GPIO_Init+0x324>)
 8004e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e4e:	4a65      	ldr	r2, [pc, #404]	; (8004fe4 <HAL_GPIO_Init+0x324>)
 8004e50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e54:	6453      	str	r3, [r2, #68]	; 0x44
 8004e56:	4b63      	ldr	r3, [pc, #396]	; (8004fe4 <HAL_GPIO_Init+0x324>)
 8004e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e5e:	60fb      	str	r3, [r7, #12]
 8004e60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e62:	4a61      	ldr	r2, [pc, #388]	; (8004fe8 <HAL_GPIO_Init+0x328>)
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	089b      	lsrs	r3, r3, #2
 8004e68:	3302      	adds	r3, #2
 8004e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	f003 0303 	and.w	r3, r3, #3
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	220f      	movs	r2, #15
 8004e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7e:	43db      	mvns	r3, r3
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	4013      	ands	r3, r2
 8004e84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a58      	ldr	r2, [pc, #352]	; (8004fec <HAL_GPIO_Init+0x32c>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d037      	beq.n	8004efe <HAL_GPIO_Init+0x23e>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a57      	ldr	r2, [pc, #348]	; (8004ff0 <HAL_GPIO_Init+0x330>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d031      	beq.n	8004efa <HAL_GPIO_Init+0x23a>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a56      	ldr	r2, [pc, #344]	; (8004ff4 <HAL_GPIO_Init+0x334>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d02b      	beq.n	8004ef6 <HAL_GPIO_Init+0x236>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a55      	ldr	r2, [pc, #340]	; (8004ff8 <HAL_GPIO_Init+0x338>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d025      	beq.n	8004ef2 <HAL_GPIO_Init+0x232>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a54      	ldr	r2, [pc, #336]	; (8004ffc <HAL_GPIO_Init+0x33c>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d01f      	beq.n	8004eee <HAL_GPIO_Init+0x22e>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a53      	ldr	r2, [pc, #332]	; (8005000 <HAL_GPIO_Init+0x340>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d019      	beq.n	8004eea <HAL_GPIO_Init+0x22a>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a52      	ldr	r2, [pc, #328]	; (8005004 <HAL_GPIO_Init+0x344>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d013      	beq.n	8004ee6 <HAL_GPIO_Init+0x226>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a51      	ldr	r2, [pc, #324]	; (8005008 <HAL_GPIO_Init+0x348>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d00d      	beq.n	8004ee2 <HAL_GPIO_Init+0x222>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a50      	ldr	r2, [pc, #320]	; (800500c <HAL_GPIO_Init+0x34c>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d007      	beq.n	8004ede <HAL_GPIO_Init+0x21e>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a4f      	ldr	r2, [pc, #316]	; (8005010 <HAL_GPIO_Init+0x350>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d101      	bne.n	8004eda <HAL_GPIO_Init+0x21a>
 8004ed6:	2309      	movs	r3, #9
 8004ed8:	e012      	b.n	8004f00 <HAL_GPIO_Init+0x240>
 8004eda:	230a      	movs	r3, #10
 8004edc:	e010      	b.n	8004f00 <HAL_GPIO_Init+0x240>
 8004ede:	2308      	movs	r3, #8
 8004ee0:	e00e      	b.n	8004f00 <HAL_GPIO_Init+0x240>
 8004ee2:	2307      	movs	r3, #7
 8004ee4:	e00c      	b.n	8004f00 <HAL_GPIO_Init+0x240>
 8004ee6:	2306      	movs	r3, #6
 8004ee8:	e00a      	b.n	8004f00 <HAL_GPIO_Init+0x240>
 8004eea:	2305      	movs	r3, #5
 8004eec:	e008      	b.n	8004f00 <HAL_GPIO_Init+0x240>
 8004eee:	2304      	movs	r3, #4
 8004ef0:	e006      	b.n	8004f00 <HAL_GPIO_Init+0x240>
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e004      	b.n	8004f00 <HAL_GPIO_Init+0x240>
 8004ef6:	2302      	movs	r3, #2
 8004ef8:	e002      	b.n	8004f00 <HAL_GPIO_Init+0x240>
 8004efa:	2301      	movs	r3, #1
 8004efc:	e000      	b.n	8004f00 <HAL_GPIO_Init+0x240>
 8004efe:	2300      	movs	r3, #0
 8004f00:	69fa      	ldr	r2, [r7, #28]
 8004f02:	f002 0203 	and.w	r2, r2, #3
 8004f06:	0092      	lsls	r2, r2, #2
 8004f08:	4093      	lsls	r3, r2
 8004f0a:	69ba      	ldr	r2, [r7, #24]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f10:	4935      	ldr	r1, [pc, #212]	; (8004fe8 <HAL_GPIO_Init+0x328>)
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	089b      	lsrs	r3, r3, #2
 8004f16:	3302      	adds	r3, #2
 8004f18:	69ba      	ldr	r2, [r7, #24]
 8004f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f1e:	4b3d      	ldr	r3, [pc, #244]	; (8005014 <HAL_GPIO_Init+0x354>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	43db      	mvns	r3, r3
 8004f28:	69ba      	ldr	r2, [r7, #24]
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d003      	beq.n	8004f42 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004f3a:	69ba      	ldr	r2, [r7, #24]
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f42:	4a34      	ldr	r2, [pc, #208]	; (8005014 <HAL_GPIO_Init+0x354>)
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f48:	4b32      	ldr	r3, [pc, #200]	; (8005014 <HAL_GPIO_Init+0x354>)
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	43db      	mvns	r3, r3
 8004f52:	69ba      	ldr	r2, [r7, #24]
 8004f54:	4013      	ands	r3, r2
 8004f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d003      	beq.n	8004f6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004f64:	69ba      	ldr	r2, [r7, #24]
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f6c:	4a29      	ldr	r2, [pc, #164]	; (8005014 <HAL_GPIO_Init+0x354>)
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f72:	4b28      	ldr	r3, [pc, #160]	; (8005014 <HAL_GPIO_Init+0x354>)
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	43db      	mvns	r3, r3
 8004f7c:	69ba      	ldr	r2, [r7, #24]
 8004f7e:	4013      	ands	r3, r2
 8004f80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d003      	beq.n	8004f96 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004f8e:	69ba      	ldr	r2, [r7, #24]
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f96:	4a1f      	ldr	r2, [pc, #124]	; (8005014 <HAL_GPIO_Init+0x354>)
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f9c:	4b1d      	ldr	r3, [pc, #116]	; (8005014 <HAL_GPIO_Init+0x354>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	43db      	mvns	r3, r3
 8004fa6:	69ba      	ldr	r2, [r7, #24]
 8004fa8:	4013      	ands	r3, r2
 8004faa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d003      	beq.n	8004fc0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004fb8:	69ba      	ldr	r2, [r7, #24]
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004fc0:	4a14      	ldr	r2, [pc, #80]	; (8005014 <HAL_GPIO_Init+0x354>)
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	3301      	adds	r3, #1
 8004fca:	61fb      	str	r3, [r7, #28]
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	2b0f      	cmp	r3, #15
 8004fd0:	f67f ae84 	bls.w	8004cdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004fd4:	bf00      	nop
 8004fd6:	bf00      	nop
 8004fd8:	3724      	adds	r7, #36	; 0x24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	40023800 	.word	0x40023800
 8004fe8:	40013800 	.word	0x40013800
 8004fec:	40020000 	.word	0x40020000
 8004ff0:	40020400 	.word	0x40020400
 8004ff4:	40020800 	.word	0x40020800
 8004ff8:	40020c00 	.word	0x40020c00
 8004ffc:	40021000 	.word	0x40021000
 8005000:	40021400 	.word	0x40021400
 8005004:	40021800 	.word	0x40021800
 8005008:	40021c00 	.word	0x40021c00
 800500c:	40022000 	.word	0x40022000
 8005010:	40022400 	.word	0x40022400
 8005014:	40013c00 	.word	0x40013c00

08005018 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	460b      	mov	r3, r1
 8005022:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	691a      	ldr	r2, [r3, #16]
 8005028:	887b      	ldrh	r3, [r7, #2]
 800502a:	4013      	ands	r3, r2
 800502c:	2b00      	cmp	r3, #0
 800502e:	d002      	beq.n	8005036 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005030:	2301      	movs	r3, #1
 8005032:	73fb      	strb	r3, [r7, #15]
 8005034:	e001      	b.n	800503a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005036:	2300      	movs	r3, #0
 8005038:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800503a:	7bfb      	ldrb	r3, [r7, #15]
}
 800503c:	4618      	mov	r0, r3
 800503e:	3714      	adds	r7, #20
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	460b      	mov	r3, r1
 8005052:	807b      	strh	r3, [r7, #2]
 8005054:	4613      	mov	r3, r2
 8005056:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005058:	787b      	ldrb	r3, [r7, #1]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d003      	beq.n	8005066 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800505e:	887a      	ldrh	r2, [r7, #2]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005064:	e003      	b.n	800506e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005066:	887b      	ldrh	r3, [r7, #2]
 8005068:	041a      	lsls	r2, r3, #16
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	619a      	str	r2, [r3, #24]
}
 800506e:	bf00      	nop
 8005070:	370c      	adds	r7, #12
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr

0800507a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800507a:	b480      	push	{r7}
 800507c:	b085      	sub	sp, #20
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
 8005082:	460b      	mov	r3, r1
 8005084:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800508c:	887a      	ldrh	r2, [r7, #2]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	4013      	ands	r3, r2
 8005092:	041a      	lsls	r2, r3, #16
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	43d9      	mvns	r1, r3
 8005098:	887b      	ldrh	r3, [r7, #2]
 800509a:	400b      	ands	r3, r1
 800509c:	431a      	orrs	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	619a      	str	r2, [r3, #24]
}
 80050a2:	bf00      	nop
 80050a4:	3714      	adds	r7, #20
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
	...

080050b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	4603      	mov	r3, r0
 80050b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80050ba:	4b08      	ldr	r3, [pc, #32]	; (80050dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050bc:	695a      	ldr	r2, [r3, #20]
 80050be:	88fb      	ldrh	r3, [r7, #6]
 80050c0:	4013      	ands	r3, r2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d006      	beq.n	80050d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80050c6:	4a05      	ldr	r2, [pc, #20]	; (80050dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050c8:	88fb      	ldrh	r3, [r7, #6]
 80050ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80050cc:	88fb      	ldrh	r3, [r7, #6]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7fe fbd4 	bl	800387c <HAL_GPIO_EXTI_Callback>
  }
}
 80050d4:	bf00      	nop
 80050d6:	3708      	adds	r7, #8
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	40013c00 	.word	0x40013c00

080050e0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80050e6:	2300      	movs	r3, #0
 80050e8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80050ea:	2300      	movs	r3, #0
 80050ec:	603b      	str	r3, [r7, #0]
 80050ee:	4b20      	ldr	r3, [pc, #128]	; (8005170 <HAL_PWREx_EnableOverDrive+0x90>)
 80050f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f2:	4a1f      	ldr	r2, [pc, #124]	; (8005170 <HAL_PWREx_EnableOverDrive+0x90>)
 80050f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050f8:	6413      	str	r3, [r2, #64]	; 0x40
 80050fa:	4b1d      	ldr	r3, [pc, #116]	; (8005170 <HAL_PWREx_EnableOverDrive+0x90>)
 80050fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005102:	603b      	str	r3, [r7, #0]
 8005104:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005106:	4b1b      	ldr	r3, [pc, #108]	; (8005174 <HAL_PWREx_EnableOverDrive+0x94>)
 8005108:	2201      	movs	r2, #1
 800510a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800510c:	f7ff fc34 	bl	8004978 <HAL_GetTick>
 8005110:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005112:	e009      	b.n	8005128 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005114:	f7ff fc30 	bl	8004978 <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005122:	d901      	bls.n	8005128 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e01f      	b.n	8005168 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005128:	4b13      	ldr	r3, [pc, #76]	; (8005178 <HAL_PWREx_EnableOverDrive+0x98>)
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005134:	d1ee      	bne.n	8005114 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005136:	4b11      	ldr	r3, [pc, #68]	; (800517c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005138:	2201      	movs	r2, #1
 800513a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800513c:	f7ff fc1c 	bl	8004978 <HAL_GetTick>
 8005140:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005142:	e009      	b.n	8005158 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005144:	f7ff fc18 	bl	8004978 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005152:	d901      	bls.n	8005158 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e007      	b.n	8005168 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005158:	4b07      	ldr	r3, [pc, #28]	; (8005178 <HAL_PWREx_EnableOverDrive+0x98>)
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005160:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005164:	d1ee      	bne.n	8005144 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	3708      	adds	r7, #8
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	40023800 	.word	0x40023800
 8005174:	420e0040 	.word	0x420e0040
 8005178:	40007000 	.word	0x40007000
 800517c:	420e0044 	.word	0x420e0044

08005180 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e267      	b.n	8005662 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0301 	and.w	r3, r3, #1
 800519a:	2b00      	cmp	r3, #0
 800519c:	d075      	beq.n	800528a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800519e:	4b88      	ldr	r3, [pc, #544]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f003 030c 	and.w	r3, r3, #12
 80051a6:	2b04      	cmp	r3, #4
 80051a8:	d00c      	beq.n	80051c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051aa:	4b85      	ldr	r3, [pc, #532]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80051b2:	2b08      	cmp	r3, #8
 80051b4:	d112      	bne.n	80051dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051b6:	4b82      	ldr	r3, [pc, #520]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051c2:	d10b      	bne.n	80051dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051c4:	4b7e      	ldr	r3, [pc, #504]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d05b      	beq.n	8005288 <HAL_RCC_OscConfig+0x108>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d157      	bne.n	8005288 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e242      	b.n	8005662 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051e4:	d106      	bne.n	80051f4 <HAL_RCC_OscConfig+0x74>
 80051e6:	4b76      	ldr	r3, [pc, #472]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a75      	ldr	r2, [pc, #468]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 80051ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051f0:	6013      	str	r3, [r2, #0]
 80051f2:	e01d      	b.n	8005230 <HAL_RCC_OscConfig+0xb0>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051fc:	d10c      	bne.n	8005218 <HAL_RCC_OscConfig+0x98>
 80051fe:	4b70      	ldr	r3, [pc, #448]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a6f      	ldr	r2, [pc, #444]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 8005204:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005208:	6013      	str	r3, [r2, #0]
 800520a:	4b6d      	ldr	r3, [pc, #436]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a6c      	ldr	r2, [pc, #432]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 8005210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005214:	6013      	str	r3, [r2, #0]
 8005216:	e00b      	b.n	8005230 <HAL_RCC_OscConfig+0xb0>
 8005218:	4b69      	ldr	r3, [pc, #420]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a68      	ldr	r2, [pc, #416]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 800521e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005222:	6013      	str	r3, [r2, #0]
 8005224:	4b66      	ldr	r3, [pc, #408]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a65      	ldr	r2, [pc, #404]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 800522a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800522e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d013      	beq.n	8005260 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005238:	f7ff fb9e 	bl	8004978 <HAL_GetTick>
 800523c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800523e:	e008      	b.n	8005252 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005240:	f7ff fb9a 	bl	8004978 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	2b64      	cmp	r3, #100	; 0x64
 800524c:	d901      	bls.n	8005252 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e207      	b.n	8005662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005252:	4b5b      	ldr	r3, [pc, #364]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d0f0      	beq.n	8005240 <HAL_RCC_OscConfig+0xc0>
 800525e:	e014      	b.n	800528a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005260:	f7ff fb8a 	bl	8004978 <HAL_GetTick>
 8005264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005266:	e008      	b.n	800527a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005268:	f7ff fb86 	bl	8004978 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b64      	cmp	r3, #100	; 0x64
 8005274:	d901      	bls.n	800527a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e1f3      	b.n	8005662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800527a:	4b51      	ldr	r3, [pc, #324]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1f0      	bne.n	8005268 <HAL_RCC_OscConfig+0xe8>
 8005286:	e000      	b.n	800528a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005288:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d063      	beq.n	800535e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005296:	4b4a      	ldr	r3, [pc, #296]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f003 030c 	and.w	r3, r3, #12
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00b      	beq.n	80052ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052a2:	4b47      	ldr	r3, [pc, #284]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80052aa:	2b08      	cmp	r3, #8
 80052ac:	d11c      	bne.n	80052e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052ae:	4b44      	ldr	r3, [pc, #272]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d116      	bne.n	80052e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052ba:	4b41      	ldr	r3, [pc, #260]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0302 	and.w	r3, r3, #2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d005      	beq.n	80052d2 <HAL_RCC_OscConfig+0x152>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d001      	beq.n	80052d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e1c7      	b.n	8005662 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052d2:	4b3b      	ldr	r3, [pc, #236]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	00db      	lsls	r3, r3, #3
 80052e0:	4937      	ldr	r1, [pc, #220]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052e6:	e03a      	b.n	800535e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d020      	beq.n	8005332 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052f0:	4b34      	ldr	r3, [pc, #208]	; (80053c4 <HAL_RCC_OscConfig+0x244>)
 80052f2:	2201      	movs	r2, #1
 80052f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f6:	f7ff fb3f 	bl	8004978 <HAL_GetTick>
 80052fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052fc:	e008      	b.n	8005310 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052fe:	f7ff fb3b 	bl	8004978 <HAL_GetTick>
 8005302:	4602      	mov	r2, r0
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	2b02      	cmp	r3, #2
 800530a:	d901      	bls.n	8005310 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e1a8      	b.n	8005662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005310:	4b2b      	ldr	r3, [pc, #172]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0302 	and.w	r3, r3, #2
 8005318:	2b00      	cmp	r3, #0
 800531a:	d0f0      	beq.n	80052fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800531c:	4b28      	ldr	r3, [pc, #160]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	00db      	lsls	r3, r3, #3
 800532a:	4925      	ldr	r1, [pc, #148]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 800532c:	4313      	orrs	r3, r2
 800532e:	600b      	str	r3, [r1, #0]
 8005330:	e015      	b.n	800535e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005332:	4b24      	ldr	r3, [pc, #144]	; (80053c4 <HAL_RCC_OscConfig+0x244>)
 8005334:	2200      	movs	r2, #0
 8005336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005338:	f7ff fb1e 	bl	8004978 <HAL_GetTick>
 800533c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800533e:	e008      	b.n	8005352 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005340:	f7ff fb1a 	bl	8004978 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	2b02      	cmp	r3, #2
 800534c:	d901      	bls.n	8005352 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e187      	b.n	8005662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005352:	4b1b      	ldr	r3, [pc, #108]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1f0      	bne.n	8005340 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0308 	and.w	r3, r3, #8
 8005366:	2b00      	cmp	r3, #0
 8005368:	d036      	beq.n	80053d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d016      	beq.n	80053a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005372:	4b15      	ldr	r3, [pc, #84]	; (80053c8 <HAL_RCC_OscConfig+0x248>)
 8005374:	2201      	movs	r2, #1
 8005376:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005378:	f7ff fafe 	bl	8004978 <HAL_GetTick>
 800537c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800537e:	e008      	b.n	8005392 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005380:	f7ff fafa 	bl	8004978 <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	2b02      	cmp	r3, #2
 800538c:	d901      	bls.n	8005392 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e167      	b.n	8005662 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005392:	4b0b      	ldr	r3, [pc, #44]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 8005394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005396:	f003 0302 	and.w	r3, r3, #2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d0f0      	beq.n	8005380 <HAL_RCC_OscConfig+0x200>
 800539e:	e01b      	b.n	80053d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053a0:	4b09      	ldr	r3, [pc, #36]	; (80053c8 <HAL_RCC_OscConfig+0x248>)
 80053a2:	2200      	movs	r2, #0
 80053a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053a6:	f7ff fae7 	bl	8004978 <HAL_GetTick>
 80053aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053ac:	e00e      	b.n	80053cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053ae:	f7ff fae3 	bl	8004978 <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d907      	bls.n	80053cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e150      	b.n	8005662 <HAL_RCC_OscConfig+0x4e2>
 80053c0:	40023800 	.word	0x40023800
 80053c4:	42470000 	.word	0x42470000
 80053c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053cc:	4b88      	ldr	r3, [pc, #544]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 80053ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053d0:	f003 0302 	and.w	r3, r3, #2
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d1ea      	bne.n	80053ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0304 	and.w	r3, r3, #4
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	f000 8097 	beq.w	8005514 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053e6:	2300      	movs	r3, #0
 80053e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053ea:	4b81      	ldr	r3, [pc, #516]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 80053ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d10f      	bne.n	8005416 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053f6:	2300      	movs	r3, #0
 80053f8:	60bb      	str	r3, [r7, #8]
 80053fa:	4b7d      	ldr	r3, [pc, #500]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 80053fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fe:	4a7c      	ldr	r2, [pc, #496]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 8005400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005404:	6413      	str	r3, [r2, #64]	; 0x40
 8005406:	4b7a      	ldr	r3, [pc, #488]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 8005408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800540e:	60bb      	str	r3, [r7, #8]
 8005410:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005412:	2301      	movs	r3, #1
 8005414:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005416:	4b77      	ldr	r3, [pc, #476]	; (80055f4 <HAL_RCC_OscConfig+0x474>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800541e:	2b00      	cmp	r3, #0
 8005420:	d118      	bne.n	8005454 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005422:	4b74      	ldr	r3, [pc, #464]	; (80055f4 <HAL_RCC_OscConfig+0x474>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a73      	ldr	r2, [pc, #460]	; (80055f4 <HAL_RCC_OscConfig+0x474>)
 8005428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800542c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800542e:	f7ff faa3 	bl	8004978 <HAL_GetTick>
 8005432:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005434:	e008      	b.n	8005448 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005436:	f7ff fa9f 	bl	8004978 <HAL_GetTick>
 800543a:	4602      	mov	r2, r0
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	2b02      	cmp	r3, #2
 8005442:	d901      	bls.n	8005448 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e10c      	b.n	8005662 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005448:	4b6a      	ldr	r3, [pc, #424]	; (80055f4 <HAL_RCC_OscConfig+0x474>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005450:	2b00      	cmp	r3, #0
 8005452:	d0f0      	beq.n	8005436 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	2b01      	cmp	r3, #1
 800545a:	d106      	bne.n	800546a <HAL_RCC_OscConfig+0x2ea>
 800545c:	4b64      	ldr	r3, [pc, #400]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 800545e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005460:	4a63      	ldr	r2, [pc, #396]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 8005462:	f043 0301 	orr.w	r3, r3, #1
 8005466:	6713      	str	r3, [r2, #112]	; 0x70
 8005468:	e01c      	b.n	80054a4 <HAL_RCC_OscConfig+0x324>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	2b05      	cmp	r3, #5
 8005470:	d10c      	bne.n	800548c <HAL_RCC_OscConfig+0x30c>
 8005472:	4b5f      	ldr	r3, [pc, #380]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 8005474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005476:	4a5e      	ldr	r2, [pc, #376]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 8005478:	f043 0304 	orr.w	r3, r3, #4
 800547c:	6713      	str	r3, [r2, #112]	; 0x70
 800547e:	4b5c      	ldr	r3, [pc, #368]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 8005480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005482:	4a5b      	ldr	r2, [pc, #364]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 8005484:	f043 0301 	orr.w	r3, r3, #1
 8005488:	6713      	str	r3, [r2, #112]	; 0x70
 800548a:	e00b      	b.n	80054a4 <HAL_RCC_OscConfig+0x324>
 800548c:	4b58      	ldr	r3, [pc, #352]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 800548e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005490:	4a57      	ldr	r2, [pc, #348]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 8005492:	f023 0301 	bic.w	r3, r3, #1
 8005496:	6713      	str	r3, [r2, #112]	; 0x70
 8005498:	4b55      	ldr	r3, [pc, #340]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 800549a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800549c:	4a54      	ldr	r2, [pc, #336]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 800549e:	f023 0304 	bic.w	r3, r3, #4
 80054a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d015      	beq.n	80054d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ac:	f7ff fa64 	bl	8004978 <HAL_GetTick>
 80054b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054b2:	e00a      	b.n	80054ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054b4:	f7ff fa60 	bl	8004978 <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	f241 3288 	movw	r2, #5000	; 0x1388
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d901      	bls.n	80054ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e0cb      	b.n	8005662 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054ca:	4b49      	ldr	r3, [pc, #292]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 80054cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ce:	f003 0302 	and.w	r3, r3, #2
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d0ee      	beq.n	80054b4 <HAL_RCC_OscConfig+0x334>
 80054d6:	e014      	b.n	8005502 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054d8:	f7ff fa4e 	bl	8004978 <HAL_GetTick>
 80054dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054de:	e00a      	b.n	80054f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054e0:	f7ff fa4a 	bl	8004978 <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e0b5      	b.n	8005662 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054f6:	4b3e      	ldr	r3, [pc, #248]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 80054f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1ee      	bne.n	80054e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005502:	7dfb      	ldrb	r3, [r7, #23]
 8005504:	2b01      	cmp	r3, #1
 8005506:	d105      	bne.n	8005514 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005508:	4b39      	ldr	r3, [pc, #228]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 800550a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550c:	4a38      	ldr	r2, [pc, #224]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 800550e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005512:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	2b00      	cmp	r3, #0
 800551a:	f000 80a1 	beq.w	8005660 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800551e:	4b34      	ldr	r3, [pc, #208]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	f003 030c 	and.w	r3, r3, #12
 8005526:	2b08      	cmp	r3, #8
 8005528:	d05c      	beq.n	80055e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	2b02      	cmp	r3, #2
 8005530:	d141      	bne.n	80055b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005532:	4b31      	ldr	r3, [pc, #196]	; (80055f8 <HAL_RCC_OscConfig+0x478>)
 8005534:	2200      	movs	r2, #0
 8005536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005538:	f7ff fa1e 	bl	8004978 <HAL_GetTick>
 800553c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800553e:	e008      	b.n	8005552 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005540:	f7ff fa1a 	bl	8004978 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	2b02      	cmp	r3, #2
 800554c:	d901      	bls.n	8005552 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e087      	b.n	8005662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005552:	4b27      	ldr	r3, [pc, #156]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1f0      	bne.n	8005540 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	69da      	ldr	r2, [r3, #28]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a1b      	ldr	r3, [r3, #32]
 8005566:	431a      	orrs	r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556c:	019b      	lsls	r3, r3, #6
 800556e:	431a      	orrs	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005574:	085b      	lsrs	r3, r3, #1
 8005576:	3b01      	subs	r3, #1
 8005578:	041b      	lsls	r3, r3, #16
 800557a:	431a      	orrs	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005580:	061b      	lsls	r3, r3, #24
 8005582:	491b      	ldr	r1, [pc, #108]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 8005584:	4313      	orrs	r3, r2
 8005586:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005588:	4b1b      	ldr	r3, [pc, #108]	; (80055f8 <HAL_RCC_OscConfig+0x478>)
 800558a:	2201      	movs	r2, #1
 800558c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800558e:	f7ff f9f3 	bl	8004978 <HAL_GetTick>
 8005592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005594:	e008      	b.n	80055a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005596:	f7ff f9ef 	bl	8004978 <HAL_GetTick>
 800559a:	4602      	mov	r2, r0
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d901      	bls.n	80055a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e05c      	b.n	8005662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055a8:	4b11      	ldr	r3, [pc, #68]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d0f0      	beq.n	8005596 <HAL_RCC_OscConfig+0x416>
 80055b4:	e054      	b.n	8005660 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055b6:	4b10      	ldr	r3, [pc, #64]	; (80055f8 <HAL_RCC_OscConfig+0x478>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055bc:	f7ff f9dc 	bl	8004978 <HAL_GetTick>
 80055c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055c2:	e008      	b.n	80055d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055c4:	f7ff f9d8 	bl	8004978 <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d901      	bls.n	80055d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e045      	b.n	8005662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055d6:	4b06      	ldr	r3, [pc, #24]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1f0      	bne.n	80055c4 <HAL_RCC_OscConfig+0x444>
 80055e2:	e03d      	b.n	8005660 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d107      	bne.n	80055fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e038      	b.n	8005662 <HAL_RCC_OscConfig+0x4e2>
 80055f0:	40023800 	.word	0x40023800
 80055f4:	40007000 	.word	0x40007000
 80055f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80055fc:	4b1b      	ldr	r3, [pc, #108]	; (800566c <HAL_RCC_OscConfig+0x4ec>)
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	2b01      	cmp	r3, #1
 8005608:	d028      	beq.n	800565c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005614:	429a      	cmp	r2, r3
 8005616:	d121      	bne.n	800565c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005622:	429a      	cmp	r2, r3
 8005624:	d11a      	bne.n	800565c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800562c:	4013      	ands	r3, r2
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005632:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005634:	4293      	cmp	r3, r2
 8005636:	d111      	bne.n	800565c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005642:	085b      	lsrs	r3, r3, #1
 8005644:	3b01      	subs	r3, #1
 8005646:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005648:	429a      	cmp	r2, r3
 800564a:	d107      	bne.n	800565c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005656:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005658:	429a      	cmp	r2, r3
 800565a:	d001      	beq.n	8005660 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e000      	b.n	8005662 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3718      	adds	r7, #24
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	40023800 	.word	0x40023800

08005670 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d101      	bne.n	8005684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e0cc      	b.n	800581e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005684:	4b68      	ldr	r3, [pc, #416]	; (8005828 <HAL_RCC_ClockConfig+0x1b8>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 030f 	and.w	r3, r3, #15
 800568c:	683a      	ldr	r2, [r7, #0]
 800568e:	429a      	cmp	r2, r3
 8005690:	d90c      	bls.n	80056ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005692:	4b65      	ldr	r3, [pc, #404]	; (8005828 <HAL_RCC_ClockConfig+0x1b8>)
 8005694:	683a      	ldr	r2, [r7, #0]
 8005696:	b2d2      	uxtb	r2, r2
 8005698:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800569a:	4b63      	ldr	r3, [pc, #396]	; (8005828 <HAL_RCC_ClockConfig+0x1b8>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 030f 	and.w	r3, r3, #15
 80056a2:	683a      	ldr	r2, [r7, #0]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d001      	beq.n	80056ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e0b8      	b.n	800581e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 0302 	and.w	r3, r3, #2
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d020      	beq.n	80056fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0304 	and.w	r3, r3, #4
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d005      	beq.n	80056d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056c4:	4b59      	ldr	r3, [pc, #356]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	4a58      	ldr	r2, [pc, #352]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80056ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80056ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0308 	and.w	r3, r3, #8
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d005      	beq.n	80056e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80056dc:	4b53      	ldr	r3, [pc, #332]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	4a52      	ldr	r2, [pc, #328]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80056e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80056e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056e8:	4b50      	ldr	r3, [pc, #320]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	494d      	ldr	r1, [pc, #308]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	2b00      	cmp	r3, #0
 8005704:	d044      	beq.n	8005790 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	2b01      	cmp	r3, #1
 800570c:	d107      	bne.n	800571e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800570e:	4b47      	ldr	r3, [pc, #284]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d119      	bne.n	800574e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e07f      	b.n	800581e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	2b02      	cmp	r3, #2
 8005724:	d003      	beq.n	800572e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800572a:	2b03      	cmp	r3, #3
 800572c:	d107      	bne.n	800573e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800572e:	4b3f      	ldr	r3, [pc, #252]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d109      	bne.n	800574e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e06f      	b.n	800581e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800573e:	4b3b      	ldr	r3, [pc, #236]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0302 	and.w	r3, r3, #2
 8005746:	2b00      	cmp	r3, #0
 8005748:	d101      	bne.n	800574e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e067      	b.n	800581e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800574e:	4b37      	ldr	r3, [pc, #220]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f023 0203 	bic.w	r2, r3, #3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	4934      	ldr	r1, [pc, #208]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 800575c:	4313      	orrs	r3, r2
 800575e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005760:	f7ff f90a 	bl	8004978 <HAL_GetTick>
 8005764:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005766:	e00a      	b.n	800577e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005768:	f7ff f906 	bl	8004978 <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	f241 3288 	movw	r2, #5000	; 0x1388
 8005776:	4293      	cmp	r3, r2
 8005778:	d901      	bls.n	800577e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e04f      	b.n	800581e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800577e:	4b2b      	ldr	r3, [pc, #172]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	f003 020c 	and.w	r2, r3, #12
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	429a      	cmp	r2, r3
 800578e:	d1eb      	bne.n	8005768 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005790:	4b25      	ldr	r3, [pc, #148]	; (8005828 <HAL_RCC_ClockConfig+0x1b8>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 030f 	and.w	r3, r3, #15
 8005798:	683a      	ldr	r2, [r7, #0]
 800579a:	429a      	cmp	r2, r3
 800579c:	d20c      	bcs.n	80057b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800579e:	4b22      	ldr	r3, [pc, #136]	; (8005828 <HAL_RCC_ClockConfig+0x1b8>)
 80057a0:	683a      	ldr	r2, [r7, #0]
 80057a2:	b2d2      	uxtb	r2, r2
 80057a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057a6:	4b20      	ldr	r3, [pc, #128]	; (8005828 <HAL_RCC_ClockConfig+0x1b8>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 030f 	and.w	r3, r3, #15
 80057ae:	683a      	ldr	r2, [r7, #0]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d001      	beq.n	80057b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e032      	b.n	800581e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0304 	and.w	r3, r3, #4
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d008      	beq.n	80057d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057c4:	4b19      	ldr	r3, [pc, #100]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	4916      	ldr	r1, [pc, #88]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0308 	and.w	r3, r3, #8
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d009      	beq.n	80057f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057e2:	4b12      	ldr	r3, [pc, #72]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	00db      	lsls	r3, r3, #3
 80057f0:	490e      	ldr	r1, [pc, #56]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80057f2:	4313      	orrs	r3, r2
 80057f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80057f6:	f000 f821 	bl	800583c <HAL_RCC_GetSysClockFreq>
 80057fa:	4602      	mov	r2, r0
 80057fc:	4b0b      	ldr	r3, [pc, #44]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	091b      	lsrs	r3, r3, #4
 8005802:	f003 030f 	and.w	r3, r3, #15
 8005806:	490a      	ldr	r1, [pc, #40]	; (8005830 <HAL_RCC_ClockConfig+0x1c0>)
 8005808:	5ccb      	ldrb	r3, [r1, r3]
 800580a:	fa22 f303 	lsr.w	r3, r2, r3
 800580e:	4a09      	ldr	r2, [pc, #36]	; (8005834 <HAL_RCC_ClockConfig+0x1c4>)
 8005810:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005812:	4b09      	ldr	r3, [pc, #36]	; (8005838 <HAL_RCC_ClockConfig+0x1c8>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4618      	mov	r0, r3
 8005818:	f7fe ff5a 	bl	80046d0 <HAL_InitTick>

  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	40023c00 	.word	0x40023c00
 800582c:	40023800 	.word	0x40023800
 8005830:	08009d10 	.word	0x08009d10
 8005834:	2000011c 	.word	0x2000011c
 8005838:	20000120 	.word	0x20000120

0800583c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800583c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005840:	b094      	sub	sp, #80	; 0x50
 8005842:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005844:	2300      	movs	r3, #0
 8005846:	647b      	str	r3, [r7, #68]	; 0x44
 8005848:	2300      	movs	r3, #0
 800584a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800584c:	2300      	movs	r3, #0
 800584e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005850:	2300      	movs	r3, #0
 8005852:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005854:	4b79      	ldr	r3, [pc, #484]	; (8005a3c <HAL_RCC_GetSysClockFreq+0x200>)
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f003 030c 	and.w	r3, r3, #12
 800585c:	2b08      	cmp	r3, #8
 800585e:	d00d      	beq.n	800587c <HAL_RCC_GetSysClockFreq+0x40>
 8005860:	2b08      	cmp	r3, #8
 8005862:	f200 80e1 	bhi.w	8005a28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005866:	2b00      	cmp	r3, #0
 8005868:	d002      	beq.n	8005870 <HAL_RCC_GetSysClockFreq+0x34>
 800586a:	2b04      	cmp	r3, #4
 800586c:	d003      	beq.n	8005876 <HAL_RCC_GetSysClockFreq+0x3a>
 800586e:	e0db      	b.n	8005a28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005870:	4b73      	ldr	r3, [pc, #460]	; (8005a40 <HAL_RCC_GetSysClockFreq+0x204>)
 8005872:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005874:	e0db      	b.n	8005a2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005876:	4b73      	ldr	r3, [pc, #460]	; (8005a44 <HAL_RCC_GetSysClockFreq+0x208>)
 8005878:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800587a:	e0d8      	b.n	8005a2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800587c:	4b6f      	ldr	r3, [pc, #444]	; (8005a3c <HAL_RCC_GetSysClockFreq+0x200>)
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005884:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005886:	4b6d      	ldr	r3, [pc, #436]	; (8005a3c <HAL_RCC_GetSysClockFreq+0x200>)
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d063      	beq.n	800595a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005892:	4b6a      	ldr	r3, [pc, #424]	; (8005a3c <HAL_RCC_GetSysClockFreq+0x200>)
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	099b      	lsrs	r3, r3, #6
 8005898:	2200      	movs	r2, #0
 800589a:	63bb      	str	r3, [r7, #56]	; 0x38
 800589c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800589e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058a4:	633b      	str	r3, [r7, #48]	; 0x30
 80058a6:	2300      	movs	r3, #0
 80058a8:	637b      	str	r3, [r7, #52]	; 0x34
 80058aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80058ae:	4622      	mov	r2, r4
 80058b0:	462b      	mov	r3, r5
 80058b2:	f04f 0000 	mov.w	r0, #0
 80058b6:	f04f 0100 	mov.w	r1, #0
 80058ba:	0159      	lsls	r1, r3, #5
 80058bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058c0:	0150      	lsls	r0, r2, #5
 80058c2:	4602      	mov	r2, r0
 80058c4:	460b      	mov	r3, r1
 80058c6:	4621      	mov	r1, r4
 80058c8:	1a51      	subs	r1, r2, r1
 80058ca:	6139      	str	r1, [r7, #16]
 80058cc:	4629      	mov	r1, r5
 80058ce:	eb63 0301 	sbc.w	r3, r3, r1
 80058d2:	617b      	str	r3, [r7, #20]
 80058d4:	f04f 0200 	mov.w	r2, #0
 80058d8:	f04f 0300 	mov.w	r3, #0
 80058dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058e0:	4659      	mov	r1, fp
 80058e2:	018b      	lsls	r3, r1, #6
 80058e4:	4651      	mov	r1, sl
 80058e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80058ea:	4651      	mov	r1, sl
 80058ec:	018a      	lsls	r2, r1, #6
 80058ee:	4651      	mov	r1, sl
 80058f0:	ebb2 0801 	subs.w	r8, r2, r1
 80058f4:	4659      	mov	r1, fp
 80058f6:	eb63 0901 	sbc.w	r9, r3, r1
 80058fa:	f04f 0200 	mov.w	r2, #0
 80058fe:	f04f 0300 	mov.w	r3, #0
 8005902:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005906:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800590a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800590e:	4690      	mov	r8, r2
 8005910:	4699      	mov	r9, r3
 8005912:	4623      	mov	r3, r4
 8005914:	eb18 0303 	adds.w	r3, r8, r3
 8005918:	60bb      	str	r3, [r7, #8]
 800591a:	462b      	mov	r3, r5
 800591c:	eb49 0303 	adc.w	r3, r9, r3
 8005920:	60fb      	str	r3, [r7, #12]
 8005922:	f04f 0200 	mov.w	r2, #0
 8005926:	f04f 0300 	mov.w	r3, #0
 800592a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800592e:	4629      	mov	r1, r5
 8005930:	024b      	lsls	r3, r1, #9
 8005932:	4621      	mov	r1, r4
 8005934:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005938:	4621      	mov	r1, r4
 800593a:	024a      	lsls	r2, r1, #9
 800593c:	4610      	mov	r0, r2
 800593e:	4619      	mov	r1, r3
 8005940:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005942:	2200      	movs	r2, #0
 8005944:	62bb      	str	r3, [r7, #40]	; 0x28
 8005946:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005948:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800594c:	f7fb f8ce 	bl	8000aec <__aeabi_uldivmod>
 8005950:	4602      	mov	r2, r0
 8005952:	460b      	mov	r3, r1
 8005954:	4613      	mov	r3, r2
 8005956:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005958:	e058      	b.n	8005a0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800595a:	4b38      	ldr	r3, [pc, #224]	; (8005a3c <HAL_RCC_GetSysClockFreq+0x200>)
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	099b      	lsrs	r3, r3, #6
 8005960:	2200      	movs	r2, #0
 8005962:	4618      	mov	r0, r3
 8005964:	4611      	mov	r1, r2
 8005966:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800596a:	623b      	str	r3, [r7, #32]
 800596c:	2300      	movs	r3, #0
 800596e:	627b      	str	r3, [r7, #36]	; 0x24
 8005970:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005974:	4642      	mov	r2, r8
 8005976:	464b      	mov	r3, r9
 8005978:	f04f 0000 	mov.w	r0, #0
 800597c:	f04f 0100 	mov.w	r1, #0
 8005980:	0159      	lsls	r1, r3, #5
 8005982:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005986:	0150      	lsls	r0, r2, #5
 8005988:	4602      	mov	r2, r0
 800598a:	460b      	mov	r3, r1
 800598c:	4641      	mov	r1, r8
 800598e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005992:	4649      	mov	r1, r9
 8005994:	eb63 0b01 	sbc.w	fp, r3, r1
 8005998:	f04f 0200 	mov.w	r2, #0
 800599c:	f04f 0300 	mov.w	r3, #0
 80059a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80059a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80059a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80059ac:	ebb2 040a 	subs.w	r4, r2, sl
 80059b0:	eb63 050b 	sbc.w	r5, r3, fp
 80059b4:	f04f 0200 	mov.w	r2, #0
 80059b8:	f04f 0300 	mov.w	r3, #0
 80059bc:	00eb      	lsls	r3, r5, #3
 80059be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059c2:	00e2      	lsls	r2, r4, #3
 80059c4:	4614      	mov	r4, r2
 80059c6:	461d      	mov	r5, r3
 80059c8:	4643      	mov	r3, r8
 80059ca:	18e3      	adds	r3, r4, r3
 80059cc:	603b      	str	r3, [r7, #0]
 80059ce:	464b      	mov	r3, r9
 80059d0:	eb45 0303 	adc.w	r3, r5, r3
 80059d4:	607b      	str	r3, [r7, #4]
 80059d6:	f04f 0200 	mov.w	r2, #0
 80059da:	f04f 0300 	mov.w	r3, #0
 80059de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80059e2:	4629      	mov	r1, r5
 80059e4:	028b      	lsls	r3, r1, #10
 80059e6:	4621      	mov	r1, r4
 80059e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80059ec:	4621      	mov	r1, r4
 80059ee:	028a      	lsls	r2, r1, #10
 80059f0:	4610      	mov	r0, r2
 80059f2:	4619      	mov	r1, r3
 80059f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059f6:	2200      	movs	r2, #0
 80059f8:	61bb      	str	r3, [r7, #24]
 80059fa:	61fa      	str	r2, [r7, #28]
 80059fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a00:	f7fb f874 	bl	8000aec <__aeabi_uldivmod>
 8005a04:	4602      	mov	r2, r0
 8005a06:	460b      	mov	r3, r1
 8005a08:	4613      	mov	r3, r2
 8005a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a0c:	4b0b      	ldr	r3, [pc, #44]	; (8005a3c <HAL_RCC_GetSysClockFreq+0x200>)
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	0c1b      	lsrs	r3, r3, #16
 8005a12:	f003 0303 	and.w	r3, r3, #3
 8005a16:	3301      	adds	r3, #1
 8005a18:	005b      	lsls	r3, r3, #1
 8005a1a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005a1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a26:	e002      	b.n	8005a2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a28:	4b05      	ldr	r3, [pc, #20]	; (8005a40 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a2a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3750      	adds	r7, #80	; 0x50
 8005a34:	46bd      	mov	sp, r7
 8005a36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a3a:	bf00      	nop
 8005a3c:	40023800 	.word	0x40023800
 8005a40:	00f42400 	.word	0x00f42400
 8005a44:	007a1200 	.word	0x007a1200

08005a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a4c:	4b03      	ldr	r3, [pc, #12]	; (8005a5c <HAL_RCC_GetHCLKFreq+0x14>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	2000011c 	.word	0x2000011c

08005a60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005a64:	f7ff fff0 	bl	8005a48 <HAL_RCC_GetHCLKFreq>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	4b05      	ldr	r3, [pc, #20]	; (8005a80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	0a9b      	lsrs	r3, r3, #10
 8005a70:	f003 0307 	and.w	r3, r3, #7
 8005a74:	4903      	ldr	r1, [pc, #12]	; (8005a84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a76:	5ccb      	ldrb	r3, [r1, r3]
 8005a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	40023800 	.word	0x40023800
 8005a84:	08009d20 	.word	0x08009d20

08005a88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005a8c:	f7ff ffdc 	bl	8005a48 <HAL_RCC_GetHCLKFreq>
 8005a90:	4602      	mov	r2, r0
 8005a92:	4b05      	ldr	r3, [pc, #20]	; (8005aa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	0b5b      	lsrs	r3, r3, #13
 8005a98:	f003 0307 	and.w	r3, r3, #7
 8005a9c:	4903      	ldr	r1, [pc, #12]	; (8005aac <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a9e:	5ccb      	ldrb	r3, [r1, r3]
 8005aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	40023800 	.word	0x40023800
 8005aac:	08009d20 	.word	0x08009d20

08005ab0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	220f      	movs	r2, #15
 8005abe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005ac0:	4b12      	ldr	r3, [pc, #72]	; (8005b0c <HAL_RCC_GetClockConfig+0x5c>)
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f003 0203 	and.w	r2, r3, #3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005acc:	4b0f      	ldr	r3, [pc, #60]	; (8005b0c <HAL_RCC_GetClockConfig+0x5c>)
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005ad8:	4b0c      	ldr	r3, [pc, #48]	; (8005b0c <HAL_RCC_GetClockConfig+0x5c>)
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005ae4:	4b09      	ldr	r3, [pc, #36]	; (8005b0c <HAL_RCC_GetClockConfig+0x5c>)
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	08db      	lsrs	r3, r3, #3
 8005aea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005af2:	4b07      	ldr	r3, [pc, #28]	; (8005b10 <HAL_RCC_GetClockConfig+0x60>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 020f 	and.w	r2, r3, #15
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	601a      	str	r2, [r3, #0]
}
 8005afe:	bf00      	nop
 8005b00:	370c      	adds	r7, #12
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	40023800 	.word	0x40023800
 8005b10:	40023c00 	.word	0x40023c00

08005b14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d101      	bne.n	8005b26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e07b      	b.n	8005c1e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d108      	bne.n	8005b40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b36:	d009      	beq.n	8005b4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	61da      	str	r2, [r3, #28]
 8005b3e:	e005      	b.n	8005b4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d106      	bne.n	8005b6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f7fe fb0e 	bl	8004188 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2202      	movs	r2, #2
 8005b70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b82:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005b94:	431a      	orrs	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b9e:	431a      	orrs	r2, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	f003 0302 	and.w	r3, r3, #2
 8005ba8:	431a      	orrs	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	431a      	orrs	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bbc:	431a      	orrs	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	69db      	ldr	r3, [r3, #28]
 8005bc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005bc6:	431a      	orrs	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a1b      	ldr	r3, [r3, #32]
 8005bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bd0:	ea42 0103 	orr.w	r1, r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	430a      	orrs	r2, r1
 8005be2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	0c1b      	lsrs	r3, r3, #16
 8005bea:	f003 0104 	and.w	r1, r3, #4
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf2:	f003 0210 	and.w	r2, r3, #16
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	430a      	orrs	r2, r1
 8005bfc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	69da      	ldr	r2, [r3, #28]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c0c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3708      	adds	r7, #8
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b088      	sub	sp, #32
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	60f8      	str	r0, [r7, #12]
 8005c2e:	60b9      	str	r1, [r7, #8]
 8005c30:	603b      	str	r3, [r7, #0]
 8005c32:	4613      	mov	r3, r2
 8005c34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c36:	2300      	movs	r3, #0
 8005c38:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d101      	bne.n	8005c48 <HAL_SPI_Transmit+0x22>
 8005c44:	2302      	movs	r3, #2
 8005c46:	e126      	b.n	8005e96 <HAL_SPI_Transmit+0x270>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c50:	f7fe fe92 	bl	8004978 <HAL_GetTick>
 8005c54:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005c56:	88fb      	ldrh	r3, [r7, #6]
 8005c58:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d002      	beq.n	8005c6c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005c66:	2302      	movs	r3, #2
 8005c68:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c6a:	e10b      	b.n	8005e84 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d002      	beq.n	8005c78 <HAL_SPI_Transmit+0x52>
 8005c72:	88fb      	ldrh	r3, [r7, #6]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d102      	bne.n	8005c7e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c7c:	e102      	b.n	8005e84 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2203      	movs	r2, #3
 8005c82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	68ba      	ldr	r2, [r7, #8]
 8005c90:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	88fa      	ldrh	r2, [r7, #6]
 8005c96:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	88fa      	ldrh	r2, [r7, #6]
 8005c9c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cc4:	d10f      	bne.n	8005ce6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cd4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ce4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf0:	2b40      	cmp	r3, #64	; 0x40
 8005cf2:	d007      	beq.n	8005d04 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d0c:	d14b      	bne.n	8005da6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d002      	beq.n	8005d1c <HAL_SPI_Transmit+0xf6>
 8005d16:	8afb      	ldrh	r3, [r7, #22]
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d13e      	bne.n	8005d9a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d20:	881a      	ldrh	r2, [r3, #0]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d2c:	1c9a      	adds	r2, r3, #2
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005d40:	e02b      	b.n	8005d9a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	f003 0302 	and.w	r3, r3, #2
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	d112      	bne.n	8005d76 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d54:	881a      	ldrh	r2, [r3, #0]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d60:	1c9a      	adds	r2, r3, #2
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	86da      	strh	r2, [r3, #54]	; 0x36
 8005d74:	e011      	b.n	8005d9a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d76:	f7fe fdff 	bl	8004978 <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	683a      	ldr	r2, [r7, #0]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d803      	bhi.n	8005d8e <HAL_SPI_Transmit+0x168>
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d8c:	d102      	bne.n	8005d94 <HAL_SPI_Transmit+0x16e>
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d102      	bne.n	8005d9a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005d98:	e074      	b.n	8005e84 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d1ce      	bne.n	8005d42 <HAL_SPI_Transmit+0x11c>
 8005da4:	e04c      	b.n	8005e40 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d002      	beq.n	8005db4 <HAL_SPI_Transmit+0x18e>
 8005dae:	8afb      	ldrh	r3, [r7, #22]
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d140      	bne.n	8005e36 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	330c      	adds	r3, #12
 8005dbe:	7812      	ldrb	r2, [r2, #0]
 8005dc0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc6:	1c5a      	adds	r2, r3, #1
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	b29a      	uxth	r2, r3
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005dda:	e02c      	b.n	8005e36 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f003 0302 	and.w	r3, r3, #2
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d113      	bne.n	8005e12 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	330c      	adds	r3, #12
 8005df4:	7812      	ldrb	r2, [r2, #0]
 8005df6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dfc:	1c5a      	adds	r2, r3, #1
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005e10:	e011      	b.n	8005e36 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e12:	f7fe fdb1 	bl	8004978 <HAL_GetTick>
 8005e16:	4602      	mov	r2, r0
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	683a      	ldr	r2, [r7, #0]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d803      	bhi.n	8005e2a <HAL_SPI_Transmit+0x204>
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e28:	d102      	bne.n	8005e30 <HAL_SPI_Transmit+0x20a>
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d102      	bne.n	8005e36 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005e30:	2303      	movs	r3, #3
 8005e32:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005e34:	e026      	b.n	8005e84 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d1cd      	bne.n	8005ddc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e40:	69ba      	ldr	r2, [r7, #24]
 8005e42:	6839      	ldr	r1, [r7, #0]
 8005e44:	68f8      	ldr	r0, [r7, #12]
 8005e46:	f000 fbd9 	bl	80065fc <SPI_EndRxTxTransaction>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d002      	beq.n	8005e56 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2220      	movs	r2, #32
 8005e54:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d10a      	bne.n	8005e74 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e5e:	2300      	movs	r3, #0
 8005e60:	613b      	str	r3, [r7, #16]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	613b      	str	r3, [r7, #16]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	613b      	str	r3, [r7, #16]
 8005e72:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d002      	beq.n	8005e82 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	77fb      	strb	r3, [r7, #31]
 8005e80:	e000      	b.n	8005e84 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005e82:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005e94:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3720      	adds	r7, #32
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}

08005e9e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e9e:	b580      	push	{r7, lr}
 8005ea0:	b088      	sub	sp, #32
 8005ea2:	af02      	add	r7, sp, #8
 8005ea4:	60f8      	str	r0, [r7, #12]
 8005ea6:	60b9      	str	r1, [r7, #8]
 8005ea8:	603b      	str	r3, [r7, #0]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005eba:	d112      	bne.n	8005ee2 <HAL_SPI_Receive+0x44>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d10e      	bne.n	8005ee2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2204      	movs	r2, #4
 8005ec8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005ecc:	88fa      	ldrh	r2, [r7, #6]
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	9300      	str	r3, [sp, #0]
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	68ba      	ldr	r2, [r7, #8]
 8005ed6:	68b9      	ldr	r1, [r7, #8]
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	f000 f8f1 	bl	80060c0 <HAL_SPI_TransmitReceive>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	e0ea      	b.n	80060b8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d101      	bne.n	8005ef0 <HAL_SPI_Receive+0x52>
 8005eec:	2302      	movs	r3, #2
 8005eee:	e0e3      	b.n	80060b8 <HAL_SPI_Receive+0x21a>
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ef8:	f7fe fd3e 	bl	8004978 <HAL_GetTick>
 8005efc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d002      	beq.n	8005f10 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005f0a:	2302      	movs	r3, #2
 8005f0c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005f0e:	e0ca      	b.n	80060a6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d002      	beq.n	8005f1c <HAL_SPI_Receive+0x7e>
 8005f16:	88fb      	ldrh	r3, [r7, #6]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d102      	bne.n	8005f22 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005f20:	e0c1      	b.n	80060a6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2204      	movs	r2, #4
 8005f26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	68ba      	ldr	r2, [r7, #8]
 8005f34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	88fa      	ldrh	r2, [r7, #6]
 8005f3a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	88fa      	ldrh	r2, [r7, #6]
 8005f40:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2200      	movs	r2, #0
 8005f58:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f68:	d10f      	bne.n	8005f8a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f78:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005f88:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f94:	2b40      	cmp	r3, #64	; 0x40
 8005f96:	d007      	beq.n	8005fa8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fa6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d162      	bne.n	8006076 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005fb0:	e02e      	b.n	8006010 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	f003 0301 	and.w	r3, r3, #1
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d115      	bne.n	8005fec <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f103 020c 	add.w	r2, r3, #12
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fcc:	7812      	ldrb	r2, [r2, #0]
 8005fce:	b2d2      	uxtb	r2, r2
 8005fd0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd6:	1c5a      	adds	r2, r3, #1
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005fea:	e011      	b.n	8006010 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fec:	f7fe fcc4 	bl	8004978 <HAL_GetTick>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	683a      	ldr	r2, [r7, #0]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d803      	bhi.n	8006004 <HAL_SPI_Receive+0x166>
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006002:	d102      	bne.n	800600a <HAL_SPI_Receive+0x16c>
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d102      	bne.n	8006010 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800600e:	e04a      	b.n	80060a6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006014:	b29b      	uxth	r3, r3
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1cb      	bne.n	8005fb2 <HAL_SPI_Receive+0x114>
 800601a:	e031      	b.n	8006080 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	f003 0301 	and.w	r3, r3, #1
 8006026:	2b01      	cmp	r3, #1
 8006028:	d113      	bne.n	8006052 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68da      	ldr	r2, [r3, #12]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006034:	b292      	uxth	r2, r2
 8006036:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800603c:	1c9a      	adds	r2, r3, #2
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006046:	b29b      	uxth	r3, r3
 8006048:	3b01      	subs	r3, #1
 800604a:	b29a      	uxth	r2, r3
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006050:	e011      	b.n	8006076 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006052:	f7fe fc91 	bl	8004978 <HAL_GetTick>
 8006056:	4602      	mov	r2, r0
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	683a      	ldr	r2, [r7, #0]
 800605e:	429a      	cmp	r2, r3
 8006060:	d803      	bhi.n	800606a <HAL_SPI_Receive+0x1cc>
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006068:	d102      	bne.n	8006070 <HAL_SPI_Receive+0x1d2>
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d102      	bne.n	8006076 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006070:	2303      	movs	r3, #3
 8006072:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006074:	e017      	b.n	80060a6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800607a:	b29b      	uxth	r3, r3
 800607c:	2b00      	cmp	r3, #0
 800607e:	d1cd      	bne.n	800601c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	6839      	ldr	r1, [r7, #0]
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f000 fa53 	bl	8006530 <SPI_EndRxTransaction>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d002      	beq.n	8006096 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2220      	movs	r2, #32
 8006094:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800609a:	2b00      	cmp	r3, #0
 800609c:	d002      	beq.n	80060a4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	75fb      	strb	r3, [r7, #23]
 80060a2:	e000      	b.n	80060a6 <HAL_SPI_Receive+0x208>
  }

error :
 80060a4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80060b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3718      	adds	r7, #24
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b08c      	sub	sp, #48	; 0x30
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
 80060cc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80060ce:	2301      	movs	r3, #1
 80060d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80060d2:	2300      	movs	r3, #0
 80060d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d101      	bne.n	80060e6 <HAL_SPI_TransmitReceive+0x26>
 80060e2:	2302      	movs	r3, #2
 80060e4:	e18a      	b.n	80063fc <HAL_SPI_TransmitReceive+0x33c>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2201      	movs	r2, #1
 80060ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060ee:	f7fe fc43 	bl	8004978 <HAL_GetTick>
 80060f2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006104:	887b      	ldrh	r3, [r7, #2]
 8006106:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006108:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800610c:	2b01      	cmp	r3, #1
 800610e:	d00f      	beq.n	8006130 <HAL_SPI_TransmitReceive+0x70>
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006116:	d107      	bne.n	8006128 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d103      	bne.n	8006128 <HAL_SPI_TransmitReceive+0x68>
 8006120:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006124:	2b04      	cmp	r3, #4
 8006126:	d003      	beq.n	8006130 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006128:	2302      	movs	r3, #2
 800612a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800612e:	e15b      	b.n	80063e8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d005      	beq.n	8006142 <HAL_SPI_TransmitReceive+0x82>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d002      	beq.n	8006142 <HAL_SPI_TransmitReceive+0x82>
 800613c:	887b      	ldrh	r3, [r7, #2]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d103      	bne.n	800614a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006148:	e14e      	b.n	80063e8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006150:	b2db      	uxtb	r3, r3
 8006152:	2b04      	cmp	r3, #4
 8006154:	d003      	beq.n	800615e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2205      	movs	r2, #5
 800615a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	887a      	ldrh	r2, [r7, #2]
 800616e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	887a      	ldrh	r2, [r7, #2]
 8006174:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	68ba      	ldr	r2, [r7, #8]
 800617a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	887a      	ldrh	r2, [r7, #2]
 8006180:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	887a      	ldrh	r2, [r7, #2]
 8006186:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2200      	movs	r2, #0
 8006192:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800619e:	2b40      	cmp	r3, #64	; 0x40
 80061a0:	d007      	beq.n	80061b2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061ba:	d178      	bne.n	80062ae <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d002      	beq.n	80061ca <HAL_SPI_TransmitReceive+0x10a>
 80061c4:	8b7b      	ldrh	r3, [r7, #26]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d166      	bne.n	8006298 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ce:	881a      	ldrh	r2, [r3, #0]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061da:	1c9a      	adds	r2, r3, #2
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	3b01      	subs	r3, #1
 80061e8:	b29a      	uxth	r2, r3
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061ee:	e053      	b.n	8006298 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	f003 0302 	and.w	r3, r3, #2
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d11b      	bne.n	8006236 <HAL_SPI_TransmitReceive+0x176>
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006202:	b29b      	uxth	r3, r3
 8006204:	2b00      	cmp	r3, #0
 8006206:	d016      	beq.n	8006236 <HAL_SPI_TransmitReceive+0x176>
 8006208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800620a:	2b01      	cmp	r3, #1
 800620c:	d113      	bne.n	8006236 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006212:	881a      	ldrh	r2, [r3, #0]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800621e:	1c9a      	adds	r2, r3, #2
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006228:	b29b      	uxth	r3, r3
 800622a:	3b01      	subs	r3, #1
 800622c:	b29a      	uxth	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006232:	2300      	movs	r3, #0
 8006234:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f003 0301 	and.w	r3, r3, #1
 8006240:	2b01      	cmp	r3, #1
 8006242:	d119      	bne.n	8006278 <HAL_SPI_TransmitReceive+0x1b8>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006248:	b29b      	uxth	r3, r3
 800624a:	2b00      	cmp	r3, #0
 800624c:	d014      	beq.n	8006278 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68da      	ldr	r2, [r3, #12]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006258:	b292      	uxth	r2, r2
 800625a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006260:	1c9a      	adds	r2, r3, #2
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800626a:	b29b      	uxth	r3, r3
 800626c:	3b01      	subs	r3, #1
 800626e:	b29a      	uxth	r2, r3
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006274:	2301      	movs	r3, #1
 8006276:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006278:	f7fe fb7e 	bl	8004978 <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006284:	429a      	cmp	r2, r3
 8006286:	d807      	bhi.n	8006298 <HAL_SPI_TransmitReceive+0x1d8>
 8006288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800628a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800628e:	d003      	beq.n	8006298 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006290:	2303      	movs	r3, #3
 8006292:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006296:	e0a7      	b.n	80063e8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800629c:	b29b      	uxth	r3, r3
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1a6      	bne.n	80061f0 <HAL_SPI_TransmitReceive+0x130>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d1a1      	bne.n	80061f0 <HAL_SPI_TransmitReceive+0x130>
 80062ac:	e07c      	b.n	80063a8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d002      	beq.n	80062bc <HAL_SPI_TransmitReceive+0x1fc>
 80062b6:	8b7b      	ldrh	r3, [r7, #26]
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d16b      	bne.n	8006394 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	330c      	adds	r3, #12
 80062c6:	7812      	ldrb	r2, [r2, #0]
 80062c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ce:	1c5a      	adds	r2, r3, #1
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062d8:	b29b      	uxth	r3, r3
 80062da:	3b01      	subs	r3, #1
 80062dc:	b29a      	uxth	r2, r3
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062e2:	e057      	b.n	8006394 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	f003 0302 	and.w	r3, r3, #2
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d11c      	bne.n	800632c <HAL_SPI_TransmitReceive+0x26c>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d017      	beq.n	800632c <HAL_SPI_TransmitReceive+0x26c>
 80062fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d114      	bne.n	800632c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	330c      	adds	r3, #12
 800630c:	7812      	ldrb	r2, [r2, #0]
 800630e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006314:	1c5a      	adds	r2, r3, #1
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800631e:	b29b      	uxth	r3, r3
 8006320:	3b01      	subs	r3, #1
 8006322:	b29a      	uxth	r2, r3
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006328:	2300      	movs	r3, #0
 800632a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f003 0301 	and.w	r3, r3, #1
 8006336:	2b01      	cmp	r3, #1
 8006338:	d119      	bne.n	800636e <HAL_SPI_TransmitReceive+0x2ae>
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800633e:	b29b      	uxth	r3, r3
 8006340:	2b00      	cmp	r3, #0
 8006342:	d014      	beq.n	800636e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	68da      	ldr	r2, [r3, #12]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634e:	b2d2      	uxtb	r2, r2
 8006350:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006356:	1c5a      	adds	r2, r3, #1
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006360:	b29b      	uxth	r3, r3
 8006362:	3b01      	subs	r3, #1
 8006364:	b29a      	uxth	r2, r3
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800636a:	2301      	movs	r3, #1
 800636c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800636e:	f7fe fb03 	bl	8004978 <HAL_GetTick>
 8006372:	4602      	mov	r2, r0
 8006374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006376:	1ad3      	subs	r3, r2, r3
 8006378:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800637a:	429a      	cmp	r2, r3
 800637c:	d803      	bhi.n	8006386 <HAL_SPI_TransmitReceive+0x2c6>
 800637e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006384:	d102      	bne.n	800638c <HAL_SPI_TransmitReceive+0x2cc>
 8006386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006388:	2b00      	cmp	r3, #0
 800638a:	d103      	bne.n	8006394 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006392:	e029      	b.n	80063e8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006398:	b29b      	uxth	r3, r3
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1a2      	bne.n	80062e4 <HAL_SPI_TransmitReceive+0x224>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d19d      	bne.n	80062e4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80063a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	f000 f925 	bl	80065fc <SPI_EndRxTxTransaction>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d006      	beq.n	80063c6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2220      	movs	r2, #32
 80063c2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80063c4:	e010      	b.n	80063e8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10b      	bne.n	80063e6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80063ce:	2300      	movs	r3, #0
 80063d0:	617b      	str	r3, [r7, #20]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	617b      	str	r3, [r7, #20]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	617b      	str	r3, [r7, #20]
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	e000      	b.n	80063e8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80063e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80063f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3730      	adds	r7, #48	; 0x30
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006412:	b2db      	uxtb	r3, r3
}
 8006414:	4618      	mov	r0, r3
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b088      	sub	sp, #32
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	603b      	str	r3, [r7, #0]
 800642c:	4613      	mov	r3, r2
 800642e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006430:	f7fe faa2 	bl	8004978 <HAL_GetTick>
 8006434:	4602      	mov	r2, r0
 8006436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006438:	1a9b      	subs	r3, r3, r2
 800643a:	683a      	ldr	r2, [r7, #0]
 800643c:	4413      	add	r3, r2
 800643e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006440:	f7fe fa9a 	bl	8004978 <HAL_GetTick>
 8006444:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006446:	4b39      	ldr	r3, [pc, #228]	; (800652c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	015b      	lsls	r3, r3, #5
 800644c:	0d1b      	lsrs	r3, r3, #20
 800644e:	69fa      	ldr	r2, [r7, #28]
 8006450:	fb02 f303 	mul.w	r3, r2, r3
 8006454:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006456:	e054      	b.n	8006502 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800645e:	d050      	beq.n	8006502 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006460:	f7fe fa8a 	bl	8004978 <HAL_GetTick>
 8006464:	4602      	mov	r2, r0
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	69fa      	ldr	r2, [r7, #28]
 800646c:	429a      	cmp	r2, r3
 800646e:	d902      	bls.n	8006476 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d13d      	bne.n	80064f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	685a      	ldr	r2, [r3, #4]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006484:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800648e:	d111      	bne.n	80064b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006498:	d004      	beq.n	80064a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064a2:	d107      	bne.n	80064b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064bc:	d10f      	bne.n	80064de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064cc:	601a      	str	r2, [r3, #0]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2201      	movs	r2, #1
 80064e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e017      	b.n	8006522 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d101      	bne.n	80064fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80064f8:	2300      	movs	r3, #0
 80064fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	3b01      	subs	r3, #1
 8006500:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	689a      	ldr	r2, [r3, #8]
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	4013      	ands	r3, r2
 800650c:	68ba      	ldr	r2, [r7, #8]
 800650e:	429a      	cmp	r2, r3
 8006510:	bf0c      	ite	eq
 8006512:	2301      	moveq	r3, #1
 8006514:	2300      	movne	r3, #0
 8006516:	b2db      	uxtb	r3, r3
 8006518:	461a      	mov	r2, r3
 800651a:	79fb      	ldrb	r3, [r7, #7]
 800651c:	429a      	cmp	r2, r3
 800651e:	d19b      	bne.n	8006458 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3720      	adds	r7, #32
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	2000011c 	.word	0x2000011c

08006530 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b086      	sub	sp, #24
 8006534:	af02      	add	r7, sp, #8
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006544:	d111      	bne.n	800656a <SPI_EndRxTransaction+0x3a>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800654e:	d004      	beq.n	800655a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006558:	d107      	bne.n	800656a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006568:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006572:	d12a      	bne.n	80065ca <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800657c:	d012      	beq.n	80065a4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	9300      	str	r3, [sp, #0]
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	2200      	movs	r2, #0
 8006586:	2180      	movs	r1, #128	; 0x80
 8006588:	68f8      	ldr	r0, [r7, #12]
 800658a:	f7ff ff49 	bl	8006420 <SPI_WaitFlagStateUntilTimeout>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d02d      	beq.n	80065f0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006598:	f043 0220 	orr.w	r2, r3, #32
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80065a0:	2303      	movs	r3, #3
 80065a2:	e026      	b.n	80065f2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	9300      	str	r3, [sp, #0]
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	2200      	movs	r2, #0
 80065ac:	2101      	movs	r1, #1
 80065ae:	68f8      	ldr	r0, [r7, #12]
 80065b0:	f7ff ff36 	bl	8006420 <SPI_WaitFlagStateUntilTimeout>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d01a      	beq.n	80065f0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065be:	f043 0220 	orr.w	r2, r3, #32
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80065c6:	2303      	movs	r3, #3
 80065c8:	e013      	b.n	80065f2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	9300      	str	r3, [sp, #0]
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	2200      	movs	r2, #0
 80065d2:	2101      	movs	r1, #1
 80065d4:	68f8      	ldr	r0, [r7, #12]
 80065d6:	f7ff ff23 	bl	8006420 <SPI_WaitFlagStateUntilTimeout>
 80065da:	4603      	mov	r3, r0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d007      	beq.n	80065f0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065e4:	f043 0220 	orr.w	r2, r3, #32
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80065ec:	2303      	movs	r3, #3
 80065ee:	e000      	b.n	80065f2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3710      	adds	r7, #16
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
	...

080065fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b088      	sub	sp, #32
 8006600:	af02      	add	r7, sp, #8
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006608:	4b1b      	ldr	r3, [pc, #108]	; (8006678 <SPI_EndRxTxTransaction+0x7c>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a1b      	ldr	r2, [pc, #108]	; (800667c <SPI_EndRxTxTransaction+0x80>)
 800660e:	fba2 2303 	umull	r2, r3, r2, r3
 8006612:	0d5b      	lsrs	r3, r3, #21
 8006614:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006618:	fb02 f303 	mul.w	r3, r2, r3
 800661c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006626:	d112      	bne.n	800664e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	9300      	str	r3, [sp, #0]
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	2200      	movs	r2, #0
 8006630:	2180      	movs	r1, #128	; 0x80
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	f7ff fef4 	bl	8006420 <SPI_WaitFlagStateUntilTimeout>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d016      	beq.n	800666c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006642:	f043 0220 	orr.w	r2, r3, #32
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800664a:	2303      	movs	r3, #3
 800664c:	e00f      	b.n	800666e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00a      	beq.n	800666a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	3b01      	subs	r3, #1
 8006658:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006664:	2b80      	cmp	r3, #128	; 0x80
 8006666:	d0f2      	beq.n	800664e <SPI_EndRxTxTransaction+0x52>
 8006668:	e000      	b.n	800666c <SPI_EndRxTxTransaction+0x70>
        break;
 800666a:	bf00      	nop
  }

  return HAL_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3718      	adds	r7, #24
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	2000011c 	.word	0x2000011c
 800667c:	165e9f81 	.word	0x165e9f81

08006680 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d101      	bne.n	8006692 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e041      	b.n	8006716 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006698:	b2db      	uxtb	r3, r3
 800669a:	2b00      	cmp	r3, #0
 800669c:	d106      	bne.n	80066ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f7fd fdb6 	bl	8004218 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2202      	movs	r2, #2
 80066b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	3304      	adds	r3, #4
 80066bc:	4619      	mov	r1, r3
 80066be:	4610      	mov	r0, r2
 80066c0:	f000 fc7a 	bl	8006fb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3708      	adds	r7, #8
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
	...

08006720 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006720:	b480      	push	{r7}
 8006722:	b085      	sub	sp, #20
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800672e:	b2db      	uxtb	r3, r3
 8006730:	2b01      	cmp	r3, #1
 8006732:	d001      	beq.n	8006738 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e04e      	b.n	80067d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2202      	movs	r2, #2
 800673c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68da      	ldr	r2, [r3, #12]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f042 0201 	orr.w	r2, r2, #1
 800674e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a23      	ldr	r2, [pc, #140]	; (80067e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d022      	beq.n	80067a0 <HAL_TIM_Base_Start_IT+0x80>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006762:	d01d      	beq.n	80067a0 <HAL_TIM_Base_Start_IT+0x80>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a1f      	ldr	r2, [pc, #124]	; (80067e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d018      	beq.n	80067a0 <HAL_TIM_Base_Start_IT+0x80>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a1e      	ldr	r2, [pc, #120]	; (80067ec <HAL_TIM_Base_Start_IT+0xcc>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d013      	beq.n	80067a0 <HAL_TIM_Base_Start_IT+0x80>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a1c      	ldr	r2, [pc, #112]	; (80067f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d00e      	beq.n	80067a0 <HAL_TIM_Base_Start_IT+0x80>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a1b      	ldr	r2, [pc, #108]	; (80067f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d009      	beq.n	80067a0 <HAL_TIM_Base_Start_IT+0x80>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a19      	ldr	r2, [pc, #100]	; (80067f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d004      	beq.n	80067a0 <HAL_TIM_Base_Start_IT+0x80>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a18      	ldr	r2, [pc, #96]	; (80067fc <HAL_TIM_Base_Start_IT+0xdc>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d111      	bne.n	80067c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	f003 0307 	and.w	r3, r3, #7
 80067aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2b06      	cmp	r3, #6
 80067b0:	d010      	beq.n	80067d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f042 0201 	orr.w	r2, r2, #1
 80067c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067c2:	e007      	b.n	80067d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f042 0201 	orr.w	r2, r2, #1
 80067d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3714      	adds	r7, #20
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	40010000 	.word	0x40010000
 80067e8:	40000400 	.word	0x40000400
 80067ec:	40000800 	.word	0x40000800
 80067f0:	40000c00 	.word	0x40000c00
 80067f4:	40010400 	.word	0x40010400
 80067f8:	40014000 	.word	0x40014000
 80067fc:	40001800 	.word	0x40001800

08006800 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d101      	bne.n	8006812 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e041      	b.n	8006896 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006818:	b2db      	uxtb	r3, r3
 800681a:	2b00      	cmp	r3, #0
 800681c:	d106      	bne.n	800682c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f839 	bl	800689e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2202      	movs	r2, #2
 8006830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	3304      	adds	r3, #4
 800683c:	4619      	mov	r1, r3
 800683e:	4610      	mov	r0, r2
 8006840:	f000 fbba 	bl	8006fb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3708      	adds	r7, #8
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}

0800689e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800689e:	b480      	push	{r7}
 80068a0:	b083      	sub	sp, #12
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80068a6:	bf00      	nop
 80068a8:	370c      	adds	r7, #12
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
	...

080068b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d109      	bne.n	80068d8 <HAL_TIM_PWM_Start+0x24>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	bf14      	ite	ne
 80068d0:	2301      	movne	r3, #1
 80068d2:	2300      	moveq	r3, #0
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	e022      	b.n	800691e <HAL_TIM_PWM_Start+0x6a>
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	2b04      	cmp	r3, #4
 80068dc:	d109      	bne.n	80068f2 <HAL_TIM_PWM_Start+0x3e>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	bf14      	ite	ne
 80068ea:	2301      	movne	r3, #1
 80068ec:	2300      	moveq	r3, #0
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	e015      	b.n	800691e <HAL_TIM_PWM_Start+0x6a>
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	2b08      	cmp	r3, #8
 80068f6:	d109      	bne.n	800690c <HAL_TIM_PWM_Start+0x58>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	2b01      	cmp	r3, #1
 8006902:	bf14      	ite	ne
 8006904:	2301      	movne	r3, #1
 8006906:	2300      	moveq	r3, #0
 8006908:	b2db      	uxtb	r3, r3
 800690a:	e008      	b.n	800691e <HAL_TIM_PWM_Start+0x6a>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006912:	b2db      	uxtb	r3, r3
 8006914:	2b01      	cmp	r3, #1
 8006916:	bf14      	ite	ne
 8006918:	2301      	movne	r3, #1
 800691a:	2300      	moveq	r3, #0
 800691c:	b2db      	uxtb	r3, r3
 800691e:	2b00      	cmp	r3, #0
 8006920:	d001      	beq.n	8006926 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e07c      	b.n	8006a20 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d104      	bne.n	8006936 <HAL_TIM_PWM_Start+0x82>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2202      	movs	r2, #2
 8006930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006934:	e013      	b.n	800695e <HAL_TIM_PWM_Start+0xaa>
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	2b04      	cmp	r3, #4
 800693a:	d104      	bne.n	8006946 <HAL_TIM_PWM_Start+0x92>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2202      	movs	r2, #2
 8006940:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006944:	e00b      	b.n	800695e <HAL_TIM_PWM_Start+0xaa>
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	2b08      	cmp	r3, #8
 800694a:	d104      	bne.n	8006956 <HAL_TIM_PWM_Start+0xa2>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2202      	movs	r2, #2
 8006950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006954:	e003      	b.n	800695e <HAL_TIM_PWM_Start+0xaa>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2202      	movs	r2, #2
 800695a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2201      	movs	r2, #1
 8006964:	6839      	ldr	r1, [r7, #0]
 8006966:	4618      	mov	r0, r3
 8006968:	f000 fe10 	bl	800758c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a2d      	ldr	r2, [pc, #180]	; (8006a28 <HAL_TIM_PWM_Start+0x174>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d004      	beq.n	8006980 <HAL_TIM_PWM_Start+0xcc>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a2c      	ldr	r2, [pc, #176]	; (8006a2c <HAL_TIM_PWM_Start+0x178>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d101      	bne.n	8006984 <HAL_TIM_PWM_Start+0xd0>
 8006980:	2301      	movs	r3, #1
 8006982:	e000      	b.n	8006986 <HAL_TIM_PWM_Start+0xd2>
 8006984:	2300      	movs	r3, #0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d007      	beq.n	800699a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006998:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a22      	ldr	r2, [pc, #136]	; (8006a28 <HAL_TIM_PWM_Start+0x174>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d022      	beq.n	80069ea <HAL_TIM_PWM_Start+0x136>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069ac:	d01d      	beq.n	80069ea <HAL_TIM_PWM_Start+0x136>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a1f      	ldr	r2, [pc, #124]	; (8006a30 <HAL_TIM_PWM_Start+0x17c>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d018      	beq.n	80069ea <HAL_TIM_PWM_Start+0x136>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a1d      	ldr	r2, [pc, #116]	; (8006a34 <HAL_TIM_PWM_Start+0x180>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d013      	beq.n	80069ea <HAL_TIM_PWM_Start+0x136>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a1c      	ldr	r2, [pc, #112]	; (8006a38 <HAL_TIM_PWM_Start+0x184>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d00e      	beq.n	80069ea <HAL_TIM_PWM_Start+0x136>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a16      	ldr	r2, [pc, #88]	; (8006a2c <HAL_TIM_PWM_Start+0x178>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d009      	beq.n	80069ea <HAL_TIM_PWM_Start+0x136>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a18      	ldr	r2, [pc, #96]	; (8006a3c <HAL_TIM_PWM_Start+0x188>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d004      	beq.n	80069ea <HAL_TIM_PWM_Start+0x136>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a16      	ldr	r2, [pc, #88]	; (8006a40 <HAL_TIM_PWM_Start+0x18c>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d111      	bne.n	8006a0e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	f003 0307 	and.w	r3, r3, #7
 80069f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2b06      	cmp	r3, #6
 80069fa:	d010      	beq.n	8006a1e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f042 0201 	orr.w	r2, r2, #1
 8006a0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a0c:	e007      	b.n	8006a1e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f042 0201 	orr.w	r2, r2, #1
 8006a1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3710      	adds	r7, #16
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	40010000 	.word	0x40010000
 8006a2c:	40010400 	.word	0x40010400
 8006a30:	40000400 	.word	0x40000400
 8006a34:	40000800 	.word	0x40000800
 8006a38:	40000c00 	.word	0x40000c00
 8006a3c:	40014000 	.word	0x40014000
 8006a40:	40001800 	.word	0x40001800

08006a44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b082      	sub	sp, #8
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	f003 0302 	and.w	r3, r3, #2
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d122      	bne.n	8006aa0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	f003 0302 	and.w	r3, r3, #2
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	d11b      	bne.n	8006aa0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f06f 0202 	mvn.w	r2, #2
 8006a70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2201      	movs	r2, #1
 8006a76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	699b      	ldr	r3, [r3, #24]
 8006a7e:	f003 0303 	and.w	r3, r3, #3
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d003      	beq.n	8006a8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 fa77 	bl	8006f7a <HAL_TIM_IC_CaptureCallback>
 8006a8c:	e005      	b.n	8006a9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 fa69 	bl	8006f66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 fa7a 	bl	8006f8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	f003 0304 	and.w	r3, r3, #4
 8006aaa:	2b04      	cmp	r3, #4
 8006aac:	d122      	bne.n	8006af4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	f003 0304 	and.w	r3, r3, #4
 8006ab8:	2b04      	cmp	r3, #4
 8006aba:	d11b      	bne.n	8006af4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f06f 0204 	mvn.w	r2, #4
 8006ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2202      	movs	r2, #2
 8006aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	699b      	ldr	r3, [r3, #24]
 8006ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d003      	beq.n	8006ae2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 fa4d 	bl	8006f7a <HAL_TIM_IC_CaptureCallback>
 8006ae0:	e005      	b.n	8006aee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 fa3f 	bl	8006f66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 fa50 	bl	8006f8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	f003 0308 	and.w	r3, r3, #8
 8006afe:	2b08      	cmp	r3, #8
 8006b00:	d122      	bne.n	8006b48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	f003 0308 	and.w	r3, r3, #8
 8006b0c:	2b08      	cmp	r3, #8
 8006b0e:	d11b      	bne.n	8006b48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f06f 0208 	mvn.w	r2, #8
 8006b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2204      	movs	r2, #4
 8006b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	69db      	ldr	r3, [r3, #28]
 8006b26:	f003 0303 	and.w	r3, r3, #3
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d003      	beq.n	8006b36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 fa23 	bl	8006f7a <HAL_TIM_IC_CaptureCallback>
 8006b34:	e005      	b.n	8006b42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 fa15 	bl	8006f66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 fa26 	bl	8006f8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	f003 0310 	and.w	r3, r3, #16
 8006b52:	2b10      	cmp	r3, #16
 8006b54:	d122      	bne.n	8006b9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	f003 0310 	and.w	r3, r3, #16
 8006b60:	2b10      	cmp	r3, #16
 8006b62:	d11b      	bne.n	8006b9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f06f 0210 	mvn.w	r2, #16
 8006b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2208      	movs	r2, #8
 8006b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	69db      	ldr	r3, [r3, #28]
 8006b7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d003      	beq.n	8006b8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 f9f9 	bl	8006f7a <HAL_TIM_IC_CaptureCallback>
 8006b88:	e005      	b.n	8006b96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 f9eb 	bl	8006f66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 f9fc 	bl	8006f8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	f003 0301 	and.w	r3, r3, #1
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d10e      	bne.n	8006bc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	f003 0301 	and.w	r3, r3, #1
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d107      	bne.n	8006bc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f06f 0201 	mvn.w	r2, #1
 8006bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f7fd f8bc 	bl	8003d40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bd2:	2b80      	cmp	r3, #128	; 0x80
 8006bd4:	d10e      	bne.n	8006bf4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006be0:	2b80      	cmp	r3, #128	; 0x80
 8006be2:	d107      	bne.n	8006bf4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 fdca 	bl	8007788 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bfe:	2b40      	cmp	r3, #64	; 0x40
 8006c00:	d10e      	bne.n	8006c20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c0c:	2b40      	cmp	r3, #64	; 0x40
 8006c0e:	d107      	bne.n	8006c20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 f9c1 	bl	8006fa2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	f003 0320 	and.w	r3, r3, #32
 8006c2a:	2b20      	cmp	r3, #32
 8006c2c:	d10e      	bne.n	8006c4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	f003 0320 	and.w	r3, r3, #32
 8006c38:	2b20      	cmp	r3, #32
 8006c3a:	d107      	bne.n	8006c4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f06f 0220 	mvn.w	r2, #32
 8006c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 fd94 	bl	8007774 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c4c:	bf00      	nop
 8006c4e:	3708      	adds	r7, #8
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b086      	sub	sp, #24
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c60:	2300      	movs	r3, #0
 8006c62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d101      	bne.n	8006c72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006c6e:	2302      	movs	r3, #2
 8006c70:	e0ae      	b.n	8006dd0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2201      	movs	r2, #1
 8006c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2b0c      	cmp	r3, #12
 8006c7e:	f200 809f 	bhi.w	8006dc0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006c82:	a201      	add	r2, pc, #4	; (adr r2, 8006c88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c88:	08006cbd 	.word	0x08006cbd
 8006c8c:	08006dc1 	.word	0x08006dc1
 8006c90:	08006dc1 	.word	0x08006dc1
 8006c94:	08006dc1 	.word	0x08006dc1
 8006c98:	08006cfd 	.word	0x08006cfd
 8006c9c:	08006dc1 	.word	0x08006dc1
 8006ca0:	08006dc1 	.word	0x08006dc1
 8006ca4:	08006dc1 	.word	0x08006dc1
 8006ca8:	08006d3f 	.word	0x08006d3f
 8006cac:	08006dc1 	.word	0x08006dc1
 8006cb0:	08006dc1 	.word	0x08006dc1
 8006cb4:	08006dc1 	.word	0x08006dc1
 8006cb8:	08006d7f 	.word	0x08006d7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	68b9      	ldr	r1, [r7, #8]
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f000 fa18 	bl	80070f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	699a      	ldr	r2, [r3, #24]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f042 0208 	orr.w	r2, r2, #8
 8006cd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	699a      	ldr	r2, [r3, #24]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f022 0204 	bic.w	r2, r2, #4
 8006ce6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	6999      	ldr	r1, [r3, #24]
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	691a      	ldr	r2, [r3, #16]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	430a      	orrs	r2, r1
 8006cf8:	619a      	str	r2, [r3, #24]
      break;
 8006cfa:	e064      	b.n	8006dc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68b9      	ldr	r1, [r7, #8]
 8006d02:	4618      	mov	r0, r3
 8006d04:	f000 fa68 	bl	80071d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	699a      	ldr	r2, [r3, #24]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	699a      	ldr	r2, [r3, #24]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	6999      	ldr	r1, [r3, #24]
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	021a      	lsls	r2, r3, #8
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	430a      	orrs	r2, r1
 8006d3a:	619a      	str	r2, [r3, #24]
      break;
 8006d3c:	e043      	b.n	8006dc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	68b9      	ldr	r1, [r7, #8]
 8006d44:	4618      	mov	r0, r3
 8006d46:	f000 fabd 	bl	80072c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	69da      	ldr	r2, [r3, #28]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f042 0208 	orr.w	r2, r2, #8
 8006d58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	69da      	ldr	r2, [r3, #28]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f022 0204 	bic.w	r2, r2, #4
 8006d68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	69d9      	ldr	r1, [r3, #28]
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	691a      	ldr	r2, [r3, #16]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	430a      	orrs	r2, r1
 8006d7a:	61da      	str	r2, [r3, #28]
      break;
 8006d7c:	e023      	b.n	8006dc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	68b9      	ldr	r1, [r7, #8]
 8006d84:	4618      	mov	r0, r3
 8006d86:	f000 fb11 	bl	80073ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	69da      	ldr	r2, [r3, #28]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	69da      	ldr	r2, [r3, #28]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006da8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	69d9      	ldr	r1, [r3, #28]
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	691b      	ldr	r3, [r3, #16]
 8006db4:	021a      	lsls	r2, r3, #8
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	430a      	orrs	r2, r1
 8006dbc:	61da      	str	r2, [r3, #28]
      break;
 8006dbe:	e002      	b.n	8006dc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	75fb      	strb	r3, [r7, #23]
      break;
 8006dc4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006dce:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3718      	adds	r7, #24
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006de2:	2300      	movs	r3, #0
 8006de4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d101      	bne.n	8006df4 <HAL_TIM_ConfigClockSource+0x1c>
 8006df0:	2302      	movs	r3, #2
 8006df2:	e0b4      	b.n	8006f5e <HAL_TIM_ConfigClockSource+0x186>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2202      	movs	r2, #2
 8006e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006e12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	68ba      	ldr	r2, [r7, #8]
 8006e22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e2c:	d03e      	beq.n	8006eac <HAL_TIM_ConfigClockSource+0xd4>
 8006e2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e32:	f200 8087 	bhi.w	8006f44 <HAL_TIM_ConfigClockSource+0x16c>
 8006e36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e3a:	f000 8086 	beq.w	8006f4a <HAL_TIM_ConfigClockSource+0x172>
 8006e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e42:	d87f      	bhi.n	8006f44 <HAL_TIM_ConfigClockSource+0x16c>
 8006e44:	2b70      	cmp	r3, #112	; 0x70
 8006e46:	d01a      	beq.n	8006e7e <HAL_TIM_ConfigClockSource+0xa6>
 8006e48:	2b70      	cmp	r3, #112	; 0x70
 8006e4a:	d87b      	bhi.n	8006f44 <HAL_TIM_ConfigClockSource+0x16c>
 8006e4c:	2b60      	cmp	r3, #96	; 0x60
 8006e4e:	d050      	beq.n	8006ef2 <HAL_TIM_ConfigClockSource+0x11a>
 8006e50:	2b60      	cmp	r3, #96	; 0x60
 8006e52:	d877      	bhi.n	8006f44 <HAL_TIM_ConfigClockSource+0x16c>
 8006e54:	2b50      	cmp	r3, #80	; 0x50
 8006e56:	d03c      	beq.n	8006ed2 <HAL_TIM_ConfigClockSource+0xfa>
 8006e58:	2b50      	cmp	r3, #80	; 0x50
 8006e5a:	d873      	bhi.n	8006f44 <HAL_TIM_ConfigClockSource+0x16c>
 8006e5c:	2b40      	cmp	r3, #64	; 0x40
 8006e5e:	d058      	beq.n	8006f12 <HAL_TIM_ConfigClockSource+0x13a>
 8006e60:	2b40      	cmp	r3, #64	; 0x40
 8006e62:	d86f      	bhi.n	8006f44 <HAL_TIM_ConfigClockSource+0x16c>
 8006e64:	2b30      	cmp	r3, #48	; 0x30
 8006e66:	d064      	beq.n	8006f32 <HAL_TIM_ConfigClockSource+0x15a>
 8006e68:	2b30      	cmp	r3, #48	; 0x30
 8006e6a:	d86b      	bhi.n	8006f44 <HAL_TIM_ConfigClockSource+0x16c>
 8006e6c:	2b20      	cmp	r3, #32
 8006e6e:	d060      	beq.n	8006f32 <HAL_TIM_ConfigClockSource+0x15a>
 8006e70:	2b20      	cmp	r3, #32
 8006e72:	d867      	bhi.n	8006f44 <HAL_TIM_ConfigClockSource+0x16c>
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d05c      	beq.n	8006f32 <HAL_TIM_ConfigClockSource+0x15a>
 8006e78:	2b10      	cmp	r3, #16
 8006e7a:	d05a      	beq.n	8006f32 <HAL_TIM_ConfigClockSource+0x15a>
 8006e7c:	e062      	b.n	8006f44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6818      	ldr	r0, [r3, #0]
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	6899      	ldr	r1, [r3, #8]
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	685a      	ldr	r2, [r3, #4]
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	f000 fb5d 	bl	800754c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ea0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	68ba      	ldr	r2, [r7, #8]
 8006ea8:	609a      	str	r2, [r3, #8]
      break;
 8006eaa:	e04f      	b.n	8006f4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6818      	ldr	r0, [r3, #0]
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	6899      	ldr	r1, [r3, #8]
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	685a      	ldr	r2, [r3, #4]
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	f000 fb46 	bl	800754c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	689a      	ldr	r2, [r3, #8]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ece:	609a      	str	r2, [r3, #8]
      break;
 8006ed0:	e03c      	b.n	8006f4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6818      	ldr	r0, [r3, #0]
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	6859      	ldr	r1, [r3, #4]
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	461a      	mov	r2, r3
 8006ee0:	f000 faba 	bl	8007458 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2150      	movs	r1, #80	; 0x50
 8006eea:	4618      	mov	r0, r3
 8006eec:	f000 fb13 	bl	8007516 <TIM_ITRx_SetConfig>
      break;
 8006ef0:	e02c      	b.n	8006f4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6818      	ldr	r0, [r3, #0]
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	6859      	ldr	r1, [r3, #4]
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	461a      	mov	r2, r3
 8006f00:	f000 fad9 	bl	80074b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2160      	movs	r1, #96	; 0x60
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f000 fb03 	bl	8007516 <TIM_ITRx_SetConfig>
      break;
 8006f10:	e01c      	b.n	8006f4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6818      	ldr	r0, [r3, #0]
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	6859      	ldr	r1, [r3, #4]
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	461a      	mov	r2, r3
 8006f20:	f000 fa9a 	bl	8007458 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2140      	movs	r1, #64	; 0x40
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f000 faf3 	bl	8007516 <TIM_ITRx_SetConfig>
      break;
 8006f30:	e00c      	b.n	8006f4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	4610      	mov	r0, r2
 8006f3e:	f000 faea 	bl	8007516 <TIM_ITRx_SetConfig>
      break;
 8006f42:	e003      	b.n	8006f4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	73fb      	strb	r3, [r7, #15]
      break;
 8006f48:	e000      	b.n	8006f4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006f4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3710      	adds	r7, #16
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}

08006f66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f66:	b480      	push	{r7}
 8006f68:	b083      	sub	sp, #12
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f6e:	bf00      	nop
 8006f70:	370c      	adds	r7, #12
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr

08006f7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b083      	sub	sp, #12
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f82:	bf00      	nop
 8006f84:	370c      	adds	r7, #12
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr

08006f8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f8e:	b480      	push	{r7}
 8006f90:	b083      	sub	sp, #12
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f96:	bf00      	nop
 8006f98:	370c      	adds	r7, #12
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr

08006fa2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006fa2:	b480      	push	{r7}
 8006fa4:	b083      	sub	sp, #12
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006faa:	bf00      	nop
 8006fac:	370c      	adds	r7, #12
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr
	...

08006fb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a40      	ldr	r2, [pc, #256]	; (80070cc <TIM_Base_SetConfig+0x114>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d013      	beq.n	8006ff8 <TIM_Base_SetConfig+0x40>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fd6:	d00f      	beq.n	8006ff8 <TIM_Base_SetConfig+0x40>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a3d      	ldr	r2, [pc, #244]	; (80070d0 <TIM_Base_SetConfig+0x118>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d00b      	beq.n	8006ff8 <TIM_Base_SetConfig+0x40>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a3c      	ldr	r2, [pc, #240]	; (80070d4 <TIM_Base_SetConfig+0x11c>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d007      	beq.n	8006ff8 <TIM_Base_SetConfig+0x40>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4a3b      	ldr	r2, [pc, #236]	; (80070d8 <TIM_Base_SetConfig+0x120>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d003      	beq.n	8006ff8 <TIM_Base_SetConfig+0x40>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4a3a      	ldr	r2, [pc, #232]	; (80070dc <TIM_Base_SetConfig+0x124>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d108      	bne.n	800700a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ffe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	4313      	orrs	r3, r2
 8007008:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a2f      	ldr	r2, [pc, #188]	; (80070cc <TIM_Base_SetConfig+0x114>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d02b      	beq.n	800706a <TIM_Base_SetConfig+0xb2>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007018:	d027      	beq.n	800706a <TIM_Base_SetConfig+0xb2>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a2c      	ldr	r2, [pc, #176]	; (80070d0 <TIM_Base_SetConfig+0x118>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d023      	beq.n	800706a <TIM_Base_SetConfig+0xb2>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a2b      	ldr	r2, [pc, #172]	; (80070d4 <TIM_Base_SetConfig+0x11c>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d01f      	beq.n	800706a <TIM_Base_SetConfig+0xb2>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a2a      	ldr	r2, [pc, #168]	; (80070d8 <TIM_Base_SetConfig+0x120>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d01b      	beq.n	800706a <TIM_Base_SetConfig+0xb2>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a29      	ldr	r2, [pc, #164]	; (80070dc <TIM_Base_SetConfig+0x124>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d017      	beq.n	800706a <TIM_Base_SetConfig+0xb2>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a28      	ldr	r2, [pc, #160]	; (80070e0 <TIM_Base_SetConfig+0x128>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d013      	beq.n	800706a <TIM_Base_SetConfig+0xb2>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a27      	ldr	r2, [pc, #156]	; (80070e4 <TIM_Base_SetConfig+0x12c>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d00f      	beq.n	800706a <TIM_Base_SetConfig+0xb2>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a26      	ldr	r2, [pc, #152]	; (80070e8 <TIM_Base_SetConfig+0x130>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d00b      	beq.n	800706a <TIM_Base_SetConfig+0xb2>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a25      	ldr	r2, [pc, #148]	; (80070ec <TIM_Base_SetConfig+0x134>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d007      	beq.n	800706a <TIM_Base_SetConfig+0xb2>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a24      	ldr	r2, [pc, #144]	; (80070f0 <TIM_Base_SetConfig+0x138>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d003      	beq.n	800706a <TIM_Base_SetConfig+0xb2>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a23      	ldr	r2, [pc, #140]	; (80070f4 <TIM_Base_SetConfig+0x13c>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d108      	bne.n	800707c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007070:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	4313      	orrs	r3, r2
 800707a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	695b      	ldr	r3, [r3, #20]
 8007086:	4313      	orrs	r3, r2
 8007088:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	689a      	ldr	r2, [r3, #8]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	4a0a      	ldr	r2, [pc, #40]	; (80070cc <TIM_Base_SetConfig+0x114>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d003      	beq.n	80070b0 <TIM_Base_SetConfig+0xf8>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	4a0c      	ldr	r2, [pc, #48]	; (80070dc <TIM_Base_SetConfig+0x124>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d103      	bne.n	80070b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	691a      	ldr	r2, [r3, #16]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	615a      	str	r2, [r3, #20]
}
 80070be:	bf00      	nop
 80070c0:	3714      	adds	r7, #20
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr
 80070ca:	bf00      	nop
 80070cc:	40010000 	.word	0x40010000
 80070d0:	40000400 	.word	0x40000400
 80070d4:	40000800 	.word	0x40000800
 80070d8:	40000c00 	.word	0x40000c00
 80070dc:	40010400 	.word	0x40010400
 80070e0:	40014000 	.word	0x40014000
 80070e4:	40014400 	.word	0x40014400
 80070e8:	40014800 	.word	0x40014800
 80070ec:	40001800 	.word	0x40001800
 80070f0:	40001c00 	.word	0x40001c00
 80070f4:	40002000 	.word	0x40002000

080070f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b087      	sub	sp, #28
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a1b      	ldr	r3, [r3, #32]
 8007106:	f023 0201 	bic.w	r2, r3, #1
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a1b      	ldr	r3, [r3, #32]
 8007112:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	699b      	ldr	r3, [r3, #24]
 800711e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f023 0303 	bic.w	r3, r3, #3
 800712e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68fa      	ldr	r2, [r7, #12]
 8007136:	4313      	orrs	r3, r2
 8007138:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	f023 0302 	bic.w	r3, r3, #2
 8007140:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	697a      	ldr	r2, [r7, #20]
 8007148:	4313      	orrs	r3, r2
 800714a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a20      	ldr	r2, [pc, #128]	; (80071d0 <TIM_OC1_SetConfig+0xd8>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d003      	beq.n	800715c <TIM_OC1_SetConfig+0x64>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a1f      	ldr	r2, [pc, #124]	; (80071d4 <TIM_OC1_SetConfig+0xdc>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d10c      	bne.n	8007176 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	f023 0308 	bic.w	r3, r3, #8
 8007162:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	697a      	ldr	r2, [r7, #20]
 800716a:	4313      	orrs	r3, r2
 800716c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	f023 0304 	bic.w	r3, r3, #4
 8007174:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a15      	ldr	r2, [pc, #84]	; (80071d0 <TIM_OC1_SetConfig+0xd8>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d003      	beq.n	8007186 <TIM_OC1_SetConfig+0x8e>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a14      	ldr	r2, [pc, #80]	; (80071d4 <TIM_OC1_SetConfig+0xdc>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d111      	bne.n	80071aa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800718c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007194:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	695b      	ldr	r3, [r3, #20]
 800719a:	693a      	ldr	r2, [r7, #16]
 800719c:	4313      	orrs	r3, r2
 800719e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	699b      	ldr	r3, [r3, #24]
 80071a4:	693a      	ldr	r2, [r7, #16]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	693a      	ldr	r2, [r7, #16]
 80071ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	685a      	ldr	r2, [r3, #4]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	697a      	ldr	r2, [r7, #20]
 80071c2:	621a      	str	r2, [r3, #32]
}
 80071c4:	bf00      	nop
 80071c6:	371c      	adds	r7, #28
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr
 80071d0:	40010000 	.word	0x40010000
 80071d4:	40010400 	.word	0x40010400

080071d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071d8:	b480      	push	{r7}
 80071da:	b087      	sub	sp, #28
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6a1b      	ldr	r3, [r3, #32]
 80071e6:	f023 0210 	bic.w	r2, r3, #16
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a1b      	ldr	r3, [r3, #32]
 80071f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	699b      	ldr	r3, [r3, #24]
 80071fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800720e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	021b      	lsls	r3, r3, #8
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	4313      	orrs	r3, r2
 800721a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	f023 0320 	bic.w	r3, r3, #32
 8007222:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	011b      	lsls	r3, r3, #4
 800722a:	697a      	ldr	r2, [r7, #20]
 800722c:	4313      	orrs	r3, r2
 800722e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4a22      	ldr	r2, [pc, #136]	; (80072bc <TIM_OC2_SetConfig+0xe4>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d003      	beq.n	8007240 <TIM_OC2_SetConfig+0x68>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a21      	ldr	r2, [pc, #132]	; (80072c0 <TIM_OC2_SetConfig+0xe8>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d10d      	bne.n	800725c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007246:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	011b      	lsls	r3, r3, #4
 800724e:	697a      	ldr	r2, [r7, #20]
 8007250:	4313      	orrs	r3, r2
 8007252:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800725a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a17      	ldr	r2, [pc, #92]	; (80072bc <TIM_OC2_SetConfig+0xe4>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d003      	beq.n	800726c <TIM_OC2_SetConfig+0x94>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a16      	ldr	r2, [pc, #88]	; (80072c0 <TIM_OC2_SetConfig+0xe8>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d113      	bne.n	8007294 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007272:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800727a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	695b      	ldr	r3, [r3, #20]
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	693a      	ldr	r2, [r7, #16]
 8007284:	4313      	orrs	r3, r2
 8007286:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	699b      	ldr	r3, [r3, #24]
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	693a      	ldr	r2, [r7, #16]
 8007290:	4313      	orrs	r3, r2
 8007292:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	693a      	ldr	r2, [r7, #16]
 8007298:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	685a      	ldr	r2, [r3, #4]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	697a      	ldr	r2, [r7, #20]
 80072ac:	621a      	str	r2, [r3, #32]
}
 80072ae:	bf00      	nop
 80072b0:	371c      	adds	r7, #28
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop
 80072bc:	40010000 	.word	0x40010000
 80072c0:	40010400 	.word	0x40010400

080072c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b087      	sub	sp, #28
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a1b      	ldr	r3, [r3, #32]
 80072d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a1b      	ldr	r3, [r3, #32]
 80072de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	69db      	ldr	r3, [r3, #28]
 80072ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f023 0303 	bic.w	r3, r3, #3
 80072fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68fa      	ldr	r2, [r7, #12]
 8007302:	4313      	orrs	r3, r2
 8007304:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800730c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	021b      	lsls	r3, r3, #8
 8007314:	697a      	ldr	r2, [r7, #20]
 8007316:	4313      	orrs	r3, r2
 8007318:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4a21      	ldr	r2, [pc, #132]	; (80073a4 <TIM_OC3_SetConfig+0xe0>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d003      	beq.n	800732a <TIM_OC3_SetConfig+0x66>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4a20      	ldr	r2, [pc, #128]	; (80073a8 <TIM_OC3_SetConfig+0xe4>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d10d      	bne.n	8007346 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007330:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	021b      	lsls	r3, r3, #8
 8007338:	697a      	ldr	r2, [r7, #20]
 800733a:	4313      	orrs	r3, r2
 800733c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007344:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	4a16      	ldr	r2, [pc, #88]	; (80073a4 <TIM_OC3_SetConfig+0xe0>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d003      	beq.n	8007356 <TIM_OC3_SetConfig+0x92>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	4a15      	ldr	r2, [pc, #84]	; (80073a8 <TIM_OC3_SetConfig+0xe4>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d113      	bne.n	800737e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800735c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007364:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	695b      	ldr	r3, [r3, #20]
 800736a:	011b      	lsls	r3, r3, #4
 800736c:	693a      	ldr	r2, [r7, #16]
 800736e:	4313      	orrs	r3, r2
 8007370:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	699b      	ldr	r3, [r3, #24]
 8007376:	011b      	lsls	r3, r3, #4
 8007378:	693a      	ldr	r2, [r7, #16]
 800737a:	4313      	orrs	r3, r2
 800737c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	693a      	ldr	r2, [r7, #16]
 8007382:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	68fa      	ldr	r2, [r7, #12]
 8007388:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	685a      	ldr	r2, [r3, #4]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	697a      	ldr	r2, [r7, #20]
 8007396:	621a      	str	r2, [r3, #32]
}
 8007398:	bf00      	nop
 800739a:	371c      	adds	r7, #28
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr
 80073a4:	40010000 	.word	0x40010000
 80073a8:	40010400 	.word	0x40010400

080073ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b087      	sub	sp, #28
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a1b      	ldr	r3, [r3, #32]
 80073ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a1b      	ldr	r3, [r3, #32]
 80073c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	69db      	ldr	r3, [r3, #28]
 80073d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	021b      	lsls	r3, r3, #8
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	4313      	orrs	r3, r2
 80073ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	031b      	lsls	r3, r3, #12
 80073fe:	693a      	ldr	r2, [r7, #16]
 8007400:	4313      	orrs	r3, r2
 8007402:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	4a12      	ldr	r2, [pc, #72]	; (8007450 <TIM_OC4_SetConfig+0xa4>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d003      	beq.n	8007414 <TIM_OC4_SetConfig+0x68>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	4a11      	ldr	r2, [pc, #68]	; (8007454 <TIM_OC4_SetConfig+0xa8>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d109      	bne.n	8007428 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800741a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	695b      	ldr	r3, [r3, #20]
 8007420:	019b      	lsls	r3, r3, #6
 8007422:	697a      	ldr	r2, [r7, #20]
 8007424:	4313      	orrs	r3, r2
 8007426:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	697a      	ldr	r2, [r7, #20]
 800742c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	68fa      	ldr	r2, [r7, #12]
 8007432:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	685a      	ldr	r2, [r3, #4]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	693a      	ldr	r2, [r7, #16]
 8007440:	621a      	str	r2, [r3, #32]
}
 8007442:	bf00      	nop
 8007444:	371c      	adds	r7, #28
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr
 800744e:	bf00      	nop
 8007450:	40010000 	.word	0x40010000
 8007454:	40010400 	.word	0x40010400

08007458 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007458:	b480      	push	{r7}
 800745a:	b087      	sub	sp, #28
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	60b9      	str	r1, [r7, #8]
 8007462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	6a1b      	ldr	r3, [r3, #32]
 8007468:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	6a1b      	ldr	r3, [r3, #32]
 800746e:	f023 0201 	bic.w	r2, r3, #1
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	699b      	ldr	r3, [r3, #24]
 800747a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007482:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	011b      	lsls	r3, r3, #4
 8007488:	693a      	ldr	r2, [r7, #16]
 800748a:	4313      	orrs	r3, r2
 800748c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	f023 030a 	bic.w	r3, r3, #10
 8007494:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007496:	697a      	ldr	r2, [r7, #20]
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	4313      	orrs	r3, r2
 800749c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	693a      	ldr	r2, [r7, #16]
 80074a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	697a      	ldr	r2, [r7, #20]
 80074a8:	621a      	str	r2, [r3, #32]
}
 80074aa:	bf00      	nop
 80074ac:	371c      	adds	r7, #28
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr

080074b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074b6:	b480      	push	{r7}
 80074b8:	b087      	sub	sp, #28
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	60f8      	str	r0, [r7, #12]
 80074be:	60b9      	str	r1, [r7, #8]
 80074c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	6a1b      	ldr	r3, [r3, #32]
 80074c6:	f023 0210 	bic.w	r2, r3, #16
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	699b      	ldr	r3, [r3, #24]
 80074d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	6a1b      	ldr	r3, [r3, #32]
 80074d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80074e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	031b      	lsls	r3, r3, #12
 80074e6:	697a      	ldr	r2, [r7, #20]
 80074e8:	4313      	orrs	r3, r2
 80074ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80074f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	011b      	lsls	r3, r3, #4
 80074f8:	693a      	ldr	r2, [r7, #16]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	697a      	ldr	r2, [r7, #20]
 8007502:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	693a      	ldr	r2, [r7, #16]
 8007508:	621a      	str	r2, [r3, #32]
}
 800750a:	bf00      	nop
 800750c:	371c      	adds	r7, #28
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr

08007516 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007516:	b480      	push	{r7}
 8007518:	b085      	sub	sp, #20
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
 800751e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800752c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800752e:	683a      	ldr	r2, [r7, #0]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	4313      	orrs	r3, r2
 8007534:	f043 0307 	orr.w	r3, r3, #7
 8007538:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	609a      	str	r2, [r3, #8]
}
 8007540:	bf00      	nop
 8007542:	3714      	adds	r7, #20
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800754c:	b480      	push	{r7}
 800754e:	b087      	sub	sp, #28
 8007550:	af00      	add	r7, sp, #0
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	60b9      	str	r1, [r7, #8]
 8007556:	607a      	str	r2, [r7, #4]
 8007558:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007566:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));

 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	021a      	lsls	r2, r3, #8
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	431a      	orrs	r2, r3
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	4313      	orrs	r3, r2
 8007574:	697a      	ldr	r2, [r7, #20]
 8007576:	4313      	orrs	r3, r2
 8007578:	617b      	str	r3, [r7, #20]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
}
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	697a      	ldr	r2, [r7, #20]
 800757e:	609a      	str	r2, [r3, #8]

 8007580:	bf00      	nop
 8007582:	371c      	adds	r7, #28
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr

0800758c <TIM_CCxChannelCmd>:
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
  uint32_t tmp;
 800758c:	b480      	push	{r7}
 800758e:	b087      	sub	sp, #28
 8007590:	af00      	add	r7, sp, #0
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	60b9      	str	r1, [r7, #8]
 8007596:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	f003 031f 	and.w	r3, r3, #31
 800759e:	2201      	movs	r2, #1
 80075a0:	fa02 f303 	lsl.w	r3, r2, r3
 80075a4:	617b      	str	r3, [r7, #20]
  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	6a1a      	ldr	r2, [r3, #32]
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	43db      	mvns	r3, r3
 80075ae:	401a      	ands	r2, r3
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	621a      	str	r2, [r3, #32]
  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
}
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6a1a      	ldr	r2, [r3, #32]
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	f003 031f 	and.w	r3, r3, #31
 80075be:	6879      	ldr	r1, [r7, #4]
 80075c0:	fa01 f303 	lsl.w	r3, r1, r3
 80075c4:	431a      	orrs	r2, r3
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	621a      	str	r2, [r3, #32]

 80075ca:	bf00      	nop
 80075cc:	371c      	adds	r7, #28
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr
	...

080075d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075d8:	b480      	push	{r7}
 80075da:	b085      	sub	sp, #20
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d101      	bne.n	80075f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075ec:	2302      	movs	r3, #2
 80075ee:	e05a      	b.n	80076a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2202      	movs	r2, #2
 80075fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007616:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	4313      	orrs	r3, r2
 8007620:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	68fa      	ldr	r2, [r7, #12]
 8007628:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a21      	ldr	r2, [pc, #132]	; (80076b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d022      	beq.n	800767a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800763c:	d01d      	beq.n	800767a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a1d      	ldr	r2, [pc, #116]	; (80076b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d018      	beq.n	800767a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a1b      	ldr	r2, [pc, #108]	; (80076bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d013      	beq.n	800767a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a1a      	ldr	r2, [pc, #104]	; (80076c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d00e      	beq.n	800767a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a18      	ldr	r2, [pc, #96]	; (80076c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d009      	beq.n	800767a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a17      	ldr	r2, [pc, #92]	; (80076c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d004      	beq.n	800767a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a15      	ldr	r2, [pc, #84]	; (80076cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d10c      	bne.n	8007694 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007680:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	68ba      	ldr	r2, [r7, #8]
 8007688:	4313      	orrs	r3, r2
 800768a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	68ba      	ldr	r2, [r7, #8]
 8007692:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3714      	adds	r7, #20
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	40010000 	.word	0x40010000
 80076b8:	40000400 	.word	0x40000400
 80076bc:	40000800 	.word	0x40000800
 80076c0:	40000c00 	.word	0x40000c00
 80076c4:	40010400 	.word	0x40010400
 80076c8:	40014000 	.word	0x40014000
 80076cc:	40001800 	.word	0x40001800

080076d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b085      	sub	sp, #20
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80076da:	2300      	movs	r3, #0
 80076dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d101      	bne.n	80076ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80076e8:	2302      	movs	r3, #2
 80076ea:	e03d      	b.n	8007768 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	68db      	ldr	r3, [r3, #12]
 80076fe:	4313      	orrs	r3, r2
 8007700:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	4313      	orrs	r3, r2
 800770e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	4313      	orrs	r3, r2
 800771c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4313      	orrs	r3, r2
 800772a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	4313      	orrs	r3, r2
 8007738:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	695b      	ldr	r3, [r3, #20]
 8007744:	4313      	orrs	r3, r2
 8007746:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	69db      	ldr	r3, [r3, #28]
 8007752:	4313      	orrs	r3, r2
 8007754:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007766:	2300      	movs	r3, #0
}
 8007768:	4618      	mov	r0, r3
 800776a:	3714      	adds	r7, #20
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800777c:	bf00      	nop
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007788:	b480      	push	{r7}
 800778a:	b083      	sub	sp, #12
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007790:	bf00      	nop
 8007792:	370c      	adds	r7, #12
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d101      	bne.n	80077ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	e03f      	b.n	800782e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d106      	bne.n	80077c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f7fc ff34 	bl	8004630 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2224      	movs	r2, #36	; 0x24
 80077cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68da      	ldr	r2, [r3, #12]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80077de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 fc7b 	bl	80080dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	691a      	ldr	r2, [r3, #16]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80077f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	695a      	ldr	r2, [r3, #20]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007804:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	68da      	ldr	r2, [r3, #12]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007814:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2200      	movs	r2, #0
 800781a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2220      	movs	r2, #32
 8007820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2220      	movs	r2, #32
 8007828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	3708      	adds	r7, #8
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
	...

08007838 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b0ba      	sub	sp, #232	; 0xe8
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	695b      	ldr	r3, [r3, #20]
 800785a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800785e:	2300      	movs	r3, #0
 8007860:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007864:	2300      	movs	r3, #0
 8007866:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800786a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800786e:	f003 030f 	and.w	r3, r3, #15
 8007872:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007876:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800787a:	2b00      	cmp	r3, #0
 800787c:	d10f      	bne.n	800789e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800787e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007882:	f003 0320 	and.w	r3, r3, #32
 8007886:	2b00      	cmp	r3, #0
 8007888:	d009      	beq.n	800789e <HAL_UART_IRQHandler+0x66>
 800788a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800788e:	f003 0320 	and.w	r3, r3, #32
 8007892:	2b00      	cmp	r3, #0
 8007894:	d003      	beq.n	800789e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 fb65 	bl	8007f66 <UART_Receive_IT>
      return;
 800789c:	e256      	b.n	8007d4c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800789e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	f000 80de 	beq.w	8007a64 <HAL_UART_IRQHandler+0x22c>
 80078a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078ac:	f003 0301 	and.w	r3, r3, #1
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d106      	bne.n	80078c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80078b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80078bc:	2b00      	cmp	r3, #0
 80078be:	f000 80d1 	beq.w	8007a64 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80078c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078c6:	f003 0301 	and.w	r3, r3, #1
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d00b      	beq.n	80078e6 <HAL_UART_IRQHandler+0xae>
 80078ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d005      	beq.n	80078e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078de:	f043 0201 	orr.w	r2, r3, #1
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80078e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078ea:	f003 0304 	and.w	r3, r3, #4
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d00b      	beq.n	800790a <HAL_UART_IRQHandler+0xd2>
 80078f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078f6:	f003 0301 	and.w	r3, r3, #1
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d005      	beq.n	800790a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007902:	f043 0202 	orr.w	r2, r3, #2
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800790a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800790e:	f003 0302 	and.w	r3, r3, #2
 8007912:	2b00      	cmp	r3, #0
 8007914:	d00b      	beq.n	800792e <HAL_UART_IRQHandler+0xf6>
 8007916:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800791a:	f003 0301 	and.w	r3, r3, #1
 800791e:	2b00      	cmp	r3, #0
 8007920:	d005      	beq.n	800792e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007926:	f043 0204 	orr.w	r2, r3, #4
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800792e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007932:	f003 0308 	and.w	r3, r3, #8
 8007936:	2b00      	cmp	r3, #0
 8007938:	d011      	beq.n	800795e <HAL_UART_IRQHandler+0x126>
 800793a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800793e:	f003 0320 	and.w	r3, r3, #32
 8007942:	2b00      	cmp	r3, #0
 8007944:	d105      	bne.n	8007952 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007946:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800794a:	f003 0301 	and.w	r3, r3, #1
 800794e:	2b00      	cmp	r3, #0
 8007950:	d005      	beq.n	800795e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007956:	f043 0208 	orr.w	r2, r3, #8
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007962:	2b00      	cmp	r3, #0
 8007964:	f000 81ed 	beq.w	8007d42 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800796c:	f003 0320 	and.w	r3, r3, #32
 8007970:	2b00      	cmp	r3, #0
 8007972:	d008      	beq.n	8007986 <HAL_UART_IRQHandler+0x14e>
 8007974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007978:	f003 0320 	and.w	r3, r3, #32
 800797c:	2b00      	cmp	r3, #0
 800797e:	d002      	beq.n	8007986 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 faf0 	bl	8007f66 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	695b      	ldr	r3, [r3, #20]
 800798c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007990:	2b40      	cmp	r3, #64	; 0x40
 8007992:	bf0c      	ite	eq
 8007994:	2301      	moveq	r3, #1
 8007996:	2300      	movne	r3, #0
 8007998:	b2db      	uxtb	r3, r3
 800799a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a2:	f003 0308 	and.w	r3, r3, #8
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d103      	bne.n	80079b2 <HAL_UART_IRQHandler+0x17a>
 80079aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d04f      	beq.n	8007a52 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 f9f8 	bl	8007da8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	695b      	ldr	r3, [r3, #20]
 80079be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079c2:	2b40      	cmp	r3, #64	; 0x40
 80079c4:	d141      	bne.n	8007a4a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	3314      	adds	r3, #20
 80079cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80079d4:	e853 3f00 	ldrex	r3, [r3]
 80079d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80079dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	3314      	adds	r3, #20
 80079ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80079f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80079f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80079fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007a02:	e841 2300 	strex	r3, r2, [r1]
 8007a06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007a0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d1d9      	bne.n	80079c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d013      	beq.n	8007a42 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a1e:	4a7d      	ldr	r2, [pc, #500]	; (8007c14 <HAL_UART_IRQHandler+0x3dc>)
 8007a20:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a26:	4618      	mov	r0, r3
 8007a28:	f7fd f928 	bl	8004c7c <HAL_DMA_Abort_IT>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d016      	beq.n	8007a60 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007a3c:	4610      	mov	r0, r2
 8007a3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a40:	e00e      	b.n	8007a60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 f99a 	bl	8007d7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a48:	e00a      	b.n	8007a60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 f996 	bl	8007d7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a50:	e006      	b.n	8007a60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 f992 	bl	8007d7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007a5e:	e170      	b.n	8007d42 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a60:	bf00      	nop
    return;
 8007a62:	e16e      	b.n	8007d42 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	f040 814a 	bne.w	8007d02 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a72:	f003 0310 	and.w	r3, r3, #16
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	f000 8143 	beq.w	8007d02 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007a7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a80:	f003 0310 	and.w	r3, r3, #16
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f000 813c 	beq.w	8007d02 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	60bb      	str	r3, [r7, #8]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	60bb      	str	r3, [r7, #8]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	60bb      	str	r3, [r7, #8]
 8007a9e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	695b      	ldr	r3, [r3, #20]
 8007aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aaa:	2b40      	cmp	r3, #64	; 0x40
 8007aac:	f040 80b4 	bne.w	8007c18 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007abc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	f000 8140 	beq.w	8007d46 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007aca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	f080 8139 	bcs.w	8007d46 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ada:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae0:	69db      	ldr	r3, [r3, #28]
 8007ae2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ae6:	f000 8088 	beq.w	8007bfa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	330c      	adds	r3, #12
 8007af0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007af8:	e853 3f00 	ldrex	r3, [r3]
 8007afc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007b00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	330c      	adds	r3, #12
 8007b12:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007b16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007b1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007b22:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007b26:	e841 2300 	strex	r3, r2, [r1]
 8007b2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007b2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d1d9      	bne.n	8007aea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	3314      	adds	r3, #20
 8007b3c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b40:	e853 3f00 	ldrex	r3, [r3]
 8007b44:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007b46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b48:	f023 0301 	bic.w	r3, r3, #1
 8007b4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	3314      	adds	r3, #20
 8007b56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007b5a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007b5e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b60:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007b62:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007b66:	e841 2300 	strex	r3, r2, [r1]
 8007b6a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007b6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d1e1      	bne.n	8007b36 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	3314      	adds	r3, #20
 8007b78:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b7c:	e853 3f00 	ldrex	r3, [r3]
 8007b80:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007b82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	3314      	adds	r3, #20
 8007b92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007b96:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007b98:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007b9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007b9e:	e841 2300 	strex	r3, r2, [r1]
 8007ba2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007ba4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d1e3      	bne.n	8007b72 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2220      	movs	r2, #32
 8007bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	330c      	adds	r3, #12
 8007bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bc2:	e853 3f00 	ldrex	r3, [r3]
 8007bc6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007bc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bca:	f023 0310 	bic.w	r3, r3, #16
 8007bce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	330c      	adds	r3, #12
 8007bd8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007bdc:	65ba      	str	r2, [r7, #88]	; 0x58
 8007bde:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007be2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007be4:	e841 2300 	strex	r3, r2, [r1]
 8007be8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007bea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d1e3      	bne.n	8007bb8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f7fc ffd1 	bl	8004b9c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	1ad3      	subs	r3, r2, r3
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	4619      	mov	r1, r3
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 f8c0 	bl	8007d90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007c10:	e099      	b.n	8007d46 <HAL_UART_IRQHandler+0x50e>
 8007c12:	bf00      	nop
 8007c14:	08007e6f 	.word	0x08007e6f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	1ad3      	subs	r3, r2, r3
 8007c24:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	f000 808b 	beq.w	8007d4a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007c34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	f000 8086 	beq.w	8007d4a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	330c      	adds	r3, #12
 8007c44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c48:	e853 3f00 	ldrex	r3, [r3]
 8007c4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	330c      	adds	r3, #12
 8007c5e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007c62:	647a      	str	r2, [r7, #68]	; 0x44
 8007c64:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c6a:	e841 2300 	strex	r3, r2, [r1]
 8007c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d1e3      	bne.n	8007c3e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	3314      	adds	r3, #20
 8007c7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c80:	e853 3f00 	ldrex	r3, [r3]
 8007c84:	623b      	str	r3, [r7, #32]
   return(result);
 8007c86:	6a3b      	ldr	r3, [r7, #32]
 8007c88:	f023 0301 	bic.w	r3, r3, #1
 8007c8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	3314      	adds	r3, #20
 8007c96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007c9a:	633a      	str	r2, [r7, #48]	; 0x30
 8007c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ca0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ca2:	e841 2300 	strex	r3, r2, [r1]
 8007ca6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d1e3      	bne.n	8007c76 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2220      	movs	r2, #32
 8007cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	330c      	adds	r3, #12
 8007cc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	e853 3f00 	ldrex	r3, [r3]
 8007cca:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f023 0310 	bic.w	r3, r3, #16
 8007cd2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	330c      	adds	r3, #12
 8007cdc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007ce0:	61fa      	str	r2, [r7, #28]
 8007ce2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce4:	69b9      	ldr	r1, [r7, #24]
 8007ce6:	69fa      	ldr	r2, [r7, #28]
 8007ce8:	e841 2300 	strex	r3, r2, [r1]
 8007cec:	617b      	str	r3, [r7, #20]
   return(result);
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d1e3      	bne.n	8007cbc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007cf4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 f848 	bl	8007d90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007d00:	e023      	b.n	8007d4a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d009      	beq.n	8007d22 <HAL_UART_IRQHandler+0x4ea>
 8007d0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d003      	beq.n	8007d22 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 f8bb 	bl	8007e96 <UART_Transmit_IT>
    return;
 8007d20:	e014      	b.n	8007d4c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d00e      	beq.n	8007d4c <HAL_UART_IRQHandler+0x514>
 8007d2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d008      	beq.n	8007d4c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 f8fb 	bl	8007f36 <UART_EndTransmit_IT>
    return;
 8007d40:	e004      	b.n	8007d4c <HAL_UART_IRQHandler+0x514>
    return;
 8007d42:	bf00      	nop
 8007d44:	e002      	b.n	8007d4c <HAL_UART_IRQHandler+0x514>
      return;
 8007d46:	bf00      	nop
 8007d48:	e000      	b.n	8007d4c <HAL_UART_IRQHandler+0x514>
      return;
 8007d4a:	bf00      	nop
  }
}
 8007d4c:	37e8      	adds	r7, #232	; 0xe8
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
 8007d52:	bf00      	nop

08007d54 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007d5c:	bf00      	nop
 8007d5e:	370c      	adds	r7, #12
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007d70:	bf00      	nop
 8007d72:	370c      	adds	r7, #12
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007d84:	bf00      	nop
 8007d86:	370c      	adds	r7, #12
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	460b      	mov	r3, r1
 8007d9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d9c:	bf00      	nop
 8007d9e:	370c      	adds	r7, #12
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b095      	sub	sp, #84	; 0x54
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	330c      	adds	r3, #12
 8007db6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dba:	e853 3f00 	ldrex	r3, [r3]
 8007dbe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	330c      	adds	r3, #12
 8007dce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007dd0:	643a      	str	r2, [r7, #64]	; 0x40
 8007dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007dd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007dd8:	e841 2300 	strex	r3, r2, [r1]
 8007ddc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d1e5      	bne.n	8007db0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	3314      	adds	r3, #20
 8007dea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dec:	6a3b      	ldr	r3, [r7, #32]
 8007dee:	e853 3f00 	ldrex	r3, [r3]
 8007df2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	f023 0301 	bic.w	r3, r3, #1
 8007dfa:	64bb      	str	r3, [r7, #72]	; 0x48
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	3314      	adds	r3, #20
 8007e02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e0c:	e841 2300 	strex	r3, r2, [r1]
 8007e10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d1e5      	bne.n	8007de4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d119      	bne.n	8007e54 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	330c      	adds	r3, #12
 8007e26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	e853 3f00 	ldrex	r3, [r3]
 8007e2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	f023 0310 	bic.w	r3, r3, #16
 8007e36:	647b      	str	r3, [r7, #68]	; 0x44
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	330c      	adds	r3, #12
 8007e3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e40:	61ba      	str	r2, [r7, #24]
 8007e42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e44:	6979      	ldr	r1, [r7, #20]
 8007e46:	69ba      	ldr	r2, [r7, #24]
 8007e48:	e841 2300 	strex	r3, r2, [r1]
 8007e4c:	613b      	str	r3, [r7, #16]
   return(result);
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1e5      	bne.n	8007e20 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2220      	movs	r2, #32
 8007e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007e62:	bf00      	nop
 8007e64:	3754      	adds	r7, #84	; 0x54
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr

08007e6e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e6e:	b580      	push	{r7, lr}
 8007e70:	b084      	sub	sp, #16
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2200      	movs	r2, #0
 8007e86:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e88:	68f8      	ldr	r0, [r7, #12]
 8007e8a:	f7ff ff77 	bl	8007d7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e8e:	bf00      	nop
 8007e90:	3710      	adds	r7, #16
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}

08007e96 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007e96:	b480      	push	{r7}
 8007e98:	b085      	sub	sp, #20
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	2b21      	cmp	r3, #33	; 0x21
 8007ea8:	d13e      	bne.n	8007f28 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007eb2:	d114      	bne.n	8007ede <UART_Transmit_IT+0x48>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	691b      	ldr	r3, [r3, #16]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d110      	bne.n	8007ede <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6a1b      	ldr	r3, [r3, #32]
 8007ec0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	881b      	ldrh	r3, [r3, #0]
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ed0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6a1b      	ldr	r3, [r3, #32]
 8007ed6:	1c9a      	adds	r2, r3, #2
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	621a      	str	r2, [r3, #32]
 8007edc:	e008      	b.n	8007ef0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a1b      	ldr	r3, [r3, #32]
 8007ee2:	1c59      	adds	r1, r3, #1
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	6211      	str	r1, [r2, #32]
 8007ee8:	781a      	ldrb	r2, [r3, #0]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	3b01      	subs	r3, #1
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	4619      	mov	r1, r3
 8007efe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d10f      	bne.n	8007f24 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	68da      	ldr	r2, [r3, #12]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f12:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	68da      	ldr	r2, [r3, #12]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f22:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007f24:	2300      	movs	r3, #0
 8007f26:	e000      	b.n	8007f2a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007f28:	2302      	movs	r3, #2
  }
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3714      	adds	r7, #20
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr

08007f36 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f36:	b580      	push	{r7, lr}
 8007f38:	b082      	sub	sp, #8
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	68da      	ldr	r2, [r3, #12]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f4c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2220      	movs	r2, #32
 8007f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f7ff fefc 	bl	8007d54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3708      	adds	r7, #8
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b08c      	sub	sp, #48	; 0x30
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	2b22      	cmp	r3, #34	; 0x22
 8007f78:	f040 80ab 	bne.w	80080d2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f84:	d117      	bne.n	8007fb6 <UART_Receive_IT+0x50>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	691b      	ldr	r3, [r3, #16]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d113      	bne.n	8007fb6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f96:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fa4:	b29a      	uxth	r2, r3
 8007fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fae:	1c9a      	adds	r2, r3, #2
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	629a      	str	r2, [r3, #40]	; 0x28
 8007fb4:	e026      	b.n	8008004 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fc8:	d007      	beq.n	8007fda <UART_Receive_IT+0x74>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d10a      	bne.n	8007fe8 <UART_Receive_IT+0x82>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	691b      	ldr	r3, [r3, #16]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d106      	bne.n	8007fe8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	b2da      	uxtb	r2, r3
 8007fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe4:	701a      	strb	r2, [r3, #0]
 8007fe6:	e008      	b.n	8007ffa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ff4:	b2da      	uxtb	r2, r3
 8007ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ffe:	1c5a      	adds	r2, r3, #1
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008008:	b29b      	uxth	r3, r3
 800800a:	3b01      	subs	r3, #1
 800800c:	b29b      	uxth	r3, r3
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	4619      	mov	r1, r3
 8008012:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008014:	2b00      	cmp	r3, #0
 8008016:	d15a      	bne.n	80080ce <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	68da      	ldr	r2, [r3, #12]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f022 0220 	bic.w	r2, r2, #32
 8008026:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	68da      	ldr	r2, [r3, #12]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008036:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	695a      	ldr	r2, [r3, #20]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f022 0201 	bic.w	r2, r2, #1
 8008046:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2220      	movs	r2, #32
 800804c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008054:	2b01      	cmp	r3, #1
 8008056:	d135      	bne.n	80080c4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	330c      	adds	r3, #12
 8008064:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	e853 3f00 	ldrex	r3, [r3]
 800806c:	613b      	str	r3, [r7, #16]
   return(result);
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	f023 0310 	bic.w	r3, r3, #16
 8008074:	627b      	str	r3, [r7, #36]	; 0x24
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	330c      	adds	r3, #12
 800807c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800807e:	623a      	str	r2, [r7, #32]
 8008080:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008082:	69f9      	ldr	r1, [r7, #28]
 8008084:	6a3a      	ldr	r2, [r7, #32]
 8008086:	e841 2300 	strex	r3, r2, [r1]
 800808a:	61bb      	str	r3, [r7, #24]
   return(result);
 800808c:	69bb      	ldr	r3, [r7, #24]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d1e5      	bne.n	800805e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f003 0310 	and.w	r3, r3, #16
 800809c:	2b10      	cmp	r3, #16
 800809e:	d10a      	bne.n	80080b6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80080a0:	2300      	movs	r3, #0
 80080a2:	60fb      	str	r3, [r7, #12]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	60fb      	str	r3, [r7, #12]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	60fb      	str	r3, [r7, #12]
 80080b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80080ba:	4619      	mov	r1, r3
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f7ff fe67 	bl	8007d90 <HAL_UARTEx_RxEventCallback>
 80080c2:	e002      	b.n	80080ca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f7ff fe4f 	bl	8007d68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80080ca:	2300      	movs	r3, #0
 80080cc:	e002      	b.n	80080d4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80080ce:	2300      	movs	r3, #0
 80080d0:	e000      	b.n	80080d4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80080d2:	2302      	movs	r3, #2
  }
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3730      	adds	r7, #48	; 0x30
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}

080080dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080e0:	b0c0      	sub	sp, #256	; 0x100
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	691b      	ldr	r3, [r3, #16]
 80080f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80080f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080f8:	68d9      	ldr	r1, [r3, #12]
 80080fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080fe:	681a      	ldr	r2, [r3, #0]
 8008100:	ea40 0301 	orr.w	r3, r0, r1
 8008104:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800810a:	689a      	ldr	r2, [r3, #8]
 800810c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008110:	691b      	ldr	r3, [r3, #16]
 8008112:	431a      	orrs	r2, r3
 8008114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008118:	695b      	ldr	r3, [r3, #20]
 800811a:	431a      	orrs	r2, r3
 800811c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008120:	69db      	ldr	r3, [r3, #28]
 8008122:	4313      	orrs	r3, r2
 8008124:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	68db      	ldr	r3, [r3, #12]
 8008130:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008134:	f021 010c 	bic.w	r1, r1, #12
 8008138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008142:	430b      	orrs	r3, r1
 8008144:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	695b      	ldr	r3, [r3, #20]
 800814e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008156:	6999      	ldr	r1, [r3, #24]
 8008158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	ea40 0301 	orr.w	r3, r0, r1
 8008162:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	4b8f      	ldr	r3, [pc, #572]	; (80083a8 <UART_SetConfig+0x2cc>)
 800816c:	429a      	cmp	r2, r3
 800816e:	d005      	beq.n	800817c <UART_SetConfig+0xa0>
 8008170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	4b8d      	ldr	r3, [pc, #564]	; (80083ac <UART_SetConfig+0x2d0>)
 8008178:	429a      	cmp	r2, r3
 800817a:	d104      	bne.n	8008186 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800817c:	f7fd fc84 	bl	8005a88 <HAL_RCC_GetPCLK2Freq>
 8008180:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008184:	e003      	b.n	800818e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008186:	f7fd fc6b 	bl	8005a60 <HAL_RCC_GetPCLK1Freq>
 800818a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800818e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008192:	69db      	ldr	r3, [r3, #28]
 8008194:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008198:	f040 810c 	bne.w	80083b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800819c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081a0:	2200      	movs	r2, #0
 80081a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80081a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80081aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80081ae:	4622      	mov	r2, r4
 80081b0:	462b      	mov	r3, r5
 80081b2:	1891      	adds	r1, r2, r2
 80081b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80081b6:	415b      	adcs	r3, r3
 80081b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80081be:	4621      	mov	r1, r4
 80081c0:	eb12 0801 	adds.w	r8, r2, r1
 80081c4:	4629      	mov	r1, r5
 80081c6:	eb43 0901 	adc.w	r9, r3, r1
 80081ca:	f04f 0200 	mov.w	r2, #0
 80081ce:	f04f 0300 	mov.w	r3, #0
 80081d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80081d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80081da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80081de:	4690      	mov	r8, r2
 80081e0:	4699      	mov	r9, r3
 80081e2:	4623      	mov	r3, r4
 80081e4:	eb18 0303 	adds.w	r3, r8, r3
 80081e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80081ec:	462b      	mov	r3, r5
 80081ee:	eb49 0303 	adc.w	r3, r9, r3
 80081f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80081f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	2200      	movs	r2, #0
 80081fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008202:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008206:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800820a:	460b      	mov	r3, r1
 800820c:	18db      	adds	r3, r3, r3
 800820e:	653b      	str	r3, [r7, #80]	; 0x50
 8008210:	4613      	mov	r3, r2
 8008212:	eb42 0303 	adc.w	r3, r2, r3
 8008216:	657b      	str	r3, [r7, #84]	; 0x54
 8008218:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800821c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008220:	f7f8 fc64 	bl	8000aec <__aeabi_uldivmod>
 8008224:	4602      	mov	r2, r0
 8008226:	460b      	mov	r3, r1
 8008228:	4b61      	ldr	r3, [pc, #388]	; (80083b0 <UART_SetConfig+0x2d4>)
 800822a:	fba3 2302 	umull	r2, r3, r3, r2
 800822e:	095b      	lsrs	r3, r3, #5
 8008230:	011c      	lsls	r4, r3, #4
 8008232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008236:	2200      	movs	r2, #0
 8008238:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800823c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008240:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008244:	4642      	mov	r2, r8
 8008246:	464b      	mov	r3, r9
 8008248:	1891      	adds	r1, r2, r2
 800824a:	64b9      	str	r1, [r7, #72]	; 0x48
 800824c:	415b      	adcs	r3, r3
 800824e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008250:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008254:	4641      	mov	r1, r8
 8008256:	eb12 0a01 	adds.w	sl, r2, r1
 800825a:	4649      	mov	r1, r9
 800825c:	eb43 0b01 	adc.w	fp, r3, r1
 8008260:	f04f 0200 	mov.w	r2, #0
 8008264:	f04f 0300 	mov.w	r3, #0
 8008268:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800826c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008270:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008274:	4692      	mov	sl, r2
 8008276:	469b      	mov	fp, r3
 8008278:	4643      	mov	r3, r8
 800827a:	eb1a 0303 	adds.w	r3, sl, r3
 800827e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008282:	464b      	mov	r3, r9
 8008284:	eb4b 0303 	adc.w	r3, fp, r3
 8008288:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800828c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008298:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800829c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80082a0:	460b      	mov	r3, r1
 80082a2:	18db      	adds	r3, r3, r3
 80082a4:	643b      	str	r3, [r7, #64]	; 0x40
 80082a6:	4613      	mov	r3, r2
 80082a8:	eb42 0303 	adc.w	r3, r2, r3
 80082ac:	647b      	str	r3, [r7, #68]	; 0x44
 80082ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80082b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80082b6:	f7f8 fc19 	bl	8000aec <__aeabi_uldivmod>
 80082ba:	4602      	mov	r2, r0
 80082bc:	460b      	mov	r3, r1
 80082be:	4611      	mov	r1, r2
 80082c0:	4b3b      	ldr	r3, [pc, #236]	; (80083b0 <UART_SetConfig+0x2d4>)
 80082c2:	fba3 2301 	umull	r2, r3, r3, r1
 80082c6:	095b      	lsrs	r3, r3, #5
 80082c8:	2264      	movs	r2, #100	; 0x64
 80082ca:	fb02 f303 	mul.w	r3, r2, r3
 80082ce:	1acb      	subs	r3, r1, r3
 80082d0:	00db      	lsls	r3, r3, #3
 80082d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80082d6:	4b36      	ldr	r3, [pc, #216]	; (80083b0 <UART_SetConfig+0x2d4>)
 80082d8:	fba3 2302 	umull	r2, r3, r3, r2
 80082dc:	095b      	lsrs	r3, r3, #5
 80082de:	005b      	lsls	r3, r3, #1
 80082e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80082e4:	441c      	add	r4, r3
 80082e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082ea:	2200      	movs	r2, #0
 80082ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80082f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80082f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80082f8:	4642      	mov	r2, r8
 80082fa:	464b      	mov	r3, r9
 80082fc:	1891      	adds	r1, r2, r2
 80082fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8008300:	415b      	adcs	r3, r3
 8008302:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008304:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008308:	4641      	mov	r1, r8
 800830a:	1851      	adds	r1, r2, r1
 800830c:	6339      	str	r1, [r7, #48]	; 0x30
 800830e:	4649      	mov	r1, r9
 8008310:	414b      	adcs	r3, r1
 8008312:	637b      	str	r3, [r7, #52]	; 0x34
 8008314:	f04f 0200 	mov.w	r2, #0
 8008318:	f04f 0300 	mov.w	r3, #0
 800831c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008320:	4659      	mov	r1, fp
 8008322:	00cb      	lsls	r3, r1, #3
 8008324:	4651      	mov	r1, sl
 8008326:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800832a:	4651      	mov	r1, sl
 800832c:	00ca      	lsls	r2, r1, #3
 800832e:	4610      	mov	r0, r2
 8008330:	4619      	mov	r1, r3
 8008332:	4603      	mov	r3, r0
 8008334:	4642      	mov	r2, r8
 8008336:	189b      	adds	r3, r3, r2
 8008338:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800833c:	464b      	mov	r3, r9
 800833e:	460a      	mov	r2, r1
 8008340:	eb42 0303 	adc.w	r3, r2, r3
 8008344:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008354:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008358:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800835c:	460b      	mov	r3, r1
 800835e:	18db      	adds	r3, r3, r3
 8008360:	62bb      	str	r3, [r7, #40]	; 0x28
 8008362:	4613      	mov	r3, r2
 8008364:	eb42 0303 	adc.w	r3, r2, r3
 8008368:	62fb      	str	r3, [r7, #44]	; 0x2c
 800836a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800836e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008372:	f7f8 fbbb 	bl	8000aec <__aeabi_uldivmod>
 8008376:	4602      	mov	r2, r0
 8008378:	460b      	mov	r3, r1
 800837a:	4b0d      	ldr	r3, [pc, #52]	; (80083b0 <UART_SetConfig+0x2d4>)
 800837c:	fba3 1302 	umull	r1, r3, r3, r2
 8008380:	095b      	lsrs	r3, r3, #5
 8008382:	2164      	movs	r1, #100	; 0x64
 8008384:	fb01 f303 	mul.w	r3, r1, r3
 8008388:	1ad3      	subs	r3, r2, r3
 800838a:	00db      	lsls	r3, r3, #3
 800838c:	3332      	adds	r3, #50	; 0x32
 800838e:	4a08      	ldr	r2, [pc, #32]	; (80083b0 <UART_SetConfig+0x2d4>)
 8008390:	fba2 2303 	umull	r2, r3, r2, r3
 8008394:	095b      	lsrs	r3, r3, #5
 8008396:	f003 0207 	and.w	r2, r3, #7
 800839a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4422      	add	r2, r4
 80083a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80083a4:	e106      	b.n	80085b4 <UART_SetConfig+0x4d8>
 80083a6:	bf00      	nop
 80083a8:	40011000 	.word	0x40011000
 80083ac:	40011400 	.word	0x40011400
 80083b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80083b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083b8:	2200      	movs	r2, #0
 80083ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80083be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80083c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80083c6:	4642      	mov	r2, r8
 80083c8:	464b      	mov	r3, r9
 80083ca:	1891      	adds	r1, r2, r2
 80083cc:	6239      	str	r1, [r7, #32]
 80083ce:	415b      	adcs	r3, r3
 80083d0:	627b      	str	r3, [r7, #36]	; 0x24
 80083d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80083d6:	4641      	mov	r1, r8
 80083d8:	1854      	adds	r4, r2, r1
 80083da:	4649      	mov	r1, r9
 80083dc:	eb43 0501 	adc.w	r5, r3, r1
 80083e0:	f04f 0200 	mov.w	r2, #0
 80083e4:	f04f 0300 	mov.w	r3, #0
 80083e8:	00eb      	lsls	r3, r5, #3
 80083ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80083ee:	00e2      	lsls	r2, r4, #3
 80083f0:	4614      	mov	r4, r2
 80083f2:	461d      	mov	r5, r3
 80083f4:	4643      	mov	r3, r8
 80083f6:	18e3      	adds	r3, r4, r3
 80083f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80083fc:	464b      	mov	r3, r9
 80083fe:	eb45 0303 	adc.w	r3, r5, r3
 8008402:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008412:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008416:	f04f 0200 	mov.w	r2, #0
 800841a:	f04f 0300 	mov.w	r3, #0
 800841e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008422:	4629      	mov	r1, r5
 8008424:	008b      	lsls	r3, r1, #2
 8008426:	4621      	mov	r1, r4
 8008428:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800842c:	4621      	mov	r1, r4
 800842e:	008a      	lsls	r2, r1, #2
 8008430:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008434:	f7f8 fb5a 	bl	8000aec <__aeabi_uldivmod>
 8008438:	4602      	mov	r2, r0
 800843a:	460b      	mov	r3, r1
 800843c:	4b60      	ldr	r3, [pc, #384]	; (80085c0 <UART_SetConfig+0x4e4>)
 800843e:	fba3 2302 	umull	r2, r3, r3, r2
 8008442:	095b      	lsrs	r3, r3, #5
 8008444:	011c      	lsls	r4, r3, #4
 8008446:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800844a:	2200      	movs	r2, #0
 800844c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008450:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008454:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008458:	4642      	mov	r2, r8
 800845a:	464b      	mov	r3, r9
 800845c:	1891      	adds	r1, r2, r2
 800845e:	61b9      	str	r1, [r7, #24]
 8008460:	415b      	adcs	r3, r3
 8008462:	61fb      	str	r3, [r7, #28]
 8008464:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008468:	4641      	mov	r1, r8
 800846a:	1851      	adds	r1, r2, r1
 800846c:	6139      	str	r1, [r7, #16]
 800846e:	4649      	mov	r1, r9
 8008470:	414b      	adcs	r3, r1
 8008472:	617b      	str	r3, [r7, #20]
 8008474:	f04f 0200 	mov.w	r2, #0
 8008478:	f04f 0300 	mov.w	r3, #0
 800847c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008480:	4659      	mov	r1, fp
 8008482:	00cb      	lsls	r3, r1, #3
 8008484:	4651      	mov	r1, sl
 8008486:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800848a:	4651      	mov	r1, sl
 800848c:	00ca      	lsls	r2, r1, #3
 800848e:	4610      	mov	r0, r2
 8008490:	4619      	mov	r1, r3
 8008492:	4603      	mov	r3, r0
 8008494:	4642      	mov	r2, r8
 8008496:	189b      	adds	r3, r3, r2
 8008498:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800849c:	464b      	mov	r3, r9
 800849e:	460a      	mov	r2, r1
 80084a0:	eb42 0303 	adc.w	r3, r2, r3
 80084a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80084a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	2200      	movs	r2, #0
 80084b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80084b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80084b4:	f04f 0200 	mov.w	r2, #0
 80084b8:	f04f 0300 	mov.w	r3, #0
 80084bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80084c0:	4649      	mov	r1, r9
 80084c2:	008b      	lsls	r3, r1, #2
 80084c4:	4641      	mov	r1, r8
 80084c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084ca:	4641      	mov	r1, r8
 80084cc:	008a      	lsls	r2, r1, #2
 80084ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80084d2:	f7f8 fb0b 	bl	8000aec <__aeabi_uldivmod>
 80084d6:	4602      	mov	r2, r0
 80084d8:	460b      	mov	r3, r1
 80084da:	4611      	mov	r1, r2
 80084dc:	4b38      	ldr	r3, [pc, #224]	; (80085c0 <UART_SetConfig+0x4e4>)
 80084de:	fba3 2301 	umull	r2, r3, r3, r1
 80084e2:	095b      	lsrs	r3, r3, #5
 80084e4:	2264      	movs	r2, #100	; 0x64
 80084e6:	fb02 f303 	mul.w	r3, r2, r3
 80084ea:	1acb      	subs	r3, r1, r3
 80084ec:	011b      	lsls	r3, r3, #4
 80084ee:	3332      	adds	r3, #50	; 0x32
 80084f0:	4a33      	ldr	r2, [pc, #204]	; (80085c0 <UART_SetConfig+0x4e4>)
 80084f2:	fba2 2303 	umull	r2, r3, r2, r3
 80084f6:	095b      	lsrs	r3, r3, #5
 80084f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084fc:	441c      	add	r4, r3
 80084fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008502:	2200      	movs	r2, #0
 8008504:	673b      	str	r3, [r7, #112]	; 0x70
 8008506:	677a      	str	r2, [r7, #116]	; 0x74
 8008508:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800850c:	4642      	mov	r2, r8
 800850e:	464b      	mov	r3, r9
 8008510:	1891      	adds	r1, r2, r2
 8008512:	60b9      	str	r1, [r7, #8]
 8008514:	415b      	adcs	r3, r3
 8008516:	60fb      	str	r3, [r7, #12]
 8008518:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800851c:	4641      	mov	r1, r8
 800851e:	1851      	adds	r1, r2, r1
 8008520:	6039      	str	r1, [r7, #0]
 8008522:	4649      	mov	r1, r9
 8008524:	414b      	adcs	r3, r1
 8008526:	607b      	str	r3, [r7, #4]
 8008528:	f04f 0200 	mov.w	r2, #0
 800852c:	f04f 0300 	mov.w	r3, #0
 8008530:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008534:	4659      	mov	r1, fp
 8008536:	00cb      	lsls	r3, r1, #3
 8008538:	4651      	mov	r1, sl
 800853a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800853e:	4651      	mov	r1, sl
 8008540:	00ca      	lsls	r2, r1, #3
 8008542:	4610      	mov	r0, r2
 8008544:	4619      	mov	r1, r3
 8008546:	4603      	mov	r3, r0
 8008548:	4642      	mov	r2, r8
 800854a:	189b      	adds	r3, r3, r2
 800854c:	66bb      	str	r3, [r7, #104]	; 0x68
 800854e:	464b      	mov	r3, r9
 8008550:	460a      	mov	r2, r1
 8008552:	eb42 0303 	adc.w	r3, r2, r3
 8008556:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	663b      	str	r3, [r7, #96]	; 0x60
 8008562:	667a      	str	r2, [r7, #100]	; 0x64
 8008564:	f04f 0200 	mov.w	r2, #0
 8008568:	f04f 0300 	mov.w	r3, #0
 800856c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008570:	4649      	mov	r1, r9
 8008572:	008b      	lsls	r3, r1, #2
 8008574:	4641      	mov	r1, r8
 8008576:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800857a:	4641      	mov	r1, r8
 800857c:	008a      	lsls	r2, r1, #2
 800857e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008582:	f7f8 fab3 	bl	8000aec <__aeabi_uldivmod>
 8008586:	4602      	mov	r2, r0
 8008588:	460b      	mov	r3, r1
 800858a:	4b0d      	ldr	r3, [pc, #52]	; (80085c0 <UART_SetConfig+0x4e4>)
 800858c:	fba3 1302 	umull	r1, r3, r3, r2
 8008590:	095b      	lsrs	r3, r3, #5
 8008592:	2164      	movs	r1, #100	; 0x64
 8008594:	fb01 f303 	mul.w	r3, r1, r3
 8008598:	1ad3      	subs	r3, r2, r3
 800859a:	011b      	lsls	r3, r3, #4
 800859c:	3332      	adds	r3, #50	; 0x32
 800859e:	4a08      	ldr	r2, [pc, #32]	; (80085c0 <UART_SetConfig+0x4e4>)
 80085a0:	fba2 2303 	umull	r2, r3, r2, r3
 80085a4:	095b      	lsrs	r3, r3, #5
 80085a6:	f003 020f 	and.w	r2, r3, #15
 80085aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4422      	add	r2, r4
 80085b2:	609a      	str	r2, [r3, #8]
}
 80085b4:	bf00      	nop
 80085b6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80085ba:	46bd      	mov	sp, r7
 80085bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085c0:	51eb851f 	.word	0x51eb851f

080085c4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b085      	sub	sp, #20
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	4603      	mov	r3, r0
 80085cc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80085ce:	2300      	movs	r3, #0
 80085d0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80085d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80085d6:	2b84      	cmp	r3, #132	; 0x84
 80085d8:	d005      	beq.n	80085e6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80085da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	4413      	add	r3, r2
 80085e2:	3303      	adds	r3, #3
 80085e4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80085e6:	68fb      	ldr	r3, [r7, #12]
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3714      	adds	r7, #20
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr

080085f4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80085f8:	f000 faf6 	bl	8008be8 <vTaskStartScheduler>
  
  return osOK;
 80085fc:	2300      	movs	r3, #0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	bd80      	pop	{r7, pc}

08008602 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008602:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008604:	b089      	sub	sp, #36	; 0x24
 8008606:	af04      	add	r7, sp, #16
 8008608:	6078      	str	r0, [r7, #4]
 800860a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	695b      	ldr	r3, [r3, #20]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d020      	beq.n	8008656 <osThreadCreate+0x54>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	699b      	ldr	r3, [r3, #24]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d01c      	beq.n	8008656 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	685c      	ldr	r4, [r3, #4]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	691e      	ldr	r6, [r3, #16]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800862e:	4618      	mov	r0, r3
 8008630:	f7ff ffc8 	bl	80085c4 <makeFreeRtosPriority>
 8008634:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	695b      	ldr	r3, [r3, #20]
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800863e:	9202      	str	r2, [sp, #8]
 8008640:	9301      	str	r3, [sp, #4]
 8008642:	9100      	str	r1, [sp, #0]
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	4632      	mov	r2, r6
 8008648:	4629      	mov	r1, r5
 800864a:	4620      	mov	r0, r4
 800864c:	f000 f8ed 	bl	800882a <xTaskCreateStatic>
 8008650:	4603      	mov	r3, r0
 8008652:	60fb      	str	r3, [r7, #12]
 8008654:	e01c      	b.n	8008690 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	685c      	ldr	r4, [r3, #4]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008662:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800866a:	4618      	mov	r0, r3
 800866c:	f7ff ffaa 	bl	80085c4 <makeFreeRtosPriority>
 8008670:	4602      	mov	r2, r0
 8008672:	f107 030c 	add.w	r3, r7, #12
 8008676:	9301      	str	r3, [sp, #4]
 8008678:	9200      	str	r2, [sp, #0]
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	4632      	mov	r2, r6
 800867e:	4629      	mov	r1, r5
 8008680:	4620      	mov	r0, r4
 8008682:	f000 f92f 	bl	80088e4 <xTaskCreate>
 8008686:	4603      	mov	r3, r0
 8008688:	2b01      	cmp	r3, #1
 800868a:	d001      	beq.n	8008690 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800868c:	2300      	movs	r3, #0
 800868e:	e000      	b.n	8008692 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008690:	68fb      	ldr	r3, [r7, #12]
}
 8008692:	4618      	mov	r0, r3
 8008694:	3714      	adds	r7, #20
 8008696:	46bd      	mov	sp, r7
 8008698:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800869a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800869a:	b580      	push	{r7, lr}
 800869c:	b084      	sub	sp, #16
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d001      	beq.n	80086b0 <osDelay+0x16>
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	e000      	b.n	80086b2 <osDelay+0x18>
 80086b0:	2301      	movs	r3, #1
 80086b2:	4618      	mov	r0, r3
 80086b4:	f000 fa64 	bl	8008b80 <vTaskDelay>
  
  return osOK;
 80086b8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3710      	adds	r7, #16
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}

080086c2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80086c2:	b480      	push	{r7}
 80086c4:	b083      	sub	sp, #12
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f103 0208 	add.w	r2, r3, #8
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f04f 32ff 	mov.w	r2, #4294967295
 80086da:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f103 0208 	add.w	r2, r3, #8
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f103 0208 	add.w	r2, r3, #8
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2200      	movs	r2, #0
 80086f4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80086f6:	bf00      	nop
 80086f8:	370c      	adds	r7, #12
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr

08008702 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008702:	b480      	push	{r7}
 8008704:	b083      	sub	sp, #12
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2200      	movs	r2, #0
 800870e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008710:	bf00      	nop
 8008712:	370c      	adds	r7, #12
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800871c:	b480      	push	{r7}
 800871e:	b085      	sub	sp, #20
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	68fa      	ldr	r2, [r7, #12]
 8008730:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	689a      	ldr	r2, [r3, #8]
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	683a      	ldr	r2, [r7, #0]
 8008740:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	683a      	ldr	r2, [r7, #0]
 8008746:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	1c5a      	adds	r2, r3, #1
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	601a      	str	r2, [r3, #0]
}
 8008758:	bf00      	nop
 800875a:	3714      	adds	r7, #20
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr

08008764 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008764:	b480      	push	{r7}
 8008766:	b085      	sub	sp, #20
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800877a:	d103      	bne.n	8008784 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	691b      	ldr	r3, [r3, #16]
 8008780:	60fb      	str	r3, [r7, #12]
 8008782:	e00c      	b.n	800879e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	3308      	adds	r3, #8
 8008788:	60fb      	str	r3, [r7, #12]
 800878a:	e002      	b.n	8008792 <vListInsert+0x2e>
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	60fb      	str	r3, [r7, #12]
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	68ba      	ldr	r2, [r7, #8]
 800879a:	429a      	cmp	r2, r3
 800879c:	d2f6      	bcs.n	800878c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	685a      	ldr	r2, [r3, #4]
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	683a      	ldr	r2, [r7, #0]
 80087ac:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	68fa      	ldr	r2, [r7, #12]
 80087b2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	683a      	ldr	r2, [r7, #0]
 80087b8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	1c5a      	adds	r2, r3, #1
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	601a      	str	r2, [r3, #0]
}
 80087ca:	bf00      	nop
 80087cc:	3714      	adds	r7, #20
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr

080087d6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80087d6:	b480      	push	{r7}
 80087d8:	b085      	sub	sp, #20
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	691b      	ldr	r3, [r3, #16]
 80087e2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	6892      	ldr	r2, [r2, #8]
 80087ec:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	6852      	ldr	r2, [r2, #4]
 80087f6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	687a      	ldr	r2, [r7, #4]
 80087fe:	429a      	cmp	r2, r3
 8008800:	d103      	bne.n	800880a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	689a      	ldr	r2, [r3, #8]
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	1e5a      	subs	r2, r3, #1
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
}
 800881e:	4618      	mov	r0, r3
 8008820:	3714      	adds	r7, #20
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr

0800882a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800882a:	b580      	push	{r7, lr}
 800882c:	b08e      	sub	sp, #56	; 0x38
 800882e:	af04      	add	r7, sp, #16
 8008830:	60f8      	str	r0, [r7, #12]
 8008832:	60b9      	str	r1, [r7, #8]
 8008834:	607a      	str	r2, [r7, #4]
 8008836:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800883a:	2b00      	cmp	r3, #0
 800883c:	d10a      	bne.n	8008854 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800883e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008842:	f383 8811 	msr	BASEPRI, r3
 8008846:	f3bf 8f6f 	isb	sy
 800884a:	f3bf 8f4f 	dsb	sy
 800884e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008850:	bf00      	nop
 8008852:	e7fe      	b.n	8008852 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008856:	2b00      	cmp	r3, #0
 8008858:	d10a      	bne.n	8008870 <xTaskCreateStatic+0x46>
	__asm volatile
 800885a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800885e:	f383 8811 	msr	BASEPRI, r3
 8008862:	f3bf 8f6f 	isb	sy
 8008866:	f3bf 8f4f 	dsb	sy
 800886a:	61fb      	str	r3, [r7, #28]
}
 800886c:	bf00      	nop
 800886e:	e7fe      	b.n	800886e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008870:	23a0      	movs	r3, #160	; 0xa0
 8008872:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	2ba0      	cmp	r3, #160	; 0xa0
 8008878:	d00a      	beq.n	8008890 <xTaskCreateStatic+0x66>
	__asm volatile
 800887a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800887e:	f383 8811 	msr	BASEPRI, r3
 8008882:	f3bf 8f6f 	isb	sy
 8008886:	f3bf 8f4f 	dsb	sy
 800888a:	61bb      	str	r3, [r7, #24]
}
 800888c:	bf00      	nop
 800888e:	e7fe      	b.n	800888e <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008890:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008894:	2b00      	cmp	r3, #0
 8008896:	d01e      	beq.n	80088d6 <xTaskCreateStatic+0xac>
 8008898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800889a:	2b00      	cmp	r3, #0
 800889c:	d01b      	beq.n	80088d6 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800889e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80088a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088a6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80088a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088aa:	2202      	movs	r2, #2
 80088ac:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80088b0:	2300      	movs	r3, #0
 80088b2:	9303      	str	r3, [sp, #12]
 80088b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b6:	9302      	str	r3, [sp, #8]
 80088b8:	f107 0314 	add.w	r3, r7, #20
 80088bc:	9301      	str	r3, [sp, #4]
 80088be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c0:	9300      	str	r3, [sp, #0]
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	68b9      	ldr	r1, [r7, #8]
 80088c8:	68f8      	ldr	r0, [r7, #12]
 80088ca:	f000 f851 	bl	8008970 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80088ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80088d0:	f000 f8ec 	bl	8008aac <prvAddNewTaskToReadyList>
 80088d4:	e001      	b.n	80088da <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80088d6:	2300      	movs	r3, #0
 80088d8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80088da:	697b      	ldr	r3, [r7, #20]
	}
 80088dc:	4618      	mov	r0, r3
 80088de:	3728      	adds	r7, #40	; 0x28
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b08c      	sub	sp, #48	; 0x30
 80088e8:	af04      	add	r7, sp, #16
 80088ea:	60f8      	str	r0, [r7, #12]
 80088ec:	60b9      	str	r1, [r7, #8]
 80088ee:	603b      	str	r3, [r7, #0]
 80088f0:	4613      	mov	r3, r2
 80088f2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80088f4:	88fb      	ldrh	r3, [r7, #6]
 80088f6:	009b      	lsls	r3, r3, #2
 80088f8:	4618      	mov	r0, r3
 80088fa:	f000 fef5 	bl	80096e8 <pvPortMalloc>
 80088fe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d00e      	beq.n	8008924 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008906:	20a0      	movs	r0, #160	; 0xa0
 8008908:	f000 feee 	bl	80096e8 <pvPortMalloc>
 800890c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800890e:	69fb      	ldr	r3, [r7, #28]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d003      	beq.n	800891c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008914:	69fb      	ldr	r3, [r7, #28]
 8008916:	697a      	ldr	r2, [r7, #20]
 8008918:	631a      	str	r2, [r3, #48]	; 0x30
 800891a:	e005      	b.n	8008928 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800891c:	6978      	ldr	r0, [r7, #20]
 800891e:	f000 ffaf 	bl	8009880 <vPortFree>
 8008922:	e001      	b.n	8008928 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008924:	2300      	movs	r3, #0
 8008926:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008928:	69fb      	ldr	r3, [r7, #28]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d017      	beq.n	800895e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800892e:	69fb      	ldr	r3, [r7, #28]
 8008930:	2200      	movs	r2, #0
 8008932:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008936:	88fa      	ldrh	r2, [r7, #6]
 8008938:	2300      	movs	r3, #0
 800893a:	9303      	str	r3, [sp, #12]
 800893c:	69fb      	ldr	r3, [r7, #28]
 800893e:	9302      	str	r3, [sp, #8]
 8008940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008942:	9301      	str	r3, [sp, #4]
 8008944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008946:	9300      	str	r3, [sp, #0]
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	68b9      	ldr	r1, [r7, #8]
 800894c:	68f8      	ldr	r0, [r7, #12]
 800894e:	f000 f80f 	bl	8008970 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008952:	69f8      	ldr	r0, [r7, #28]
 8008954:	f000 f8aa 	bl	8008aac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008958:	2301      	movs	r3, #1
 800895a:	61bb      	str	r3, [r7, #24]
 800895c:	e002      	b.n	8008964 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800895e:	f04f 33ff 	mov.w	r3, #4294967295
 8008962:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008964:	69bb      	ldr	r3, [r7, #24]
	}
 8008966:	4618      	mov	r0, r3
 8008968:	3720      	adds	r7, #32
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
	...

08008970 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b088      	sub	sp, #32
 8008974:	af00      	add	r7, sp, #0
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	607a      	str	r2, [r7, #4]
 800897c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800897e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008980:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008988:	3b01      	subs	r3, #1
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	4413      	add	r3, r2
 800898e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	f023 0307 	bic.w	r3, r3, #7
 8008996:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008998:	69bb      	ldr	r3, [r7, #24]
 800899a:	f003 0307 	and.w	r3, r3, #7
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d00a      	beq.n	80089b8 <prvInitialiseNewTask+0x48>
	__asm volatile
 80089a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a6:	f383 8811 	msr	BASEPRI, r3
 80089aa:	f3bf 8f6f 	isb	sy
 80089ae:	f3bf 8f4f 	dsb	sy
 80089b2:	617b      	str	r3, [r7, #20]
}
 80089b4:	bf00      	nop
 80089b6:	e7fe      	b.n	80089b6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d01f      	beq.n	80089fe <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80089be:	2300      	movs	r3, #0
 80089c0:	61fb      	str	r3, [r7, #28]
 80089c2:	e012      	b.n	80089ea <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80089c4:	68ba      	ldr	r2, [r7, #8]
 80089c6:	69fb      	ldr	r3, [r7, #28]
 80089c8:	4413      	add	r3, r2
 80089ca:	7819      	ldrb	r1, [r3, #0]
 80089cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089ce:	69fb      	ldr	r3, [r7, #28]
 80089d0:	4413      	add	r3, r2
 80089d2:	3334      	adds	r3, #52	; 0x34
 80089d4:	460a      	mov	r2, r1
 80089d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80089d8:	68ba      	ldr	r2, [r7, #8]
 80089da:	69fb      	ldr	r3, [r7, #28]
 80089dc:	4413      	add	r3, r2
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d006      	beq.n	80089f2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80089e4:	69fb      	ldr	r3, [r7, #28]
 80089e6:	3301      	adds	r3, #1
 80089e8:	61fb      	str	r3, [r7, #28]
 80089ea:	69fb      	ldr	r3, [r7, #28]
 80089ec:	2b0f      	cmp	r3, #15
 80089ee:	d9e9      	bls.n	80089c4 <prvInitialiseNewTask+0x54>
 80089f0:	e000      	b.n	80089f4 <prvInitialiseNewTask+0x84>
			{
				break;
 80089f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80089f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f6:	2200      	movs	r2, #0
 80089f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80089fc:	e003      	b.n	8008a06 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80089fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a00:	2200      	movs	r2, #0
 8008a02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a08:	2b06      	cmp	r3, #6
 8008a0a:	d901      	bls.n	8008a10 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008a0c:	2306      	movs	r3, #6
 8008a0e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a14:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a1a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a1e:	2200      	movs	r2, #0
 8008a20:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a24:	3304      	adds	r3, #4
 8008a26:	4618      	mov	r0, r3
 8008a28:	f7ff fe6b 	bl	8008702 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a2e:	3318      	adds	r3, #24
 8008a30:	4618      	mov	r0, r3
 8008a32:	f7ff fe66 	bl	8008702 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a3a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a3e:	f1c3 0207 	rsb	r2, r3, #7
 8008a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a44:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a4a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a56:	2200      	movs	r2, #0
 8008a58:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a5e:	334c      	adds	r3, #76	; 0x4c
 8008a60:	224c      	movs	r2, #76	; 0x4c
 8008a62:	2100      	movs	r1, #0
 8008a64:	4618      	mov	r0, r3
 8008a66:	f001 f829 	bl	8009abc <memset>
 8008a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a6c:	4a0c      	ldr	r2, [pc, #48]	; (8008aa0 <prvInitialiseNewTask+0x130>)
 8008a6e:	651a      	str	r2, [r3, #80]	; 0x50
 8008a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a72:	4a0c      	ldr	r2, [pc, #48]	; (8008aa4 <prvInitialiseNewTask+0x134>)
 8008a74:	655a      	str	r2, [r3, #84]	; 0x54
 8008a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a78:	4a0b      	ldr	r2, [pc, #44]	; (8008aa8 <prvInitialiseNewTask+0x138>)
 8008a7a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008a7c:	683a      	ldr	r2, [r7, #0]
 8008a7e:	68f9      	ldr	r1, [r7, #12]
 8008a80:	69b8      	ldr	r0, [r7, #24]
 8008a82:	f000 fc1f 	bl	80092c4 <pxPortInitialiseStack>
 8008a86:	4602      	mov	r2, r0
 8008a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a8a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d002      	beq.n	8008a98 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a96:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a98:	bf00      	nop
 8008a9a:	3720      	adds	r7, #32
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}
 8008aa0:	20004598 	.word	0x20004598
 8008aa4:	20004600 	.word	0x20004600
 8008aa8:	20004668 	.word	0x20004668

08008aac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008ab4:	f000 fd36 	bl	8009524 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008ab8:	4b2a      	ldr	r3, [pc, #168]	; (8008b64 <prvAddNewTaskToReadyList+0xb8>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	3301      	adds	r3, #1
 8008abe:	4a29      	ldr	r2, [pc, #164]	; (8008b64 <prvAddNewTaskToReadyList+0xb8>)
 8008ac0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008ac2:	4b29      	ldr	r3, [pc, #164]	; (8008b68 <prvAddNewTaskToReadyList+0xbc>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d109      	bne.n	8008ade <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008aca:	4a27      	ldr	r2, [pc, #156]	; (8008b68 <prvAddNewTaskToReadyList+0xbc>)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008ad0:	4b24      	ldr	r3, [pc, #144]	; (8008b64 <prvAddNewTaskToReadyList+0xb8>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d110      	bne.n	8008afa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008ad8:	f000 facc 	bl	8009074 <prvInitialiseTaskLists>
 8008adc:	e00d      	b.n	8008afa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008ade:	4b23      	ldr	r3, [pc, #140]	; (8008b6c <prvAddNewTaskToReadyList+0xc0>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d109      	bne.n	8008afa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008ae6:	4b20      	ldr	r3, [pc, #128]	; (8008b68 <prvAddNewTaskToReadyList+0xbc>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d802      	bhi.n	8008afa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008af4:	4a1c      	ldr	r2, [pc, #112]	; (8008b68 <prvAddNewTaskToReadyList+0xbc>)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008afa:	4b1d      	ldr	r3, [pc, #116]	; (8008b70 <prvAddNewTaskToReadyList+0xc4>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	3301      	adds	r3, #1
 8008b00:	4a1b      	ldr	r2, [pc, #108]	; (8008b70 <prvAddNewTaskToReadyList+0xc4>)
 8008b02:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b08:	2201      	movs	r2, #1
 8008b0a:	409a      	lsls	r2, r3
 8008b0c:	4b19      	ldr	r3, [pc, #100]	; (8008b74 <prvAddNewTaskToReadyList+0xc8>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4313      	orrs	r3, r2
 8008b12:	4a18      	ldr	r2, [pc, #96]	; (8008b74 <prvAddNewTaskToReadyList+0xc8>)
 8008b14:	6013      	str	r3, [r2, #0]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b1a:	4613      	mov	r3, r2
 8008b1c:	009b      	lsls	r3, r3, #2
 8008b1e:	4413      	add	r3, r2
 8008b20:	009b      	lsls	r3, r3, #2
 8008b22:	4a15      	ldr	r2, [pc, #84]	; (8008b78 <prvAddNewTaskToReadyList+0xcc>)
 8008b24:	441a      	add	r2, r3
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	3304      	adds	r3, #4
 8008b2a:	4619      	mov	r1, r3
 8008b2c:	4610      	mov	r0, r2
 8008b2e:	f7ff fdf5 	bl	800871c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008b32:	f000 fd27 	bl	8009584 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008b36:	4b0d      	ldr	r3, [pc, #52]	; (8008b6c <prvAddNewTaskToReadyList+0xc0>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d00e      	beq.n	8008b5c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008b3e:	4b0a      	ldr	r3, [pc, #40]	; (8008b68 <prvAddNewTaskToReadyList+0xbc>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d207      	bcs.n	8008b5c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008b4c:	4b0b      	ldr	r3, [pc, #44]	; (8008b7c <prvAddNewTaskToReadyList+0xd0>)
 8008b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b52:	601a      	str	r2, [r3, #0]
 8008b54:	f3bf 8f4f 	dsb	sy
 8008b58:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b5c:	bf00      	nop
 8008b5e:	3708      	adds	r7, #8
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}
 8008b64:	20000944 	.word	0x20000944
 8008b68:	20000844 	.word	0x20000844
 8008b6c:	20000950 	.word	0x20000950
 8008b70:	20000960 	.word	0x20000960
 8008b74:	2000094c 	.word	0x2000094c
 8008b78:	20000848 	.word	0x20000848
 8008b7c:	e000ed04 	.word	0xe000ed04

08008b80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b084      	sub	sp, #16
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d017      	beq.n	8008bc2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008b92:	4b13      	ldr	r3, [pc, #76]	; (8008be0 <vTaskDelay+0x60>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d00a      	beq.n	8008bb0 <vTaskDelay+0x30>
	__asm volatile
 8008b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9e:	f383 8811 	msr	BASEPRI, r3
 8008ba2:	f3bf 8f6f 	isb	sy
 8008ba6:	f3bf 8f4f 	dsb	sy
 8008baa:	60bb      	str	r3, [r7, #8]
}
 8008bac:	bf00      	nop
 8008bae:	e7fe      	b.n	8008bae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008bb0:	f000 f884 	bl	8008cbc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008bb4:	2100      	movs	r1, #0
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 fb1e 	bl	80091f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008bbc:	f000 f88c 	bl	8008cd8 <xTaskResumeAll>
 8008bc0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d107      	bne.n	8008bd8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008bc8:	4b06      	ldr	r3, [pc, #24]	; (8008be4 <vTaskDelay+0x64>)
 8008bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bce:	601a      	str	r2, [r3, #0]
 8008bd0:	f3bf 8f4f 	dsb	sy
 8008bd4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008bd8:	bf00      	nop
 8008bda:	3710      	adds	r7, #16
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}
 8008be0:	2000096c 	.word	0x2000096c
 8008be4:	e000ed04 	.word	0xe000ed04

08008be8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b08a      	sub	sp, #40	; 0x28
 8008bec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008bf6:	463a      	mov	r2, r7
 8008bf8:	1d39      	adds	r1, r7, #4
 8008bfa:	f107 0308 	add.w	r3, r7, #8
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7f8 ff7a 	bl	8001af8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008c04:	6839      	ldr	r1, [r7, #0]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	68ba      	ldr	r2, [r7, #8]
 8008c0a:	9202      	str	r2, [sp, #8]
 8008c0c:	9301      	str	r3, [sp, #4]
 8008c0e:	2300      	movs	r3, #0
 8008c10:	9300      	str	r3, [sp, #0]
 8008c12:	2300      	movs	r3, #0
 8008c14:	460a      	mov	r2, r1
 8008c16:	4921      	ldr	r1, [pc, #132]	; (8008c9c <vTaskStartScheduler+0xb4>)
 8008c18:	4821      	ldr	r0, [pc, #132]	; (8008ca0 <vTaskStartScheduler+0xb8>)
 8008c1a:	f7ff fe06 	bl	800882a <xTaskCreateStatic>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	4a20      	ldr	r2, [pc, #128]	; (8008ca4 <vTaskStartScheduler+0xbc>)
 8008c22:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008c24:	4b1f      	ldr	r3, [pc, #124]	; (8008ca4 <vTaskStartScheduler+0xbc>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d002      	beq.n	8008c32 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	617b      	str	r3, [r7, #20]
 8008c30:	e001      	b.n	8008c36 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008c32:	2300      	movs	r3, #0
 8008c34:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d11b      	bne.n	8008c74 <vTaskStartScheduler+0x8c>
	__asm volatile
 8008c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c40:	f383 8811 	msr	BASEPRI, r3
 8008c44:	f3bf 8f6f 	isb	sy
 8008c48:	f3bf 8f4f 	dsb	sy
 8008c4c:	613b      	str	r3, [r7, #16]
}
 8008c4e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008c50:	4b15      	ldr	r3, [pc, #84]	; (8008ca8 <vTaskStartScheduler+0xc0>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	334c      	adds	r3, #76	; 0x4c
 8008c56:	4a15      	ldr	r2, [pc, #84]	; (8008cac <vTaskStartScheduler+0xc4>)
 8008c58:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008c5a:	4b15      	ldr	r3, [pc, #84]	; (8008cb0 <vTaskStartScheduler+0xc8>)
 8008c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c60:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008c62:	4b14      	ldr	r3, [pc, #80]	; (8008cb4 <vTaskStartScheduler+0xcc>)
 8008c64:	2201      	movs	r2, #1
 8008c66:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008c68:	4b13      	ldr	r3, [pc, #76]	; (8008cb8 <vTaskStartScheduler+0xd0>)
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008c6e:	f000 fbb7 	bl	80093e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008c72:	e00e      	b.n	8008c92 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c7a:	d10a      	bne.n	8008c92 <vTaskStartScheduler+0xaa>
	__asm volatile
 8008c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c80:	f383 8811 	msr	BASEPRI, r3
 8008c84:	f3bf 8f6f 	isb	sy
 8008c88:	f3bf 8f4f 	dsb	sy
 8008c8c:	60fb      	str	r3, [r7, #12]
}
 8008c8e:	bf00      	nop
 8008c90:	e7fe      	b.n	8008c90 <vTaskStartScheduler+0xa8>
}
 8008c92:	bf00      	nop
 8008c94:	3718      	adds	r7, #24
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
 8008c9a:	bf00      	nop
 8008c9c:	08009d08 	.word	0x08009d08
 8008ca0:	08009045 	.word	0x08009045
 8008ca4:	20000968 	.word	0x20000968
 8008ca8:	20000844 	.word	0x20000844
 8008cac:	20000178 	.word	0x20000178
 8008cb0:	20000964 	.word	0x20000964
 8008cb4:	20000950 	.word	0x20000950
 8008cb8:	20000948 	.word	0x20000948

08008cbc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008cc0:	4b04      	ldr	r3, [pc, #16]	; (8008cd4 <vTaskSuspendAll+0x18>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	3301      	adds	r3, #1
 8008cc6:	4a03      	ldr	r2, [pc, #12]	; (8008cd4 <vTaskSuspendAll+0x18>)
 8008cc8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008cca:	bf00      	nop
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr
 8008cd4:	2000096c 	.word	0x2000096c

08008cd8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b084      	sub	sp, #16
 8008cdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008ce6:	4b41      	ldr	r3, [pc, #260]	; (8008dec <xTaskResumeAll+0x114>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d10a      	bne.n	8008d04 <xTaskResumeAll+0x2c>
	__asm volatile
 8008cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf2:	f383 8811 	msr	BASEPRI, r3
 8008cf6:	f3bf 8f6f 	isb	sy
 8008cfa:	f3bf 8f4f 	dsb	sy
 8008cfe:	603b      	str	r3, [r7, #0]
}
 8008d00:	bf00      	nop
 8008d02:	e7fe      	b.n	8008d02 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008d04:	f000 fc0e 	bl	8009524 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008d08:	4b38      	ldr	r3, [pc, #224]	; (8008dec <xTaskResumeAll+0x114>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	3b01      	subs	r3, #1
 8008d0e:	4a37      	ldr	r2, [pc, #220]	; (8008dec <xTaskResumeAll+0x114>)
 8008d10:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d12:	4b36      	ldr	r3, [pc, #216]	; (8008dec <xTaskResumeAll+0x114>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d161      	bne.n	8008dde <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008d1a:	4b35      	ldr	r3, [pc, #212]	; (8008df0 <xTaskResumeAll+0x118>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d05d      	beq.n	8008dde <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d22:	e02e      	b.n	8008d82 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d24:	4b33      	ldr	r3, [pc, #204]	; (8008df4 <xTaskResumeAll+0x11c>)
 8008d26:	68db      	ldr	r3, [r3, #12]
 8008d28:	68db      	ldr	r3, [r3, #12]
 8008d2a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	3318      	adds	r3, #24
 8008d30:	4618      	mov	r0, r3
 8008d32:	f7ff fd50 	bl	80087d6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	3304      	adds	r3, #4
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7ff fd4b 	bl	80087d6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d44:	2201      	movs	r2, #1
 8008d46:	409a      	lsls	r2, r3
 8008d48:	4b2b      	ldr	r3, [pc, #172]	; (8008df8 <xTaskResumeAll+0x120>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	4a2a      	ldr	r2, [pc, #168]	; (8008df8 <xTaskResumeAll+0x120>)
 8008d50:	6013      	str	r3, [r2, #0]
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d56:	4613      	mov	r3, r2
 8008d58:	009b      	lsls	r3, r3, #2
 8008d5a:	4413      	add	r3, r2
 8008d5c:	009b      	lsls	r3, r3, #2
 8008d5e:	4a27      	ldr	r2, [pc, #156]	; (8008dfc <xTaskResumeAll+0x124>)
 8008d60:	441a      	add	r2, r3
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	3304      	adds	r3, #4
 8008d66:	4619      	mov	r1, r3
 8008d68:	4610      	mov	r0, r2
 8008d6a:	f7ff fcd7 	bl	800871c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d72:	4b23      	ldr	r3, [pc, #140]	; (8008e00 <xTaskResumeAll+0x128>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d302      	bcc.n	8008d82 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008d7c:	4b21      	ldr	r3, [pc, #132]	; (8008e04 <xTaskResumeAll+0x12c>)
 8008d7e:	2201      	movs	r2, #1
 8008d80:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d82:	4b1c      	ldr	r3, [pc, #112]	; (8008df4 <xTaskResumeAll+0x11c>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d1cc      	bne.n	8008d24 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d001      	beq.n	8008d94 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008d90:	f000 fa12 	bl	80091b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008d94:	4b1c      	ldr	r3, [pc, #112]	; (8008e08 <xTaskResumeAll+0x130>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d010      	beq.n	8008dc2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008da0:	f000 f836 	bl	8008e10 <xTaskIncrementTick>
 8008da4:	4603      	mov	r3, r0
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d002      	beq.n	8008db0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008daa:	4b16      	ldr	r3, [pc, #88]	; (8008e04 <xTaskResumeAll+0x12c>)
 8008dac:	2201      	movs	r2, #1
 8008dae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	3b01      	subs	r3, #1
 8008db4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d1f1      	bne.n	8008da0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008dbc:	4b12      	ldr	r3, [pc, #72]	; (8008e08 <xTaskResumeAll+0x130>)
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008dc2:	4b10      	ldr	r3, [pc, #64]	; (8008e04 <xTaskResumeAll+0x12c>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d009      	beq.n	8008dde <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008dce:	4b0f      	ldr	r3, [pc, #60]	; (8008e0c <xTaskResumeAll+0x134>)
 8008dd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dd4:	601a      	str	r2, [r3, #0]
 8008dd6:	f3bf 8f4f 	dsb	sy
 8008dda:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008dde:	f000 fbd1 	bl	8009584 <vPortExitCritical>

	return xAlreadyYielded;
 8008de2:	68bb      	ldr	r3, [r7, #8]
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3710      	adds	r7, #16
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}
 8008dec:	2000096c 	.word	0x2000096c
 8008df0:	20000944 	.word	0x20000944
 8008df4:	20000904 	.word	0x20000904
 8008df8:	2000094c 	.word	0x2000094c
 8008dfc:	20000848 	.word	0x20000848
 8008e00:	20000844 	.word	0x20000844
 8008e04:	20000958 	.word	0x20000958
 8008e08:	20000954 	.word	0x20000954
 8008e0c:	e000ed04 	.word	0xe000ed04

08008e10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b086      	sub	sp, #24
 8008e14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008e16:	2300      	movs	r3, #0
 8008e18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e1a:	4b4e      	ldr	r3, [pc, #312]	; (8008f54 <xTaskIncrementTick+0x144>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	f040 808e 	bne.w	8008f40 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008e24:	4b4c      	ldr	r3, [pc, #304]	; (8008f58 <xTaskIncrementTick+0x148>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	3301      	adds	r3, #1
 8008e2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008e2c:	4a4a      	ldr	r2, [pc, #296]	; (8008f58 <xTaskIncrementTick+0x148>)
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d120      	bne.n	8008e7a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008e38:	4b48      	ldr	r3, [pc, #288]	; (8008f5c <xTaskIncrementTick+0x14c>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00a      	beq.n	8008e58 <xTaskIncrementTick+0x48>
	__asm volatile
 8008e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e46:	f383 8811 	msr	BASEPRI, r3
 8008e4a:	f3bf 8f6f 	isb	sy
 8008e4e:	f3bf 8f4f 	dsb	sy
 8008e52:	603b      	str	r3, [r7, #0]
}
 8008e54:	bf00      	nop
 8008e56:	e7fe      	b.n	8008e56 <xTaskIncrementTick+0x46>
 8008e58:	4b40      	ldr	r3, [pc, #256]	; (8008f5c <xTaskIncrementTick+0x14c>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	60fb      	str	r3, [r7, #12]
 8008e5e:	4b40      	ldr	r3, [pc, #256]	; (8008f60 <xTaskIncrementTick+0x150>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a3e      	ldr	r2, [pc, #248]	; (8008f5c <xTaskIncrementTick+0x14c>)
 8008e64:	6013      	str	r3, [r2, #0]
 8008e66:	4a3e      	ldr	r2, [pc, #248]	; (8008f60 <xTaskIncrementTick+0x150>)
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	6013      	str	r3, [r2, #0]
 8008e6c:	4b3d      	ldr	r3, [pc, #244]	; (8008f64 <xTaskIncrementTick+0x154>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	3301      	adds	r3, #1
 8008e72:	4a3c      	ldr	r2, [pc, #240]	; (8008f64 <xTaskIncrementTick+0x154>)
 8008e74:	6013      	str	r3, [r2, #0]
 8008e76:	f000 f99f 	bl	80091b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008e7a:	4b3b      	ldr	r3, [pc, #236]	; (8008f68 <xTaskIncrementTick+0x158>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	693a      	ldr	r2, [r7, #16]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d348      	bcc.n	8008f16 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e84:	4b35      	ldr	r3, [pc, #212]	; (8008f5c <xTaskIncrementTick+0x14c>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d104      	bne.n	8008e98 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e8e:	4b36      	ldr	r3, [pc, #216]	; (8008f68 <xTaskIncrementTick+0x158>)
 8008e90:	f04f 32ff 	mov.w	r2, #4294967295
 8008e94:	601a      	str	r2, [r3, #0]
					break;
 8008e96:	e03e      	b.n	8008f16 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e98:	4b30      	ldr	r3, [pc, #192]	; (8008f5c <xTaskIncrementTick+0x14c>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	68db      	ldr	r3, [r3, #12]
 8008e9e:	68db      	ldr	r3, [r3, #12]
 8008ea0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008ea8:	693a      	ldr	r2, [r7, #16]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d203      	bcs.n	8008eb8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008eb0:	4a2d      	ldr	r2, [pc, #180]	; (8008f68 <xTaskIncrementTick+0x158>)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008eb6:	e02e      	b.n	8008f16 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	3304      	adds	r3, #4
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f7ff fc8a 	bl	80087d6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d004      	beq.n	8008ed4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	3318      	adds	r3, #24
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7ff fc81 	bl	80087d6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed8:	2201      	movs	r2, #1
 8008eda:	409a      	lsls	r2, r3
 8008edc:	4b23      	ldr	r3, [pc, #140]	; (8008f6c <xTaskIncrementTick+0x15c>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	4a22      	ldr	r2, [pc, #136]	; (8008f6c <xTaskIncrementTick+0x15c>)
 8008ee4:	6013      	str	r3, [r2, #0]
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eea:	4613      	mov	r3, r2
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	4413      	add	r3, r2
 8008ef0:	009b      	lsls	r3, r3, #2
 8008ef2:	4a1f      	ldr	r2, [pc, #124]	; (8008f70 <xTaskIncrementTick+0x160>)
 8008ef4:	441a      	add	r2, r3
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	3304      	adds	r3, #4
 8008efa:	4619      	mov	r1, r3
 8008efc:	4610      	mov	r0, r2
 8008efe:	f7ff fc0d 	bl	800871c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f06:	4b1b      	ldr	r3, [pc, #108]	; (8008f74 <xTaskIncrementTick+0x164>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	d3b9      	bcc.n	8008e84 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008f10:	2301      	movs	r3, #1
 8008f12:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f14:	e7b6      	b.n	8008e84 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008f16:	4b17      	ldr	r3, [pc, #92]	; (8008f74 <xTaskIncrementTick+0x164>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f1c:	4914      	ldr	r1, [pc, #80]	; (8008f70 <xTaskIncrementTick+0x160>)
 8008f1e:	4613      	mov	r3, r2
 8008f20:	009b      	lsls	r3, r3, #2
 8008f22:	4413      	add	r3, r2
 8008f24:	009b      	lsls	r3, r3, #2
 8008f26:	440b      	add	r3, r1
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d901      	bls.n	8008f32 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008f32:	4b11      	ldr	r3, [pc, #68]	; (8008f78 <xTaskIncrementTick+0x168>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d007      	beq.n	8008f4a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	617b      	str	r3, [r7, #20]
 8008f3e:	e004      	b.n	8008f4a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008f40:	4b0e      	ldr	r3, [pc, #56]	; (8008f7c <xTaskIncrementTick+0x16c>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	3301      	adds	r3, #1
 8008f46:	4a0d      	ldr	r2, [pc, #52]	; (8008f7c <xTaskIncrementTick+0x16c>)
 8008f48:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008f4a:	697b      	ldr	r3, [r7, #20]
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3718      	adds	r7, #24
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}
 8008f54:	2000096c 	.word	0x2000096c
 8008f58:	20000948 	.word	0x20000948
 8008f5c:	200008fc 	.word	0x200008fc
 8008f60:	20000900 	.word	0x20000900
 8008f64:	2000095c 	.word	0x2000095c
 8008f68:	20000964 	.word	0x20000964
 8008f6c:	2000094c 	.word	0x2000094c
 8008f70:	20000848 	.word	0x20000848
 8008f74:	20000844 	.word	0x20000844
 8008f78:	20000958 	.word	0x20000958
 8008f7c:	20000954 	.word	0x20000954

08008f80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008f80:	b480      	push	{r7}
 8008f82:	b087      	sub	sp, #28
 8008f84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008f86:	4b29      	ldr	r3, [pc, #164]	; (800902c <vTaskSwitchContext+0xac>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d003      	beq.n	8008f96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008f8e:	4b28      	ldr	r3, [pc, #160]	; (8009030 <vTaskSwitchContext+0xb0>)
 8008f90:	2201      	movs	r2, #1
 8008f92:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008f94:	e044      	b.n	8009020 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8008f96:	4b26      	ldr	r3, [pc, #152]	; (8009030 <vTaskSwitchContext+0xb0>)
 8008f98:	2200      	movs	r2, #0
 8008f9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f9c:	4b25      	ldr	r3, [pc, #148]	; (8009034 <vTaskSwitchContext+0xb4>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	fab3 f383 	clz	r3, r3
 8008fa8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008faa:	7afb      	ldrb	r3, [r7, #11]
 8008fac:	f1c3 031f 	rsb	r3, r3, #31
 8008fb0:	617b      	str	r3, [r7, #20]
 8008fb2:	4921      	ldr	r1, [pc, #132]	; (8009038 <vTaskSwitchContext+0xb8>)
 8008fb4:	697a      	ldr	r2, [r7, #20]
 8008fb6:	4613      	mov	r3, r2
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	4413      	add	r3, r2
 8008fbc:	009b      	lsls	r3, r3, #2
 8008fbe:	440b      	add	r3, r1
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d10a      	bne.n	8008fdc <vTaskSwitchContext+0x5c>
	__asm volatile
 8008fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fca:	f383 8811 	msr	BASEPRI, r3
 8008fce:	f3bf 8f6f 	isb	sy
 8008fd2:	f3bf 8f4f 	dsb	sy
 8008fd6:	607b      	str	r3, [r7, #4]
}
 8008fd8:	bf00      	nop
 8008fda:	e7fe      	b.n	8008fda <vTaskSwitchContext+0x5a>
 8008fdc:	697a      	ldr	r2, [r7, #20]
 8008fde:	4613      	mov	r3, r2
 8008fe0:	009b      	lsls	r3, r3, #2
 8008fe2:	4413      	add	r3, r2
 8008fe4:	009b      	lsls	r3, r3, #2
 8008fe6:	4a14      	ldr	r2, [pc, #80]	; (8009038 <vTaskSwitchContext+0xb8>)
 8008fe8:	4413      	add	r3, r2
 8008fea:	613b      	str	r3, [r7, #16]
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	685a      	ldr	r2, [r3, #4]
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	605a      	str	r2, [r3, #4]
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	685a      	ldr	r2, [r3, #4]
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	3308      	adds	r3, #8
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d104      	bne.n	800900c <vTaskSwitchContext+0x8c>
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	685a      	ldr	r2, [r3, #4]
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	605a      	str	r2, [r3, #4]
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	68db      	ldr	r3, [r3, #12]
 8009012:	4a0a      	ldr	r2, [pc, #40]	; (800903c <vTaskSwitchContext+0xbc>)
 8009014:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009016:	4b09      	ldr	r3, [pc, #36]	; (800903c <vTaskSwitchContext+0xbc>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	334c      	adds	r3, #76	; 0x4c
 800901c:	4a08      	ldr	r2, [pc, #32]	; (8009040 <vTaskSwitchContext+0xc0>)
 800901e:	6013      	str	r3, [r2, #0]
}
 8009020:	bf00      	nop
 8009022:	371c      	adds	r7, #28
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr
 800902c:	2000096c 	.word	0x2000096c
 8009030:	20000958 	.word	0x20000958
 8009034:	2000094c 	.word	0x2000094c
 8009038:	20000848 	.word	0x20000848
 800903c:	20000844 	.word	0x20000844
 8009040:	20000178 	.word	0x20000178

08009044 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b082      	sub	sp, #8
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800904c:	f000 f852 	bl	80090f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009050:	4b06      	ldr	r3, [pc, #24]	; (800906c <prvIdleTask+0x28>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	2b01      	cmp	r3, #1
 8009056:	d9f9      	bls.n	800904c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009058:	4b05      	ldr	r3, [pc, #20]	; (8009070 <prvIdleTask+0x2c>)
 800905a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800905e:	601a      	str	r2, [r3, #0]
 8009060:	f3bf 8f4f 	dsb	sy
 8009064:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009068:	e7f0      	b.n	800904c <prvIdleTask+0x8>
 800906a:	bf00      	nop
 800906c:	20000848 	.word	0x20000848
 8009070:	e000ed04 	.word	0xe000ed04

08009074 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b082      	sub	sp, #8
 8009078:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800907a:	2300      	movs	r3, #0
 800907c:	607b      	str	r3, [r7, #4]
 800907e:	e00c      	b.n	800909a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009080:	687a      	ldr	r2, [r7, #4]
 8009082:	4613      	mov	r3, r2
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	4413      	add	r3, r2
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	4a12      	ldr	r2, [pc, #72]	; (80090d4 <prvInitialiseTaskLists+0x60>)
 800908c:	4413      	add	r3, r2
 800908e:	4618      	mov	r0, r3
 8009090:	f7ff fb17 	bl	80086c2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	3301      	adds	r3, #1
 8009098:	607b      	str	r3, [r7, #4]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2b06      	cmp	r3, #6
 800909e:	d9ef      	bls.n	8009080 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80090a0:	480d      	ldr	r0, [pc, #52]	; (80090d8 <prvInitialiseTaskLists+0x64>)
 80090a2:	f7ff fb0e 	bl	80086c2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80090a6:	480d      	ldr	r0, [pc, #52]	; (80090dc <prvInitialiseTaskLists+0x68>)
 80090a8:	f7ff fb0b 	bl	80086c2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80090ac:	480c      	ldr	r0, [pc, #48]	; (80090e0 <prvInitialiseTaskLists+0x6c>)
 80090ae:	f7ff fb08 	bl	80086c2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80090b2:	480c      	ldr	r0, [pc, #48]	; (80090e4 <prvInitialiseTaskLists+0x70>)
 80090b4:	f7ff fb05 	bl	80086c2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80090b8:	480b      	ldr	r0, [pc, #44]	; (80090e8 <prvInitialiseTaskLists+0x74>)
 80090ba:	f7ff fb02 	bl	80086c2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80090be:	4b0b      	ldr	r3, [pc, #44]	; (80090ec <prvInitialiseTaskLists+0x78>)
 80090c0:	4a05      	ldr	r2, [pc, #20]	; (80090d8 <prvInitialiseTaskLists+0x64>)
 80090c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80090c4:	4b0a      	ldr	r3, [pc, #40]	; (80090f0 <prvInitialiseTaskLists+0x7c>)
 80090c6:	4a05      	ldr	r2, [pc, #20]	; (80090dc <prvInitialiseTaskLists+0x68>)
 80090c8:	601a      	str	r2, [r3, #0]
}
 80090ca:	bf00      	nop
 80090cc:	3708      	adds	r7, #8
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}
 80090d2:	bf00      	nop
 80090d4:	20000848 	.word	0x20000848
 80090d8:	200008d4 	.word	0x200008d4
 80090dc:	200008e8 	.word	0x200008e8
 80090e0:	20000904 	.word	0x20000904
 80090e4:	20000918 	.word	0x20000918
 80090e8:	20000930 	.word	0x20000930
 80090ec:	200008fc 	.word	0x200008fc
 80090f0:	20000900 	.word	0x20000900

080090f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80090fa:	e019      	b.n	8009130 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80090fc:	f000 fa12 	bl	8009524 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009100:	4b10      	ldr	r3, [pc, #64]	; (8009144 <prvCheckTasksWaitingTermination+0x50>)
 8009102:	68db      	ldr	r3, [r3, #12]
 8009104:	68db      	ldr	r3, [r3, #12]
 8009106:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	3304      	adds	r3, #4
 800910c:	4618      	mov	r0, r3
 800910e:	f7ff fb62 	bl	80087d6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009112:	4b0d      	ldr	r3, [pc, #52]	; (8009148 <prvCheckTasksWaitingTermination+0x54>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	3b01      	subs	r3, #1
 8009118:	4a0b      	ldr	r2, [pc, #44]	; (8009148 <prvCheckTasksWaitingTermination+0x54>)
 800911a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800911c:	4b0b      	ldr	r3, [pc, #44]	; (800914c <prvCheckTasksWaitingTermination+0x58>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	3b01      	subs	r3, #1
 8009122:	4a0a      	ldr	r2, [pc, #40]	; (800914c <prvCheckTasksWaitingTermination+0x58>)
 8009124:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009126:	f000 fa2d 	bl	8009584 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 f810 	bl	8009150 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009130:	4b06      	ldr	r3, [pc, #24]	; (800914c <prvCheckTasksWaitingTermination+0x58>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d1e1      	bne.n	80090fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009138:	bf00      	nop
 800913a:	bf00      	nop
 800913c:	3708      	adds	r7, #8
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
 8009142:	bf00      	nop
 8009144:	20000918 	.word	0x20000918
 8009148:	20000944 	.word	0x20000944
 800914c:	2000092c 	.word	0x2000092c

08009150 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	334c      	adds	r3, #76	; 0x4c
 800915c:	4618      	mov	r0, r3
 800915e:	f000 fcb5 	bl	8009acc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8009168:	2b00      	cmp	r3, #0
 800916a:	d108      	bne.n	800917e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009170:	4618      	mov	r0, r3
 8009172:	f000 fb85 	bl	8009880 <vPortFree>
				vPortFree( pxTCB );
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 fb82 	bl	8009880 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800917c:	e018      	b.n	80091b0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8009184:	2b01      	cmp	r3, #1
 8009186:	d103      	bne.n	8009190 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 fb79 	bl	8009880 <vPortFree>
	}
 800918e:	e00f      	b.n	80091b0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8009196:	2b02      	cmp	r3, #2
 8009198:	d00a      	beq.n	80091b0 <prvDeleteTCB+0x60>
	__asm volatile
 800919a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800919e:	f383 8811 	msr	BASEPRI, r3
 80091a2:	f3bf 8f6f 	isb	sy
 80091a6:	f3bf 8f4f 	dsb	sy
 80091aa:	60fb      	str	r3, [r7, #12]
}
 80091ac:	bf00      	nop
 80091ae:	e7fe      	b.n	80091ae <prvDeleteTCB+0x5e>
	}
 80091b0:	bf00      	nop
 80091b2:	3710      	adds	r7, #16
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80091b8:	b480      	push	{r7}
 80091ba:	b083      	sub	sp, #12
 80091bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091be:	4b0c      	ldr	r3, [pc, #48]	; (80091f0 <prvResetNextTaskUnblockTime+0x38>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d104      	bne.n	80091d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80091c8:	4b0a      	ldr	r3, [pc, #40]	; (80091f4 <prvResetNextTaskUnblockTime+0x3c>)
 80091ca:	f04f 32ff 	mov.w	r2, #4294967295
 80091ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80091d0:	e008      	b.n	80091e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091d2:	4b07      	ldr	r3, [pc, #28]	; (80091f0 <prvResetNextTaskUnblockTime+0x38>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	68db      	ldr	r3, [r3, #12]
 80091d8:	68db      	ldr	r3, [r3, #12]
 80091da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	4a04      	ldr	r2, [pc, #16]	; (80091f4 <prvResetNextTaskUnblockTime+0x3c>)
 80091e2:	6013      	str	r3, [r2, #0]
}
 80091e4:	bf00      	nop
 80091e6:	370c      	adds	r7, #12
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr
 80091f0:	200008fc 	.word	0x200008fc
 80091f4:	20000964 	.word	0x20000964

080091f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b084      	sub	sp, #16
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009202:	4b29      	ldr	r3, [pc, #164]	; (80092a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009208:	4b28      	ldr	r3, [pc, #160]	; (80092ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	3304      	adds	r3, #4
 800920e:	4618      	mov	r0, r3
 8009210:	f7ff fae1 	bl	80087d6 <uxListRemove>
 8009214:	4603      	mov	r3, r0
 8009216:	2b00      	cmp	r3, #0
 8009218:	d10b      	bne.n	8009232 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800921a:	4b24      	ldr	r3, [pc, #144]	; (80092ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009220:	2201      	movs	r2, #1
 8009222:	fa02 f303 	lsl.w	r3, r2, r3
 8009226:	43da      	mvns	r2, r3
 8009228:	4b21      	ldr	r3, [pc, #132]	; (80092b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4013      	ands	r3, r2
 800922e:	4a20      	ldr	r2, [pc, #128]	; (80092b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009230:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009238:	d10a      	bne.n	8009250 <prvAddCurrentTaskToDelayedList+0x58>
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d007      	beq.n	8009250 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009240:	4b1a      	ldr	r3, [pc, #104]	; (80092ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	3304      	adds	r3, #4
 8009246:	4619      	mov	r1, r3
 8009248:	481a      	ldr	r0, [pc, #104]	; (80092b4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800924a:	f7ff fa67 	bl	800871c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800924e:	e026      	b.n	800929e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009250:	68fa      	ldr	r2, [r7, #12]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	4413      	add	r3, r2
 8009256:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009258:	4b14      	ldr	r3, [pc, #80]	; (80092ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	68ba      	ldr	r2, [r7, #8]
 800925e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009260:	68ba      	ldr	r2, [r7, #8]
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	429a      	cmp	r2, r3
 8009266:	d209      	bcs.n	800927c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009268:	4b13      	ldr	r3, [pc, #76]	; (80092b8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	4b0f      	ldr	r3, [pc, #60]	; (80092ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	3304      	adds	r3, #4
 8009272:	4619      	mov	r1, r3
 8009274:	4610      	mov	r0, r2
 8009276:	f7ff fa75 	bl	8008764 <vListInsert>
}
 800927a:	e010      	b.n	800929e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800927c:	4b0f      	ldr	r3, [pc, #60]	; (80092bc <prvAddCurrentTaskToDelayedList+0xc4>)
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	4b0a      	ldr	r3, [pc, #40]	; (80092ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	3304      	adds	r3, #4
 8009286:	4619      	mov	r1, r3
 8009288:	4610      	mov	r0, r2
 800928a:	f7ff fa6b 	bl	8008764 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800928e:	4b0c      	ldr	r3, [pc, #48]	; (80092c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	68ba      	ldr	r2, [r7, #8]
 8009294:	429a      	cmp	r2, r3
 8009296:	d202      	bcs.n	800929e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009298:	4a09      	ldr	r2, [pc, #36]	; (80092c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	6013      	str	r3, [r2, #0]
}
 800929e:	bf00      	nop
 80092a0:	3710      	adds	r7, #16
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	20000948 	.word	0x20000948
 80092ac:	20000844 	.word	0x20000844
 80092b0:	2000094c 	.word	0x2000094c
 80092b4:	20000930 	.word	0x20000930
 80092b8:	20000900 	.word	0x20000900
 80092bc:	200008fc 	.word	0x200008fc
 80092c0:	20000964 	.word	0x20000964

080092c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80092c4:	b480      	push	{r7}
 80092c6:	b085      	sub	sp, #20
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	60b9      	str	r1, [r7, #8]
 80092ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	3b04      	subs	r3, #4
 80092d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80092dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	3b04      	subs	r3, #4
 80092e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	f023 0201 	bic.w	r2, r3, #1
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	3b04      	subs	r3, #4
 80092f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80092f4:	4a0c      	ldr	r2, [pc, #48]	; (8009328 <pxPortInitialiseStack+0x64>)
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	3b14      	subs	r3, #20
 80092fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	3b04      	subs	r3, #4
 800930a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f06f 0202 	mvn.w	r2, #2
 8009312:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	3b20      	subs	r3, #32
 8009318:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800931a:	68fb      	ldr	r3, [r7, #12]
}
 800931c:	4618      	mov	r0, r3
 800931e:	3714      	adds	r7, #20
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr
 8009328:	0800932d 	.word	0x0800932d

0800932c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800932c:	b480      	push	{r7}
 800932e:	b085      	sub	sp, #20
 8009330:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009332:	2300      	movs	r3, #0
 8009334:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009336:	4b12      	ldr	r3, [pc, #72]	; (8009380 <prvTaskExitError+0x54>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800933e:	d00a      	beq.n	8009356 <prvTaskExitError+0x2a>
	__asm volatile
 8009340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009344:	f383 8811 	msr	BASEPRI, r3
 8009348:	f3bf 8f6f 	isb	sy
 800934c:	f3bf 8f4f 	dsb	sy
 8009350:	60fb      	str	r3, [r7, #12]
}
 8009352:	bf00      	nop
 8009354:	e7fe      	b.n	8009354 <prvTaskExitError+0x28>
	__asm volatile
 8009356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800935a:	f383 8811 	msr	BASEPRI, r3
 800935e:	f3bf 8f6f 	isb	sy
 8009362:	f3bf 8f4f 	dsb	sy
 8009366:	60bb      	str	r3, [r7, #8]
}
 8009368:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800936a:	bf00      	nop
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d0fc      	beq.n	800936c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009372:	bf00      	nop
 8009374:	bf00      	nop
 8009376:	3714      	adds	r7, #20
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr
 8009380:	20000128 	.word	0x20000128
	...

08009390 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009390:	4b07      	ldr	r3, [pc, #28]	; (80093b0 <pxCurrentTCBConst2>)
 8009392:	6819      	ldr	r1, [r3, #0]
 8009394:	6808      	ldr	r0, [r1, #0]
 8009396:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800939a:	f380 8809 	msr	PSP, r0
 800939e:	f3bf 8f6f 	isb	sy
 80093a2:	f04f 0000 	mov.w	r0, #0
 80093a6:	f380 8811 	msr	BASEPRI, r0
 80093aa:	4770      	bx	lr
 80093ac:	f3af 8000 	nop.w

080093b0 <pxCurrentTCBConst2>:
 80093b0:	20000844 	.word	0x20000844
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80093b4:	bf00      	nop
 80093b6:	bf00      	nop

080093b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80093b8:	4808      	ldr	r0, [pc, #32]	; (80093dc <prvPortStartFirstTask+0x24>)
 80093ba:	6800      	ldr	r0, [r0, #0]
 80093bc:	6800      	ldr	r0, [r0, #0]
 80093be:	f380 8808 	msr	MSP, r0
 80093c2:	f04f 0000 	mov.w	r0, #0
 80093c6:	f380 8814 	msr	CONTROL, r0
 80093ca:	b662      	cpsie	i
 80093cc:	b661      	cpsie	f
 80093ce:	f3bf 8f4f 	dsb	sy
 80093d2:	f3bf 8f6f 	isb	sy
 80093d6:	df00      	svc	0
 80093d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80093da:	bf00      	nop
 80093dc:	e000ed08 	.word	0xe000ed08

080093e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b086      	sub	sp, #24
 80093e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80093e6:	4b46      	ldr	r3, [pc, #280]	; (8009500 <xPortStartScheduler+0x120>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4a46      	ldr	r2, [pc, #280]	; (8009504 <xPortStartScheduler+0x124>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d10a      	bne.n	8009406 <xPortStartScheduler+0x26>
	__asm volatile
 80093f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f4:	f383 8811 	msr	BASEPRI, r3
 80093f8:	f3bf 8f6f 	isb	sy
 80093fc:	f3bf 8f4f 	dsb	sy
 8009400:	613b      	str	r3, [r7, #16]
}
 8009402:	bf00      	nop
 8009404:	e7fe      	b.n	8009404 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009406:	4b3e      	ldr	r3, [pc, #248]	; (8009500 <xPortStartScheduler+0x120>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a3f      	ldr	r2, [pc, #252]	; (8009508 <xPortStartScheduler+0x128>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d10a      	bne.n	8009426 <xPortStartScheduler+0x46>
	__asm volatile
 8009410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009414:	f383 8811 	msr	BASEPRI, r3
 8009418:	f3bf 8f6f 	isb	sy
 800941c:	f3bf 8f4f 	dsb	sy
 8009420:	60fb      	str	r3, [r7, #12]
}
 8009422:	bf00      	nop
 8009424:	e7fe      	b.n	8009424 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009426:	4b39      	ldr	r3, [pc, #228]	; (800950c <xPortStartScheduler+0x12c>)
 8009428:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	b2db      	uxtb	r3, r3
 8009430:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	22ff      	movs	r2, #255	; 0xff
 8009436:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	b2db      	uxtb	r3, r3
 800943e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009440:	78fb      	ldrb	r3, [r7, #3]
 8009442:	b2db      	uxtb	r3, r3
 8009444:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009448:	b2da      	uxtb	r2, r3
 800944a:	4b31      	ldr	r3, [pc, #196]	; (8009510 <xPortStartScheduler+0x130>)
 800944c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800944e:	4b31      	ldr	r3, [pc, #196]	; (8009514 <xPortStartScheduler+0x134>)
 8009450:	2207      	movs	r2, #7
 8009452:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009454:	e009      	b.n	800946a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009456:	4b2f      	ldr	r3, [pc, #188]	; (8009514 <xPortStartScheduler+0x134>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	3b01      	subs	r3, #1
 800945c:	4a2d      	ldr	r2, [pc, #180]	; (8009514 <xPortStartScheduler+0x134>)
 800945e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009460:	78fb      	ldrb	r3, [r7, #3]
 8009462:	b2db      	uxtb	r3, r3
 8009464:	005b      	lsls	r3, r3, #1
 8009466:	b2db      	uxtb	r3, r3
 8009468:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800946a:	78fb      	ldrb	r3, [r7, #3]
 800946c:	b2db      	uxtb	r3, r3
 800946e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009472:	2b80      	cmp	r3, #128	; 0x80
 8009474:	d0ef      	beq.n	8009456 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009476:	4b27      	ldr	r3, [pc, #156]	; (8009514 <xPortStartScheduler+0x134>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f1c3 0307 	rsb	r3, r3, #7
 800947e:	2b04      	cmp	r3, #4
 8009480:	d00a      	beq.n	8009498 <xPortStartScheduler+0xb8>
	__asm volatile
 8009482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009486:	f383 8811 	msr	BASEPRI, r3
 800948a:	f3bf 8f6f 	isb	sy
 800948e:	f3bf 8f4f 	dsb	sy
 8009492:	60bb      	str	r3, [r7, #8]
}
 8009494:	bf00      	nop
 8009496:	e7fe      	b.n	8009496 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009498:	4b1e      	ldr	r3, [pc, #120]	; (8009514 <xPortStartScheduler+0x134>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	021b      	lsls	r3, r3, #8
 800949e:	4a1d      	ldr	r2, [pc, #116]	; (8009514 <xPortStartScheduler+0x134>)
 80094a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80094a2:	4b1c      	ldr	r3, [pc, #112]	; (8009514 <xPortStartScheduler+0x134>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80094aa:	4a1a      	ldr	r2, [pc, #104]	; (8009514 <xPortStartScheduler+0x134>)
 80094ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	b2da      	uxtb	r2, r3
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80094b6:	4b18      	ldr	r3, [pc, #96]	; (8009518 <xPortStartScheduler+0x138>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	4a17      	ldr	r2, [pc, #92]	; (8009518 <xPortStartScheduler+0x138>)
 80094bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80094c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80094c2:	4b15      	ldr	r3, [pc, #84]	; (8009518 <xPortStartScheduler+0x138>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a14      	ldr	r2, [pc, #80]	; (8009518 <xPortStartScheduler+0x138>)
 80094c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80094cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80094ce:	f000 f8dd 	bl	800968c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80094d2:	4b12      	ldr	r3, [pc, #72]	; (800951c <xPortStartScheduler+0x13c>)
 80094d4:	2200      	movs	r2, #0
 80094d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80094d8:	f000 f8fc 	bl	80096d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80094dc:	4b10      	ldr	r3, [pc, #64]	; (8009520 <xPortStartScheduler+0x140>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a0f      	ldr	r2, [pc, #60]	; (8009520 <xPortStartScheduler+0x140>)
 80094e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80094e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80094e8:	f7ff ff66 	bl	80093b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80094ec:	f7ff fd48 	bl	8008f80 <vTaskSwitchContext>
	prvTaskExitError();
 80094f0:	f7ff ff1c 	bl	800932c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80094f4:	2300      	movs	r3, #0
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3718      	adds	r7, #24
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
 80094fe:	bf00      	nop
 8009500:	e000ed00 	.word	0xe000ed00
 8009504:	410fc271 	.word	0x410fc271
 8009508:	410fc270 	.word	0x410fc270
 800950c:	e000e400 	.word	0xe000e400
 8009510:	20000970 	.word	0x20000970
 8009514:	20000974 	.word	0x20000974
 8009518:	e000ed20 	.word	0xe000ed20
 800951c:	20000128 	.word	0x20000128
 8009520:	e000ef34 	.word	0xe000ef34

08009524 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009524:	b480      	push	{r7}
 8009526:	b083      	sub	sp, #12
 8009528:	af00      	add	r7, sp, #0
	__asm volatile
 800952a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800952e:	f383 8811 	msr	BASEPRI, r3
 8009532:	f3bf 8f6f 	isb	sy
 8009536:	f3bf 8f4f 	dsb	sy
 800953a:	607b      	str	r3, [r7, #4]
}
 800953c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800953e:	4b0f      	ldr	r3, [pc, #60]	; (800957c <vPortEnterCritical+0x58>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	3301      	adds	r3, #1
 8009544:	4a0d      	ldr	r2, [pc, #52]	; (800957c <vPortEnterCritical+0x58>)
 8009546:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009548:	4b0c      	ldr	r3, [pc, #48]	; (800957c <vPortEnterCritical+0x58>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	2b01      	cmp	r3, #1
 800954e:	d10f      	bne.n	8009570 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009550:	4b0b      	ldr	r3, [pc, #44]	; (8009580 <vPortEnterCritical+0x5c>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	b2db      	uxtb	r3, r3
 8009556:	2b00      	cmp	r3, #0
 8009558:	d00a      	beq.n	8009570 <vPortEnterCritical+0x4c>
	__asm volatile
 800955a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800955e:	f383 8811 	msr	BASEPRI, r3
 8009562:	f3bf 8f6f 	isb	sy
 8009566:	f3bf 8f4f 	dsb	sy
 800956a:	603b      	str	r3, [r7, #0]
}
 800956c:	bf00      	nop
 800956e:	e7fe      	b.n	800956e <vPortEnterCritical+0x4a>
	}
}
 8009570:	bf00      	nop
 8009572:	370c      	adds	r7, #12
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr
 800957c:	20000128 	.word	0x20000128
 8009580:	e000ed04 	.word	0xe000ed04

08009584 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009584:	b480      	push	{r7}
 8009586:	b083      	sub	sp, #12
 8009588:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800958a:	4b12      	ldr	r3, [pc, #72]	; (80095d4 <vPortExitCritical+0x50>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d10a      	bne.n	80095a8 <vPortExitCritical+0x24>
	__asm volatile
 8009592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009596:	f383 8811 	msr	BASEPRI, r3
 800959a:	f3bf 8f6f 	isb	sy
 800959e:	f3bf 8f4f 	dsb	sy
 80095a2:	607b      	str	r3, [r7, #4]
}
 80095a4:	bf00      	nop
 80095a6:	e7fe      	b.n	80095a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80095a8:	4b0a      	ldr	r3, [pc, #40]	; (80095d4 <vPortExitCritical+0x50>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	3b01      	subs	r3, #1
 80095ae:	4a09      	ldr	r2, [pc, #36]	; (80095d4 <vPortExitCritical+0x50>)
 80095b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80095b2:	4b08      	ldr	r3, [pc, #32]	; (80095d4 <vPortExitCritical+0x50>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d105      	bne.n	80095c6 <vPortExitCritical+0x42>
 80095ba:	2300      	movs	r3, #0
 80095bc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80095c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80095c6:	bf00      	nop
 80095c8:	370c      	adds	r7, #12
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr
 80095d2:	bf00      	nop
 80095d4:	20000128 	.word	0x20000128
	...

080095e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80095e0:	f3ef 8009 	mrs	r0, PSP
 80095e4:	f3bf 8f6f 	isb	sy
 80095e8:	4b15      	ldr	r3, [pc, #84]	; (8009640 <pxCurrentTCBConst>)
 80095ea:	681a      	ldr	r2, [r3, #0]
 80095ec:	f01e 0f10 	tst.w	lr, #16
 80095f0:	bf08      	it	eq
 80095f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80095f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095fa:	6010      	str	r0, [r2, #0]
 80095fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009600:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009604:	f380 8811 	msr	BASEPRI, r0
 8009608:	f3bf 8f4f 	dsb	sy
 800960c:	f3bf 8f6f 	isb	sy
 8009610:	f7ff fcb6 	bl	8008f80 <vTaskSwitchContext>
 8009614:	f04f 0000 	mov.w	r0, #0
 8009618:	f380 8811 	msr	BASEPRI, r0
 800961c:	bc09      	pop	{r0, r3}
 800961e:	6819      	ldr	r1, [r3, #0]
 8009620:	6808      	ldr	r0, [r1, #0]
 8009622:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009626:	f01e 0f10 	tst.w	lr, #16
 800962a:	bf08      	it	eq
 800962c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009630:	f380 8809 	msr	PSP, r0
 8009634:	f3bf 8f6f 	isb	sy
 8009638:	4770      	bx	lr
 800963a:	bf00      	nop
 800963c:	f3af 8000 	nop.w

08009640 <pxCurrentTCBConst>:
 8009640:	20000844 	.word	0x20000844
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009644:	bf00      	nop
 8009646:	bf00      	nop

08009648 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b082      	sub	sp, #8
 800964c:	af00      	add	r7, sp, #0
	__asm volatile
 800964e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009652:	f383 8811 	msr	BASEPRI, r3
 8009656:	f3bf 8f6f 	isb	sy
 800965a:	f3bf 8f4f 	dsb	sy
 800965e:	607b      	str	r3, [r7, #4]
}
 8009660:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009662:	f7ff fbd5 	bl	8008e10 <xTaskIncrementTick>
 8009666:	4603      	mov	r3, r0
 8009668:	2b00      	cmp	r3, #0
 800966a:	d003      	beq.n	8009674 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800966c:	4b06      	ldr	r3, [pc, #24]	; (8009688 <SysTick_Handler+0x40>)
 800966e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009672:	601a      	str	r2, [r3, #0]
 8009674:	2300      	movs	r3, #0
 8009676:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	f383 8811 	msr	BASEPRI, r3
}
 800967e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009680:	bf00      	nop
 8009682:	3708      	adds	r7, #8
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}
 8009688:	e000ed04 	.word	0xe000ed04

0800968c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800968c:	b480      	push	{r7}
 800968e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009690:	4b0b      	ldr	r3, [pc, #44]	; (80096c0 <vPortSetupTimerInterrupt+0x34>)
 8009692:	2200      	movs	r2, #0
 8009694:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009696:	4b0b      	ldr	r3, [pc, #44]	; (80096c4 <vPortSetupTimerInterrupt+0x38>)
 8009698:	2200      	movs	r2, #0
 800969a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800969c:	4b0a      	ldr	r3, [pc, #40]	; (80096c8 <vPortSetupTimerInterrupt+0x3c>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a0a      	ldr	r2, [pc, #40]	; (80096cc <vPortSetupTimerInterrupt+0x40>)
 80096a2:	fba2 2303 	umull	r2, r3, r2, r3
 80096a6:	099b      	lsrs	r3, r3, #6
 80096a8:	4a09      	ldr	r2, [pc, #36]	; (80096d0 <vPortSetupTimerInterrupt+0x44>)
 80096aa:	3b01      	subs	r3, #1
 80096ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80096ae:	4b04      	ldr	r3, [pc, #16]	; (80096c0 <vPortSetupTimerInterrupt+0x34>)
 80096b0:	2207      	movs	r2, #7
 80096b2:	601a      	str	r2, [r3, #0]
}
 80096b4:	bf00      	nop
 80096b6:	46bd      	mov	sp, r7
 80096b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096bc:	4770      	bx	lr
 80096be:	bf00      	nop
 80096c0:	e000e010 	.word	0xe000e010
 80096c4:	e000e018 	.word	0xe000e018
 80096c8:	2000011c 	.word	0x2000011c
 80096cc:	10624dd3 	.word	0x10624dd3
 80096d0:	e000e014 	.word	0xe000e014

080096d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80096d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80096e4 <vPortEnableVFP+0x10>
 80096d8:	6801      	ldr	r1, [r0, #0]
 80096da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80096de:	6001      	str	r1, [r0, #0]
 80096e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80096e2:	bf00      	nop
 80096e4:	e000ed88 	.word	0xe000ed88

080096e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b08a      	sub	sp, #40	; 0x28
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80096f0:	2300      	movs	r3, #0
 80096f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80096f4:	f7ff fae2 	bl	8008cbc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80096f8:	4b5b      	ldr	r3, [pc, #364]	; (8009868 <pvPortMalloc+0x180>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d101      	bne.n	8009704 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009700:	f000 f920 	bl	8009944 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009704:	4b59      	ldr	r3, [pc, #356]	; (800986c <pvPortMalloc+0x184>)
 8009706:	681a      	ldr	r2, [r3, #0]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	4013      	ands	r3, r2
 800970c:	2b00      	cmp	r3, #0
 800970e:	f040 8093 	bne.w	8009838 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d01d      	beq.n	8009754 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009718:	2208      	movs	r2, #8
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	4413      	add	r3, r2
 800971e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f003 0307 	and.w	r3, r3, #7
 8009726:	2b00      	cmp	r3, #0
 8009728:	d014      	beq.n	8009754 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f023 0307 	bic.w	r3, r3, #7
 8009730:	3308      	adds	r3, #8
 8009732:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f003 0307 	and.w	r3, r3, #7
 800973a:	2b00      	cmp	r3, #0
 800973c:	d00a      	beq.n	8009754 <pvPortMalloc+0x6c>
	__asm volatile
 800973e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009742:	f383 8811 	msr	BASEPRI, r3
 8009746:	f3bf 8f6f 	isb	sy
 800974a:	f3bf 8f4f 	dsb	sy
 800974e:	617b      	str	r3, [r7, #20]
}
 8009750:	bf00      	nop
 8009752:	e7fe      	b.n	8009752 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d06e      	beq.n	8009838 <pvPortMalloc+0x150>
 800975a:	4b45      	ldr	r3, [pc, #276]	; (8009870 <pvPortMalloc+0x188>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	687a      	ldr	r2, [r7, #4]
 8009760:	429a      	cmp	r2, r3
 8009762:	d869      	bhi.n	8009838 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009764:	4b43      	ldr	r3, [pc, #268]	; (8009874 <pvPortMalloc+0x18c>)
 8009766:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009768:	4b42      	ldr	r3, [pc, #264]	; (8009874 <pvPortMalloc+0x18c>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800976e:	e004      	b.n	800977a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009772:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800977a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	687a      	ldr	r2, [r7, #4]
 8009780:	429a      	cmp	r2, r3
 8009782:	d903      	bls.n	800978c <pvPortMalloc+0xa4>
 8009784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d1f1      	bne.n	8009770 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800978c:	4b36      	ldr	r3, [pc, #216]	; (8009868 <pvPortMalloc+0x180>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009792:	429a      	cmp	r2, r3
 8009794:	d050      	beq.n	8009838 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009796:	6a3b      	ldr	r3, [r7, #32]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	2208      	movs	r2, #8
 800979c:	4413      	add	r3, r2
 800979e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80097a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a2:	681a      	ldr	r2, [r3, #0]
 80097a4:	6a3b      	ldr	r3, [r7, #32]
 80097a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80097a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097aa:	685a      	ldr	r2, [r3, #4]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	1ad2      	subs	r2, r2, r3
 80097b0:	2308      	movs	r3, #8
 80097b2:	005b      	lsls	r3, r3, #1
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d91f      	bls.n	80097f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80097b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	4413      	add	r3, r2
 80097be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80097c0:	69bb      	ldr	r3, [r7, #24]
 80097c2:	f003 0307 	and.w	r3, r3, #7
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d00a      	beq.n	80097e0 <pvPortMalloc+0xf8>
	__asm volatile
 80097ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ce:	f383 8811 	msr	BASEPRI, r3
 80097d2:	f3bf 8f6f 	isb	sy
 80097d6:	f3bf 8f4f 	dsb	sy
 80097da:	613b      	str	r3, [r7, #16]
}
 80097dc:	bf00      	nop
 80097de:	e7fe      	b.n	80097de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80097e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e2:	685a      	ldr	r2, [r3, #4]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	1ad2      	subs	r2, r2, r3
 80097e8:	69bb      	ldr	r3, [r7, #24]
 80097ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80097ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ee:	687a      	ldr	r2, [r7, #4]
 80097f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80097f2:	69b8      	ldr	r0, [r7, #24]
 80097f4:	f000 f908 	bl	8009a08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80097f8:	4b1d      	ldr	r3, [pc, #116]	; (8009870 <pvPortMalloc+0x188>)
 80097fa:	681a      	ldr	r2, [r3, #0]
 80097fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	1ad3      	subs	r3, r2, r3
 8009802:	4a1b      	ldr	r2, [pc, #108]	; (8009870 <pvPortMalloc+0x188>)
 8009804:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009806:	4b1a      	ldr	r3, [pc, #104]	; (8009870 <pvPortMalloc+0x188>)
 8009808:	681a      	ldr	r2, [r3, #0]
 800980a:	4b1b      	ldr	r3, [pc, #108]	; (8009878 <pvPortMalloc+0x190>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	429a      	cmp	r2, r3
 8009810:	d203      	bcs.n	800981a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009812:	4b17      	ldr	r3, [pc, #92]	; (8009870 <pvPortMalloc+0x188>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4a18      	ldr	r2, [pc, #96]	; (8009878 <pvPortMalloc+0x190>)
 8009818:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800981a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800981c:	685a      	ldr	r2, [r3, #4]
 800981e:	4b13      	ldr	r3, [pc, #76]	; (800986c <pvPortMalloc+0x184>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	431a      	orrs	r2, r3
 8009824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009826:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982a:	2200      	movs	r2, #0
 800982c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800982e:	4b13      	ldr	r3, [pc, #76]	; (800987c <pvPortMalloc+0x194>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	3301      	adds	r3, #1
 8009834:	4a11      	ldr	r2, [pc, #68]	; (800987c <pvPortMalloc+0x194>)
 8009836:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009838:	f7ff fa4e 	bl	8008cd8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800983c:	69fb      	ldr	r3, [r7, #28]
 800983e:	f003 0307 	and.w	r3, r3, #7
 8009842:	2b00      	cmp	r3, #0
 8009844:	d00a      	beq.n	800985c <pvPortMalloc+0x174>
	__asm volatile
 8009846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800984a:	f383 8811 	msr	BASEPRI, r3
 800984e:	f3bf 8f6f 	isb	sy
 8009852:	f3bf 8f4f 	dsb	sy
 8009856:	60fb      	str	r3, [r7, #12]
}
 8009858:	bf00      	nop
 800985a:	e7fe      	b.n	800985a <pvPortMalloc+0x172>
	return pvReturn;
 800985c:	69fb      	ldr	r3, [r7, #28]
}
 800985e:	4618      	mov	r0, r3
 8009860:	3728      	adds	r7, #40	; 0x28
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}
 8009866:	bf00      	nop
 8009868:	20004580 	.word	0x20004580
 800986c:	20004594 	.word	0x20004594
 8009870:	20004584 	.word	0x20004584
 8009874:	20004578 	.word	0x20004578
 8009878:	20004588 	.word	0x20004588
 800987c:	2000458c 	.word	0x2000458c

08009880 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b086      	sub	sp, #24
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d04d      	beq.n	800992e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009892:	2308      	movs	r3, #8
 8009894:	425b      	negs	r3, r3
 8009896:	697a      	ldr	r2, [r7, #20]
 8009898:	4413      	add	r3, r2
 800989a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	685a      	ldr	r2, [r3, #4]
 80098a4:	4b24      	ldr	r3, [pc, #144]	; (8009938 <vPortFree+0xb8>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	4013      	ands	r3, r2
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d10a      	bne.n	80098c4 <vPortFree+0x44>
	__asm volatile
 80098ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b2:	f383 8811 	msr	BASEPRI, r3
 80098b6:	f3bf 8f6f 	isb	sy
 80098ba:	f3bf 8f4f 	dsb	sy
 80098be:	60fb      	str	r3, [r7, #12]
}
 80098c0:	bf00      	nop
 80098c2:	e7fe      	b.n	80098c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d00a      	beq.n	80098e2 <vPortFree+0x62>
	__asm volatile
 80098cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d0:	f383 8811 	msr	BASEPRI, r3
 80098d4:	f3bf 8f6f 	isb	sy
 80098d8:	f3bf 8f4f 	dsb	sy
 80098dc:	60bb      	str	r3, [r7, #8]
}
 80098de:	bf00      	nop
 80098e0:	e7fe      	b.n	80098e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	685a      	ldr	r2, [r3, #4]
 80098e6:	4b14      	ldr	r3, [pc, #80]	; (8009938 <vPortFree+0xb8>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4013      	ands	r3, r2
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d01e      	beq.n	800992e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d11a      	bne.n	800992e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	685a      	ldr	r2, [r3, #4]
 80098fc:	4b0e      	ldr	r3, [pc, #56]	; (8009938 <vPortFree+0xb8>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	43db      	mvns	r3, r3
 8009902:	401a      	ands	r2, r3
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009908:	f7ff f9d8 	bl	8008cbc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	685a      	ldr	r2, [r3, #4]
 8009910:	4b0a      	ldr	r3, [pc, #40]	; (800993c <vPortFree+0xbc>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4413      	add	r3, r2
 8009916:	4a09      	ldr	r2, [pc, #36]	; (800993c <vPortFree+0xbc>)
 8009918:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800991a:	6938      	ldr	r0, [r7, #16]
 800991c:	f000 f874 	bl	8009a08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009920:	4b07      	ldr	r3, [pc, #28]	; (8009940 <vPortFree+0xc0>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	3301      	adds	r3, #1
 8009926:	4a06      	ldr	r2, [pc, #24]	; (8009940 <vPortFree+0xc0>)
 8009928:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800992a:	f7ff f9d5 	bl	8008cd8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800992e:	bf00      	nop
 8009930:	3718      	adds	r7, #24
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}
 8009936:	bf00      	nop
 8009938:	20004594 	.word	0x20004594
 800993c:	20004584 	.word	0x20004584
 8009940:	20004590 	.word	0x20004590

08009944 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009944:	b480      	push	{r7}
 8009946:	b085      	sub	sp, #20
 8009948:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800994a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800994e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009950:	4b27      	ldr	r3, [pc, #156]	; (80099f0 <prvHeapInit+0xac>)
 8009952:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f003 0307 	and.w	r3, r3, #7
 800995a:	2b00      	cmp	r3, #0
 800995c:	d00c      	beq.n	8009978 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	3307      	adds	r3, #7
 8009962:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f023 0307 	bic.w	r3, r3, #7
 800996a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800996c:	68ba      	ldr	r2, [r7, #8]
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	1ad3      	subs	r3, r2, r3
 8009972:	4a1f      	ldr	r2, [pc, #124]	; (80099f0 <prvHeapInit+0xac>)
 8009974:	4413      	add	r3, r2
 8009976:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800997c:	4a1d      	ldr	r2, [pc, #116]	; (80099f4 <prvHeapInit+0xb0>)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009982:	4b1c      	ldr	r3, [pc, #112]	; (80099f4 <prvHeapInit+0xb0>)
 8009984:	2200      	movs	r2, #0
 8009986:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	68ba      	ldr	r2, [r7, #8]
 800998c:	4413      	add	r3, r2
 800998e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009990:	2208      	movs	r2, #8
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	1a9b      	subs	r3, r3, r2
 8009996:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f023 0307 	bic.w	r3, r3, #7
 800999e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	4a15      	ldr	r2, [pc, #84]	; (80099f8 <prvHeapInit+0xb4>)
 80099a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80099a6:	4b14      	ldr	r3, [pc, #80]	; (80099f8 <prvHeapInit+0xb4>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	2200      	movs	r2, #0
 80099ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80099ae:	4b12      	ldr	r3, [pc, #72]	; (80099f8 <prvHeapInit+0xb4>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	2200      	movs	r2, #0
 80099b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	68fa      	ldr	r2, [r7, #12]
 80099be:	1ad2      	subs	r2, r2, r3
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80099c4:	4b0c      	ldr	r3, [pc, #48]	; (80099f8 <prvHeapInit+0xb4>)
 80099c6:	681a      	ldr	r2, [r3, #0]
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	4a0a      	ldr	r2, [pc, #40]	; (80099fc <prvHeapInit+0xb8>)
 80099d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	4a09      	ldr	r2, [pc, #36]	; (8009a00 <prvHeapInit+0xbc>)
 80099da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80099dc:	4b09      	ldr	r3, [pc, #36]	; (8009a04 <prvHeapInit+0xc0>)
 80099de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80099e2:	601a      	str	r2, [r3, #0]
}
 80099e4:	bf00      	nop
 80099e6:	3714      	adds	r7, #20
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr
 80099f0:	20000978 	.word	0x20000978
 80099f4:	20004578 	.word	0x20004578
 80099f8:	20004580 	.word	0x20004580
 80099fc:	20004588 	.word	0x20004588
 8009a00:	20004584 	.word	0x20004584
 8009a04:	20004594 	.word	0x20004594

08009a08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b085      	sub	sp, #20
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009a10:	4b28      	ldr	r3, [pc, #160]	; (8009ab4 <prvInsertBlockIntoFreeList+0xac>)
 8009a12:	60fb      	str	r3, [r7, #12]
 8009a14:	e002      	b.n	8009a1c <prvInsertBlockIntoFreeList+0x14>
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	60fb      	str	r3, [r7, #12]
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	687a      	ldr	r2, [r7, #4]
 8009a22:	429a      	cmp	r2, r3
 8009a24:	d8f7      	bhi.n	8009a16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	685b      	ldr	r3, [r3, #4]
 8009a2e:	68ba      	ldr	r2, [r7, #8]
 8009a30:	4413      	add	r3, r2
 8009a32:	687a      	ldr	r2, [r7, #4]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d108      	bne.n	8009a4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	685a      	ldr	r2, [r3, #4]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	441a      	add	r2, r3
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	685b      	ldr	r3, [r3, #4]
 8009a52:	68ba      	ldr	r2, [r7, #8]
 8009a54:	441a      	add	r2, r3
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d118      	bne.n	8009a90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681a      	ldr	r2, [r3, #0]
 8009a62:	4b15      	ldr	r3, [pc, #84]	; (8009ab8 <prvInsertBlockIntoFreeList+0xb0>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d00d      	beq.n	8009a86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	685a      	ldr	r2, [r3, #4]
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	441a      	add	r2, r3
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	681a      	ldr	r2, [r3, #0]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	601a      	str	r2, [r3, #0]
 8009a84:	e008      	b.n	8009a98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009a86:	4b0c      	ldr	r3, [pc, #48]	; (8009ab8 <prvInsertBlockIntoFreeList+0xb0>)
 8009a88:	681a      	ldr	r2, [r3, #0]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	601a      	str	r2, [r3, #0]
 8009a8e:	e003      	b.n	8009a98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681a      	ldr	r2, [r3, #0]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009a98:	68fa      	ldr	r2, [r7, #12]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d002      	beq.n	8009aa6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	687a      	ldr	r2, [r7, #4]
 8009aa4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009aa6:	bf00      	nop
 8009aa8:	3714      	adds	r7, #20
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab0:	4770      	bx	lr
 8009ab2:	bf00      	nop
 8009ab4:	20004578 	.word	0x20004578
 8009ab8:	20004580 	.word	0x20004580

08009abc <memset>:
 8009abc:	4402      	add	r2, r0
 8009abe:	4603      	mov	r3, r0
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d100      	bne.n	8009ac6 <memset+0xa>
 8009ac4:	4770      	bx	lr
 8009ac6:	f803 1b01 	strb.w	r1, [r3], #1
 8009aca:	e7f9      	b.n	8009ac0 <memset+0x4>

08009acc <_reclaim_reent>:
 8009acc:	4b29      	ldr	r3, [pc, #164]	; (8009b74 <_reclaim_reent+0xa8>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	4283      	cmp	r3, r0
 8009ad2:	b570      	push	{r4, r5, r6, lr}
 8009ad4:	4604      	mov	r4, r0
 8009ad6:	d04b      	beq.n	8009b70 <_reclaim_reent+0xa4>
 8009ad8:	69c3      	ldr	r3, [r0, #28]
 8009ada:	b143      	cbz	r3, 8009aee <_reclaim_reent+0x22>
 8009adc:	68db      	ldr	r3, [r3, #12]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d144      	bne.n	8009b6c <_reclaim_reent+0xa0>
 8009ae2:	69e3      	ldr	r3, [r4, #28]
 8009ae4:	6819      	ldr	r1, [r3, #0]
 8009ae6:	b111      	cbz	r1, 8009aee <_reclaim_reent+0x22>
 8009ae8:	4620      	mov	r0, r4
 8009aea:	f000 f86b 	bl	8009bc4 <_free_r>
 8009aee:	6961      	ldr	r1, [r4, #20]
 8009af0:	b111      	cbz	r1, 8009af8 <_reclaim_reent+0x2c>
 8009af2:	4620      	mov	r0, r4
 8009af4:	f000 f866 	bl	8009bc4 <_free_r>
 8009af8:	69e1      	ldr	r1, [r4, #28]
 8009afa:	b111      	cbz	r1, 8009b02 <_reclaim_reent+0x36>
 8009afc:	4620      	mov	r0, r4
 8009afe:	f000 f861 	bl	8009bc4 <_free_r>
 8009b02:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009b04:	b111      	cbz	r1, 8009b0c <_reclaim_reent+0x40>
 8009b06:	4620      	mov	r0, r4
 8009b08:	f000 f85c 	bl	8009bc4 <_free_r>
 8009b0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b0e:	b111      	cbz	r1, 8009b16 <_reclaim_reent+0x4a>
 8009b10:	4620      	mov	r0, r4
 8009b12:	f000 f857 	bl	8009bc4 <_free_r>
 8009b16:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009b18:	b111      	cbz	r1, 8009b20 <_reclaim_reent+0x54>
 8009b1a:	4620      	mov	r0, r4
 8009b1c:	f000 f852 	bl	8009bc4 <_free_r>
 8009b20:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009b22:	b111      	cbz	r1, 8009b2a <_reclaim_reent+0x5e>
 8009b24:	4620      	mov	r0, r4
 8009b26:	f000 f84d 	bl	8009bc4 <_free_r>
 8009b2a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009b2c:	b111      	cbz	r1, 8009b34 <_reclaim_reent+0x68>
 8009b2e:	4620      	mov	r0, r4
 8009b30:	f000 f848 	bl	8009bc4 <_free_r>
 8009b34:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009b36:	b111      	cbz	r1, 8009b3e <_reclaim_reent+0x72>
 8009b38:	4620      	mov	r0, r4
 8009b3a:	f000 f843 	bl	8009bc4 <_free_r>
 8009b3e:	6a23      	ldr	r3, [r4, #32]
 8009b40:	b1b3      	cbz	r3, 8009b70 <_reclaim_reent+0xa4>
 8009b42:	4620      	mov	r0, r4
 8009b44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009b48:	4718      	bx	r3
 8009b4a:	5949      	ldr	r1, [r1, r5]
 8009b4c:	b941      	cbnz	r1, 8009b60 <_reclaim_reent+0x94>
 8009b4e:	3504      	adds	r5, #4
 8009b50:	69e3      	ldr	r3, [r4, #28]
 8009b52:	2d80      	cmp	r5, #128	; 0x80
 8009b54:	68d9      	ldr	r1, [r3, #12]
 8009b56:	d1f8      	bne.n	8009b4a <_reclaim_reent+0x7e>
 8009b58:	4620      	mov	r0, r4
 8009b5a:	f000 f833 	bl	8009bc4 <_free_r>
 8009b5e:	e7c0      	b.n	8009ae2 <_reclaim_reent+0x16>
 8009b60:	680e      	ldr	r6, [r1, #0]
 8009b62:	4620      	mov	r0, r4
 8009b64:	f000 f82e 	bl	8009bc4 <_free_r>
 8009b68:	4631      	mov	r1, r6
 8009b6a:	e7ef      	b.n	8009b4c <_reclaim_reent+0x80>
 8009b6c:	2500      	movs	r5, #0
 8009b6e:	e7ef      	b.n	8009b50 <_reclaim_reent+0x84>
 8009b70:	bd70      	pop	{r4, r5, r6, pc}
 8009b72:	bf00      	nop
 8009b74:	20000178 	.word	0x20000178

08009b78 <__libc_init_array>:
 8009b78:	b570      	push	{r4, r5, r6, lr}
 8009b7a:	4d0d      	ldr	r5, [pc, #52]	; (8009bb0 <__libc_init_array+0x38>)
 8009b7c:	4c0d      	ldr	r4, [pc, #52]	; (8009bb4 <__libc_init_array+0x3c>)
 8009b7e:	1b64      	subs	r4, r4, r5
 8009b80:	10a4      	asrs	r4, r4, #2
 8009b82:	2600      	movs	r6, #0
 8009b84:	42a6      	cmp	r6, r4
 8009b86:	d109      	bne.n	8009b9c <__libc_init_array+0x24>
 8009b88:	4d0b      	ldr	r5, [pc, #44]	; (8009bb8 <__libc_init_array+0x40>)
 8009b8a:	4c0c      	ldr	r4, [pc, #48]	; (8009bbc <__libc_init_array+0x44>)
 8009b8c:	f000 f872 	bl	8009c74 <_init>
 8009b90:	1b64      	subs	r4, r4, r5
 8009b92:	10a4      	asrs	r4, r4, #2
 8009b94:	2600      	movs	r6, #0
 8009b96:	42a6      	cmp	r6, r4
 8009b98:	d105      	bne.n	8009ba6 <__libc_init_array+0x2e>
 8009b9a:	bd70      	pop	{r4, r5, r6, pc}
 8009b9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ba0:	4798      	blx	r3
 8009ba2:	3601      	adds	r6, #1
 8009ba4:	e7ee      	b.n	8009b84 <__libc_init_array+0xc>
 8009ba6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009baa:	4798      	blx	r3
 8009bac:	3601      	adds	r6, #1
 8009bae:	e7f2      	b.n	8009b96 <__libc_init_array+0x1e>
 8009bb0:	08009d30 	.word	0x08009d30
 8009bb4:	08009d30 	.word	0x08009d30
 8009bb8:	08009d30 	.word	0x08009d30
 8009bbc:	08009d34 	.word	0x08009d34

08009bc0 <__retarget_lock_acquire_recursive>:
 8009bc0:	4770      	bx	lr

08009bc2 <__retarget_lock_release_recursive>:
 8009bc2:	4770      	bx	lr

08009bc4 <_free_r>:
 8009bc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009bc6:	2900      	cmp	r1, #0
 8009bc8:	d044      	beq.n	8009c54 <_free_r+0x90>
 8009bca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bce:	9001      	str	r0, [sp, #4]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	f1a1 0404 	sub.w	r4, r1, #4
 8009bd6:	bfb8      	it	lt
 8009bd8:	18e4      	addlt	r4, r4, r3
 8009bda:	f000 f83f 	bl	8009c5c <__malloc_lock>
 8009bde:	4a1e      	ldr	r2, [pc, #120]	; (8009c58 <_free_r+0x94>)
 8009be0:	9801      	ldr	r0, [sp, #4]
 8009be2:	6813      	ldr	r3, [r2, #0]
 8009be4:	b933      	cbnz	r3, 8009bf4 <_free_r+0x30>
 8009be6:	6063      	str	r3, [r4, #4]
 8009be8:	6014      	str	r4, [r2, #0]
 8009bea:	b003      	add	sp, #12
 8009bec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009bf0:	f000 b83a 	b.w	8009c68 <__malloc_unlock>
 8009bf4:	42a3      	cmp	r3, r4
 8009bf6:	d908      	bls.n	8009c0a <_free_r+0x46>
 8009bf8:	6825      	ldr	r5, [r4, #0]
 8009bfa:	1961      	adds	r1, r4, r5
 8009bfc:	428b      	cmp	r3, r1
 8009bfe:	bf01      	itttt	eq
 8009c00:	6819      	ldreq	r1, [r3, #0]
 8009c02:	685b      	ldreq	r3, [r3, #4]
 8009c04:	1949      	addeq	r1, r1, r5
 8009c06:	6021      	streq	r1, [r4, #0]
 8009c08:	e7ed      	b.n	8009be6 <_free_r+0x22>
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	b10b      	cbz	r3, 8009c14 <_free_r+0x50>
 8009c10:	42a3      	cmp	r3, r4
 8009c12:	d9fa      	bls.n	8009c0a <_free_r+0x46>
 8009c14:	6811      	ldr	r1, [r2, #0]
 8009c16:	1855      	adds	r5, r2, r1
 8009c18:	42a5      	cmp	r5, r4
 8009c1a:	d10b      	bne.n	8009c34 <_free_r+0x70>
 8009c1c:	6824      	ldr	r4, [r4, #0]
 8009c1e:	4421      	add	r1, r4
 8009c20:	1854      	adds	r4, r2, r1
 8009c22:	42a3      	cmp	r3, r4
 8009c24:	6011      	str	r1, [r2, #0]
 8009c26:	d1e0      	bne.n	8009bea <_free_r+0x26>
 8009c28:	681c      	ldr	r4, [r3, #0]
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	6053      	str	r3, [r2, #4]
 8009c2e:	440c      	add	r4, r1
 8009c30:	6014      	str	r4, [r2, #0]
 8009c32:	e7da      	b.n	8009bea <_free_r+0x26>
 8009c34:	d902      	bls.n	8009c3c <_free_r+0x78>
 8009c36:	230c      	movs	r3, #12
 8009c38:	6003      	str	r3, [r0, #0]
 8009c3a:	e7d6      	b.n	8009bea <_free_r+0x26>
 8009c3c:	6825      	ldr	r5, [r4, #0]
 8009c3e:	1961      	adds	r1, r4, r5
 8009c40:	428b      	cmp	r3, r1
 8009c42:	bf04      	itt	eq
 8009c44:	6819      	ldreq	r1, [r3, #0]
 8009c46:	685b      	ldreq	r3, [r3, #4]
 8009c48:	6063      	str	r3, [r4, #4]
 8009c4a:	bf04      	itt	eq
 8009c4c:	1949      	addeq	r1, r1, r5
 8009c4e:	6021      	streq	r1, [r4, #0]
 8009c50:	6054      	str	r4, [r2, #4]
 8009c52:	e7ca      	b.n	8009bea <_free_r+0x26>
 8009c54:	b003      	add	sp, #12
 8009c56:	bd30      	pop	{r4, r5, pc}
 8009c58:	200046d4 	.word	0x200046d4

08009c5c <__malloc_lock>:
 8009c5c:	4801      	ldr	r0, [pc, #4]	; (8009c64 <__malloc_lock+0x8>)
 8009c5e:	f7ff bfaf 	b.w	8009bc0 <__retarget_lock_acquire_recursive>
 8009c62:	bf00      	nop
 8009c64:	200046d0 	.word	0x200046d0

08009c68 <__malloc_unlock>:
 8009c68:	4801      	ldr	r0, [pc, #4]	; (8009c70 <__malloc_unlock+0x8>)
 8009c6a:	f7ff bfaa 	b.w	8009bc2 <__retarget_lock_release_recursive>
 8009c6e:	bf00      	nop
 8009c70:	200046d0 	.word	0x200046d0

08009c74 <_init>:
 8009c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c76:	bf00      	nop
 8009c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c7a:	bc08      	pop	{r3}
 8009c7c:	469e      	mov	lr, r3
 8009c7e:	4770      	bx	lr

08009c80 <_fini>:
 8009c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c82:	bf00      	nop
 8009c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c86:	bc08      	pop	{r3}
 8009c88:	469e      	mov	lr, r3
 8009c8a:	4770      	bx	lr
