
ManualRobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a660  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  0800a810  0800a810  0001a810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a93c  0800a93c  00020188  2**0
                  CONTENTS
  4 .ARM          00000008  0800a93c  0800a93c  0001a93c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a944  0800a944  00020188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a944  0800a944  0001a944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a948  0800a948  0001a948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  0800a94c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020188  2**0
                  CONTENTS
 10 .bss          00004564  20000188  20000188  00020188  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200046ec  200046ec  00020188  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001a030  00000000  00000000  000201fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003d64  00000000  00000000  0003a22b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001668  00000000  00000000  0003df90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001153  00000000  00000000  0003f5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027bba  00000000  00000000  0004074b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001ab05  00000000  00000000  00068305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e8a6f  00000000  00000000  00082e0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006584  00000000  00000000  0016b87c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00171e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000188 	.word	0x20000188
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a7f8 	.word	0x0800a7f8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000018c 	.word	0x2000018c
 80001ec:	0800a7f8 	.word	0x0800a7f8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_uldivmod>:
 8000b8c:	b953      	cbnz	r3, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b8e:	b94a      	cbnz	r2, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bf08      	it	eq
 8000b94:	2800      	cmpeq	r0, #0
 8000b96:	bf1c      	itt	ne
 8000b98:	f04f 31ff 	movne.w	r1, #4294967295
 8000b9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba0:	f000 b970 	b.w	8000e84 <__aeabi_idiv0>
 8000ba4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bac:	f000 f806 	bl	8000bbc <__udivmoddi4>
 8000bb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb8:	b004      	add	sp, #16
 8000bba:	4770      	bx	lr

08000bbc <__udivmoddi4>:
 8000bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc0:	9e08      	ldr	r6, [sp, #32]
 8000bc2:	460d      	mov	r5, r1
 8000bc4:	4604      	mov	r4, r0
 8000bc6:	460f      	mov	r7, r1
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d14a      	bne.n	8000c62 <__udivmoddi4+0xa6>
 8000bcc:	428a      	cmp	r2, r1
 8000bce:	4694      	mov	ip, r2
 8000bd0:	d965      	bls.n	8000c9e <__udivmoddi4+0xe2>
 8000bd2:	fab2 f382 	clz	r3, r2
 8000bd6:	b143      	cbz	r3, 8000bea <__udivmoddi4+0x2e>
 8000bd8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bdc:	f1c3 0220 	rsb	r2, r3, #32
 8000be0:	409f      	lsls	r7, r3
 8000be2:	fa20 f202 	lsr.w	r2, r0, r2
 8000be6:	4317      	orrs	r7, r2
 8000be8:	409c      	lsls	r4, r3
 8000bea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bee:	fa1f f58c 	uxth.w	r5, ip
 8000bf2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bf6:	0c22      	lsrs	r2, r4, #16
 8000bf8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bfc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c00:	fb01 f005 	mul.w	r0, r1, r5
 8000c04:	4290      	cmp	r0, r2
 8000c06:	d90a      	bls.n	8000c1e <__udivmoddi4+0x62>
 8000c08:	eb1c 0202 	adds.w	r2, ip, r2
 8000c0c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c10:	f080 811c 	bcs.w	8000e4c <__udivmoddi4+0x290>
 8000c14:	4290      	cmp	r0, r2
 8000c16:	f240 8119 	bls.w	8000e4c <__udivmoddi4+0x290>
 8000c1a:	3902      	subs	r1, #2
 8000c1c:	4462      	add	r2, ip
 8000c1e:	1a12      	subs	r2, r2, r0
 8000c20:	b2a4      	uxth	r4, r4
 8000c22:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c26:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c2a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c2e:	fb00 f505 	mul.w	r5, r0, r5
 8000c32:	42a5      	cmp	r5, r4
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x90>
 8000c36:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c3e:	f080 8107 	bcs.w	8000e50 <__udivmoddi4+0x294>
 8000c42:	42a5      	cmp	r5, r4
 8000c44:	f240 8104 	bls.w	8000e50 <__udivmoddi4+0x294>
 8000c48:	4464      	add	r4, ip
 8000c4a:	3802      	subs	r0, #2
 8000c4c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c50:	1b64      	subs	r4, r4, r5
 8000c52:	2100      	movs	r1, #0
 8000c54:	b11e      	cbz	r6, 8000c5e <__udivmoddi4+0xa2>
 8000c56:	40dc      	lsrs	r4, r3
 8000c58:	2300      	movs	r3, #0
 8000c5a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d908      	bls.n	8000c78 <__udivmoddi4+0xbc>
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	f000 80ed 	beq.w	8000e46 <__udivmoddi4+0x28a>
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c72:	4608      	mov	r0, r1
 8000c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c78:	fab3 f183 	clz	r1, r3
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	d149      	bne.n	8000d14 <__udivmoddi4+0x158>
 8000c80:	42ab      	cmp	r3, r5
 8000c82:	d302      	bcc.n	8000c8a <__udivmoddi4+0xce>
 8000c84:	4282      	cmp	r2, r0
 8000c86:	f200 80f8 	bhi.w	8000e7a <__udivmoddi4+0x2be>
 8000c8a:	1a84      	subs	r4, r0, r2
 8000c8c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c90:	2001      	movs	r0, #1
 8000c92:	4617      	mov	r7, r2
 8000c94:	2e00      	cmp	r6, #0
 8000c96:	d0e2      	beq.n	8000c5e <__udivmoddi4+0xa2>
 8000c98:	e9c6 4700 	strd	r4, r7, [r6]
 8000c9c:	e7df      	b.n	8000c5e <__udivmoddi4+0xa2>
 8000c9e:	b902      	cbnz	r2, 8000ca2 <__udivmoddi4+0xe6>
 8000ca0:	deff      	udf	#255	; 0xff
 8000ca2:	fab2 f382 	clz	r3, r2
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	f040 8090 	bne.w	8000dcc <__udivmoddi4+0x210>
 8000cac:	1a8a      	subs	r2, r1, r2
 8000cae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb2:	fa1f fe8c 	uxth.w	lr, ip
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cbc:	fb07 2015 	mls	r0, r7, r5, r2
 8000cc0:	0c22      	lsrs	r2, r4, #16
 8000cc2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cc6:	fb0e f005 	mul.w	r0, lr, r5
 8000cca:	4290      	cmp	r0, r2
 8000ccc:	d908      	bls.n	8000ce0 <__udivmoddi4+0x124>
 8000cce:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0x122>
 8000cd8:	4290      	cmp	r0, r2
 8000cda:	f200 80cb 	bhi.w	8000e74 <__udivmoddi4+0x2b8>
 8000cde:	4645      	mov	r5, r8
 8000ce0:	1a12      	subs	r2, r2, r0
 8000ce2:	b2a4      	uxth	r4, r4
 8000ce4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ce8:	fb07 2210 	mls	r2, r7, r0, r2
 8000cec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cf0:	fb0e fe00 	mul.w	lr, lr, r0
 8000cf4:	45a6      	cmp	lr, r4
 8000cf6:	d908      	bls.n	8000d0a <__udivmoddi4+0x14e>
 8000cf8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cfc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d00:	d202      	bcs.n	8000d08 <__udivmoddi4+0x14c>
 8000d02:	45a6      	cmp	lr, r4
 8000d04:	f200 80bb 	bhi.w	8000e7e <__udivmoddi4+0x2c2>
 8000d08:	4610      	mov	r0, r2
 8000d0a:	eba4 040e 	sub.w	r4, r4, lr
 8000d0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d12:	e79f      	b.n	8000c54 <__udivmoddi4+0x98>
 8000d14:	f1c1 0720 	rsb	r7, r1, #32
 8000d18:	408b      	lsls	r3, r1
 8000d1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d22:	fa05 f401 	lsl.w	r4, r5, r1
 8000d26:	fa20 f307 	lsr.w	r3, r0, r7
 8000d2a:	40fd      	lsrs	r5, r7
 8000d2c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d30:	4323      	orrs	r3, r4
 8000d32:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d36:	fa1f fe8c 	uxth.w	lr, ip
 8000d3a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d3e:	0c1c      	lsrs	r4, r3, #16
 8000d40:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d44:	fb08 f50e 	mul.w	r5, r8, lr
 8000d48:	42a5      	cmp	r5, r4
 8000d4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d4e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d52:	d90b      	bls.n	8000d6c <__udivmoddi4+0x1b0>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d5c:	f080 8088 	bcs.w	8000e70 <__udivmoddi4+0x2b4>
 8000d60:	42a5      	cmp	r5, r4
 8000d62:	f240 8085 	bls.w	8000e70 <__udivmoddi4+0x2b4>
 8000d66:	f1a8 0802 	sub.w	r8, r8, #2
 8000d6a:	4464      	add	r4, ip
 8000d6c:	1b64      	subs	r4, r4, r5
 8000d6e:	b29d      	uxth	r5, r3
 8000d70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d74:	fb09 4413 	mls	r4, r9, r3, r4
 8000d78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d80:	45a6      	cmp	lr, r4
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x1da>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d8c:	d26c      	bcs.n	8000e68 <__udivmoddi4+0x2ac>
 8000d8e:	45a6      	cmp	lr, r4
 8000d90:	d96a      	bls.n	8000e68 <__udivmoddi4+0x2ac>
 8000d92:	3b02      	subs	r3, #2
 8000d94:	4464      	add	r4, ip
 8000d96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d9a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d9e:	eba4 040e 	sub.w	r4, r4, lr
 8000da2:	42ac      	cmp	r4, r5
 8000da4:	46c8      	mov	r8, r9
 8000da6:	46ae      	mov	lr, r5
 8000da8:	d356      	bcc.n	8000e58 <__udivmoddi4+0x29c>
 8000daa:	d053      	beq.n	8000e54 <__udivmoddi4+0x298>
 8000dac:	b156      	cbz	r6, 8000dc4 <__udivmoddi4+0x208>
 8000dae:	ebb0 0208 	subs.w	r2, r0, r8
 8000db2:	eb64 040e 	sbc.w	r4, r4, lr
 8000db6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dba:	40ca      	lsrs	r2, r1
 8000dbc:	40cc      	lsrs	r4, r1
 8000dbe:	4317      	orrs	r7, r2
 8000dc0:	e9c6 7400 	strd	r7, r4, [r6]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dcc:	f1c3 0120 	rsb	r1, r3, #32
 8000dd0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dd4:	fa20 f201 	lsr.w	r2, r0, r1
 8000dd8:	fa25 f101 	lsr.w	r1, r5, r1
 8000ddc:	409d      	lsls	r5, r3
 8000dde:	432a      	orrs	r2, r5
 8000de0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de4:	fa1f fe8c 	uxth.w	lr, ip
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1510 	mls	r5, r7, r0, r1
 8000df0:	0c11      	lsrs	r1, r2, #16
 8000df2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000df6:	fb00 f50e 	mul.w	r5, r0, lr
 8000dfa:	428d      	cmp	r5, r1
 8000dfc:	fa04 f403 	lsl.w	r4, r4, r3
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x258>
 8000e02:	eb1c 0101 	adds.w	r1, ip, r1
 8000e06:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e0a:	d22f      	bcs.n	8000e6c <__udivmoddi4+0x2b0>
 8000e0c:	428d      	cmp	r5, r1
 8000e0e:	d92d      	bls.n	8000e6c <__udivmoddi4+0x2b0>
 8000e10:	3802      	subs	r0, #2
 8000e12:	4461      	add	r1, ip
 8000e14:	1b49      	subs	r1, r1, r5
 8000e16:	b292      	uxth	r2, r2
 8000e18:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e1c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e24:	fb05 f10e 	mul.w	r1, r5, lr
 8000e28:	4291      	cmp	r1, r2
 8000e2a:	d908      	bls.n	8000e3e <__udivmoddi4+0x282>
 8000e2c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e30:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e34:	d216      	bcs.n	8000e64 <__udivmoddi4+0x2a8>
 8000e36:	4291      	cmp	r1, r2
 8000e38:	d914      	bls.n	8000e64 <__udivmoddi4+0x2a8>
 8000e3a:	3d02      	subs	r5, #2
 8000e3c:	4462      	add	r2, ip
 8000e3e:	1a52      	subs	r2, r2, r1
 8000e40:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e44:	e738      	b.n	8000cb8 <__udivmoddi4+0xfc>
 8000e46:	4631      	mov	r1, r6
 8000e48:	4630      	mov	r0, r6
 8000e4a:	e708      	b.n	8000c5e <__udivmoddi4+0xa2>
 8000e4c:	4639      	mov	r1, r7
 8000e4e:	e6e6      	b.n	8000c1e <__udivmoddi4+0x62>
 8000e50:	4610      	mov	r0, r2
 8000e52:	e6fb      	b.n	8000c4c <__udivmoddi4+0x90>
 8000e54:	4548      	cmp	r0, r9
 8000e56:	d2a9      	bcs.n	8000dac <__udivmoddi4+0x1f0>
 8000e58:	ebb9 0802 	subs.w	r8, r9, r2
 8000e5c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e60:	3b01      	subs	r3, #1
 8000e62:	e7a3      	b.n	8000dac <__udivmoddi4+0x1f0>
 8000e64:	4645      	mov	r5, r8
 8000e66:	e7ea      	b.n	8000e3e <__udivmoddi4+0x282>
 8000e68:	462b      	mov	r3, r5
 8000e6a:	e794      	b.n	8000d96 <__udivmoddi4+0x1da>
 8000e6c:	4640      	mov	r0, r8
 8000e6e:	e7d1      	b.n	8000e14 <__udivmoddi4+0x258>
 8000e70:	46d0      	mov	r8, sl
 8000e72:	e77b      	b.n	8000d6c <__udivmoddi4+0x1b0>
 8000e74:	3d02      	subs	r5, #2
 8000e76:	4462      	add	r2, ip
 8000e78:	e732      	b.n	8000ce0 <__udivmoddi4+0x124>
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	e70a      	b.n	8000c94 <__udivmoddi4+0xd8>
 8000e7e:	4464      	add	r4, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e742      	b.n	8000d0a <__udivmoddi4+0x14e>

08000e84 <__aeabi_idiv0>:
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <kinematikM>:
 */
#include "4kinematik.h"

double out[4];

void kinematikM(int x, int y, int th, double nos) {
 8000e88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e8c:	b086      	sub	sp, #24
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6178      	str	r0, [r7, #20]
 8000e92:	6139      	str	r1, [r7, #16]
 8000e94:	60fa      	str	r2, [r7, #12]
 8000e96:	ed87 0b00 	vstr	d0, [r7]
	out[0] = nos*2*(-sin(d2r(135))*x + cos(d2r(135))*y + 0.25*th);
 8000e9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	f7ff f9fb 	bl	800029c <__adddf3>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	4614      	mov	r4, r2
 8000eac:	461d      	mov	r5, r3
 8000eae:	6978      	ldr	r0, [r7, #20]
 8000eb0:	f7ff fb40 	bl	8000534 <__aeabi_i2d>
 8000eb4:	a38c      	add	r3, pc, #560	; (adr r3, 80010e8 <kinematikM+0x260>)
 8000eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eba:	f7ff fba5 	bl	8000608 <__aeabi_dmul>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	4690      	mov	r8, r2
 8000ec4:	4699      	mov	r9, r3
 8000ec6:	6938      	ldr	r0, [r7, #16]
 8000ec8:	f7ff fb34 	bl	8000534 <__aeabi_i2d>
 8000ecc:	a380      	add	r3, pc, #512	; (adr r3, 80010d0 <kinematikM+0x248>)
 8000ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed2:	f7ff fb99 	bl	8000608 <__aeabi_dmul>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	460b      	mov	r3, r1
 8000eda:	4640      	mov	r0, r8
 8000edc:	4649      	mov	r1, r9
 8000ede:	f7ff f9dd 	bl	800029c <__adddf3>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	4690      	mov	r8, r2
 8000ee8:	4699      	mov	r9, r3
 8000eea:	68f8      	ldr	r0, [r7, #12]
 8000eec:	f7ff fb22 	bl	8000534 <__aeabi_i2d>
 8000ef0:	f04f 0200 	mov.w	r2, #0
 8000ef4:	4b7a      	ldr	r3, [pc, #488]	; (80010e0 <kinematikM+0x258>)
 8000ef6:	f7ff fb87 	bl	8000608 <__aeabi_dmul>
 8000efa:	4602      	mov	r2, r0
 8000efc:	460b      	mov	r3, r1
 8000efe:	4640      	mov	r0, r8
 8000f00:	4649      	mov	r1, r9
 8000f02:	f7ff f9cb 	bl	800029c <__adddf3>
 8000f06:	4602      	mov	r2, r0
 8000f08:	460b      	mov	r3, r1
 8000f0a:	4620      	mov	r0, r4
 8000f0c:	4629      	mov	r1, r5
 8000f0e:	f7ff fb7b 	bl	8000608 <__aeabi_dmul>
 8000f12:	4602      	mov	r2, r0
 8000f14:	460b      	mov	r3, r1
 8000f16:	4973      	ldr	r1, [pc, #460]	; (80010e4 <kinematikM+0x25c>)
 8000f18:	e9c1 2300 	strd	r2, r3, [r1]
	out[1] = nos*2*(-sin(d2r(225))*x + cos(d2r(225))*y + 0.25*th);
 8000f1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f20:	4602      	mov	r2, r0
 8000f22:	460b      	mov	r3, r1
 8000f24:	f7ff f9ba 	bl	800029c <__adddf3>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	4614      	mov	r4, r2
 8000f2e:	461d      	mov	r5, r3
 8000f30:	6978      	ldr	r0, [r7, #20]
 8000f32:	f7ff faff 	bl	8000534 <__aeabi_i2d>
 8000f36:	a35e      	add	r3, pc, #376	; (adr r3, 80010b0 <kinematikM+0x228>)
 8000f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3c:	f7ff fb64 	bl	8000608 <__aeabi_dmul>
 8000f40:	4602      	mov	r2, r0
 8000f42:	460b      	mov	r3, r1
 8000f44:	4690      	mov	r8, r2
 8000f46:	4699      	mov	r9, r3
 8000f48:	6938      	ldr	r0, [r7, #16]
 8000f4a:	f7ff faf3 	bl	8000534 <__aeabi_i2d>
 8000f4e:	a35a      	add	r3, pc, #360	; (adr r3, 80010b8 <kinematikM+0x230>)
 8000f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f54:	f7ff fb58 	bl	8000608 <__aeabi_dmul>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	4640      	mov	r0, r8
 8000f5e:	4649      	mov	r1, r9
 8000f60:	f7ff f99c 	bl	800029c <__adddf3>
 8000f64:	4602      	mov	r2, r0
 8000f66:	460b      	mov	r3, r1
 8000f68:	4690      	mov	r8, r2
 8000f6a:	4699      	mov	r9, r3
 8000f6c:	68f8      	ldr	r0, [r7, #12]
 8000f6e:	f7ff fae1 	bl	8000534 <__aeabi_i2d>
 8000f72:	f04f 0200 	mov.w	r2, #0
 8000f76:	4b5a      	ldr	r3, [pc, #360]	; (80010e0 <kinematikM+0x258>)
 8000f78:	f7ff fb46 	bl	8000608 <__aeabi_dmul>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	460b      	mov	r3, r1
 8000f80:	4640      	mov	r0, r8
 8000f82:	4649      	mov	r1, r9
 8000f84:	f7ff f98a 	bl	800029c <__adddf3>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	4620      	mov	r0, r4
 8000f8e:	4629      	mov	r1, r5
 8000f90:	f7ff fb3a 	bl	8000608 <__aeabi_dmul>
 8000f94:	4602      	mov	r2, r0
 8000f96:	460b      	mov	r3, r1
 8000f98:	4952      	ldr	r1, [pc, #328]	; (80010e4 <kinematikM+0x25c>)
 8000f9a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	out[2] = nos*2*(-sin(d2r(315))*x + cos(d2r(315))*y + 0.25*th);
 8000f9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	f7ff f979 	bl	800029c <__adddf3>
 8000faa:	4602      	mov	r2, r0
 8000fac:	460b      	mov	r3, r1
 8000fae:	4614      	mov	r4, r2
 8000fb0:	461d      	mov	r5, r3
 8000fb2:	6978      	ldr	r0, [r7, #20]
 8000fb4:	f7ff fabe 	bl	8000534 <__aeabi_i2d>
 8000fb8:	a341      	add	r3, pc, #260	; (adr r3, 80010c0 <kinematikM+0x238>)
 8000fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fbe:	f7ff fb23 	bl	8000608 <__aeabi_dmul>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	4690      	mov	r8, r2
 8000fc8:	4699      	mov	r9, r3
 8000fca:	6938      	ldr	r0, [r7, #16]
 8000fcc:	f7ff fab2 	bl	8000534 <__aeabi_i2d>
 8000fd0:	a33d      	add	r3, pc, #244	; (adr r3, 80010c8 <kinematikM+0x240>)
 8000fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd6:	f7ff fb17 	bl	8000608 <__aeabi_dmul>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	460b      	mov	r3, r1
 8000fde:	4640      	mov	r0, r8
 8000fe0:	4649      	mov	r1, r9
 8000fe2:	f7ff f95b 	bl	800029c <__adddf3>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4690      	mov	r8, r2
 8000fec:	4699      	mov	r9, r3
 8000fee:	68f8      	ldr	r0, [r7, #12]
 8000ff0:	f7ff faa0 	bl	8000534 <__aeabi_i2d>
 8000ff4:	f04f 0200 	mov.w	r2, #0
 8000ff8:	4b39      	ldr	r3, [pc, #228]	; (80010e0 <kinematikM+0x258>)
 8000ffa:	f7ff fb05 	bl	8000608 <__aeabi_dmul>
 8000ffe:	4602      	mov	r2, r0
 8001000:	460b      	mov	r3, r1
 8001002:	4640      	mov	r0, r8
 8001004:	4649      	mov	r1, r9
 8001006:	f7ff f949 	bl	800029c <__adddf3>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	4620      	mov	r0, r4
 8001010:	4629      	mov	r1, r5
 8001012:	f7ff faf9 	bl	8000608 <__aeabi_dmul>
 8001016:	4602      	mov	r2, r0
 8001018:	460b      	mov	r3, r1
 800101a:	4932      	ldr	r1, [pc, #200]	; (80010e4 <kinematikM+0x25c>)
 800101c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	out[3] = nos*2*(-sin(d2r(45))*x + cos(d2r(45))*y + 0.25*th);
 8001020:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001024:	4602      	mov	r2, r0
 8001026:	460b      	mov	r3, r1
 8001028:	f7ff f938 	bl	800029c <__adddf3>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4614      	mov	r4, r2
 8001032:	461d      	mov	r5, r3
 8001034:	6978      	ldr	r0, [r7, #20]
 8001036:	f7ff fa7d 	bl	8000534 <__aeabi_i2d>
 800103a:	a325      	add	r3, pc, #148	; (adr r3, 80010d0 <kinematikM+0x248>)
 800103c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001040:	f7ff fae2 	bl	8000608 <__aeabi_dmul>
 8001044:	4602      	mov	r2, r0
 8001046:	460b      	mov	r3, r1
 8001048:	4690      	mov	r8, r2
 800104a:	4699      	mov	r9, r3
 800104c:	6938      	ldr	r0, [r7, #16]
 800104e:	f7ff fa71 	bl	8000534 <__aeabi_i2d>
 8001052:	a321      	add	r3, pc, #132	; (adr r3, 80010d8 <kinematikM+0x250>)
 8001054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001058:	f7ff fad6 	bl	8000608 <__aeabi_dmul>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4640      	mov	r0, r8
 8001062:	4649      	mov	r1, r9
 8001064:	f7ff f91a 	bl	800029c <__adddf3>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	4690      	mov	r8, r2
 800106e:	4699      	mov	r9, r3
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f7ff fa5f 	bl	8000534 <__aeabi_i2d>
 8001076:	f04f 0200 	mov.w	r2, #0
 800107a:	4b19      	ldr	r3, [pc, #100]	; (80010e0 <kinematikM+0x258>)
 800107c:	f7ff fac4 	bl	8000608 <__aeabi_dmul>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	4640      	mov	r0, r8
 8001086:	4649      	mov	r1, r9
 8001088:	f7ff f908 	bl	800029c <__adddf3>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	4620      	mov	r0, r4
 8001092:	4629      	mov	r1, r5
 8001094:	f7ff fab8 	bl	8000608 <__aeabi_dmul>
 8001098:	4602      	mov	r2, r0
 800109a:	460b      	mov	r3, r1
 800109c:	4911      	ldr	r1, [pc, #68]	; (80010e4 <kinematikM+0x25c>)
 800109e:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 80010a2:	bf00      	nop
 80010a4:	3718      	adds	r7, #24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80010ac:	f3af 8000 	nop.w
 80010b0:	667f3bcc 	.word	0x667f3bcc
 80010b4:	3fe6a09e 	.word	0x3fe6a09e
 80010b8:	667f3bce 	.word	0x667f3bce
 80010bc:	bfe6a09e 	.word	0xbfe6a09e
 80010c0:	667f3bce 	.word	0x667f3bce
 80010c4:	3fe6a09e 	.word	0x3fe6a09e
 80010c8:	667f3bcb 	.word	0x667f3bcb
 80010cc:	3fe6a09e 	.word	0x3fe6a09e
 80010d0:	667f3bcc 	.word	0x667f3bcc
 80010d4:	bfe6a09e 	.word	0xbfe6a09e
 80010d8:	667f3bcd 	.word	0x667f3bcd
 80010dc:	3fe6a09e 	.word	0x3fe6a09e
 80010e0:	3fd00000 	.word	0x3fd00000
 80010e4:	200001a8 	.word	0x200001a8
 80010e8:	667f3bcd 	.word	0x667f3bcd
 80010ec:	bfe6a09e 	.word	0xbfe6a09e

080010f0 <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* CAN 통신 초기화  */
int CANSPI_Initialize(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b088      	sub	sp, #32
 80010f4:	af00      	add	r7, sp, #0
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;

  /* Rx Mask values 초기화 */
  RXM0reg.RXM0SIDH = 0x00;
 80010f6:	2300      	movs	r3, #0
 80010f8:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 80010fa:	2300      	movs	r3, #0
 80010fc:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 80010fe:	2300      	movs	r3, #0
 8001100:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 8001102:	2300      	movs	r3, #0
 8001104:	71fb      	strb	r3, [r7, #7]

  RXM1reg.RXM1SIDH = 0x00;
 8001106:	2300      	movs	r3, #0
 8001108:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 800110a:	2300      	movs	r3, #0
 800110c:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 800110e:	2300      	movs	r3, #0
 8001110:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 8001112:	2300      	movs	r3, #0
 8001114:	70fb      	strb	r3, [r7, #3]

  /* Rx Filter values 초기화 */
  RXF0reg.RXF0SIDH = 0x00;
 8001116:	2300      	movs	r3, #0
 8001118:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 800111a:	2300      	movs	r3, #0
 800111c:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 800111e:	2300      	movs	r3, #0
 8001120:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 8001122:	2300      	movs	r3, #0
 8001124:	77fb      	strb	r3, [r7, #31]

  RXF1reg.RXF1SIDH = 0x00;
 8001126:	2300      	movs	r3, #0
 8001128:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 800112a:	2308      	movs	r3, #8
 800112c:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 800112e:	2300      	movs	r3, #0
 8001130:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 8001132:	2300      	movs	r3, #0
 8001134:	76fb      	strb	r3, [r7, #27]

  RXF2reg.RXF2SIDH = 0x00;
 8001136:	2300      	movs	r3, #0
 8001138:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 800113a:	2300      	movs	r3, #0
 800113c:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 800113e:	2300      	movs	r3, #0
 8001140:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 8001142:	2300      	movs	r3, #0
 8001144:	75fb      	strb	r3, [r7, #23]

  RXF3reg.RXF3SIDH = 0x00;
 8001146:	2300      	movs	r3, #0
 8001148:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 800114a:	2300      	movs	r3, #0
 800114c:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 800114e:	2300      	movs	r3, #0
 8001150:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 8001152:	2300      	movs	r3, #0
 8001154:	74fb      	strb	r3, [r7, #19]

  RXF4reg.RXF4SIDH = 0x00;
 8001156:	2300      	movs	r3, #0
 8001158:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 800115a:	2300      	movs	r3, #0
 800115c:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 800115e:	2300      	movs	r3, #0
 8001160:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 8001162:	2300      	movs	r3, #0
 8001164:	73fb      	strb	r3, [r7, #15]

  RXF5reg.RXF5SIDH = 0x00;
 8001166:	2300      	movs	r3, #0
 8001168:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 800116a:	2308      	movs	r3, #8
 800116c:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 800116e:	2300      	movs	r3, #0
 8001170:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 8001172:	2300      	movs	r3, #0
 8001174:	72fb      	strb	r3, [r7, #11]

  /* MCP2515 초기화, SPI 통신 상태 확인 */
  if(!MCP2515_Initialize())
 8001176:	f000 f945 	bl	8001404 <MCP2515_Initialize>
 800117a:	4603      	mov	r3, r0
 800117c:	f083 0301 	eor.w	r3, r3, #1
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b00      	cmp	r3, #0
 8001184:	d002      	beq.n	800118c <CANSPI_Initialize+0x9c>
    return -1;
 8001186:	f04f 33ff 	mov.w	r3, #4294967295
 800118a:	e060      	b.n	800124e <CANSPI_Initialize+0x15e>

  /* Configuration 모드로 설정 */
  if(!MCP2515_SetConfigMode())
 800118c:	f000 f95c 	bl	8001448 <MCP2515_SetConfigMode>
 8001190:	4603      	mov	r3, r0
 8001192:	f083 0301 	eor.w	r3, r3, #1
 8001196:	b2db      	uxtb	r3, r3
 8001198:	2b00      	cmp	r3, #0
 800119a:	d002      	beq.n	80011a2 <CANSPI_Initialize+0xb2>
    return -2;
 800119c:	f06f 0301 	mvn.w	r3, #1
 80011a0:	e055      	b.n	800124e <CANSPI_Initialize+0x15e>

  /* Filter & Mask 값 설정 */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 80011a2:	1d3b      	adds	r3, r7, #4
 80011a4:	461a      	mov	r2, r3
 80011a6:	2123      	movs	r1, #35	; 0x23
 80011a8:	2020      	movs	r0, #32
 80011aa:	f000 f9f1 	bl	8001590 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 80011ae:	463b      	mov	r3, r7
 80011b0:	461a      	mov	r2, r3
 80011b2:	2127      	movs	r1, #39	; 0x27
 80011b4:	2024      	movs	r0, #36	; 0x24
 80011b6:	f000 f9eb 	bl	8001590 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 80011ba:	f107 031c 	add.w	r3, r7, #28
 80011be:	461a      	mov	r2, r3
 80011c0:	2103      	movs	r1, #3
 80011c2:	2000      	movs	r0, #0
 80011c4:	f000 f9e4 	bl	8001590 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 80011c8:	f107 0318 	add.w	r3, r7, #24
 80011cc:	461a      	mov	r2, r3
 80011ce:	2107      	movs	r1, #7
 80011d0:	2004      	movs	r0, #4
 80011d2:	f000 f9dd 	bl	8001590 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	461a      	mov	r2, r3
 80011dc:	210b      	movs	r1, #11
 80011de:	2008      	movs	r0, #8
 80011e0:	f000 f9d6 	bl	8001590 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 80011e4:	f107 0310 	add.w	r3, r7, #16
 80011e8:	461a      	mov	r2, r3
 80011ea:	2113      	movs	r1, #19
 80011ec:	2010      	movs	r0, #16
 80011ee:	f000 f9cf 	bl	8001590 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 80011f2:	f107 030c 	add.w	r3, r7, #12
 80011f6:	461a      	mov	r2, r3
 80011f8:	2117      	movs	r1, #23
 80011fa:	2014      	movs	r0, #20
 80011fc:	f000 f9c8 	bl	8001590 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 8001200:	f107 0308 	add.w	r3, r7, #8
 8001204:	461a      	mov	r2, r3
 8001206:	211b      	movs	r1, #27
 8001208:	2018      	movs	r0, #24
 800120a:	f000 f9c1 	bl	8001590 <MCP2515_WriteByteSequence>

  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 800120e:	2104      	movs	r1, #4
 8001210:	2060      	movs	r0, #96	; 0x60
 8001212:	f000 f999 	bl	8001548 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 8001216:	2101      	movs	r1, #1
 8001218:	2070      	movs	r0, #112	; 0x70
 800121a:	f000 f995 	bl	8001548 <MCP2515_WriteByte>
  */

  //settingan speed tapi belum paham

  /* 00(SJW 1tq) 000000 */
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 800121e:	2100      	movs	r1, #0
 8001220:	202a      	movs	r0, #42	; 0x2a
 8001222:	f000 f991 	bl	8001548 <MCP2515_WriteByte>

  /* 1 1 100(5tq) 101(6tq) */
  MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
 8001226:	21e5      	movs	r1, #229	; 0xe5
 8001228:	2029      	movs	r0, #41	; 0x29
 800122a:	f000 f98d 	bl	8001548 <MCP2515_WriteByte>

  /* 1 0 000 011(4tq) */
  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 800122e:	2183      	movs	r1, #131	; 0x83
 8001230:	2028      	movs	r0, #40	; 0x28
 8001232:	f000 f989 	bl	8001548 <MCP2515_WriteByte>

  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 8001236:	f000 f925 	bl	8001484 <MCP2515_SetNormalMode>
 800123a:	4603      	mov	r3, r0
 800123c:	f083 0301 	eor.w	r3, r3, #1
 8001240:	b2db      	uxtb	r3, r3
 8001242:	2b00      	cmp	r3, #0
 8001244:	d002      	beq.n	800124c <CANSPI_Initialize+0x15c>
    return -3;
 8001246:	f06f 0302 	mvn.w	r3, #2
 800124a:	e000      	b.n	800124e <CANSPI_Initialize+0x15e>

  return 1;
 800124c:	2301      	movs	r3, #1
}
 800124e:	4618      	mov	r0, r3
 8001250:	3720      	adds	r7, #32
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <CANSPI_Receive>:
  return (returnValue);
}

/* CAN 메시지 수신 */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b088      	sub	sp, #32
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	77fb      	strb	r3, [r7, #31]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;

  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 8001262:	f000 f9bf 	bl	80015e4 <MCP2515_GetRxStatus>
 8001266:	4603      	mov	r3, r0
 8001268:	733b      	strb	r3, [r7, #12]

  /* 버퍼에 수신된 메시지가 있는지 확인 */
  if (rxStatus.rxBuffer != 0)
 800126a:	7b3b      	ldrb	r3, [r7, #12]
 800126c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2b00      	cmp	r3, #0
 8001274:	d066      	beq.n	8001344 <CANSPI_Receive+0xee>
  {
    /* 어떤 버퍼에 메시지가 있는지 확인 후 처리 */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 8001276:	7b3b      	ldrb	r3, [r7, #12]
 8001278:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b40      	cmp	r3, #64	; 0x40
 8001280:	bf0c      	ite	eq
 8001282:	2301      	moveq	r3, #1
 8001284:	2300      	movne	r3, #0
 8001286:	b2da      	uxtb	r2, r3
 8001288:	7b3b      	ldrb	r3, [r7, #12]
 800128a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800128e:	b2db      	uxtb	r3, r3
 8001290:	2bc0      	cmp	r3, #192	; 0xc0
 8001292:	bf0c      	ite	eq
 8001294:	2301      	moveq	r3, #1
 8001296:	2300      	movne	r3, #0
 8001298:	b2db      	uxtb	r3, r3
 800129a:	4313      	orrs	r3, r2
 800129c:	b2db      	uxtb	r3, r3
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d007      	beq.n	80012b2 <CANSPI_Receive+0x5c>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 80012a2:	f107 0310 	add.w	r3, r7, #16
 80012a6:	220d      	movs	r2, #13
 80012a8:	4619      	mov	r1, r3
 80012aa:	2090      	movs	r0, #144	; 0x90
 80012ac:	f000 f92a 	bl	8001504 <MCP2515_ReadRxSequence>
 80012b0:	e00c      	b.n	80012cc <CANSPI_Receive+0x76>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 80012b2:	7b3b      	ldrb	r3, [r7, #12]
 80012b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b80      	cmp	r3, #128	; 0x80
 80012bc:	d106      	bne.n	80012cc <CANSPI_Receive+0x76>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 80012be:	f107 0310 	add.w	r3, r7, #16
 80012c2:	220d      	movs	r2, #13
 80012c4:	4619      	mov	r1, r3
 80012c6:	2094      	movs	r0, #148	; 0x94
 80012c8:	f000 f91c 	bl	8001504 <MCP2515_ReadRxSequence>
    }

    /* Extended 타입 */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 80012cc:	7b3b      	ldrb	r3, [r7, #12]
 80012ce:	f003 0318 	and.w	r3, r3, #24
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	2b10      	cmp	r3, #16
 80012d6:	d10c      	bne.n	80012f2 <CANSPI_Receive+0x9c>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2202      	movs	r2, #2
 80012dc:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 80012de:	7cb8      	ldrb	r0, [r7, #18]
 80012e0:	7cf9      	ldrb	r1, [r7, #19]
 80012e2:	7c3a      	ldrb	r2, [r7, #16]
 80012e4:	7c7b      	ldrb	r3, [r7, #17]
 80012e6:	f000 f832 	bl	800134e <convertReg2ExtendedCANid>
 80012ea:	4602      	mov	r2, r0
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	e00b      	b.n	800130a <CANSPI_Receive+0xb4>
    }
    else
    {
      /* Standard 타입 */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2201      	movs	r2, #1
 80012f6:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 80012f8:	7c3b      	ldrb	r3, [r7, #16]
 80012fa:	7c7a      	ldrb	r2, [r7, #17]
 80012fc:	4611      	mov	r1, r2
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 f863 	bl	80013ca <convertReg2StandardCANid>
 8001304:	4602      	mov	r2, r0
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	605a      	str	r2, [r3, #4]
    }

    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 800130a:	7d3a      	ldrb	r2, [r7, #20]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 8001310:	7d7a      	ldrb	r2, [r7, #21]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 8001316:	7dba      	ldrb	r2, [r7, #22]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 800131c:	7dfa      	ldrb	r2, [r7, #23]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 8001322:	7e3a      	ldrb	r2, [r7, #24]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 8001328:	7e7a      	ldrb	r2, [r7, #25]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	735a      	strb	r2, [r3, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 800132e:	7eba      	ldrb	r2, [r7, #26]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	739a      	strb	r2, [r3, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 8001334:	7efa      	ldrb	r2, [r7, #27]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	73da      	strb	r2, [r3, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 800133a:	7f3a      	ldrb	r2, [r7, #28]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	741a      	strb	r2, [r3, #16]

    returnValue = 1;
 8001340:	2301      	movs	r3, #1
 8001342:	77fb      	strb	r3, [r7, #31]
  }

  return (returnValue);
 8001344:	7ffb      	ldrb	r3, [r7, #31]
}
 8001346:	4618      	mov	r0, r3
 8001348:	3720      	adds	r7, #32
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* Register 저장값을 Extended ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 800134e:	b490      	push	{r4, r7}
 8001350:	b086      	sub	sp, #24
 8001352:	af00      	add	r7, sp, #0
 8001354:	4604      	mov	r4, r0
 8001356:	4608      	mov	r0, r1
 8001358:	4611      	mov	r1, r2
 800135a:	461a      	mov	r2, r3
 800135c:	4623      	mov	r3, r4
 800135e:	71fb      	strb	r3, [r7, #7]
 8001360:	4603      	mov	r3, r0
 8001362:	71bb      	strb	r3, [r7, #6]
 8001364:	460b      	mov	r3, r1
 8001366:	717b      	strb	r3, [r7, #5]
 8001368:	4613      	mov	r3, r2
 800136a:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;

  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 8001374:	793b      	ldrb	r3, [r7, #4]
 8001376:	f003 0303 	and.w	r3, r3, #3
 800137a:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 800137c:	793b      	ldrb	r3, [r7, #4]
 800137e:	095b      	lsrs	r3, r3, #5
 8001380:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 8001382:	797b      	ldrb	r3, [r7, #5]
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 8001388:	7bbb      	ldrb	r3, [r7, #14]
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	4413      	add	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 8001396:	7bfb      	ldrb	r3, [r7, #15]
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	4413      	add	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	021b      	lsls	r3, r3, #8
 80013a2:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	4413      	add	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	021b      	lsls	r3, r3, #8
 80013b0:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 80013b2:	79bb      	ldrb	r3, [r7, #6]
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	4413      	add	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	617b      	str	r3, [r7, #20]
  return (returnValue);
 80013be:	697b      	ldr	r3, [r7, #20]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc90      	pop	{r4, r7}
 80013c8:	4770      	bx	lr

080013ca <convertReg2StandardCANid>:

/* Register 저장값을 Standard ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b085      	sub	sp, #20
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	4603      	mov	r3, r0
 80013d2:	460a      	mov	r2, r1
 80013d4:	71fb      	strb	r3, [r7, #7]
 80013d6:	4613      	mov	r3, r2
 80013d8:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;

  ConvertedID = (tempRXBn_SIDH << 3);
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 80013e4:	79bb      	ldrb	r3, [r7, #6]
 80013e6:	095b      	lsrs	r3, r3, #5
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	461a      	mov	r2, r3
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	4413      	add	r3, r2
 80013f0:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	60fb      	str	r3, [r7, #12]

  return (returnValue);
 80013f6:	68fb      	ldr	r3, [r7, #12]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* MCP2515 초기화 */
bool MCP2515_Initialize(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();
 800140a:	2201      	movs	r2, #1
 800140c:	2140      	movs	r1, #64	; 0x40
 800140e:	480c      	ldr	r0, [pc, #48]	; (8001440 <MCP2515_Initialize+0x3c>)
 8001410:	f003 fce8 	bl	8004de4 <HAL_GPIO_WritePin>

  uint8_t loop = 10;
 8001414:	230a      	movs	r3, #10
 8001416:	71fb      	strb	r3, [r7, #7]

  do {
    /* SPI Ready 확인 */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 8001418:	480a      	ldr	r0, [pc, #40]	; (8001444 <MCP2515_Initialize+0x40>)
 800141a:	f004 fec1 	bl	80061a0 <HAL_SPI_GetState>
 800141e:	4603      	mov	r3, r0
 8001420:	2b01      	cmp	r3, #1
 8001422:	d101      	bne.n	8001428 <MCP2515_Initialize+0x24>
      return true;
 8001424:	2301      	movs	r3, #1
 8001426:	e006      	b.n	8001436 <MCP2515_Initialize+0x32>

    loop--;
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	3b01      	subs	r3, #1
 800142c:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1f1      	bne.n	8001418 <MCP2515_Initialize+0x14>

  return false;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40021400 	.word	0x40021400
 8001444:	20000468 	.word	0x20000468

08001448 <MCP2515_SetConfigMode>:

/* MCP2515 를 설정모드로 전환 */
bool MCP2515_SetConfigMode(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
  /* CANCTRL Register Configuration 모드 설정 */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 800144e:	2180      	movs	r1, #128	; 0x80
 8001450:	200f      	movs	r0, #15
 8001452:	f000 f879 	bl	8001548 <MCP2515_WriteByte>

  uint8_t loop = 10;
 8001456:	230a      	movs	r3, #10
 8001458:	71fb      	strb	r3, [r7, #7]

  do {
    /* 모드전환 확인 */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 800145a:	200e      	movs	r0, #14
 800145c:	f000 f830 	bl	80014c0 <MCP2515_ReadByte>
 8001460:	4603      	mov	r3, r0
 8001462:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8001466:	2b80      	cmp	r3, #128	; 0x80
 8001468:	d101      	bne.n	800146e <MCP2515_SetConfigMode+0x26>
      return true;
 800146a:	2301      	movs	r3, #1
 800146c:	e006      	b.n	800147c <MCP2515_SetConfigMode+0x34>

    loop--;
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	3b01      	subs	r3, #1
 8001472:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1ef      	bne.n	800145a <MCP2515_SetConfigMode+0x12>

  return false;
 800147a:	2300      	movs	r3, #0
}
 800147c:	4618      	mov	r0, r3
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <MCP2515_SetNormalMode>:

/* MCP2515 를 Normal모드로 전환 */
bool MCP2515_SetNormalMode(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
  /* CANCTRL Register Normal 모드 설정 */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 800148a:	2100      	movs	r1, #0
 800148c:	200f      	movs	r0, #15
 800148e:	f000 f85b 	bl	8001548 <MCP2515_WriteByte>

  uint8_t loop = 10;
 8001492:	230a      	movs	r3, #10
 8001494:	71fb      	strb	r3, [r7, #7]

  do {
    /* 모드전환 확인 */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 8001496:	200e      	movs	r0, #14
 8001498:	f000 f812 	bl	80014c0 <MCP2515_ReadByte>
 800149c:	4603      	mov	r3, r0
 800149e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <MCP2515_SetNormalMode+0x26>
      return true;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e006      	b.n	80014b8 <MCP2515_SetNormalMode+0x34>

    loop--;
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	3b01      	subs	r3, #1
 80014ae:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1ef      	bne.n	8001496 <MCP2515_SetNormalMode+0x12>

  return false;
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* 1바이트 읽기 */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;

  MCP2515_CS_LOW();
 80014ca:	2200      	movs	r2, #0
 80014cc:	2140      	movs	r1, #64	; 0x40
 80014ce:	480c      	ldr	r0, [pc, #48]	; (8001500 <MCP2515_ReadByte+0x40>)
 80014d0:	f003 fc88 	bl	8004de4 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ);
 80014d4:	2003      	movs	r0, #3
 80014d6:	f000 f8a1 	bl	800161c <SPI_Tx>
  SPI_Tx(address);
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	4618      	mov	r0, r3
 80014de:	f000 f89d 	bl	800161c <SPI_Tx>
  retVal = SPI_Rx();
 80014e2:	f000 f8c1 	bl	8001668 <SPI_Rx>
 80014e6:	4603      	mov	r3, r0
 80014e8:	73fb      	strb	r3, [r7, #15]

  MCP2515_CS_HIGH();
 80014ea:	2201      	movs	r2, #1
 80014ec:	2140      	movs	r1, #64	; 0x40
 80014ee:	4804      	ldr	r0, [pc, #16]	; (8001500 <MCP2515_ReadByte+0x40>)
 80014f0:	f003 fc78 	bl	8004de4 <HAL_GPIO_WritePin>

  return retVal;
 80014f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40021400 	.word	0x40021400

08001504 <MCP2515_ReadRxSequence>:

/* Sequential Bytes 읽기 */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	6039      	str	r1, [r7, #0]
 800150e:	71fb      	strb	r3, [r7, #7]
 8001510:	4613      	mov	r3, r2
 8001512:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8001514:	2200      	movs	r2, #0
 8001516:	2140      	movs	r1, #64	; 0x40
 8001518:	480a      	ldr	r0, [pc, #40]	; (8001544 <MCP2515_ReadRxSequence+0x40>)
 800151a:	f003 fc63 	bl	8004de4 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	4618      	mov	r0, r3
 8001522:	f000 f87b 	bl	800161c <SPI_Tx>
  SPI_RxBuffer(data, length);
 8001526:	79bb      	ldrb	r3, [r7, #6]
 8001528:	4619      	mov	r1, r3
 800152a:	6838      	ldr	r0, [r7, #0]
 800152c:	f000 f8ac 	bl	8001688 <SPI_RxBuffer>

  MCP2515_CS_HIGH();
 8001530:	2201      	movs	r2, #1
 8001532:	2140      	movs	r1, #64	; 0x40
 8001534:	4803      	ldr	r0, [pc, #12]	; (8001544 <MCP2515_ReadRxSequence+0x40>)
 8001536:	f003 fc55 	bl	8004de4 <HAL_GPIO_WritePin>
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40021400 	.word	0x40021400

08001548 <MCP2515_WriteByte>:

/* 1바이트 쓰기 */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	460a      	mov	r2, r1
 8001552:	71fb      	strb	r3, [r7, #7]
 8001554:	4613      	mov	r3, r2
 8001556:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8001558:	2200      	movs	r2, #0
 800155a:	2140      	movs	r1, #64	; 0x40
 800155c:	480b      	ldr	r0, [pc, #44]	; (800158c <MCP2515_WriteByte+0x44>)
 800155e:	f003 fc41 	bl	8004de4 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 8001562:	2002      	movs	r0, #2
 8001564:	f000 f85a 	bl	800161c <SPI_Tx>
  SPI_Tx(address);
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	4618      	mov	r0, r3
 800156c:	f000 f856 	bl	800161c <SPI_Tx>
  SPI_Tx(data);
 8001570:	79bb      	ldrb	r3, [r7, #6]
 8001572:	4618      	mov	r0, r3
 8001574:	f000 f852 	bl	800161c <SPI_Tx>

  MCP2515_CS_HIGH();
 8001578:	2201      	movs	r2, #1
 800157a:	2140      	movs	r1, #64	; 0x40
 800157c:	4803      	ldr	r0, [pc, #12]	; (800158c <MCP2515_WriteByte+0x44>)
 800157e:	f003 fc31 	bl	8004de4 <HAL_GPIO_WritePin>
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40021400 	.word	0x40021400

08001590 <MCP2515_WriteByteSequence>:

/* Sequential Bytes 쓰기 */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	603a      	str	r2, [r7, #0]
 800159a:	71fb      	strb	r3, [r7, #7]
 800159c:	460b      	mov	r3, r1
 800159e:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 80015a0:	2200      	movs	r2, #0
 80015a2:	2140      	movs	r1, #64	; 0x40
 80015a4:	480e      	ldr	r0, [pc, #56]	; (80015e0 <MCP2515_WriteByteSequence+0x50>)
 80015a6:	f003 fc1d 	bl	8004de4 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 80015aa:	2002      	movs	r0, #2
 80015ac:	f000 f836 	bl	800161c <SPI_Tx>
  SPI_Tx(startAddress);
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 f832 	bl	800161c <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 80015b8:	79ba      	ldrb	r2, [r7, #6]
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	3301      	adds	r3, #1
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	4619      	mov	r1, r3
 80015c6:	6838      	ldr	r0, [r7, #0]
 80015c8:	f000 f83a 	bl	8001640 <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 80015cc:	2201      	movs	r2, #1
 80015ce:	2140      	movs	r1, #64	; 0x40
 80015d0:	4803      	ldr	r0, [pc, #12]	; (80015e0 <MCP2515_WriteByteSequence+0x50>)
 80015d2:	f003 fc07 	bl	8004de4 <HAL_GPIO_WritePin>
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40021400 	.word	0x40021400

080015e4 <MCP2515_GetRxStatus>:
  return retVal;
}

/* MCP2515 RxStatus 레지스터 확인 */
uint8_t MCP2515_GetRxStatus(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 80015ea:	2200      	movs	r2, #0
 80015ec:	2140      	movs	r1, #64	; 0x40
 80015ee:	480a      	ldr	r0, [pc, #40]	; (8001618 <MCP2515_GetRxStatus+0x34>)
 80015f0:	f003 fbf8 	bl	8004de4 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_RX_STATUS);
 80015f4:	20b0      	movs	r0, #176	; 0xb0
 80015f6:	f000 f811 	bl	800161c <SPI_Tx>
  retVal = SPI_Rx();
 80015fa:	f000 f835 	bl	8001668 <SPI_Rx>
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 8001602:	2201      	movs	r2, #1
 8001604:	2140      	movs	r1, #64	; 0x40
 8001606:	4804      	ldr	r0, [pc, #16]	; (8001618 <MCP2515_GetRxStatus+0x34>)
 8001608:	f003 fbec 	bl	8004de4 <HAL_GPIO_WritePin>

  return retVal;
 800160c:	79fb      	ldrb	r3, [r7, #7]
}
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40021400 	.word	0x40021400

0800161c <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx Wrapper 함수 */
static void SPI_Tx(uint8_t data)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 8001626:	1df9      	adds	r1, r7, #7
 8001628:	230a      	movs	r3, #10
 800162a:	2201      	movs	r2, #1
 800162c:	4803      	ldr	r0, [pc, #12]	; (800163c <SPI_Tx+0x20>)
 800162e:	f004 f9c8 	bl	80059c2 <HAL_SPI_Transmit>
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000468 	.word	0x20000468

08001640 <SPI_TxBuffer>:

/* SPI Tx Wrapper 함수 */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);
 800164c:	78fb      	ldrb	r3, [r7, #3]
 800164e:	b29a      	uxth	r2, r3
 8001650:	230a      	movs	r3, #10
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	4803      	ldr	r0, [pc, #12]	; (8001664 <SPI_TxBuffer+0x24>)
 8001656:	f004 f9b4 	bl	80059c2 <HAL_SPI_Transmit>
}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000468 	.word	0x20000468

08001668 <SPI_Rx>:

/* SPI Rx Wrapper 함수 */
static uint8_t SPI_Rx(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 800166e:	1df9      	adds	r1, r7, #7
 8001670:	230a      	movs	r3, #10
 8001672:	2201      	movs	r2, #1
 8001674:	4803      	ldr	r0, [pc, #12]	; (8001684 <SPI_Rx+0x1c>)
 8001676:	f004 fae0 	bl	8005c3a <HAL_SPI_Receive>
  return retVal;
 800167a:	79fb      	ldrb	r3, [r7, #7]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20000468 	.word	0x20000468

08001688 <SPI_RxBuffer>:

/* SPI Rx Wrapper 함수 */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8001694:	78fb      	ldrb	r3, [r7, #3]
 8001696:	b29a      	uxth	r2, r3
 8001698:	230a      	movs	r3, #10
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	4803      	ldr	r0, [pc, #12]	; (80016ac <SPI_RxBuffer+0x24>)
 800169e:	f004 facc 	bl	8005c3a <HAL_SPI_Receive>
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20000468 	.word	0x20000468

080016b0 <handleData0Buttons>:

#include "ds4.h"

int data0_buttons[] = {L1_KANAN_BIT, R1_BAWAH_BIT, L3_ATAS_BIT, R3_KIRI_BIT, SHARE_KOTAK_BIT, OPTIONS_SILANG_BIT, PS_BULAT_BIT, TPAD_SEGITIGA_BIT};

void handleData0Buttons(uint8_t data0) {
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	71fb      	strb	r3, [r7, #7]
	   // Set nilai awal
	    kanan = 0;
 80016ba:	4b33      	ldr	r3, [pc, #204]	; (8001788 <handleData0Buttons+0xd8>)
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
	    bawah = 0;
 80016c0:	4b32      	ldr	r3, [pc, #200]	; (800178c <handleData0Buttons+0xdc>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
	    atas = 0;
 80016c6:	4b32      	ldr	r3, [pc, #200]	; (8001790 <handleData0Buttons+0xe0>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
	    kiri = 0;
 80016cc:	4b31      	ldr	r3, [pc, #196]	; (8001794 <handleData0Buttons+0xe4>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
	    kotak = 0;
 80016d2:	4b31      	ldr	r3, [pc, #196]	; (8001798 <handleData0Buttons+0xe8>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
	    silang = 0;
 80016d8:	4b30      	ldr	r3, [pc, #192]	; (800179c <handleData0Buttons+0xec>)
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
	    bulat = 0;
 80016de:	4b30      	ldr	r3, [pc, #192]	; (80017a0 <handleData0Buttons+0xf0>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
	    segitiga = 0;
 80016e4:	4b2f      	ldr	r3, [pc, #188]	; (80017a4 <handleData0Buttons+0xf4>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < sizeof(data0_buttons) / sizeof(data0_buttons[0]); i++) {
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	e040      	b.n	8001772 <handleData0Buttons+0xc2>
        if (data0 & data0_buttons[i]) {
 80016f0:	79fa      	ldrb	r2, [r7, #7]
 80016f2:	492d      	ldr	r1, [pc, #180]	; (80017a8 <handleData0Buttons+0xf8>)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80016fa:	4013      	ands	r3, r2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d035      	beq.n	800176c <handleData0Buttons+0xbc>
            // Tombol aktif, lakukan sesuatu
            switch (i) {
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2b07      	cmp	r3, #7
 8001704:	d832      	bhi.n	800176c <handleData0Buttons+0xbc>
 8001706:	a201      	add	r2, pc, #4	; (adr r2, 800170c <handleData0Buttons+0x5c>)
 8001708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800170c:	0800172d 	.word	0x0800172d
 8001710:	08001735 	.word	0x08001735
 8001714:	0800173d 	.word	0x0800173d
 8001718:	08001745 	.word	0x08001745
 800171c:	0800174d 	.word	0x0800174d
 8001720:	08001755 	.word	0x08001755
 8001724:	0800175d 	.word	0x0800175d
 8001728:	08001765 	.word	0x08001765
                case 0: kanan = 1; break;
 800172c:	4b16      	ldr	r3, [pc, #88]	; (8001788 <handleData0Buttons+0xd8>)
 800172e:	2201      	movs	r2, #1
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	e01b      	b.n	800176c <handleData0Buttons+0xbc>
                case 1: bawah = 1; break;
 8001734:	4b15      	ldr	r3, [pc, #84]	; (800178c <handleData0Buttons+0xdc>)
 8001736:	2201      	movs	r2, #1
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	e017      	b.n	800176c <handleData0Buttons+0xbc>
                case 2: atas = 1; break;
 800173c:	4b14      	ldr	r3, [pc, #80]	; (8001790 <handleData0Buttons+0xe0>)
 800173e:	2201      	movs	r2, #1
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	e013      	b.n	800176c <handleData0Buttons+0xbc>
                case 3: kiri = 1; break;
 8001744:	4b13      	ldr	r3, [pc, #76]	; (8001794 <handleData0Buttons+0xe4>)
 8001746:	2201      	movs	r2, #1
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	e00f      	b.n	800176c <handleData0Buttons+0xbc>
                case 4: kotak = 1; break;
 800174c:	4b12      	ldr	r3, [pc, #72]	; (8001798 <handleData0Buttons+0xe8>)
 800174e:	2201      	movs	r2, #1
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	e00b      	b.n	800176c <handleData0Buttons+0xbc>
                case 5: silang = 1; break;
 8001754:	4b11      	ldr	r3, [pc, #68]	; (800179c <handleData0Buttons+0xec>)
 8001756:	2201      	movs	r2, #1
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	e007      	b.n	800176c <handleData0Buttons+0xbc>
                case 6: bulat = 1; break;
 800175c:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <handleData0Buttons+0xf0>)
 800175e:	2201      	movs	r2, #1
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	e003      	b.n	800176c <handleData0Buttons+0xbc>
                case 7: segitiga = 1; break;
 8001764:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <handleData0Buttons+0xf4>)
 8001766:	2201      	movs	r2, #1
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	bf00      	nop
    for (int i = 0; i < sizeof(data0_buttons) / sizeof(data0_buttons[0]); i++) {
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	3301      	adds	r3, #1
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2b07      	cmp	r3, #7
 8001776:	d9bb      	bls.n	80016f0 <handleData0Buttons+0x40>
            }
        }
    }
}
 8001778:	bf00      	nop
 800177a:	bf00      	nop
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	20000718 	.word	0x20000718
 800178c:	20000714 	.word	0x20000714
 8001790:	20000710 	.word	0x20000710
 8001794:	2000071c 	.word	0x2000071c
 8001798:	20000720 	.word	0x20000720
 800179c:	20000724 	.word	0x20000724
 80017a0:	20000728 	.word	0x20000728
 80017a4:	2000072c 	.word	0x2000072c
 80017a8:	20000000 	.word	0x20000000

080017ac <handleData1Buttons>:

void handleData1Buttons(uint8_t data1) {
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	71fb      	strb	r3, [r7, #7]
	// Set nilai awal
	    l1 = 0;
 80017b6:	4b33      	ldr	r3, [pc, #204]	; (8001884 <handleData1Buttons+0xd8>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
	    r1 = 0;
 80017bc:	4b32      	ldr	r3, [pc, #200]	; (8001888 <handleData1Buttons+0xdc>)
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
	    l3 = 0;
 80017c2:	4b32      	ldr	r3, [pc, #200]	; (800188c <handleData1Buttons+0xe0>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
	    r3 = 0;
 80017c8:	4b31      	ldr	r3, [pc, #196]	; (8001890 <handleData1Buttons+0xe4>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
	    share = 0;
 80017ce:	4b31      	ldr	r3, [pc, #196]	; (8001894 <handleData1Buttons+0xe8>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
	    options = 0;
 80017d4:	4b30      	ldr	r3, [pc, #192]	; (8001898 <handleData1Buttons+0xec>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
	    ps = 0;
 80017da:	4b30      	ldr	r3, [pc, #192]	; (800189c <handleData1Buttons+0xf0>)
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
	    tpad = 0;
 80017e0:	4b2f      	ldr	r3, [pc, #188]	; (80018a0 <handleData1Buttons+0xf4>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < sizeof(data0_buttons) / sizeof(data0_buttons[0]); i++) {
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	e040      	b.n	800186e <handleData1Buttons+0xc2>
        if (data1 & data0_buttons[i]) {
 80017ec:	79fa      	ldrb	r2, [r7, #7]
 80017ee:	492d      	ldr	r1, [pc, #180]	; (80018a4 <handleData1Buttons+0xf8>)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80017f6:	4013      	ands	r3, r2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d035      	beq.n	8001868 <handleData1Buttons+0xbc>
            // Tombol aktif, lakukan sesuatu
            switch (i) {
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2b07      	cmp	r3, #7
 8001800:	d832      	bhi.n	8001868 <handleData1Buttons+0xbc>
 8001802:	a201      	add	r2, pc, #4	; (adr r2, 8001808 <handleData1Buttons+0x5c>)
 8001804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001808:	08001829 	.word	0x08001829
 800180c:	08001831 	.word	0x08001831
 8001810:	08001839 	.word	0x08001839
 8001814:	08001841 	.word	0x08001841
 8001818:	08001849 	.word	0x08001849
 800181c:	08001851 	.word	0x08001851
 8001820:	08001859 	.word	0x08001859
 8001824:	08001861 	.word	0x08001861
                case 0: l1 = 1; break;
 8001828:	4b16      	ldr	r3, [pc, #88]	; (8001884 <handleData1Buttons+0xd8>)
 800182a:	2201      	movs	r2, #1
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	e01b      	b.n	8001868 <handleData1Buttons+0xbc>
                case 1: r1 = 1; break;
 8001830:	4b15      	ldr	r3, [pc, #84]	; (8001888 <handleData1Buttons+0xdc>)
 8001832:	2201      	movs	r2, #1
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	e017      	b.n	8001868 <handleData1Buttons+0xbc>
                case 2: l3 = 1; break;
 8001838:	4b14      	ldr	r3, [pc, #80]	; (800188c <handleData1Buttons+0xe0>)
 800183a:	2201      	movs	r2, #1
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	e013      	b.n	8001868 <handleData1Buttons+0xbc>
                case 3: r3 = 1; break;
 8001840:	4b13      	ldr	r3, [pc, #76]	; (8001890 <handleData1Buttons+0xe4>)
 8001842:	2201      	movs	r2, #1
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	e00f      	b.n	8001868 <handleData1Buttons+0xbc>
                case 4: share = 1; break;
 8001848:	4b12      	ldr	r3, [pc, #72]	; (8001894 <handleData1Buttons+0xe8>)
 800184a:	2201      	movs	r2, #1
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	e00b      	b.n	8001868 <handleData1Buttons+0xbc>
                case 5: options = 1; break;
 8001850:	4b11      	ldr	r3, [pc, #68]	; (8001898 <handleData1Buttons+0xec>)
 8001852:	2201      	movs	r2, #1
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	e007      	b.n	8001868 <handleData1Buttons+0xbc>
                case 6: ps = 1; break;
 8001858:	4b10      	ldr	r3, [pc, #64]	; (800189c <handleData1Buttons+0xf0>)
 800185a:	2201      	movs	r2, #1
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	e003      	b.n	8001868 <handleData1Buttons+0xbc>
                case 7: tpad = 1; break;
 8001860:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <handleData1Buttons+0xf4>)
 8001862:	2201      	movs	r2, #1
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	bf00      	nop
    for (int i = 0; i < sizeof(data0_buttons) / sizeof(data0_buttons[0]); i++) {
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	3301      	adds	r3, #1
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2b07      	cmp	r3, #7
 8001872:	d9bb      	bls.n	80017ec <handleData1Buttons+0x40>
            }
        }
    }
}
 8001874:	bf00      	nop
 8001876:	bf00      	nop
 8001878:	3714      	adds	r7, #20
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	20000730 	.word	0x20000730
 8001888:	20000734 	.word	0x20000734
 800188c:	20000738 	.word	0x20000738
 8001890:	2000073c 	.word	0x2000073c
 8001894:	20000740 	.word	0x20000740
 8001898:	20000744 	.word	0x20000744
 800189c:	20000748 	.word	0x20000748
 80018a0:	2000074c 	.word	0x2000074c
 80018a4:	20000000 	.word	0x20000000

080018a8 <ds4>:

void ds4(){
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
	if (CANSPI_Receive(&rxMessage)){
 80018ac:	4819      	ldr	r0, [pc, #100]	; (8001914 <ds4+0x6c>)
 80018ae:	f7ff fcd2 	bl	8001256 <CANSPI_Receive>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d02b      	beq.n	8001910 <ds4+0x68>
		if(rxMessage.frame.id == 0x36){
 80018b8:	4b16      	ldr	r3, [pc, #88]	; (8001914 <ds4+0x6c>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	2b36      	cmp	r3, #54	; 0x36
 80018be:	d127      	bne.n	8001910 <ds4+0x68>
			handleData0Buttons(rxMessage.frame.data0);
 80018c0:	4b14      	ldr	r3, [pc, #80]	; (8001914 <ds4+0x6c>)
 80018c2:	7a5b      	ldrb	r3, [r3, #9]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff fef3 	bl	80016b0 <handleData0Buttons>
			handleData1Buttons(rxMessage.frame.data1);
 80018ca:	4b12      	ldr	r3, [pc, #72]	; (8001914 <ds4+0x6c>)
 80018cc:	7a9b      	ldrb	r3, [r3, #10]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff ff6c 	bl	80017ac <handleData1Buttons>
			l2 = rxMessage.frame.data2;
 80018d4:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <ds4+0x6c>)
 80018d6:	7adb      	ldrb	r3, [r3, #11]
 80018d8:	461a      	mov	r2, r3
 80018da:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <ds4+0x70>)
 80018dc:	601a      	str	r2, [r3, #0]
			r2 = rxMessage.frame.data3;
 80018de:	4b0d      	ldr	r3, [pc, #52]	; (8001914 <ds4+0x6c>)
 80018e0:	7b1b      	ldrb	r3, [r3, #12]
 80018e2:	461a      	mov	r2, r3
 80018e4:	4b0d      	ldr	r3, [pc, #52]	; (800191c <ds4+0x74>)
 80018e6:	601a      	str	r2, [r3, #0]
			lx = rxMessage.frame.data4;
 80018e8:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <ds4+0x6c>)
 80018ea:	7b5b      	ldrb	r3, [r3, #13]
 80018ec:	461a      	mov	r2, r3
 80018ee:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <ds4+0x78>)
 80018f0:	601a      	str	r2, [r3, #0]
			lxs = rxMessage.frame.data5;
 80018f2:	4b08      	ldr	r3, [pc, #32]	; (8001914 <ds4+0x6c>)
 80018f4:	7b9b      	ldrb	r3, [r3, #14]
 80018f6:	461a      	mov	r2, r3
 80018f8:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <ds4+0x7c>)
 80018fa:	601a      	str	r2, [r3, #0]
			lys = rxMessage.frame.data6;
 80018fc:	4b05      	ldr	r3, [pc, #20]	; (8001914 <ds4+0x6c>)
 80018fe:	7bdb      	ldrb	r3, [r3, #15]
 8001900:	461a      	mov	r2, r3
 8001902:	4b09      	ldr	r3, [pc, #36]	; (8001928 <ds4+0x80>)
 8001904:	601a      	str	r2, [r3, #0]
			ly = rxMessage.frame.data7;
 8001906:	4b03      	ldr	r3, [pc, #12]	; (8001914 <ds4+0x6c>)
 8001908:	7c1b      	ldrb	r3, [r3, #16]
 800190a:	461a      	mov	r2, r3
 800190c:	4b07      	ldr	r3, [pc, #28]	; (800192c <ds4+0x84>)
 800190e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001910:	bf00      	nop
 8001912:	bd80      	pop	{r7, pc}
 8001914:	200007e8 	.word	0x200007e8
 8001918:	20000758 	.word	0x20000758
 800191c:	2000075c 	.word	0x2000075c
 8001920:	20000750 	.word	0x20000750
 8001924:	20000760 	.word	0x20000760
 8001928:	20000764 	.word	0x20000764
 800192c:	20000754 	.word	0x20000754

08001930 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4a07      	ldr	r2, [pc, #28]	; (800195c <vApplicationGetIdleTaskMemory+0x2c>)
 8001940:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	4a06      	ldr	r2, [pc, #24]	; (8001960 <vApplicationGetIdleTaskMemory+0x30>)
 8001946:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2280      	movs	r2, #128	; 0x80
 800194c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800194e:	bf00      	nop
 8001950:	3714      	adds	r7, #20
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	200001c8 	.word	0x200001c8
 8001960:	20000268 	.word	0x20000268

08001964 <map>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uCAN_MSG txMessage;
uCAN_MSG rxMessage;

int map(int value, int fromLow, int fromHigh, int toLow, int toHigh) {
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
 8001970:	603b      	str	r3, [r7, #0]
    return (int) (value - fromLow) * (toHigh - toLow) / (fromHigh - fromLow) + toLow;
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	69b9      	ldr	r1, [r7, #24]
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	1a8a      	subs	r2, r1, r2
 800197e:	fb03 f202 	mul.w	r2, r3, r2
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	1acb      	subs	r3, r1, r3
 8001988:	fb92 f2f3 	sdiv	r2, r2, r3
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	4413      	add	r3, r2
}
 8001990:	4618      	mov	r0, r3
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <_write>:

int _write(int file, char *ptr, int len){
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit_IT(&huart3, (uint8_t*)ptr, len);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	461a      	mov	r2, r3
 80019ae:	68b9      	ldr	r1, [r7, #8]
 80019b0:	4803      	ldr	r0, [pc, #12]	; (80019c0 <_write+0x24>)
 80019b2:	f005 fe0e 	bl	80075d2 <HAL_UART_Transmit_IT>
	return len;
 80019b6:	687b      	ldr	r3, [r7, #4]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	200006b8 	.word	0x200006b8

080019c4 <mode_padi>:
void mode_padi(){
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
	lsflag_6=HAL_GPIO_ReadPin(LS_6_GPIO_Port, LS_6_Pin);
 80019c8:	2180      	movs	r1, #128	; 0x80
 80019ca:	4888      	ldr	r0, [pc, #544]	; (8001bec <mode_padi+0x228>)
 80019cc:	f003 f9f2 	bl	8004db4 <HAL_GPIO_ReadPin>
 80019d0:	4603      	mov	r3, r0
 80019d2:	461a      	mov	r2, r3
 80019d4:	4b86      	ldr	r3, [pc, #536]	; (8001bf0 <mode_padi+0x22c>)
 80019d6:	601a      	str	r2, [r3, #0]
	lsflag_7=HAL_GPIO_ReadPin(LS_7_GPIO_Port, LS_7_Pin);
 80019d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019dc:	4885      	ldr	r0, [pc, #532]	; (8001bf4 <mode_padi+0x230>)
 80019de:	f003 f9e9 	bl	8004db4 <HAL_GPIO_ReadPin>
 80019e2:	4603      	mov	r3, r0
 80019e4:	461a      	mov	r2, r3
 80019e6:	4b84      	ldr	r3, [pc, #528]	; (8001bf8 <mode_padi+0x234>)
 80019e8:	601a      	str	r2, [r3, #0]
	if (kanan==1){//nutup manual 1, buka -1
 80019ea:	4b84      	ldr	r3, [pc, #528]	; (8001bfc <mode_padi+0x238>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d109      	bne.n	8001a06 <mode_padi+0x42>
		motor_drive(&MExtendRight, 1, 750);//kanan 1
 80019f2:	f240 22ee 	movw	r2, #750	; 0x2ee
 80019f6:	2101      	movs	r1, #1
 80019f8:	4881      	ldr	r0, [pc, #516]	; (8001c00 <mode_padi+0x23c>)
 80019fa:	f002 f857 	bl	8003aac <motor_drive>
		lsflag_7=1;
 80019fe:	4b7e      	ldr	r3, [pc, #504]	; (8001bf8 <mode_padi+0x234>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	e004      	b.n	8001a10 <mode_padi+0x4c>
	}
	else{
		motor_drive(&MExtendRight, 1, 0);
 8001a06:	2200      	movs	r2, #0
 8001a08:	2101      	movs	r1, #1
 8001a0a:	487d      	ldr	r0, [pc, #500]	; (8001c00 <mode_padi+0x23c>)
 8001a0c:	f002 f84e 	bl	8003aac <motor_drive>
	}
	if (kiri==1){//nutup manual -1, buka 1
 8001a10:	4b7c      	ldr	r3, [pc, #496]	; (8001c04 <mode_padi+0x240>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d10a      	bne.n	8001a2e <mode_padi+0x6a>
		motor_drive(&MExtendLeft, -1, 750);//kiri nutup -1
 8001a18:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a20:	4879      	ldr	r0, [pc, #484]	; (8001c08 <mode_padi+0x244>)
 8001a22:	f002 f843 	bl	8003aac <motor_drive>
		lsflag_6=1;
 8001a26:	4b72      	ldr	r3, [pc, #456]	; (8001bf0 <mode_padi+0x22c>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	e004      	b.n	8001a38 <mode_padi+0x74>
	}
	else{
		motor_drive(&MExtendLeft, 1, 0);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	2101      	movs	r1, #1
 8001a32:	4875      	ldr	r0, [pc, #468]	; (8001c08 <mode_padi+0x244>)
 8001a34:	f002 f83a 	bl	8003aac <motor_drive>
	}

	if (atas==1) { //buka(extend) otomatis
 8001a38:	4b74      	ldr	r3, [pc, #464]	; (8001c0c <mode_padi+0x248>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d102      	bne.n	8001a46 <mode_padi+0x82>
		atas1=1;
 8001a40:	4b73      	ldr	r3, [pc, #460]	; (8001c10 <mode_padi+0x24c>)
 8001a42:	2201      	movs	r2, #1
 8001a44:	601a      	str	r2, [r3, #0]
	}
	if (atas1==1){
 8001a46:	4b72      	ldr	r3, [pc, #456]	; (8001c10 <mode_padi+0x24c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d12b      	bne.n	8001aa6 <mode_padi+0xe2>
		if (lsflag_7==1){
 8001a4e:	4b6a      	ldr	r3, [pc, #424]	; (8001bf8 <mode_padi+0x234>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d107      	bne.n	8001a66 <mode_padi+0xa2>
			motor_drive(&MExtendRight, -1, 750);//buka
 8001a56:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001a5a:	f04f 31ff 	mov.w	r1, #4294967295
 8001a5e:	4868      	ldr	r0, [pc, #416]	; (8001c00 <mode_padi+0x23c>)
 8001a60:	f002 f824 	bl	8003aac <motor_drive>
 8001a64:	e004      	b.n	8001a70 <mode_padi+0xac>
		}
		else {
			motor_drive(&MExtendRight, 0, 0);
 8001a66:	2200      	movs	r2, #0
 8001a68:	2100      	movs	r1, #0
 8001a6a:	4865      	ldr	r0, [pc, #404]	; (8001c00 <mode_padi+0x23c>)
 8001a6c:	f002 f81e 	bl	8003aac <motor_drive>
		}
		if (lsflag_6==1){
 8001a70:	4b5f      	ldr	r3, [pc, #380]	; (8001bf0 <mode_padi+0x22c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d106      	bne.n	8001a86 <mode_padi+0xc2>
			motor_drive(&MExtendLeft, 1, 750);//buka
 8001a78:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	4862      	ldr	r0, [pc, #392]	; (8001c08 <mode_padi+0x244>)
 8001a80:	f002 f814 	bl	8003aac <motor_drive>
 8001a84:	e004      	b.n	8001a90 <mode_padi+0xcc>
		}
		else {
			motor_drive(&MExtendLeft, 0, 0);
 8001a86:	2200      	movs	r2, #0
 8001a88:	2100      	movs	r1, #0
 8001a8a:	485f      	ldr	r0, [pc, #380]	; (8001c08 <mode_padi+0x244>)
 8001a8c:	f002 f80e 	bl	8003aac <motor_drive>
		}
		if(lsflag_6 == 0 && lsflag_7 == 0){
 8001a90:	4b57      	ldr	r3, [pc, #348]	; (8001bf0 <mode_padi+0x22c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d106      	bne.n	8001aa6 <mode_padi+0xe2>
 8001a98:	4b57      	ldr	r3, [pc, #348]	; (8001bf8 <mode_padi+0x234>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d102      	bne.n	8001aa6 <mode_padi+0xe2>
			atas1=0;
 8001aa0:	4b5b      	ldr	r3, [pc, #364]	; (8001c10 <mode_padi+0x24c>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
		}
	}

	if (bawah==1){//buka manual
 8001aa6:	4b5b      	ldr	r3, [pc, #364]	; (8001c14 <mode_padi+0x250>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d123      	bne.n	8001af6 <mode_padi+0x132>
		atas1=0;
 8001aae:	4b58      	ldr	r3, [pc, #352]	; (8001c10 <mode_padi+0x24c>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
		if (lsflag_7==1){
 8001ab4:	4b50      	ldr	r3, [pc, #320]	; (8001bf8 <mode_padi+0x234>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d107      	bne.n	8001acc <mode_padi+0x108>
			motor_drive(&MExtendRight, -1, 500);//kiri
 8001abc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac4:	484e      	ldr	r0, [pc, #312]	; (8001c00 <mode_padi+0x23c>)
 8001ac6:	f001 fff1 	bl	8003aac <motor_drive>
 8001aca:	e004      	b.n	8001ad6 <mode_padi+0x112>
		}
		else {
			motor_drive(&MExtendRight, 0, 0);
 8001acc:	2200      	movs	r2, #0
 8001ace:	2100      	movs	r1, #0
 8001ad0:	484b      	ldr	r0, [pc, #300]	; (8001c00 <mode_padi+0x23c>)
 8001ad2:	f001 ffeb 	bl	8003aac <motor_drive>
		}

		if (lsflag_6==1){
 8001ad6:	4b46      	ldr	r3, [pc, #280]	; (8001bf0 <mode_padi+0x22c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d106      	bne.n	8001aec <mode_padi+0x128>
			motor_drive(&MExtendLeft, 1, 500);
 8001ade:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	4848      	ldr	r0, [pc, #288]	; (8001c08 <mode_padi+0x244>)
 8001ae6:	f001 ffe1 	bl	8003aac <motor_drive>
 8001aea:	e004      	b.n	8001af6 <mode_padi+0x132>
		}
		else {
			motor_drive(&MExtendLeft, 0, 0);
 8001aec:	2200      	movs	r2, #0
 8001aee:	2100      	movs	r1, #0
 8001af0:	4845      	ldr	r0, [pc, #276]	; (8001c08 <mode_padi+0x244>)
 8001af2:	f001 ffdb 	bl	8003aac <motor_drive>
		}
	}

	if (kotak==1){
 8001af6:	4b48      	ldr	r3, [pc, #288]	; (8001c18 <mode_padi+0x254>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d11c      	bne.n	8001b38 <mode_padi+0x174>
		if(currentTick-nowTick>200){
 8001afe:	4b47      	ldr	r3, [pc, #284]	; (8001c1c <mode_padi+0x258>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	4b47      	ldr	r3, [pc, #284]	; (8001c20 <mode_padi+0x25c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2bc8      	cmp	r3, #200	; 0xc8
 8001b0a:	d93e      	bls.n	8001b8a <mode_padi+0x1c6>
			HAL_GPIO_TogglePin(PISTON_A_GPIO_Port, PISTON_A_Pin);
 8001b0c:	2102      	movs	r1, #2
 8001b0e:	4845      	ldr	r0, [pc, #276]	; (8001c24 <mode_padi+0x260>)
 8001b10:	f003 f981 	bl	8004e16 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(PISTON_B_GPIO_Port, PISTON_B_Pin);
 8001b14:	2104      	movs	r1, #4
 8001b16:	4843      	ldr	r0, [pc, #268]	; (8001c24 <mode_padi+0x260>)
 8001b18:	f003 f97d 	bl	8004e16 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(PISTON_C_GPIO_Port, PISTON_C_Pin);
 8001b1c:	2104      	movs	r1, #4
 8001b1e:	4833      	ldr	r0, [pc, #204]	; (8001bec <mode_padi+0x228>)
 8001b20:	f003 f979 	bl	8004e16 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(PISTON_D_GPIO_Port, PISTON_D_Pin);
 8001b24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b28:	483e      	ldr	r0, [pc, #248]	; (8001c24 <mode_padi+0x260>)
 8001b2a:	f003 f974 	bl	8004e16 <HAL_GPIO_TogglePin>
			nowTick = currentTick;
 8001b2e:	4b3b      	ldr	r3, [pc, #236]	; (8001c1c <mode_padi+0x258>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a3b      	ldr	r2, [pc, #236]	; (8001c20 <mode_padi+0x25c>)
 8001b34:	6013      	str	r3, [r2, #0]
 8001b36:	e028      	b.n	8001b8a <mode_padi+0x1c6>
		}
	}
	else if (silang==1){
 8001b38:	4b3b      	ldr	r3, [pc, #236]	; (8001c28 <mode_padi+0x264>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d110      	bne.n	8001b62 <mode_padi+0x19e>
		if(currentTick-nowTick>500){
 8001b40:	4b36      	ldr	r3, [pc, #216]	; (8001c1c <mode_padi+0x258>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4b36      	ldr	r3, [pc, #216]	; (8001c20 <mode_padi+0x25c>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001b4e:	d91c      	bls.n	8001b8a <mode_padi+0x1c6>
			HAL_GPIO_TogglePin(PISTON_A_GPIO_Port, PISTON_A_Pin);
 8001b50:	2102      	movs	r1, #2
 8001b52:	4834      	ldr	r0, [pc, #208]	; (8001c24 <mode_padi+0x260>)
 8001b54:	f003 f95f 	bl	8004e16 <HAL_GPIO_TogglePin>
			nowTick = currentTick;
 8001b58:	4b30      	ldr	r3, [pc, #192]	; (8001c1c <mode_padi+0x258>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a30      	ldr	r2, [pc, #192]	; (8001c20 <mode_padi+0x25c>)
 8001b5e:	6013      	str	r3, [r2, #0]
 8001b60:	e013      	b.n	8001b8a <mode_padi+0x1c6>
		}
	}
	else if (bulat==1){
 8001b62:	4b32      	ldr	r3, [pc, #200]	; (8001c2c <mode_padi+0x268>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d10f      	bne.n	8001b8a <mode_padi+0x1c6>
		if(currentTick-nowTick>500){
 8001b6a:	4b2c      	ldr	r3, [pc, #176]	; (8001c1c <mode_padi+0x258>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	4b2c      	ldr	r3, [pc, #176]	; (8001c20 <mode_padi+0x25c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001b78:	d907      	bls.n	8001b8a <mode_padi+0x1c6>
			HAL_GPIO_TogglePin(PISTON_B_GPIO_Port, PISTON_B_Pin);
 8001b7a:	2104      	movs	r1, #4
 8001b7c:	4829      	ldr	r0, [pc, #164]	; (8001c24 <mode_padi+0x260>)
 8001b7e:	f003 f94a 	bl	8004e16 <HAL_GPIO_TogglePin>
			nowTick = currentTick;
 8001b82:	4b26      	ldr	r3, [pc, #152]	; (8001c1c <mode_padi+0x258>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a26      	ldr	r2, [pc, #152]	; (8001c20 <mode_padi+0x25c>)
 8001b88:	6013      	str	r3, [r2, #0]
		}
	}
	if (l1==1){
 8001b8a:	4b29      	ldr	r3, [pc, #164]	; (8001c30 <mode_padi+0x26c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d114      	bne.n	8001bbc <mode_padi+0x1f8>
		if (lsflag_4==0){//turun
 8001b92:	4b28      	ldr	r3, [pc, #160]	; (8001c34 <mode_padi+0x270>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d107      	bne.n	8001baa <mode_padi+0x1e6>
			motor_drive(&MPadi, -1, 600);
 8001b9a:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001b9e:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba2:	4825      	ldr	r0, [pc, #148]	; (8001c38 <mode_padi+0x274>)
 8001ba4:	f001 ff82 	bl	8003aac <motor_drive>
 8001ba8:	e004      	b.n	8001bb4 <mode_padi+0x1f0>
		}
		else {
			motor_drive(&MPadi, 0 , 0);
 8001baa:	2200      	movs	r2, #0
 8001bac:	2100      	movs	r1, #0
 8001bae:	4822      	ldr	r0, [pc, #136]	; (8001c38 <mode_padi+0x274>)
 8001bb0:	f001 ff7c 	bl	8003aac <motor_drive>
		}
		lsflag_3=0;
 8001bb4:	4b21      	ldr	r3, [pc, #132]	; (8001c3c <mode_padi+0x278>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	e048      	b.n	8001c4e <mode_padi+0x28a>
	}
	else if (r1==1){
 8001bbc:	4b20      	ldr	r3, [pc, #128]	; (8001c40 <mode_padi+0x27c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d13f      	bne.n	8001c44 <mode_padi+0x280>
		if (lsflag_3==0){//naik
 8001bc4:	4b1d      	ldr	r3, [pc, #116]	; (8001c3c <mode_padi+0x278>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d106      	bne.n	8001bda <mode_padi+0x216>
			motor_drive(&MPadi, 1, 850);
 8001bcc:	f240 3252 	movw	r2, #850	; 0x352
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	4819      	ldr	r0, [pc, #100]	; (8001c38 <mode_padi+0x274>)
 8001bd4:	f001 ff6a 	bl	8003aac <motor_drive>
 8001bd8:	e004      	b.n	8001be4 <mode_padi+0x220>
		}
		else {
			motor_drive(&MPadi, 0 , 0);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2100      	movs	r1, #0
 8001bde:	4816      	ldr	r0, [pc, #88]	; (8001c38 <mode_padi+0x274>)
 8001be0:	f001 ff64 	bl	8003aac <motor_drive>
		}
		lsflag_4=0;
 8001be4:	4b13      	ldr	r3, [pc, #76]	; (8001c34 <mode_padi+0x270>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	e030      	b.n	8001c4e <mode_padi+0x28a>
 8001bec:	40020c00 	.word	0x40020c00
 8001bf0:	200007a4 	.word	0x200007a4
 8001bf4:	40021800 	.word	0x40021800
 8001bf8:	200007a8 	.word	0x200007a8
 8001bfc:	20000718 	.word	0x20000718
 8001c00:	200000ec 	.word	0x200000ec
 8001c04:	2000071c 	.word	0x2000071c
 8001c08:	200000d4 	.word	0x200000d4
 8001c0c:	20000710 	.word	0x20000710
 8001c10:	20000708 	.word	0x20000708
 8001c14:	20000714 	.word	0x20000714
 8001c18:	20000720 	.word	0x20000720
 8001c1c:	200007e0 	.word	0x200007e0
 8001c20:	200007e4 	.word	0x200007e4
 8001c24:	40020800 	.word	0x40020800
 8001c28:	20000724 	.word	0x20000724
 8001c2c:	20000728 	.word	0x20000728
 8001c30:	20000730 	.word	0x20000730
 8001c34:	2000079c 	.word	0x2000079c
 8001c38:	20000104 	.word	0x20000104
 8001c3c:	20000798 	.word	0x20000798
 8001c40:	20000734 	.word	0x20000734
	}
	else{
		motor_drive(&MPadi, 1, 0);
 8001c44:	2200      	movs	r2, #0
 8001c46:	2101      	movs	r1, #1
 8001c48:	4892      	ldr	r0, [pc, #584]	; (8001e94 <mode_padi+0x4d0>)
 8001c4a:	f001 ff2f 	bl	8003aac <motor_drive>
	}

	if (r3==1){//start zone/ posisi awal tekuk dan bawah nyentuh ls4
 8001c4e:	4b92      	ldr	r3, [pc, #584]	; (8001e98 <mode_padi+0x4d4>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d13c      	bne.n	8001cd0 <mode_padi+0x30c>
		if(currentTick-nowTick>500){
 8001c56:	4b91      	ldr	r3, [pc, #580]	; (8001e9c <mode_padi+0x4d8>)
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	4b91      	ldr	r3, [pc, #580]	; (8001ea0 <mode_padi+0x4dc>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001c64:	d908      	bls.n	8001c78 <mode_padi+0x2b4>
			HAL_GPIO_TogglePin(PISTON_PADI_GPIO_Port, PISTON_PADI_Pin);
 8001c66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c6a:	488e      	ldr	r0, [pc, #568]	; (8001ea4 <mode_padi+0x4e0>)
 8001c6c:	f003 f8d3 	bl	8004e16 <HAL_GPIO_TogglePin>
			nowTick = currentTick;
 8001c70:	4b8a      	ldr	r3, [pc, #552]	; (8001e9c <mode_padi+0x4d8>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a8a      	ldr	r2, [pc, #552]	; (8001ea0 <mode_padi+0x4dc>)
 8001c76:	6013      	str	r3, [r2, #0]
		}
		vTaskDelay(300);
 8001c78:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001c7c:	f006 fe92 	bl	80089a4 <vTaskDelay>
		p4 = HAL_GPIO_ReadPin(PISTON_D_GPIO_Port, PISTON_D_Pin);
 8001c80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c84:	4887      	ldr	r0, [pc, #540]	; (8001ea4 <mode_padi+0x4e0>)
 8001c86:	f003 f895 	bl	8004db4 <HAL_GPIO_ReadPin>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4b86      	ldr	r3, [pc, #536]	; (8001ea8 <mode_padi+0x4e4>)
 8001c90:	601a      	str	r2, [r3, #0]
		p5 = HAL_GPIO_ReadPin(PISTON_PADI_GPIO_Port, PISTON_PADI_Pin);
 8001c92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c96:	4883      	ldr	r0, [pc, #524]	; (8001ea4 <mode_padi+0x4e0>)
 8001c98:	f003 f88c 	bl	8004db4 <HAL_GPIO_ReadPin>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	4b82      	ldr	r3, [pc, #520]	; (8001eac <mode_padi+0x4e8>)
 8001ca2:	601a      	str	r2, [r3, #0]
		if(p5==0){
 8001ca4:	4b81      	ldr	r3, [pc, #516]	; (8001eac <mode_padi+0x4e8>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d107      	bne.n	8001cbc <mode_padi+0x2f8>
			atas1=1;
 8001cac:	4b80      	ldr	r3, [pc, #512]	; (8001eb0 <mode_padi+0x4ec>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(PISTON_D_GPIO_Port, PISTON_D_Pin);
 8001cb2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cb6:	487b      	ldr	r0, [pc, #492]	; (8001ea4 <mode_padi+0x4e0>)
 8001cb8:	f003 f8ad 	bl	8004e16 <HAL_GPIO_TogglePin>
		}
		lsflag_4=1;
 8001cbc:	4b7d      	ldr	r3, [pc, #500]	; (8001eb4 <mode_padi+0x4f0>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	601a      	str	r2, [r3, #0]
		loopPadi=0;
 8001cc2:	4b7d      	ldr	r3, [pc, #500]	; (8001eb8 <mode_padi+0x4f4>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
		stepPadi=0;
 8001cc8:	4b7c      	ldr	r3, [pc, #496]	; (8001ebc <mode_padi+0x4f8>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	e042      	b.n	8001d56 <mode_padi+0x392>
	}
	else if (share==1){
 8001cd0:	4b7b      	ldr	r3, [pc, #492]	; (8001ec0 <mode_padi+0x4fc>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d110      	bne.n	8001cfa <mode_padi+0x336>
		if(currentTick-nowTick>500){
 8001cd8:	4b70      	ldr	r3, [pc, #448]	; (8001e9c <mode_padi+0x4d8>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	4b70      	ldr	r3, [pc, #448]	; (8001ea0 <mode_padi+0x4dc>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001ce6:	d936      	bls.n	8001d56 <mode_padi+0x392>
			HAL_GPIO_TogglePin(PISTON_C_GPIO_Port, PISTON_C_Pin);
 8001ce8:	2104      	movs	r1, #4
 8001cea:	4876      	ldr	r0, [pc, #472]	; (8001ec4 <mode_padi+0x500>)
 8001cec:	f003 f893 	bl	8004e16 <HAL_GPIO_TogglePin>
			nowTick = currentTick;
 8001cf0:	4b6a      	ldr	r3, [pc, #424]	; (8001e9c <mode_padi+0x4d8>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a6a      	ldr	r2, [pc, #424]	; (8001ea0 <mode_padi+0x4dc>)
 8001cf6:	6013      	str	r3, [r2, #0]
 8001cf8:	e02d      	b.n	8001d56 <mode_padi+0x392>
		}
	}
	else if (options==1){
 8001cfa:	4b73      	ldr	r3, [pc, #460]	; (8001ec8 <mode_padi+0x504>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d111      	bne.n	8001d26 <mode_padi+0x362>
		if(currentTick-nowTick>500){
 8001d02:	4b66      	ldr	r3, [pc, #408]	; (8001e9c <mode_padi+0x4d8>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	4b66      	ldr	r3, [pc, #408]	; (8001ea0 <mode_padi+0x4dc>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d10:	d921      	bls.n	8001d56 <mode_padi+0x392>
			HAL_GPIO_TogglePin(PISTON_D_GPIO_Port, PISTON_D_Pin);
 8001d12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d16:	4863      	ldr	r0, [pc, #396]	; (8001ea4 <mode_padi+0x4e0>)
 8001d18:	f003 f87d 	bl	8004e16 <HAL_GPIO_TogglePin>
			nowTick = currentTick;
 8001d1c:	4b5f      	ldr	r3, [pc, #380]	; (8001e9c <mode_padi+0x4d8>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a5f      	ldr	r2, [pc, #380]	; (8001ea0 <mode_padi+0x4dc>)
 8001d22:	6013      	str	r3, [r2, #0]
 8001d24:	e017      	b.n	8001d56 <mode_padi+0x392>
		}
	}
	else if (tpad==1){
 8001d26:	4b69      	ldr	r3, [pc, #420]	; (8001ecc <mode_padi+0x508>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d113      	bne.n	8001d56 <mode_padi+0x392>
		if(currentTick-nowTick>500){
 8001d2e:	4b5b      	ldr	r3, [pc, #364]	; (8001e9c <mode_padi+0x4d8>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	4b5b      	ldr	r3, [pc, #364]	; (8001ea0 <mode_padi+0x4dc>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d3c:	d908      	bls.n	8001d50 <mode_padi+0x38c>
			loopPadi+=1;
 8001d3e:	4b5e      	ldr	r3, [pc, #376]	; (8001eb8 <mode_padi+0x4f4>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	3301      	adds	r3, #1
 8001d44:	4a5c      	ldr	r2, [pc, #368]	; (8001eb8 <mode_padi+0x4f4>)
 8001d46:	6013      	str	r3, [r2, #0]
			nowTick = currentTick;
 8001d48:	4b54      	ldr	r3, [pc, #336]	; (8001e9c <mode_padi+0x4d8>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a54      	ldr	r2, [pc, #336]	; (8001ea0 <mode_padi+0x4dc>)
 8001d4e:	6013      	str	r3, [r2, #0]
		}
		stepPadi=0;
 8001d50:	4b5a      	ldr	r3, [pc, #360]	; (8001ebc <mode_padi+0x4f8>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
	}
	if (loopPadi==1){
 8001d56:	4b58      	ldr	r3, [pc, #352]	; (8001eb8 <mode_padi+0x4f4>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	f040 80f5 	bne.w	8001f4a <mode_padi+0x586>
		if (stepPadi==0) {//posisi awal dibawah
 8001d60:	4b56      	ldr	r3, [pc, #344]	; (8001ebc <mode_padi+0x4f8>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d117      	bne.n	8001d98 <mode_padi+0x3d4>
			if (lsflag_4==0){//turun
 8001d68:	4b52      	ldr	r3, [pc, #328]	; (8001eb4 <mode_padi+0x4f0>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d10a      	bne.n	8001d86 <mode_padi+0x3c2>
				motor_drive(&MPadi, -1, 800);
 8001d70:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001d74:	f04f 31ff 	mov.w	r1, #4294967295
 8001d78:	4846      	ldr	r0, [pc, #280]	; (8001e94 <mode_padi+0x4d0>)
 8001d7a:	f001 fe97 	bl	8003aac <motor_drive>
				lsflag_3=0;
 8001d7e:	4b54      	ldr	r3, [pc, #336]	; (8001ed0 <mode_padi+0x50c>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	e1cc      	b.n	8002120 <mode_padi+0x75c>
			}
			else {
				motor_drive(&MPadi, 0 , 0);
 8001d86:	2200      	movs	r2, #0
 8001d88:	2100      	movs	r1, #0
 8001d8a:	4842      	ldr	r0, [pc, #264]	; (8001e94 <mode_padi+0x4d0>)
 8001d8c:	f001 fe8e 	bl	8003aac <motor_drive>
				stepPadi=1;
 8001d90:	4b4a      	ldr	r3, [pc, #296]	; (8001ebc <mode_padi+0x4f8>)
 8001d92:	2201      	movs	r2, #1
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	e1c3      	b.n	8002120 <mode_padi+0x75c>
			}
		}
		else if (stepPadi==1) {//cek buka capit padi
 8001d98:	4b48      	ldr	r3, [pc, #288]	; (8001ebc <mode_padi+0x4f8>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	f040 81bf 	bne.w	8002120 <mode_padi+0x75c>
			p1 = HAL_GPIO_ReadPin(PISTON_A_GPIO_Port, PISTON_A_Pin);
 8001da2:	2102      	movs	r1, #2
 8001da4:	483f      	ldr	r0, [pc, #252]	; (8001ea4 <mode_padi+0x4e0>)
 8001da6:	f003 f805 	bl	8004db4 <HAL_GPIO_ReadPin>
 8001daa:	4603      	mov	r3, r0
 8001dac:	461a      	mov	r2, r3
 8001dae:	4b49      	ldr	r3, [pc, #292]	; (8001ed4 <mode_padi+0x510>)
 8001db0:	601a      	str	r2, [r3, #0]
			p2 = HAL_GPIO_ReadPin(PISTON_B_GPIO_Port, PISTON_B_Pin);
 8001db2:	2104      	movs	r1, #4
 8001db4:	483b      	ldr	r0, [pc, #236]	; (8001ea4 <mode_padi+0x4e0>)
 8001db6:	f002 fffd 	bl	8004db4 <HAL_GPIO_ReadPin>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	4b46      	ldr	r3, [pc, #280]	; (8001ed8 <mode_padi+0x514>)
 8001dc0:	601a      	str	r2, [r3, #0]
			p3 = HAL_GPIO_ReadPin(PISTON_C_GPIO_Port, PISTON_C_Pin);
 8001dc2:	2104      	movs	r1, #4
 8001dc4:	483f      	ldr	r0, [pc, #252]	; (8001ec4 <mode_padi+0x500>)
 8001dc6:	f002 fff5 	bl	8004db4 <HAL_GPIO_ReadPin>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	461a      	mov	r2, r3
 8001dce:	4b43      	ldr	r3, [pc, #268]	; (8001edc <mode_padi+0x518>)
 8001dd0:	601a      	str	r2, [r3, #0]
			p4 = HAL_GPIO_ReadPin(PISTON_D_GPIO_Port, PISTON_D_Pin);
 8001dd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dd6:	4833      	ldr	r0, [pc, #204]	; (8001ea4 <mode_padi+0x4e0>)
 8001dd8:	f002 ffec 	bl	8004db4 <HAL_GPIO_ReadPin>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	461a      	mov	r2, r3
 8001de0:	4b31      	ldr	r3, [pc, #196]	; (8001ea8 <mode_padi+0x4e4>)
 8001de2:	601a      	str	r2, [r3, #0]
			if(p1==1 && p2==1 && p3==1 && p4==1){
 8001de4:	4b3b      	ldr	r3, [pc, #236]	; (8001ed4 <mode_padi+0x510>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d129      	bne.n	8001e40 <mode_padi+0x47c>
 8001dec:	4b3a      	ldr	r3, [pc, #232]	; (8001ed8 <mode_padi+0x514>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d125      	bne.n	8001e40 <mode_padi+0x47c>
 8001df4:	4b39      	ldr	r3, [pc, #228]	; (8001edc <mode_padi+0x518>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d121      	bne.n	8001e40 <mode_padi+0x47c>
 8001dfc:	4b2a      	ldr	r3, [pc, #168]	; (8001ea8 <mode_padi+0x4e4>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d11d      	bne.n	8001e40 <mode_padi+0x47c>
				if(currentTick-nowTick>200){
 8001e04:	4b25      	ldr	r3, [pc, #148]	; (8001e9c <mode_padi+0x4d8>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	4b25      	ldr	r3, [pc, #148]	; (8001ea0 <mode_padi+0x4dc>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2bc8      	cmp	r3, #200	; 0xc8
 8001e10:	f240 8186 	bls.w	8002120 <mode_padi+0x75c>
					HAL_GPIO_TogglePin(PISTON_A_GPIO_Port, PISTON_A_Pin);
 8001e14:	2102      	movs	r1, #2
 8001e16:	4823      	ldr	r0, [pc, #140]	; (8001ea4 <mode_padi+0x4e0>)
 8001e18:	f002 fffd 	bl	8004e16 <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(PISTON_B_GPIO_Port, PISTON_B_Pin);
 8001e1c:	2104      	movs	r1, #4
 8001e1e:	4821      	ldr	r0, [pc, #132]	; (8001ea4 <mode_padi+0x4e0>)
 8001e20:	f002 fff9 	bl	8004e16 <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(PISTON_C_GPIO_Port, PISTON_C_Pin);
 8001e24:	2104      	movs	r1, #4
 8001e26:	4827      	ldr	r0, [pc, #156]	; (8001ec4 <mode_padi+0x500>)
 8001e28:	f002 fff5 	bl	8004e16 <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(PISTON_D_GPIO_Port, PISTON_D_Pin);
 8001e2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e30:	481c      	ldr	r0, [pc, #112]	; (8001ea4 <mode_padi+0x4e0>)
 8001e32:	f002 fff0 	bl	8004e16 <HAL_GPIO_TogglePin>
					nowTick = currentTick;
 8001e36:	4b19      	ldr	r3, [pc, #100]	; (8001e9c <mode_padi+0x4d8>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a19      	ldr	r2, [pc, #100]	; (8001ea0 <mode_padi+0x4dc>)
 8001e3c:	6013      	str	r3, [r2, #0]
				if(currentTick-nowTick>200){
 8001e3e:	e16f      	b.n	8002120 <mode_padi+0x75c>
				}
			}
			else if(p1==1){
 8001e40:	4b24      	ldr	r3, [pc, #144]	; (8001ed4 <mode_padi+0x510>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d110      	bne.n	8001e6a <mode_padi+0x4a6>
				if(currentTick-nowTick>200){
 8001e48:	4b14      	ldr	r3, [pc, #80]	; (8001e9c <mode_padi+0x4d8>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	4b14      	ldr	r3, [pc, #80]	; (8001ea0 <mode_padi+0x4dc>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2bc8      	cmp	r3, #200	; 0xc8
 8001e54:	f240 8164 	bls.w	8002120 <mode_padi+0x75c>
					HAL_GPIO_TogglePin(PISTON_A_GPIO_Port, PISTON_A_Pin);
 8001e58:	2102      	movs	r1, #2
 8001e5a:	4812      	ldr	r0, [pc, #72]	; (8001ea4 <mode_padi+0x4e0>)
 8001e5c:	f002 ffdb 	bl	8004e16 <HAL_GPIO_TogglePin>
					nowTick = currentTick;
 8001e60:	4b0e      	ldr	r3, [pc, #56]	; (8001e9c <mode_padi+0x4d8>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a0e      	ldr	r2, [pc, #56]	; (8001ea0 <mode_padi+0x4dc>)
 8001e66:	6013      	str	r3, [r2, #0]
 8001e68:	e15a      	b.n	8002120 <mode_padi+0x75c>
				}
			}
			else if(p2==1){
 8001e6a:	4b1b      	ldr	r3, [pc, #108]	; (8001ed8 <mode_padi+0x514>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d136      	bne.n	8001ee0 <mode_padi+0x51c>
				if(currentTick-nowTick>200){
 8001e72:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <mode_padi+0x4d8>)
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	4b0a      	ldr	r3, [pc, #40]	; (8001ea0 <mode_padi+0x4dc>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2bc8      	cmp	r3, #200	; 0xc8
 8001e7e:	f240 814f 	bls.w	8002120 <mode_padi+0x75c>
					HAL_GPIO_TogglePin(PISTON_B_GPIO_Port, PISTON_B_Pin);
 8001e82:	2104      	movs	r1, #4
 8001e84:	4807      	ldr	r0, [pc, #28]	; (8001ea4 <mode_padi+0x4e0>)
 8001e86:	f002 ffc6 	bl	8004e16 <HAL_GPIO_TogglePin>
					nowTick = currentTick;
 8001e8a:	4b04      	ldr	r3, [pc, #16]	; (8001e9c <mode_padi+0x4d8>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a04      	ldr	r2, [pc, #16]	; (8001ea0 <mode_padi+0x4dc>)
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	e145      	b.n	8002120 <mode_padi+0x75c>
 8001e94:	20000104 	.word	0x20000104
 8001e98:	2000073c 	.word	0x2000073c
 8001e9c:	200007e0 	.word	0x200007e0
 8001ea0:	200007e4 	.word	0x200007e4
 8001ea4:	40020800 	.word	0x40020800
 8001ea8:	200007cc 	.word	0x200007cc
 8001eac:	200007d0 	.word	0x200007d0
 8001eb0:	20000708 	.word	0x20000708
 8001eb4:	2000079c 	.word	0x2000079c
 8001eb8:	200007b8 	.word	0x200007b8
 8001ebc:	200007bc 	.word	0x200007bc
 8001ec0:	20000740 	.word	0x20000740
 8001ec4:	40020c00 	.word	0x40020c00
 8001ec8:	20000744 	.word	0x20000744
 8001ecc:	2000074c 	.word	0x2000074c
 8001ed0:	20000798 	.word	0x20000798
 8001ed4:	200007c0 	.word	0x200007c0
 8001ed8:	200007c4 	.word	0x200007c4
 8001edc:	200007c8 	.word	0x200007c8
				}
			}
			else if(p3==1){
 8001ee0:	4b9a      	ldr	r3, [pc, #616]	; (800214c <mode_padi+0x788>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d110      	bne.n	8001f0a <mode_padi+0x546>
				if(currentTick-nowTick>200){
 8001ee8:	4b99      	ldr	r3, [pc, #612]	; (8002150 <mode_padi+0x78c>)
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	4b99      	ldr	r3, [pc, #612]	; (8002154 <mode_padi+0x790>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2bc8      	cmp	r3, #200	; 0xc8
 8001ef4:	f240 8114 	bls.w	8002120 <mode_padi+0x75c>
					HAL_GPIO_TogglePin(PISTON_C_GPIO_Port, PISTON_C_Pin);
 8001ef8:	2104      	movs	r1, #4
 8001efa:	4897      	ldr	r0, [pc, #604]	; (8002158 <mode_padi+0x794>)
 8001efc:	f002 ff8b 	bl	8004e16 <HAL_GPIO_TogglePin>
					nowTick = currentTick;
 8001f00:	4b93      	ldr	r3, [pc, #588]	; (8002150 <mode_padi+0x78c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a93      	ldr	r2, [pc, #588]	; (8002154 <mode_padi+0x790>)
 8001f06:	6013      	str	r3, [r2, #0]
 8001f08:	e10a      	b.n	8002120 <mode_padi+0x75c>
				}
			}
			else if(p4==1){
 8001f0a:	4b94      	ldr	r3, [pc, #592]	; (800215c <mode_padi+0x798>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d111      	bne.n	8001f36 <mode_padi+0x572>
				if(currentTick-nowTick>200){
 8001f12:	4b8f      	ldr	r3, [pc, #572]	; (8002150 <mode_padi+0x78c>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	4b8f      	ldr	r3, [pc, #572]	; (8002154 <mode_padi+0x790>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2bc8      	cmp	r3, #200	; 0xc8
 8001f1e:	f240 80ff 	bls.w	8002120 <mode_padi+0x75c>
					HAL_GPIO_TogglePin(PISTON_D_GPIO_Port, PISTON_D_Pin);
 8001f22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f26:	488e      	ldr	r0, [pc, #568]	; (8002160 <mode_padi+0x79c>)
 8001f28:	f002 ff75 	bl	8004e16 <HAL_GPIO_TogglePin>
					nowTick = currentTick;
 8001f2c:	4b88      	ldr	r3, [pc, #544]	; (8002150 <mode_padi+0x78c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a88      	ldr	r2, [pc, #544]	; (8002154 <mode_padi+0x790>)
 8001f32:	6013      	str	r3, [r2, #0]
 8001f34:	e0f4      	b.n	8002120 <mode_padi+0x75c>
				}
			}
			else {
				lsflag_4=1;
 8001f36:	4b8b      	ldr	r3, [pc, #556]	; (8002164 <mode_padi+0x7a0>)
 8001f38:	2201      	movs	r2, #1
 8001f3a:	601a      	str	r2, [r3, #0]
				lsflag_3=0;
 8001f3c:	4b8a      	ldr	r3, [pc, #552]	; (8002168 <mode_padi+0x7a4>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]
				stepPadi=0;
 8001f42:	4b8a      	ldr	r3, [pc, #552]	; (800216c <mode_padi+0x7a8>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	e0ea      	b.n	8002120 <mode_padi+0x75c>
			}
		}
	}
	else if (loopPadi==2){
 8001f4a:	4b89      	ldr	r3, [pc, #548]	; (8002170 <mode_padi+0x7ac>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d128      	bne.n	8001fa4 <mode_padi+0x5e0>
		if(stepPadi==0){
 8001f52:	4b86      	ldr	r3, [pc, #536]	; (800216c <mode_padi+0x7a8>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d108      	bne.n	8001f6c <mode_padi+0x5a8>
			if(kotak==1){
 8001f5a:	4b86      	ldr	r3, [pc, #536]	; (8002174 <mode_padi+0x7b0>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	f040 80de 	bne.w	8002120 <mode_padi+0x75c>
				stepPadi=1;
 8001f64:	4b81      	ldr	r3, [pc, #516]	; (800216c <mode_padi+0x7a8>)
 8001f66:	2201      	movs	r2, #1
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	e0d9      	b.n	8002120 <mode_padi+0x75c>
			}
		}
		else if (stepPadi==1){
 8001f6c:	4b7f      	ldr	r3, [pc, #508]	; (800216c <mode_padi+0x7a8>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	f040 80d5 	bne.w	8002120 <mode_padi+0x75c>
			if (lsflag_3==0){//naik
 8001f76:	4b7c      	ldr	r3, [pc, #496]	; (8002168 <mode_padi+0x7a4>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d106      	bne.n	8001f8c <mode_padi+0x5c8>
				motor_drive(&MPadi, 1, 1000);
 8001f7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f82:	2101      	movs	r1, #1
 8001f84:	487c      	ldr	r0, [pc, #496]	; (8002178 <mode_padi+0x7b4>)
 8001f86:	f001 fd91 	bl	8003aac <motor_drive>
 8001f8a:	e0c9      	b.n	8002120 <mode_padi+0x75c>
			}
			else {
				motor_drive(&MPadi, 1 , 0);
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	2101      	movs	r1, #1
 8001f90:	4879      	ldr	r0, [pc, #484]	; (8002178 <mode_padi+0x7b4>)
 8001f92:	f001 fd8b 	bl	8003aac <motor_drive>
				lsflag_4=0;
 8001f96:	4b73      	ldr	r3, [pc, #460]	; (8002164 <mode_padi+0x7a0>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
				stepPadi=5;
 8001f9c:	4b73      	ldr	r3, [pc, #460]	; (800216c <mode_padi+0x7a8>)
 8001f9e:	2205      	movs	r2, #5
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	e0bd      	b.n	8002120 <mode_padi+0x75c>
			}
		}
	}
	else if(loopPadi==3){
 8001fa4:	4b72      	ldr	r3, [pc, #456]	; (8002170 <mode_padi+0x7ac>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2b03      	cmp	r3, #3
 8001faa:	d14a      	bne.n	8002042 <mode_padi+0x67e>
		if(stepPadi==0){
 8001fac:	4b6f      	ldr	r3, [pc, #444]	; (800216c <mode_padi+0x7a8>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d117      	bne.n	8001fe4 <mode_padi+0x620>
			if (lsflag_4==0){//turun
 8001fb4:	4b6b      	ldr	r3, [pc, #428]	; (8002164 <mode_padi+0x7a0>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d10a      	bne.n	8001fd2 <mode_padi+0x60e>
				motor_drive(&MPadi, -1, 800);
 8001fbc:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc4:	486c      	ldr	r0, [pc, #432]	; (8002178 <mode_padi+0x7b4>)
 8001fc6:	f001 fd71 	bl	8003aac <motor_drive>
				lsflag_3=0;
 8001fca:	4b67      	ldr	r3, [pc, #412]	; (8002168 <mode_padi+0x7a4>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	e0a6      	b.n	8002120 <mode_padi+0x75c>
			}
			else {
				motor_drive(&MPadi, 0 , 0);
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	4868      	ldr	r0, [pc, #416]	; (8002178 <mode_padi+0x7b4>)
 8001fd8:	f001 fd68 	bl	8003aac <motor_drive>
				stepPadi=1;
 8001fdc:	4b63      	ldr	r3, [pc, #396]	; (800216c <mode_padi+0x7a8>)
 8001fde:	2201      	movs	r2, #1
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	e09d      	b.n	8002120 <mode_padi+0x75c>
			}
		}
		else if(stepPadi==1){
 8001fe4:	4b61      	ldr	r3, [pc, #388]	; (800216c <mode_padi+0x7a8>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d10b      	bne.n	8002004 <mode_padi+0x640>
				HAL_GPIO_TogglePin(PISTON_A_GPIO_Port, PISTON_A_Pin);
 8001fec:	2102      	movs	r1, #2
 8001fee:	485c      	ldr	r0, [pc, #368]	; (8002160 <mode_padi+0x79c>)
 8001ff0:	f002 ff11 	bl	8004e16 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(PISTON_C_GPIO_Port, PISTON_C_Pin);
 8001ff4:	2104      	movs	r1, #4
 8001ff6:	4858      	ldr	r0, [pc, #352]	; (8002158 <mode_padi+0x794>)
 8001ff8:	f002 ff0d 	bl	8004e16 <HAL_GPIO_TogglePin>
			stepPadi=2;
 8001ffc:	4b5b      	ldr	r3, [pc, #364]	; (800216c <mode_padi+0x7a8>)
 8001ffe:	2202      	movs	r2, #2
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	e08d      	b.n	8002120 <mode_padi+0x75c>
		}
		else if (stepPadi==2){
 8002004:	4b59      	ldr	r3, [pc, #356]	; (800216c <mode_padi+0x7a8>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2b02      	cmp	r3, #2
 800200a:	f040 8089 	bne.w	8002120 <mode_padi+0x75c>
			if (lsflag_3==0){//naik
 800200e:	4b56      	ldr	r3, [pc, #344]	; (8002168 <mode_padi+0x7a4>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d109      	bne.n	800202a <mode_padi+0x666>
				motor_drive(&MPadi, 1, 1000);
 8002016:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800201a:	2101      	movs	r1, #1
 800201c:	4856      	ldr	r0, [pc, #344]	; (8002178 <mode_padi+0x7b4>)
 800201e:	f001 fd45 	bl	8003aac <motor_drive>
				lsflag_4=0;
 8002022:	4b50      	ldr	r3, [pc, #320]	; (8002164 <mode_padi+0x7a0>)
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	e07a      	b.n	8002120 <mode_padi+0x75c>
			}
			else {
				motor_drive(&MPadi, 0 , 0);
 800202a:	2200      	movs	r2, #0
 800202c:	2100      	movs	r1, #0
 800202e:	4852      	ldr	r0, [pc, #328]	; (8002178 <mode_padi+0x7b4>)
 8002030:	f001 fd3c 	bl	8003aac <motor_drive>
				lsflag_4=0;
 8002034:	4b4b      	ldr	r3, [pc, #300]	; (8002164 <mode_padi+0x7a0>)
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
				stepPadi=5;
 800203a:	4b4c      	ldr	r3, [pc, #304]	; (800216c <mode_padi+0x7a8>)
 800203c:	2205      	movs	r2, #5
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	e06e      	b.n	8002120 <mode_padi+0x75c>
			}
		}
	}
	else if(loopPadi==4){
 8002042:	4b4b      	ldr	r3, [pc, #300]	; (8002170 <mode_padi+0x7ac>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2b04      	cmp	r3, #4
 8002048:	d164      	bne.n	8002114 <mode_padi+0x750>
		if(stepPadi==0){
 800204a:	4b48      	ldr	r3, [pc, #288]	; (800216c <mode_padi+0x7a8>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d117      	bne.n	8002082 <mode_padi+0x6be>
			if (lsflag_4==0){//turun
 8002052:	4b44      	ldr	r3, [pc, #272]	; (8002164 <mode_padi+0x7a0>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d107      	bne.n	800206a <mode_padi+0x6a6>
				motor_drive(&MPadi, -1, 800);
 800205a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800205e:	f04f 31ff 	mov.w	r1, #4294967295
 8002062:	4845      	ldr	r0, [pc, #276]	; (8002178 <mode_padi+0x7b4>)
 8002064:	f001 fd22 	bl	8003aac <motor_drive>
 8002068:	e05a      	b.n	8002120 <mode_padi+0x75c>
			}
			else {
				motor_drive(&MPadi, 0 , 0);
 800206a:	2200      	movs	r2, #0
 800206c:	2100      	movs	r1, #0
 800206e:	4842      	ldr	r0, [pc, #264]	; (8002178 <mode_padi+0x7b4>)
 8002070:	f001 fd1c 	bl	8003aac <motor_drive>
				stepPadi=1;
 8002074:	4b3d      	ldr	r3, [pc, #244]	; (800216c <mode_padi+0x7a8>)
 8002076:	2201      	movs	r2, #1
 8002078:	601a      	str	r2, [r3, #0]
				lsflag_3=0;
 800207a:	4b3b      	ldr	r3, [pc, #236]	; (8002168 <mode_padi+0x7a4>)
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	e04e      	b.n	8002120 <mode_padi+0x75c>
			}
		}
		else if(stepPadi==1){
 8002082:	4b3a      	ldr	r3, [pc, #232]	; (800216c <mode_padi+0x7a8>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d11b      	bne.n	80020c2 <mode_padi+0x6fe>
			if(currentTick-nowTick>500){
 800208a:	4b31      	ldr	r3, [pc, #196]	; (8002150 <mode_padi+0x78c>)
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	4b31      	ldr	r3, [pc, #196]	; (8002154 <mode_padi+0x790>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002098:	d90c      	bls.n	80020b4 <mode_padi+0x6f0>
				HAL_GPIO_TogglePin(PISTON_B_GPIO_Port, PISTON_B_Pin);
 800209a:	2104      	movs	r1, #4
 800209c:	4830      	ldr	r0, [pc, #192]	; (8002160 <mode_padi+0x79c>)
 800209e:	f002 feba 	bl	8004e16 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(PISTON_D_GPIO_Port, PISTON_D_Pin);
 80020a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020a6:	482e      	ldr	r0, [pc, #184]	; (8002160 <mode_padi+0x79c>)
 80020a8:	f002 feb5 	bl	8004e16 <HAL_GPIO_TogglePin>
				nowTick = currentTick;
 80020ac:	4b28      	ldr	r3, [pc, #160]	; (8002150 <mode_padi+0x78c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a28      	ldr	r2, [pc, #160]	; (8002154 <mode_padi+0x790>)
 80020b2:	6013      	str	r3, [r2, #0]
			}
			stepPadi=2;
 80020b4:	4b2d      	ldr	r3, [pc, #180]	; (800216c <mode_padi+0x7a8>)
 80020b6:	2202      	movs	r2, #2
 80020b8:	601a      	str	r2, [r3, #0]
			lsflag_4=0;
 80020ba:	4b2a      	ldr	r3, [pc, #168]	; (8002164 <mode_padi+0x7a0>)
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	e02e      	b.n	8002120 <mode_padi+0x75c>
		}
		else if (stepPadi==2){
 80020c2:	4b2a      	ldr	r3, [pc, #168]	; (800216c <mode_padi+0x7a8>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d119      	bne.n	80020fe <mode_padi+0x73a>
			if (lsflag_3==0){//naik
 80020ca:	4b27      	ldr	r3, [pc, #156]	; (8002168 <mode_padi+0x7a4>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d109      	bne.n	80020e6 <mode_padi+0x722>
				motor_drive(&MPadi, 1, 1000);
 80020d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020d6:	2101      	movs	r1, #1
 80020d8:	4827      	ldr	r0, [pc, #156]	; (8002178 <mode_padi+0x7b4>)
 80020da:	f001 fce7 	bl	8003aac <motor_drive>
				lsflag_4=0;
 80020de:	4b21      	ldr	r3, [pc, #132]	; (8002164 <mode_padi+0x7a0>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	e01c      	b.n	8002120 <mode_padi+0x75c>
			}
			else {
				motor_drive(&MPadi, 0 , 0);
 80020e6:	2200      	movs	r2, #0
 80020e8:	2100      	movs	r1, #0
 80020ea:	4823      	ldr	r0, [pc, #140]	; (8002178 <mode_padi+0x7b4>)
 80020ec:	f001 fcde 	bl	8003aac <motor_drive>
				stepPadi=3;
 80020f0:	4b1e      	ldr	r3, [pc, #120]	; (800216c <mode_padi+0x7a8>)
 80020f2:	2203      	movs	r2, #3
 80020f4:	601a      	str	r2, [r3, #0]
				lsflag_3=1;
 80020f6:	4b1c      	ldr	r3, [pc, #112]	; (8002168 <mode_padi+0x7a4>)
 80020f8:	2201      	movs	r2, #1
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	e010      	b.n	8002120 <mode_padi+0x75c>
			}
		}
		else if(stepPadi==3){
 80020fe:	4b1b      	ldr	r3, [pc, #108]	; (800216c <mode_padi+0x7a8>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2b03      	cmp	r3, #3
 8002104:	d10c      	bne.n	8002120 <mode_padi+0x75c>
			stepPadi=0;
 8002106:	4b19      	ldr	r3, [pc, #100]	; (800216c <mode_padi+0x7a8>)
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
			loopPadi=0;
 800210c:	4b18      	ldr	r3, [pc, #96]	; (8002170 <mode_padi+0x7ac>)
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	e005      	b.n	8002120 <mode_padi+0x75c>
		}
	}
	else{
		stepPadi=0;
 8002114:	4b15      	ldr	r3, [pc, #84]	; (800216c <mode_padi+0x7a8>)
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
		loopPadi=0;
 800211a:	4b15      	ldr	r3, [pc, #84]	; (8002170 <mode_padi+0x7ac>)
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
	}
	bldc_drive(&roller1, 3000);
 8002120:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002124:	4815      	ldr	r0, [pc, #84]	; (800217c <mode_padi+0x7b8>)
 8002126:	f001 fe0c 	bl	8003d42 <bldc_drive>
	bldc_drive(&roller2, 3000);
 800212a:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800212e:	4814      	ldr	r0, [pc, #80]	; (8002180 <mode_padi+0x7bc>)
 8002130:	f001 fe07 	bl	8003d42 <bldc_drive>
	motor_drive(&MPelontar, 0, 0);
 8002134:	2200      	movs	r2, #0
 8002136:	2100      	movs	r1, #0
 8002138:	4812      	ldr	r0, [pc, #72]	; (8002184 <mode_padi+0x7c0>)
 800213a:	f001 fcb7 	bl	8003aac <motor_drive>
	motor_drive(&MBola, 0, 0);
 800213e:	2200      	movs	r2, #0
 8002140:	2100      	movs	r1, #0
 8002142:	4811      	ldr	r0, [pc, #68]	; (8002188 <mode_padi+0x7c4>)
 8002144:	f001 fcb2 	bl	8003aac <motor_drive>
}
 8002148:	bf00      	nop
 800214a:	bd80      	pop	{r7, pc}
 800214c:	200007c8 	.word	0x200007c8
 8002150:	200007e0 	.word	0x200007e0
 8002154:	200007e4 	.word	0x200007e4
 8002158:	40020c00 	.word	0x40020c00
 800215c:	200007cc 	.word	0x200007cc
 8002160:	40020800 	.word	0x40020800
 8002164:	2000079c 	.word	0x2000079c
 8002168:	20000798 	.word	0x20000798
 800216c:	200007bc 	.word	0x200007bc
 8002170:	200007b8 	.word	0x200007b8
 8002174:	20000720 	.word	0x20000720
 8002178:	20000104 	.word	0x20000104
 800217c:	20000034 	.word	0x20000034
 8002180:	2000003c 	.word	0x2000003c
 8002184:	200000a4 	.word	0x200000a4
 8002188:	200000bc 	.word	0x200000bc

0800218c <mode_bola>:

void mode_bola(){
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
	if (bawah==1) {
 8002190:	4b95      	ldr	r3, [pc, #596]	; (80023e8 <mode_bola+0x25c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d111      	bne.n	80021bc <mode_bola+0x30>
		if (lsflag_5==0){//turun
 8002198:	4b94      	ldr	r3, [pc, #592]	; (80023ec <mode_bola+0x260>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d107      	bne.n	80021b0 <mode_bola+0x24>
			motor_drive(&MPelontar, -1, 550);
 80021a0:	f240 2226 	movw	r2, #550	; 0x226
 80021a4:	f04f 31ff 	mov.w	r1, #4294967295
 80021a8:	4891      	ldr	r0, [pc, #580]	; (80023f0 <mode_bola+0x264>)
 80021aa:	f001 fc7f 	bl	8003aac <motor_drive>
 80021ae:	e018      	b.n	80021e2 <mode_bola+0x56>
		}
		else {
			motor_drive(&MPelontar, 0 , 0);
 80021b0:	2200      	movs	r2, #0
 80021b2:	2100      	movs	r1, #0
 80021b4:	488e      	ldr	r0, [pc, #568]	; (80023f0 <mode_bola+0x264>)
 80021b6:	f001 fc79 	bl	8003aac <motor_drive>
 80021ba:	e012      	b.n	80021e2 <mode_bola+0x56>
		}
	}
	else if (atas==1){//naik
 80021bc:	4b8d      	ldr	r3, [pc, #564]	; (80023f4 <mode_bola+0x268>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d109      	bne.n	80021d8 <mode_bola+0x4c>
		motor_drive(&MPelontar, 1, 450);
 80021c4:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 80021c8:	2101      	movs	r1, #1
 80021ca:	4889      	ldr	r0, [pc, #548]	; (80023f0 <mode_bola+0x264>)
 80021cc:	f001 fc6e 	bl	8003aac <motor_drive>
		lsflag_5=0;
 80021d0:	4b86      	ldr	r3, [pc, #536]	; (80023ec <mode_bola+0x260>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	e004      	b.n	80021e2 <mode_bola+0x56>
	}
	else{
		motor_drive(&MPelontar, 0, 0);
 80021d8:	2200      	movs	r2, #0
 80021da:	2100      	movs	r1, #0
 80021dc:	4884      	ldr	r0, [pc, #528]	; (80023f0 <mode_bola+0x264>)
 80021de:	f001 fc65 	bl	8003aac <motor_drive>
	}

	if (kanan==1){
 80021e2:	4b85      	ldr	r3, [pc, #532]	; (80023f8 <mode_bola+0x26c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d118      	bne.n	800221c <mode_bola+0x90>
		if(currentTick-nowTick>500 && kec<5){
 80021ea:	4b84      	ldr	r3, [pc, #528]	; (80023fc <mode_bola+0x270>)
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	4b84      	ldr	r3, [pc, #528]	; (8002400 <mode_bola+0x274>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80021f8:	d92c      	bls.n	8002254 <mode_bola+0xc8>
 80021fa:	4b82      	ldr	r3, [pc, #520]	; (8002404 <mode_bola+0x278>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2b04      	cmp	r3, #4
 8002200:	dc28      	bgt.n	8002254 <mode_bola+0xc8>
			adj=0;
 8002202:	4b81      	ldr	r3, [pc, #516]	; (8002408 <mode_bola+0x27c>)
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
			kec+=1;
 8002208:	4b7e      	ldr	r3, [pc, #504]	; (8002404 <mode_bola+0x278>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	3301      	adds	r3, #1
 800220e:	4a7d      	ldr	r2, [pc, #500]	; (8002404 <mode_bola+0x278>)
 8002210:	6013      	str	r3, [r2, #0]
			nowTick = currentTick;
 8002212:	4b7a      	ldr	r3, [pc, #488]	; (80023fc <mode_bola+0x270>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a7a      	ldr	r2, [pc, #488]	; (8002400 <mode_bola+0x274>)
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	e01b      	b.n	8002254 <mode_bola+0xc8>
		}
	}

	else if (kiri==1){
 800221c:	4b7b      	ldr	r3, [pc, #492]	; (800240c <mode_bola+0x280>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d117      	bne.n	8002254 <mode_bola+0xc8>
		if(currentTick-nowTick>500 && kec>0){
 8002224:	4b75      	ldr	r3, [pc, #468]	; (80023fc <mode_bola+0x270>)
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	4b75      	ldr	r3, [pc, #468]	; (8002400 <mode_bola+0x274>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002232:	d90f      	bls.n	8002254 <mode_bola+0xc8>
 8002234:	4b73      	ldr	r3, [pc, #460]	; (8002404 <mode_bola+0x278>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	dd0b      	ble.n	8002254 <mode_bola+0xc8>
			adj=0;
 800223c:	4b72      	ldr	r3, [pc, #456]	; (8002408 <mode_bola+0x27c>)
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]
			kec-=1;
 8002242:	4b70      	ldr	r3, [pc, #448]	; (8002404 <mode_bola+0x278>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	3b01      	subs	r3, #1
 8002248:	4a6e      	ldr	r2, [pc, #440]	; (8002404 <mode_bola+0x278>)
 800224a:	6013      	str	r3, [r2, #0]
			nowTick = currentTick;
 800224c:	4b6b      	ldr	r3, [pc, #428]	; (80023fc <mode_bola+0x270>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a6b      	ldr	r2, [pc, #428]	; (8002400 <mode_bola+0x274>)
 8002252:	6013      	str	r3, [r2, #0]
		}
	}
	if (kec==1 && adj==0){
 8002254:	4b6b      	ldr	r3, [pc, #428]	; (8002404 <mode_bola+0x278>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d12f      	bne.n	80022bc <mode_bola+0x130>
 800225c:	4b6a      	ldr	r3, [pc, #424]	; (8002408 <mode_bola+0x27c>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d12b      	bne.n	80022bc <mode_bola+0x130>
		if (k < 3499){
 8002264:	4b6a      	ldr	r3, [pc, #424]	; (8002410 <mode_bola+0x284>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f640 52aa 	movw	r2, #3498	; 0xdaa
 800226c:	4293      	cmp	r3, r2
 800226e:	dc1c      	bgt.n	80022aa <mode_bola+0x11e>
			for (k = 3000; k < 3500; ++k) {
 8002270:	4b67      	ldr	r3, [pc, #412]	; (8002410 <mode_bola+0x284>)
 8002272:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	e010      	b.n	800229c <mode_bola+0x110>
				dutyR=k;
 800227a:	4b65      	ldr	r3, [pc, #404]	; (8002410 <mode_bola+0x284>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	461a      	mov	r2, r3
 8002280:	4b64      	ldr	r3, [pc, #400]	; (8002414 <mode_bola+0x288>)
 8002282:	601a      	str	r2, [r3, #0]
				kec1=k;
 8002284:	4b62      	ldr	r3, [pc, #392]	; (8002410 <mode_bola+0x284>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a63      	ldr	r2, [pc, #396]	; (8002418 <mode_bola+0x28c>)
 800228a:	6013      	str	r3, [r2, #0]
				osDelay(1);
 800228c:	2001      	movs	r0, #1
 800228e:	f006 f916 	bl	80084be <osDelay>
			for (k = 3000; k < 3500; ++k) {
 8002292:	4b5f      	ldr	r3, [pc, #380]	; (8002410 <mode_bola+0x284>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	3301      	adds	r3, #1
 8002298:	4a5d      	ldr	r2, [pc, #372]	; (8002410 <mode_bola+0x284>)
 800229a:	6013      	str	r3, [r2, #0]
 800229c:	4b5c      	ldr	r3, [pc, #368]	; (8002410 <mode_bola+0x284>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f640 52ab 	movw	r2, #3499	; 0xdab
 80022a4:	4293      	cmp	r3, r2
 80022a6:	dde8      	ble.n	800227a <mode_bola+0xee>
		if (k < 3499){
 80022a8:	e04b      	b.n	8002342 <mode_bola+0x1b6>
			}
		}
		else{
			dutyR=3500;
 80022aa:	4b5a      	ldr	r3, [pc, #360]	; (8002414 <mode_bola+0x288>)
 80022ac:	f640 52ac 	movw	r2, #3500	; 0xdac
 80022b0:	601a      	str	r2, [r3, #0]
			kec1=3500;
 80022b2:	4b59      	ldr	r3, [pc, #356]	; (8002418 <mode_bola+0x28c>)
 80022b4:	f640 52ac 	movw	r2, #3500	; 0xdac
 80022b8:	601a      	str	r2, [r3, #0]
		if (k < 3499){
 80022ba:	e042      	b.n	8002342 <mode_bola+0x1b6>
		}
	}
	else if (kec==2 && adj==0){dutyR=4000;kec1=4000;}
 80022bc:	4b51      	ldr	r3, [pc, #324]	; (8002404 <mode_bola+0x278>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d10c      	bne.n	80022de <mode_bola+0x152>
 80022c4:	4b50      	ldr	r3, [pc, #320]	; (8002408 <mode_bola+0x27c>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d108      	bne.n	80022de <mode_bola+0x152>
 80022cc:	4b51      	ldr	r3, [pc, #324]	; (8002414 <mode_bola+0x288>)
 80022ce:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	4b50      	ldr	r3, [pc, #320]	; (8002418 <mode_bola+0x28c>)
 80022d6:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	e031      	b.n	8002342 <mode_bola+0x1b6>
	else if (kec==3 && adj==0){dutyR=4500;kec1=4500;}
 80022de:	4b49      	ldr	r3, [pc, #292]	; (8002404 <mode_bola+0x278>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2b03      	cmp	r3, #3
 80022e4:	d10c      	bne.n	8002300 <mode_bola+0x174>
 80022e6:	4b48      	ldr	r3, [pc, #288]	; (8002408 <mode_bola+0x27c>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d108      	bne.n	8002300 <mode_bola+0x174>
 80022ee:	4b49      	ldr	r3, [pc, #292]	; (8002414 <mode_bola+0x288>)
 80022f0:	f241 1294 	movw	r2, #4500	; 0x1194
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	4b48      	ldr	r3, [pc, #288]	; (8002418 <mode_bola+0x28c>)
 80022f8:	f241 1294 	movw	r2, #4500	; 0x1194
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	e020      	b.n	8002342 <mode_bola+0x1b6>
	else if (kec==4 && adj==0){dutyR=5000;kec1=5000;}
 8002300:	4b40      	ldr	r3, [pc, #256]	; (8002404 <mode_bola+0x278>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2b04      	cmp	r3, #4
 8002306:	d10c      	bne.n	8002322 <mode_bola+0x196>
 8002308:	4b3f      	ldr	r3, [pc, #252]	; (8002408 <mode_bola+0x27c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d108      	bne.n	8002322 <mode_bola+0x196>
 8002310:	4b40      	ldr	r3, [pc, #256]	; (8002414 <mode_bola+0x288>)
 8002312:	f241 3288 	movw	r2, #5000	; 0x1388
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	4b3f      	ldr	r3, [pc, #252]	; (8002418 <mode_bola+0x28c>)
 800231a:	f241 3288 	movw	r2, #5000	; 0x1388
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	e00f      	b.n	8002342 <mode_bola+0x1b6>
	else if (kec==0 && adj==0){dutyR=3000;kec1=3000;}
 8002322:	4b38      	ldr	r3, [pc, #224]	; (8002404 <mode_bola+0x278>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10b      	bne.n	8002342 <mode_bola+0x1b6>
 800232a:	4b37      	ldr	r3, [pc, #220]	; (8002408 <mode_bola+0x27c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d107      	bne.n	8002342 <mode_bola+0x1b6>
 8002332:	4b38      	ldr	r3, [pc, #224]	; (8002414 <mode_bola+0x288>)
 8002334:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	4b37      	ldr	r3, [pc, #220]	; (8002418 <mode_bola+0x28c>)
 800233c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002340:	601a      	str	r2, [r3, #0]

	if (kotak==1){
 8002342:	4b36      	ldr	r3, [pc, #216]	; (800241c <mode_bola+0x290>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d105      	bne.n	8002356 <mode_bola+0x1ca>
		HAL_GPIO_WritePin(PISTON_PELONTAR_GPIO_Port, PISTON_PELONTAR_Pin, 1);
 800234a:	2201      	movs	r2, #1
 800234c:	2101      	movs	r1, #1
 800234e:	4834      	ldr	r0, [pc, #208]	; (8002420 <mode_bola+0x294>)
 8002350:	f002 fd48 	bl	8004de4 <HAL_GPIO_WritePin>
 8002354:	e004      	b.n	8002360 <mode_bola+0x1d4>
	}
	else {
		HAL_GPIO_WritePin(PISTON_PELONTAR_GPIO_Port, PISTON_PELONTAR_Pin, 0);
 8002356:	2200      	movs	r2, #0
 8002358:	2101      	movs	r1, #1
 800235a:	4831      	ldr	r0, [pc, #196]	; (8002420 <mode_bola+0x294>)
 800235c:	f002 fd42 	bl	8004de4 <HAL_GPIO_WritePin>
	}

	if (silang==1){
 8002360:	4b30      	ldr	r3, [pc, #192]	; (8002424 <mode_bola+0x298>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d117      	bne.n	8002398 <mode_bola+0x20c>
		if (currentTick - nowTick > 500) {
 8002368:	4b24      	ldr	r3, [pc, #144]	; (80023fc <mode_bola+0x270>)
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	4b24      	ldr	r3, [pc, #144]	; (8002400 <mode_bola+0x274>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002376:	d90f      	bls.n	8002398 <mode_bola+0x20c>
			HAL_GPIO_TogglePin(PISTON_BOLA_GPIO_Port, PISTON_BOLA_Pin);
 8002378:	2108      	movs	r1, #8
 800237a:	4829      	ldr	r0, [pc, #164]	; (8002420 <mode_bola+0x294>)
 800237c:	f002 fd4b 	bl	8004e16 <HAL_GPIO_TogglePin>
			capit = HAL_GPIO_ReadPin(PISTON_BOLA_GPIO_Port, PISTON_BOLA_Pin);
 8002380:	2108      	movs	r1, #8
 8002382:	4827      	ldr	r0, [pc, #156]	; (8002420 <mode_bola+0x294>)
 8002384:	f002 fd16 	bl	8004db4 <HAL_GPIO_ReadPin>
 8002388:	4603      	mov	r3, r0
 800238a:	461a      	mov	r2, r3
 800238c:	4b26      	ldr	r3, [pc, #152]	; (8002428 <mode_bola+0x29c>)
 800238e:	601a      	str	r2, [r3, #0]
			nowTick = currentTick;
 8002390:	4b1a      	ldr	r3, [pc, #104]	; (80023fc <mode_bola+0x270>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a1a      	ldr	r2, [pc, #104]	; (8002400 <mode_bola+0x274>)
 8002396:	6013      	str	r3, [r2, #0]
		}
	}
	if (bulat==1){
 8002398:	4b24      	ldr	r3, [pc, #144]	; (800242c <mode_bola+0x2a0>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d10a      	bne.n	80023b6 <mode_bola+0x22a>
		motor_drive(&MPelontar, 0, 0);
 80023a0:	2200      	movs	r2, #0
 80023a2:	2100      	movs	r1, #0
 80023a4:	4812      	ldr	r0, [pc, #72]	; (80023f0 <mode_bola+0x264>)
 80023a6:	f001 fb81 	bl	8003aac <motor_drive>
		lsflag_5=1;
 80023aa:	4b10      	ldr	r3, [pc, #64]	; (80023ec <mode_bola+0x260>)
 80023ac:	2201      	movs	r2, #1
 80023ae:	601a      	str	r2, [r3, #0]
		stepLoading=0;
 80023b0:	4b1f      	ldr	r3, [pc, #124]	; (8002430 <mode_bola+0x2a4>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
	}
	if (l1==1){
 80023b6:	4b1f      	ldr	r3, [pc, #124]	; (8002434 <mode_bola+0x2a8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d142      	bne.n	8002444 <mode_bola+0x2b8>
		if(lsflag_2==0){
 80023be:	4b1e      	ldr	r3, [pc, #120]	; (8002438 <mode_bola+0x2ac>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10a      	bne.n	80023dc <mode_bola+0x250>
			motor_drive(&MBola, -1, 700);
 80023c6:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80023ca:	f04f 31ff 	mov.w	r1, #4294967295
 80023ce:	481b      	ldr	r0, [pc, #108]	; (800243c <mode_bola+0x2b0>)
 80023d0:	f001 fb6c 	bl	8003aac <motor_drive>
			lsflag_1=0;
 80023d4:	4b1a      	ldr	r3, [pc, #104]	; (8002440 <mode_bola+0x2b4>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	e050      	b.n	800247e <mode_bola+0x2f2>
		}
		else{
			motor_drive(&MBola, 0, 0);
 80023dc:	2200      	movs	r2, #0
 80023de:	2100      	movs	r1, #0
 80023e0:	4816      	ldr	r0, [pc, #88]	; (800243c <mode_bola+0x2b0>)
 80023e2:	f001 fb63 	bl	8003aac <motor_drive>
 80023e6:	e04a      	b.n	800247e <mode_bola+0x2f2>
 80023e8:	20000714 	.word	0x20000714
 80023ec:	200007a0 	.word	0x200007a0
 80023f0:	200000a4 	.word	0x200000a4
 80023f4:	20000710 	.word	0x20000710
 80023f8:	20000718 	.word	0x20000718
 80023fc:	200007e0 	.word	0x200007e0
 8002400:	200007e4 	.word	0x200007e4
 8002404:	200007d4 	.word	0x200007d4
 8002408:	200007dc 	.word	0x200007dc
 800240c:	2000071c 	.word	0x2000071c
 8002410:	20000030 	.word	0x20000030
 8002414:	2000002c 	.word	0x2000002c
 8002418:	200007d8 	.word	0x200007d8
 800241c:	20000720 	.word	0x20000720
 8002420:	40020800 	.word	0x40020800
 8002424:	20000724 	.word	0x20000724
 8002428:	200007b0 	.word	0x200007b0
 800242c:	20000728 	.word	0x20000728
 8002430:	200007b4 	.word	0x200007b4
 8002434:	20000730 	.word	0x20000730
 8002438:	20000794 	.word	0x20000794
 800243c:	200000bc 	.word	0x200000bc
 8002440:	20000790 	.word	0x20000790
		}
	}
	else if (r1==1){
 8002444:	4b90      	ldr	r3, [pc, #576]	; (8002688 <mode_bola+0x4fc>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d113      	bne.n	8002474 <mode_bola+0x2e8>
		if(lsflag_1==0){
 800244c:	4b8f      	ldr	r3, [pc, #572]	; (800268c <mode_bola+0x500>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d109      	bne.n	8002468 <mode_bola+0x2dc>
			motor_drive(&MBola, 1, 700);
 8002454:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8002458:	2101      	movs	r1, #1
 800245a:	488d      	ldr	r0, [pc, #564]	; (8002690 <mode_bola+0x504>)
 800245c:	f001 fb26 	bl	8003aac <motor_drive>
			lsflag_2=0;
 8002460:	4b8c      	ldr	r3, [pc, #560]	; (8002694 <mode_bola+0x508>)
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
 8002466:	e00a      	b.n	800247e <mode_bola+0x2f2>
		}
		else{
			motor_drive(&MBola, 0, 0);
 8002468:	2200      	movs	r2, #0
 800246a:	2100      	movs	r1, #0
 800246c:	4888      	ldr	r0, [pc, #544]	; (8002690 <mode_bola+0x504>)
 800246e:	f001 fb1d 	bl	8003aac <motor_drive>
 8002472:	e004      	b.n	800247e <mode_bola+0x2f2>
		}
	}
	else{
		motor_drive(&MBola, 0, 0);
 8002474:	2200      	movs	r2, #0
 8002476:	2100      	movs	r1, #0
 8002478:	4885      	ldr	r0, [pc, #532]	; (8002690 <mode_bola+0x504>)
 800247a:	f001 fb17 	bl	8003aac <motor_drive>
	}

	if (share==1){
 800247e:	4b86      	ldr	r3, [pc, #536]	; (8002698 <mode_bola+0x50c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d119      	bne.n	80024ba <mode_bola+0x32e>
		adj=1;
 8002486:	4b85      	ldr	r3, [pc, #532]	; (800269c <mode_bola+0x510>)
 8002488:	2201      	movs	r2, #1
 800248a:	601a      	str	r2, [r3, #0]
		if(currentTick-nowTick>100 && kec1>3000){
 800248c:	4b84      	ldr	r3, [pc, #528]	; (80026a0 <mode_bola+0x514>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	4b84      	ldr	r3, [pc, #528]	; (80026a4 <mode_bola+0x518>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b64      	cmp	r3, #100	; 0x64
 8002498:	d934      	bls.n	8002504 <mode_bola+0x378>
 800249a:	4b83      	ldr	r3, [pc, #524]	; (80026a8 <mode_bola+0x51c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80024a2:	4293      	cmp	r3, r2
 80024a4:	dd2e      	ble.n	8002504 <mode_bola+0x378>
			kec1-=10;
 80024a6:	4b80      	ldr	r3, [pc, #512]	; (80026a8 <mode_bola+0x51c>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	3b0a      	subs	r3, #10
 80024ac:	4a7e      	ldr	r2, [pc, #504]	; (80026a8 <mode_bola+0x51c>)
 80024ae:	6013      	str	r3, [r2, #0]
			nowTick = currentTick;
 80024b0:	4b7b      	ldr	r3, [pc, #492]	; (80026a0 <mode_bola+0x514>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a7b      	ldr	r2, [pc, #492]	; (80026a4 <mode_bola+0x518>)
 80024b6:	6013      	str	r3, [r2, #0]
 80024b8:	e024      	b.n	8002504 <mode_bola+0x378>
		}
	}
	else if (options==1){
 80024ba:	4b7c      	ldr	r3, [pc, #496]	; (80026ac <mode_bola+0x520>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d119      	bne.n	80024f6 <mode_bola+0x36a>
		adj=1;
 80024c2:	4b76      	ldr	r3, [pc, #472]	; (800269c <mode_bola+0x510>)
 80024c4:	2201      	movs	r2, #1
 80024c6:	601a      	str	r2, [r3, #0]
		if(currentTick-nowTick>100 && kec1<6000){
 80024c8:	4b75      	ldr	r3, [pc, #468]	; (80026a0 <mode_bola+0x514>)
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	4b75      	ldr	r3, [pc, #468]	; (80026a4 <mode_bola+0x518>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b64      	cmp	r3, #100	; 0x64
 80024d4:	d916      	bls.n	8002504 <mode_bola+0x378>
 80024d6:	4b74      	ldr	r3, [pc, #464]	; (80026a8 <mode_bola+0x51c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f241 726f 	movw	r2, #5999	; 0x176f
 80024de:	4293      	cmp	r3, r2
 80024e0:	dc10      	bgt.n	8002504 <mode_bola+0x378>
			kec1+=10;
 80024e2:	4b71      	ldr	r3, [pc, #452]	; (80026a8 <mode_bola+0x51c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	330a      	adds	r3, #10
 80024e8:	4a6f      	ldr	r2, [pc, #444]	; (80026a8 <mode_bola+0x51c>)
 80024ea:	6013      	str	r3, [r2, #0]
			nowTick = currentTick;
 80024ec:	4b6c      	ldr	r3, [pc, #432]	; (80026a0 <mode_bola+0x514>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a6c      	ldr	r2, [pc, #432]	; (80026a4 <mode_bola+0x518>)
 80024f2:	6013      	str	r3, [r2, #0]
 80024f4:	e006      	b.n	8002504 <mode_bola+0x378>
		}

	}
	else if (tpad==1){
 80024f6:	4b6e      	ldr	r3, [pc, #440]	; (80026b0 <mode_bola+0x524>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d102      	bne.n	8002504 <mode_bola+0x378>
		tpad1=1;
 80024fe:	4b6d      	ldr	r3, [pc, #436]	; (80026b4 <mode_bola+0x528>)
 8002500:	2201      	movs	r2, #1
 8002502:	601a      	str	r2, [r3, #0]
	}
	if(tpad1==1){
 8002504:	4b6b      	ldr	r3, [pc, #428]	; (80026b4 <mode_bola+0x528>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d16f      	bne.n	80025ec <mode_bola+0x460>
		if(stepLoading==0){//ambil bola
 800250c:	4b6a      	ldr	r3, [pc, #424]	; (80026b8 <mode_bola+0x52c>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d121      	bne.n	8002558 <mode_bola+0x3cc>
			if	(lsflag_2==0){
 8002514:	4b5f      	ldr	r3, [pc, #380]	; (8002694 <mode_bola+0x508>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d106      	bne.n	800252a <mode_bola+0x39e>
				motor_drive(&MBola, 1, 700);
 800251c:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8002520:	2101      	movs	r1, #1
 8002522:	485b      	ldr	r0, [pc, #364]	; (8002690 <mode_bola+0x504>)
 8002524:	f001 fac2 	bl	8003aac <motor_drive>
 8002528:	e007      	b.n	800253a <mode_bola+0x3ae>
			}
			else{
				motor_drive(&MBola, 0, 0);
 800252a:	2200      	movs	r2, #0
 800252c:	2100      	movs	r1, #0
 800252e:	4858      	ldr	r0, [pc, #352]	; (8002690 <mode_bola+0x504>)
 8002530:	f001 fabc 	bl	8003aac <motor_drive>
				lsflag_1=0;
 8002534:	4b55      	ldr	r3, [pc, #340]	; (800268c <mode_bola+0x500>)
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]
			}
			if (lsflag_5==1 && lsflag_2==1 && capit==1){
 800253a:	4b60      	ldr	r3, [pc, #384]	; (80026bc <mode_bola+0x530>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d10a      	bne.n	8002558 <mode_bola+0x3cc>
 8002542:	4b54      	ldr	r3, [pc, #336]	; (8002694 <mode_bola+0x508>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d106      	bne.n	8002558 <mode_bola+0x3cc>
 800254a:	4b5d      	ldr	r3, [pc, #372]	; (80026c0 <mode_bola+0x534>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d102      	bne.n	8002558 <mode_bola+0x3cc>
				stepLoading=1;
 8002552:	4b59      	ldr	r3, [pc, #356]	; (80026b8 <mode_bola+0x52c>)
 8002554:	2201      	movs	r2, #1
 8002556:	601a      	str	r2, [r3, #0]
			}
		}
		if(stepLoading==1){//taruh ke pelontar
 8002558:	4b57      	ldr	r3, [pc, #348]	; (80026b8 <mode_bola+0x52c>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d125      	bne.n	80025ac <mode_bola+0x420>
			if(lsflag_1==0){
 8002560:	4b4a      	ldr	r3, [pc, #296]	; (800268c <mode_bola+0x500>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d106      	bne.n	8002576 <mode_bola+0x3ea>
				motor_drive(&MBola, 1, 900);
 8002568:	f44f 7261 	mov.w	r2, #900	; 0x384
 800256c:	2101      	movs	r1, #1
 800256e:	4848      	ldr	r0, [pc, #288]	; (8002690 <mode_bola+0x504>)
 8002570:	f001 fa9c 	bl	8003aac <motor_drive>
 8002574:	e016      	b.n	80025a4 <mode_bola+0x418>
			}
			else {
				motor_drive(&MBola, 0, 0);
 8002576:	2200      	movs	r2, #0
 8002578:	2100      	movs	r1, #0
 800257a:	4845      	ldr	r0, [pc, #276]	; (8002690 <mode_bola+0x504>)
 800257c:	f001 fa96 	bl	8003aac <motor_drive>
				HAL_GPIO_TogglePin(PISTON_BOLA_GPIO_Port, PISTON_BOLA_Pin);
 8002580:	2108      	movs	r1, #8
 8002582:	4850      	ldr	r0, [pc, #320]	; (80026c4 <mode_bola+0x538>)
 8002584:	f002 fc47 	bl	8004e16 <HAL_GPIO_TogglePin>
				capit = HAL_GPIO_ReadPin(PISTON_BOLA_GPIO_Port, PISTON_BOLA_Pin);
 8002588:	2108      	movs	r1, #8
 800258a:	484e      	ldr	r0, [pc, #312]	; (80026c4 <mode_bola+0x538>)
 800258c:	f002 fc12 	bl	8004db4 <HAL_GPIO_ReadPin>
 8002590:	4603      	mov	r3, r0
 8002592:	461a      	mov	r2, r3
 8002594:	4b4a      	ldr	r3, [pc, #296]	; (80026c0 <mode_bola+0x534>)
 8002596:	601a      	str	r2, [r3, #0]
				osDelay(3);
 8002598:	2003      	movs	r0, #3
 800259a:	f005 ff90 	bl	80084be <osDelay>
				stepLoading=2;
 800259e:	4b46      	ldr	r3, [pc, #280]	; (80026b8 <mode_bola+0x52c>)
 80025a0:	2202      	movs	r2, #2
 80025a2:	601a      	str	r2, [r3, #0]
			}
			lsflag_2=0;
 80025a4:	4b3b      	ldr	r3, [pc, #236]	; (8002694 <mode_bola+0x508>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	e028      	b.n	80025fe <mode_bola+0x472>
		}
		else if(stepLoading==2){//kembali posisi ambil
 80025ac:	4b42      	ldr	r3, [pc, #264]	; (80026b8 <mode_bola+0x52c>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d114      	bne.n	80025de <mode_bola+0x452>
			if	(lsflag_2==0){
 80025b4:	4b37      	ldr	r3, [pc, #220]	; (8002694 <mode_bola+0x508>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d107      	bne.n	80025cc <mode_bola+0x440>
				motor_drive(&MBola, -1, 700);
 80025bc:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80025c0:	f04f 31ff 	mov.w	r1, #4294967295
 80025c4:	4832      	ldr	r0, [pc, #200]	; (8002690 <mode_bola+0x504>)
 80025c6:	f001 fa71 	bl	8003aac <motor_drive>
 80025ca:	e018      	b.n	80025fe <mode_bola+0x472>
			}
			else{
				motor_drive(&MBola, 0, 0);
 80025cc:	2200      	movs	r2, #0
 80025ce:	2100      	movs	r1, #0
 80025d0:	482f      	ldr	r0, [pc, #188]	; (8002690 <mode_bola+0x504>)
 80025d2:	f001 fa6b 	bl	8003aac <motor_drive>
				stepLoading=3;//end
 80025d6:	4b38      	ldr	r3, [pc, #224]	; (80026b8 <mode_bola+0x52c>)
 80025d8:	2203      	movs	r2, #3
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	e00f      	b.n	80025fe <mode_bola+0x472>
			}
		}
		else{
//			lsflag_5=0;
			tpad1=0;
 80025de:	4b35      	ldr	r3, [pc, #212]	; (80026b4 <mode_bola+0x528>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
			stepLoading=0;
 80025e4:	4b34      	ldr	r3, [pc, #208]	; (80026b8 <mode_bola+0x52c>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	e008      	b.n	80025fe <mode_bola+0x472>
		}
	}
	else{
		lsflag_1=0;
 80025ec:	4b27      	ldr	r3, [pc, #156]	; (800268c <mode_bola+0x500>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]
		tpad1=0;
 80025f2:	4b30      	ldr	r3, [pc, #192]	; (80026b4 <mode_bola+0x528>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
		stepLoading=0;
 80025f8:	4b2f      	ldr	r3, [pc, #188]	; (80026b8 <mode_bola+0x52c>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]
	}
	if (r3==1){
 80025fe:	4b32      	ldr	r3, [pc, #200]	; (80026c8 <mode_bola+0x53c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d108      	bne.n	8002618 <mode_bola+0x48c>
		flagFirst=1;
 8002606:	4b31      	ldr	r3, [pc, #196]	; (80026cc <mode_bola+0x540>)
 8002608:	2201      	movs	r2, #1
 800260a:	601a      	str	r2, [r3, #0]
		lsflag_5=1;
 800260c:	4b2b      	ldr	r3, [pc, #172]	; (80026bc <mode_bola+0x530>)
 800260e:	2201      	movs	r2, #1
 8002610:	601a      	str	r2, [r3, #0]
		lsflag_1=0;
 8002612:	4b1e      	ldr	r3, [pc, #120]	; (800268c <mode_bola+0x500>)
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
	}

	if (flagFirst==1){
 8002618:	4b2c      	ldr	r3, [pc, #176]	; (80026cc <mode_bola+0x540>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d113      	bne.n	8002648 <mode_bola+0x4bc>
		if(lsflag_2==0){
 8002620:	4b1c      	ldr	r3, [pc, #112]	; (8002694 <mode_bola+0x508>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d107      	bne.n	8002638 <mode_bola+0x4ac>
			motor_drive(&MBola, -1, 700);
 8002628:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800262c:	f04f 31ff 	mov.w	r1, #4294967295
 8002630:	4817      	ldr	r0, [pc, #92]	; (8002690 <mode_bola+0x504>)
 8002632:	f001 fa3b 	bl	8003aac <motor_drive>
 8002636:	e007      	b.n	8002648 <mode_bola+0x4bc>
		}
		else{
			motor_drive(&MBola, 0, 0);
 8002638:	2200      	movs	r2, #0
 800263a:	2100      	movs	r1, #0
 800263c:	4814      	ldr	r0, [pc, #80]	; (8002690 <mode_bola+0x504>)
 800263e:	f001 fa35 	bl	8003aac <motor_drive>
			flagFirst=0;
 8002642:	4b22      	ldr	r3, [pc, #136]	; (80026cc <mode_bola+0x540>)
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
		}
	}

	if(adj==1){
 8002648:	4b14      	ldr	r3, [pc, #80]	; (800269c <mode_bola+0x510>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d10c      	bne.n	800266a <mode_bola+0x4de>
		bldc_drive(&roller1, kec1);
 8002650:	4b15      	ldr	r3, [pc, #84]	; (80026a8 <mode_bola+0x51c>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4619      	mov	r1, r3
 8002656:	481e      	ldr	r0, [pc, #120]	; (80026d0 <mode_bola+0x544>)
 8002658:	f001 fb73 	bl	8003d42 <bldc_drive>
		bldc_drive(&roller2, kec1);
 800265c:	4b12      	ldr	r3, [pc, #72]	; (80026a8 <mode_bola+0x51c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4619      	mov	r1, r3
 8002662:	481c      	ldr	r0, [pc, #112]	; (80026d4 <mode_bola+0x548>)
 8002664:	f001 fb6d 	bl	8003d42 <bldc_drive>
	}
	else{
		bldc_drive(&roller1, dutyR);
		bldc_drive(&roller2, dutyR);
	}
}
 8002668:	e00b      	b.n	8002682 <mode_bola+0x4f6>
		bldc_drive(&roller1, dutyR);
 800266a:	4b1b      	ldr	r3, [pc, #108]	; (80026d8 <mode_bola+0x54c>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4619      	mov	r1, r3
 8002670:	4817      	ldr	r0, [pc, #92]	; (80026d0 <mode_bola+0x544>)
 8002672:	f001 fb66 	bl	8003d42 <bldc_drive>
		bldc_drive(&roller2, dutyR);
 8002676:	4b18      	ldr	r3, [pc, #96]	; (80026d8 <mode_bola+0x54c>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4619      	mov	r1, r3
 800267c:	4815      	ldr	r0, [pc, #84]	; (80026d4 <mode_bola+0x548>)
 800267e:	f001 fb60 	bl	8003d42 <bldc_drive>
}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20000734 	.word	0x20000734
 800268c:	20000790 	.word	0x20000790
 8002690:	200000bc 	.word	0x200000bc
 8002694:	20000794 	.word	0x20000794
 8002698:	20000740 	.word	0x20000740
 800269c:	200007dc 	.word	0x200007dc
 80026a0:	200007e0 	.word	0x200007e0
 80026a4:	200007e4 	.word	0x200007e4
 80026a8:	200007d8 	.word	0x200007d8
 80026ac:	20000744 	.word	0x20000744
 80026b0:	2000074c 	.word	0x2000074c
 80026b4:	2000070c 	.word	0x2000070c
 80026b8:	200007b4 	.word	0x200007b4
 80026bc:	200007a0 	.word	0x200007a0
 80026c0:	200007b0 	.word	0x200007b0
 80026c4:	40020800 	.word	0x40020800
 80026c8:	2000073c 	.word	0x2000073c
 80026cc:	200007ac 	.word	0x200007ac
 80026d0:	20000034 	.word	0x20000034
 80026d4:	2000003c 	.word	0x2000003c
 80026d8:	2000002c 	.word	0x2000002c

080026dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026dc:	b5b0      	push	{r4, r5, r7, lr}
 80026de:	b096      	sub	sp, #88	; 0x58
 80026e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026e2:	f001 ffe1 	bl	80046a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026e6:	f000 f8db 	bl	80028a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026ea:	f000 fda7 	bl	800323c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80026ee:	f000 fd7b 	bl	80031e8 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80026f2:	f000 fa3f 	bl	8002b74 <MX_TIM3_Init>
  MX_TIM12_Init();
 80026f6:	f000 fd09 	bl	800310c <MX_TIM12_Init>
  MX_TIM1_Init();
 80026fa:	f000 f977 	bl	80029ec <MX_TIM1_Init>
  MX_SPI5_Init();
 80026fe:	f000 f93f 	bl	8002980 <MX_SPI5_Init>
  MX_TIM4_Init();
 8002702:	f000 facf 	bl	8002ca4 <MX_TIM4_Init>
  MX_TIM5_Init();
 8002706:	f000 fb65 	bl	8002dd4 <MX_TIM5_Init>
  MX_TIM8_Init();
 800270a:	f000 fbe5 	bl	8002ed8 <MX_TIM8_Init>
  MX_TIM9_Init();
 800270e:	f000 fc8f 	bl	8003030 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
	#if Calibrate
	TIM12->CCR1 = 6000;  // Set the maximum pulse (2ms)
 8002712:	4b4f      	ldr	r3, [pc, #316]	; (8002850 <main+0x174>)
 8002714:	f241 7270 	movw	r2, #6000	; 0x1770
 8002718:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay (2000);  // wait for 1 beep
 800271a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800271e:	f002 f805 	bl	800472c <HAL_Delay>
	TIM12->CCR1 = 3000;   // Set the minimum Pulse (1ms)
 8002722:	4b4b      	ldr	r3, [pc, #300]	; (8002850 <main+0x174>)
 8002724:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002728:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay (1000);  // wait for 2 beeps
 800272a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800272e:	f001 fffd 	bl	800472c <HAL_Delay>
	#endif
  //inisiasi bldc roller
  bldc_init(&roller1, 3000);
 8002732:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002736:	4847      	ldr	r0, [pc, #284]	; (8002854 <main+0x178>)
 8002738:	f001 facf 	bl	8003cda <bldc_init>
  bldc_init(&roller2, 3000);
 800273c:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002740:	4845      	ldr	r0, [pc, #276]	; (8002858 <main+0x17c>)
 8002742:	f001 faca 	bl	8003cda <bldc_init>

//inisiasi canbus spi
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002746:	2200      	movs	r2, #0
 8002748:	2180      	movs	r1, #128	; 0x80
 800274a:	4844      	ldr	r0, [pc, #272]	; (800285c <main+0x180>)
 800274c:	f002 fb4a 	bl	8004de4 <HAL_GPIO_WritePin>

    ret = CANSPI_Initialize();
 8002750:	f7fe fcce 	bl	80010f0 <CANSPI_Initialize>
 8002754:	4603      	mov	r3, r0
 8002756:	4a42      	ldr	r2, [pc, #264]	; (8002860 <main+0x184>)
 8002758:	6013      	str	r3, [r2, #0]
    if(ret < 0){
 800275a:	4b41      	ldr	r3, [pc, #260]	; (8002860 <main+0x184>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2b00      	cmp	r3, #0
 8002760:	da05      	bge.n	800276e <main+0x92>
    	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8002762:	2201      	movs	r2, #1
 8002764:	2180      	movs	r1, #128	; 0x80
 8002766:	483d      	ldr	r0, [pc, #244]	; (800285c <main+0x180>)
 8002768:	f002 fb3c 	bl	8004de4 <HAL_GPIO_WritePin>
    	  while(1){}
 800276c:	e7fe      	b.n	800276c <main+0x90>
    }

  motor_init(&LeftFront);
 800276e:	483d      	ldr	r0, [pc, #244]	; (8002864 <main+0x188>)
 8002770:	f001 f935 	bl	80039de <motor_init>
  motor_init(&LeftBack);
 8002774:	483c      	ldr	r0, [pc, #240]	; (8002868 <main+0x18c>)
 8002776:	f001 f932 	bl	80039de <motor_init>
  motor_init(&RightBack);
 800277a:	483c      	ldr	r0, [pc, #240]	; (800286c <main+0x190>)
 800277c:	f001 f92f 	bl	80039de <motor_init>
  motor_init(&RightFront);
 8002780:	483b      	ldr	r0, [pc, #236]	; (8002870 <main+0x194>)
 8002782:	f001 f92c 	bl	80039de <motor_init>
  motor_init(&MPelontar);
 8002786:	483b      	ldr	r0, [pc, #236]	; (8002874 <main+0x198>)
 8002788:	f001 f929 	bl	80039de <motor_init>
  motor_init(&MBola);
 800278c:	483a      	ldr	r0, [pc, #232]	; (8002878 <main+0x19c>)
 800278e:	f001 f926 	bl	80039de <motor_init>
  motor_init(&MExtendLeft);
 8002792:	483a      	ldr	r0, [pc, #232]	; (800287c <main+0x1a0>)
 8002794:	f001 f923 	bl	80039de <motor_init>
  motor_init(&MExtendRight);
 8002798:	4839      	ldr	r0, [pc, #228]	; (8002880 <main+0x1a4>)
 800279a:	f001 f920 	bl	80039de <motor_init>
  motor_init(&MPadi);
 800279e:	4839      	ldr	r0, [pc, #228]	; (8002884 <main+0x1a8>)
 80027a0:	f001 f91d 	bl	80039de <motor_init>

  enable_motor(&LeftFront);
 80027a4:	482f      	ldr	r0, [pc, #188]	; (8002864 <main+0x188>)
 80027a6:	f001 fa87 	bl	8003cb8 <enable_motor>
  enable_motor(&LeftBack);
 80027aa:	482f      	ldr	r0, [pc, #188]	; (8002868 <main+0x18c>)
 80027ac:	f001 fa84 	bl	8003cb8 <enable_motor>
  enable_motor(&RightBack);
 80027b0:	482e      	ldr	r0, [pc, #184]	; (800286c <main+0x190>)
 80027b2:	f001 fa81 	bl	8003cb8 <enable_motor>
  enable_motor(&RightFront);
 80027b6:	482e      	ldr	r0, [pc, #184]	; (8002870 <main+0x194>)
 80027b8:	f001 fa7e 	bl	8003cb8 <enable_motor>
  enable_motor(&MPelontar);
 80027bc:	482d      	ldr	r0, [pc, #180]	; (8002874 <main+0x198>)
 80027be:	f001 fa7b 	bl	8003cb8 <enable_motor>
  enable_motor(&MBola);
 80027c2:	482d      	ldr	r0, [pc, #180]	; (8002878 <main+0x19c>)
 80027c4:	f001 fa78 	bl	8003cb8 <enable_motor>
  enable_motor(&MExtendLeft);
 80027c8:	482c      	ldr	r0, [pc, #176]	; (800287c <main+0x1a0>)
 80027ca:	f001 fa75 	bl	8003cb8 <enable_motor>
  enable_motor(&MExtendRight);
 80027ce:	482c      	ldr	r0, [pc, #176]	; (8002880 <main+0x1a4>)
 80027d0:	f001 fa72 	bl	8003cb8 <enable_motor>
  enable_motor(&MPadi);
 80027d4:	482b      	ldr	r0, [pc, #172]	; (8002884 <main+0x1a8>)
 80027d6:	f001 fa6f 	bl	8003cb8 <enable_motor>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of InputTask */
  osThreadDef(InputTask, InputHandle_Task, osPriorityAboveNormal, 0, 512);
 80027da:	4b2b      	ldr	r3, [pc, #172]	; (8002888 <main+0x1ac>)
 80027dc:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80027e0:	461d      	mov	r5, r3
 80027e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80027ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  InputTaskHandle = osThreadCreate(osThread(InputTask), NULL);
 80027ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80027f2:	2100      	movs	r1, #0
 80027f4:	4618      	mov	r0, r3
 80027f6:	f005 fe16 	bl	8008426 <osThreadCreate>
 80027fa:	4603      	mov	r3, r0
 80027fc:	4a23      	ldr	r2, [pc, #140]	; (800288c <main+0x1b0>)
 80027fe:	6013      	str	r3, [r2, #0]

  /* definition and creation of MechanismTask */
  osThreadDef(MechanismTask, MechanismHandle_Task, osPriorityNormal, 0, 512);
 8002800:	4b23      	ldr	r3, [pc, #140]	; (8002890 <main+0x1b4>)
 8002802:	f107 0420 	add.w	r4, r7, #32
 8002806:	461d      	mov	r5, r3
 8002808:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800280a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800280c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002810:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MechanismTaskHandle = osThreadCreate(osThread(MechanismTask), NULL);
 8002814:	f107 0320 	add.w	r3, r7, #32
 8002818:	2100      	movs	r1, #0
 800281a:	4618      	mov	r0, r3
 800281c:	f005 fe03 	bl	8008426 <osThreadCreate>
 8002820:	4603      	mov	r3, r0
 8002822:	4a1c      	ldr	r2, [pc, #112]	; (8002894 <main+0x1b8>)
 8002824:	6013      	str	r3, [r2, #0]

  /* definition and creation of OmniTask */
  osThreadDef(OmniTask, OmniHandle_Task, osPriorityNormal, 0, 512);
 8002826:	4b1c      	ldr	r3, [pc, #112]	; (8002898 <main+0x1bc>)
 8002828:	1d3c      	adds	r4, r7, #4
 800282a:	461d      	mov	r5, r3
 800282c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800282e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002830:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002834:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  OmniTaskHandle = osThreadCreate(osThread(OmniTask), NULL);
 8002838:	1d3b      	adds	r3, r7, #4
 800283a:	2100      	movs	r1, #0
 800283c:	4618      	mov	r0, r3
 800283e:	f005 fdf2 	bl	8008426 <osThreadCreate>
 8002842:	4603      	mov	r3, r0
 8002844:	4a15      	ldr	r2, [pc, #84]	; (800289c <main+0x1c0>)
 8002846:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002848:	f005 fde6 	bl	8008418 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800284c:	e7fe      	b.n	800284c <main+0x170>
 800284e:	bf00      	nop
 8002850:	40001800 	.word	0x40001800
 8002854:	20000034 	.word	0x20000034
 8002858:	2000003c 	.word	0x2000003c
 800285c:	40020400 	.word	0x40020400
 8002860:	20000784 	.word	0x20000784
 8002864:	20000044 	.word	0x20000044
 8002868:	2000005c 	.word	0x2000005c
 800286c:	2000008c 	.word	0x2000008c
 8002870:	20000074 	.word	0x20000074
 8002874:	200000a4 	.word	0x200000a4
 8002878:	200000bc 	.word	0x200000bc
 800287c:	200000d4 	.word	0x200000d4
 8002880:	200000ec 	.word	0x200000ec
 8002884:	20000104 	.word	0x20000104
 8002888:	0800a81c 	.word	0x0800a81c
 800288c:	200006fc 	.word	0x200006fc
 8002890:	0800a848 	.word	0x0800a848
 8002894:	20000700 	.word	0x20000700
 8002898:	0800a870 	.word	0x0800a870
 800289c:	20000704 	.word	0x20000704

080028a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b094      	sub	sp, #80	; 0x50
 80028a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028a6:	f107 0320 	add.w	r3, r7, #32
 80028aa:	2230      	movs	r2, #48	; 0x30
 80028ac:	2100      	movs	r1, #0
 80028ae:	4618      	mov	r0, r3
 80028b0:	f007 f92b 	bl	8009b0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028b4:	f107 030c 	add.w	r3, r7, #12
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	605a      	str	r2, [r3, #4]
 80028be:	609a      	str	r2, [r3, #8]
 80028c0:	60da      	str	r2, [r3, #12]
 80028c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80028c4:	2300      	movs	r3, #0
 80028c6:	60bb      	str	r3, [r7, #8]
 80028c8:	4b2b      	ldr	r3, [pc, #172]	; (8002978 <SystemClock_Config+0xd8>)
 80028ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028cc:	4a2a      	ldr	r2, [pc, #168]	; (8002978 <SystemClock_Config+0xd8>)
 80028ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d2:	6413      	str	r3, [r2, #64]	; 0x40
 80028d4:	4b28      	ldr	r3, [pc, #160]	; (8002978 <SystemClock_Config+0xd8>)
 80028d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028dc:	60bb      	str	r3, [r7, #8]
 80028de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028e0:	2300      	movs	r3, #0
 80028e2:	607b      	str	r3, [r7, #4]
 80028e4:	4b25      	ldr	r3, [pc, #148]	; (800297c <SystemClock_Config+0xdc>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a24      	ldr	r2, [pc, #144]	; (800297c <SystemClock_Config+0xdc>)
 80028ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028ee:	6013      	str	r3, [r2, #0]
 80028f0:	4b22      	ldr	r3, [pc, #136]	; (800297c <SystemClock_Config+0xdc>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80028f8:	607b      	str	r3, [r7, #4]
 80028fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80028fc:	2301      	movs	r3, #1
 80028fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002900:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002904:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002906:	2302      	movs	r3, #2
 8002908:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800290a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800290e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002910:	2304      	movs	r3, #4
 8002912:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002914:	23b4      	movs	r3, #180	; 0xb4
 8002916:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002918:	2302      	movs	r3, #2
 800291a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800291c:	2307      	movs	r3, #7
 800291e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002920:	f107 0320 	add.w	r3, r7, #32
 8002924:	4618      	mov	r0, r3
 8002926:	f002 faf9 	bl	8004f1c <HAL_RCC_OscConfig>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002930:	f001 f850 	bl	80039d4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002934:	f002 faa2 	bl	8004e7c <HAL_PWREx_EnableOverDrive>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800293e:	f001 f849 	bl	80039d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002942:	230f      	movs	r3, #15
 8002944:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002946:	2302      	movs	r3, #2
 8002948:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800294a:	2300      	movs	r3, #0
 800294c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800294e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002952:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002954:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002958:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800295a:	f107 030c 	add.w	r3, r7, #12
 800295e:	2105      	movs	r1, #5
 8002960:	4618      	mov	r0, r3
 8002962:	f002 fd53 	bl	800540c <HAL_RCC_ClockConfig>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800296c:	f001 f832 	bl	80039d4 <Error_Handler>
  }
}
 8002970:	bf00      	nop
 8002972:	3750      	adds	r7, #80	; 0x50
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	40023800 	.word	0x40023800
 800297c:	40007000 	.word	0x40007000

08002980 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8002984:	4b17      	ldr	r3, [pc, #92]	; (80029e4 <MX_SPI5_Init+0x64>)
 8002986:	4a18      	ldr	r2, [pc, #96]	; (80029e8 <MX_SPI5_Init+0x68>)
 8002988:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800298a:	4b16      	ldr	r3, [pc, #88]	; (80029e4 <MX_SPI5_Init+0x64>)
 800298c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002990:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002992:	4b14      	ldr	r3, [pc, #80]	; (80029e4 <MX_SPI5_Init+0x64>)
 8002994:	2200      	movs	r2, #0
 8002996:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002998:	4b12      	ldr	r3, [pc, #72]	; (80029e4 <MX_SPI5_Init+0x64>)
 800299a:	2200      	movs	r2, #0
 800299c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800299e:	4b11      	ldr	r3, [pc, #68]	; (80029e4 <MX_SPI5_Init+0x64>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029a4:	4b0f      	ldr	r3, [pc, #60]	; (80029e4 <MX_SPI5_Init+0x64>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80029aa:	4b0e      	ldr	r3, [pc, #56]	; (80029e4 <MX_SPI5_Init+0x64>)
 80029ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029b0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80029b2:	4b0c      	ldr	r3, [pc, #48]	; (80029e4 <MX_SPI5_Init+0x64>)
 80029b4:	2210      	movs	r2, #16
 80029b6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029b8:	4b0a      	ldr	r3, [pc, #40]	; (80029e4 <MX_SPI5_Init+0x64>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80029be:	4b09      	ldr	r3, [pc, #36]	; (80029e4 <MX_SPI5_Init+0x64>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029c4:	4b07      	ldr	r3, [pc, #28]	; (80029e4 <MX_SPI5_Init+0x64>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80029ca:	4b06      	ldr	r3, [pc, #24]	; (80029e4 <MX_SPI5_Init+0x64>)
 80029cc:	220a      	movs	r2, #10
 80029ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80029d0:	4804      	ldr	r0, [pc, #16]	; (80029e4 <MX_SPI5_Init+0x64>)
 80029d2:	f002 ff6d 	bl	80058b0 <HAL_SPI_Init>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80029dc:	f000 fffa 	bl	80039d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80029e0:	bf00      	nop
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	20000468 	.word	0x20000468
 80029e8:	40015000 	.word	0x40015000

080029ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b096      	sub	sp, #88	; 0x58
 80029f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80029f6:	2200      	movs	r2, #0
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	605a      	str	r2, [r3, #4]
 80029fc:	609a      	str	r2, [r3, #8]
 80029fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a00:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a0e:	2200      	movs	r2, #0
 8002a10:	601a      	str	r2, [r3, #0]
 8002a12:	605a      	str	r2, [r3, #4]
 8002a14:	609a      	str	r2, [r3, #8]
 8002a16:	60da      	str	r2, [r3, #12]
 8002a18:	611a      	str	r2, [r3, #16]
 8002a1a:	615a      	str	r2, [r3, #20]
 8002a1c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002a1e:	1d3b      	adds	r3, r7, #4
 8002a20:	2220      	movs	r2, #32
 8002a22:	2100      	movs	r1, #0
 8002a24:	4618      	mov	r0, r3
 8002a26:	f007 f870 	bl	8009b0a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002a2a:	4b50      	ldr	r3, [pc, #320]	; (8002b6c <MX_TIM1_Init+0x180>)
 8002a2c:	4a50      	ldr	r2, [pc, #320]	; (8002b70 <MX_TIM1_Init+0x184>)
 8002a2e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10-1;
 8002a30:	4b4e      	ldr	r3, [pc, #312]	; (8002b6c <MX_TIM1_Init+0x180>)
 8002a32:	2209      	movs	r2, #9
 8002a34:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a36:	4b4d      	ldr	r3, [pc, #308]	; (8002b6c <MX_TIM1_Init+0x180>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8002a3c:	4b4b      	ldr	r3, [pc, #300]	; (8002b6c <MX_TIM1_Init+0x180>)
 8002a3e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a42:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a44:	4b49      	ldr	r3, [pc, #292]	; (8002b6c <MX_TIM1_Init+0x180>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002a4a:	4b48      	ldr	r3, [pc, #288]	; (8002b6c <MX_TIM1_Init+0x180>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a50:	4b46      	ldr	r3, [pc, #280]	; (8002b6c <MX_TIM1_Init+0x180>)
 8002a52:	2280      	movs	r2, #128	; 0x80
 8002a54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002a56:	4845      	ldr	r0, [pc, #276]	; (8002b6c <MX_TIM1_Init+0x180>)
 8002a58:	f003 fce0 	bl	800641c <HAL_TIM_Base_Init>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002a62:	f000 ffb7 	bl	80039d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a6a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002a6c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a70:	4619      	mov	r1, r3
 8002a72:	483e      	ldr	r0, [pc, #248]	; (8002b6c <MX_TIM1_Init+0x180>)
 8002a74:	f004 f87e 	bl	8006b74 <HAL_TIM_ConfigClockSource>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002a7e:	f000 ffa9 	bl	80039d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002a82:	483a      	ldr	r0, [pc, #232]	; (8002b6c <MX_TIM1_Init+0x180>)
 8002a84:	f003 fd8a 	bl	800659c <HAL_TIM_PWM_Init>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002a8e:	f000 ffa1 	bl	80039d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a92:	2300      	movs	r3, #0
 8002a94:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a96:	2300      	movs	r3, #0
 8002a98:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a9a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4832      	ldr	r0, [pc, #200]	; (8002b6c <MX_TIM1_Init+0x180>)
 8002aa2:	f004 fc67 	bl	8007374 <HAL_TIMEx_MasterConfigSynchronization>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002aac:	f000 ff92 	bl	80039d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ab0:	2360      	movs	r3, #96	; 0x60
 8002ab2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002abc:	2300      	movs	r3, #0
 8002abe:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002acc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4825      	ldr	r0, [pc, #148]	; (8002b6c <MX_TIM1_Init+0x180>)
 8002ad6:	f003 ff8b 	bl	80069f0 <HAL_TIM_PWM_ConfigChannel>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002ae0:	f000 ff78 	bl	80039d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ae8:	2204      	movs	r2, #4
 8002aea:	4619      	mov	r1, r3
 8002aec:	481f      	ldr	r0, [pc, #124]	; (8002b6c <MX_TIM1_Init+0x180>)
 8002aee:	f003 ff7f 	bl	80069f0 <HAL_TIM_PWM_ConfigChannel>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002af8:	f000 ff6c 	bl	80039d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002afc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b00:	2208      	movs	r2, #8
 8002b02:	4619      	mov	r1, r3
 8002b04:	4819      	ldr	r0, [pc, #100]	; (8002b6c <MX_TIM1_Init+0x180>)
 8002b06:	f003 ff73 	bl	80069f0 <HAL_TIM_PWM_ConfigChannel>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002b10:	f000 ff60 	bl	80039d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b18:	220c      	movs	r2, #12
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4813      	ldr	r0, [pc, #76]	; (8002b6c <MX_TIM1_Init+0x180>)
 8002b1e:	f003 ff67 	bl	80069f0 <HAL_TIM_PWM_ConfigChannel>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8002b28:	f000 ff54 	bl	80039d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002b30:	2300      	movs	r3, #0
 8002b32:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002b34:	2300      	movs	r3, #0
 8002b36:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b44:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002b46:	2300      	movs	r3, #0
 8002b48:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002b4a:	1d3b      	adds	r3, r7, #4
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	4807      	ldr	r0, [pc, #28]	; (8002b6c <MX_TIM1_Init+0x180>)
 8002b50:	f004 fc8c 	bl	800746c <HAL_TIMEx_ConfigBreakDeadTime>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8002b5a:	f000 ff3b 	bl	80039d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002b5e:	4803      	ldr	r0, [pc, #12]	; (8002b6c <MX_TIM1_Init+0x180>)
 8002b60:	f001 fa38 	bl	8003fd4 <HAL_TIM_MspPostInit>

}
 8002b64:	bf00      	nop
 8002b66:	3758      	adds	r7, #88	; 0x58
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	200004c0 	.word	0x200004c0
 8002b70:	40010000 	.word	0x40010000

08002b74 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b08e      	sub	sp, #56	; 0x38
 8002b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b7e:	2200      	movs	r2, #0
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	605a      	str	r2, [r3, #4]
 8002b84:	609a      	str	r2, [r3, #8]
 8002b86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b88:	f107 0320 	add.w	r3, r7, #32
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b92:	1d3b      	adds	r3, r7, #4
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	605a      	str	r2, [r3, #4]
 8002b9a:	609a      	str	r2, [r3, #8]
 8002b9c:	60da      	str	r2, [r3, #12]
 8002b9e:	611a      	str	r2, [r3, #16]
 8002ba0:	615a      	str	r2, [r3, #20]
 8002ba2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ba4:	4b3d      	ldr	r3, [pc, #244]	; (8002c9c <MX_TIM3_Init+0x128>)
 8002ba6:	4a3e      	ldr	r2, [pc, #248]	; (8002ca0 <MX_TIM3_Init+0x12c>)
 8002ba8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5-1;
 8002baa:	4b3c      	ldr	r3, [pc, #240]	; (8002c9c <MX_TIM3_Init+0x128>)
 8002bac:	2204      	movs	r2, #4
 8002bae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bb0:	4b3a      	ldr	r3, [pc, #232]	; (8002c9c <MX_TIM3_Init+0x128>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8002bb6:	4b39      	ldr	r3, [pc, #228]	; (8002c9c <MX_TIM3_Init+0x128>)
 8002bb8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002bbc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bbe:	4b37      	ldr	r3, [pc, #220]	; (8002c9c <MX_TIM3_Init+0x128>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002bc4:	4b35      	ldr	r3, [pc, #212]	; (8002c9c <MX_TIM3_Init+0x128>)
 8002bc6:	2280      	movs	r2, #128	; 0x80
 8002bc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002bca:	4834      	ldr	r0, [pc, #208]	; (8002c9c <MX_TIM3_Init+0x128>)
 8002bcc:	f003 fc26 	bl	800641c <HAL_TIM_Base_Init>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002bd6:	f000 fefd 	bl	80039d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bde:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002be0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002be4:	4619      	mov	r1, r3
 8002be6:	482d      	ldr	r0, [pc, #180]	; (8002c9c <MX_TIM3_Init+0x128>)
 8002be8:	f003 ffc4 	bl	8006b74 <HAL_TIM_ConfigClockSource>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002bf2:	f000 feef 	bl	80039d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002bf6:	4829      	ldr	r0, [pc, #164]	; (8002c9c <MX_TIM3_Init+0x128>)
 8002bf8:	f003 fcd0 	bl	800659c <HAL_TIM_PWM_Init>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002c02:	f000 fee7 	bl	80039d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c06:	2300      	movs	r3, #0
 8002c08:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c0e:	f107 0320 	add.w	r3, r7, #32
 8002c12:	4619      	mov	r1, r3
 8002c14:	4821      	ldr	r0, [pc, #132]	; (8002c9c <MX_TIM3_Init+0x128>)
 8002c16:	f004 fbad 	bl	8007374 <HAL_TIMEx_MasterConfigSynchronization>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002c20:	f000 fed8 	bl	80039d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c24:	2360      	movs	r3, #96	; 0x60
 8002c26:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c30:	2300      	movs	r3, #0
 8002c32:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c34:	1d3b      	adds	r3, r7, #4
 8002c36:	2200      	movs	r2, #0
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4818      	ldr	r0, [pc, #96]	; (8002c9c <MX_TIM3_Init+0x128>)
 8002c3c:	f003 fed8 	bl	80069f0 <HAL_TIM_PWM_ConfigChannel>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002c46:	f000 fec5 	bl	80039d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c4a:	1d3b      	adds	r3, r7, #4
 8002c4c:	2204      	movs	r2, #4
 8002c4e:	4619      	mov	r1, r3
 8002c50:	4812      	ldr	r0, [pc, #72]	; (8002c9c <MX_TIM3_Init+0x128>)
 8002c52:	f003 fecd 	bl	80069f0 <HAL_TIM_PWM_ConfigChannel>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002c5c:	f000 feba 	bl	80039d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002c60:	1d3b      	adds	r3, r7, #4
 8002c62:	2208      	movs	r2, #8
 8002c64:	4619      	mov	r1, r3
 8002c66:	480d      	ldr	r0, [pc, #52]	; (8002c9c <MX_TIM3_Init+0x128>)
 8002c68:	f003 fec2 	bl	80069f0 <HAL_TIM_PWM_ConfigChannel>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8002c72:	f000 feaf 	bl	80039d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002c76:	1d3b      	adds	r3, r7, #4
 8002c78:	220c      	movs	r2, #12
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4807      	ldr	r0, [pc, #28]	; (8002c9c <MX_TIM3_Init+0x128>)
 8002c7e:	f003 feb7 	bl	80069f0 <HAL_TIM_PWM_ConfigChannel>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8002c88:	f000 fea4 	bl	80039d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002c8c:	4803      	ldr	r0, [pc, #12]	; (8002c9c <MX_TIM3_Init+0x128>)
 8002c8e:	f001 f9a1 	bl	8003fd4 <HAL_TIM_MspPostInit>

}
 8002c92:	bf00      	nop
 8002c94:	3738      	adds	r7, #56	; 0x38
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	20000508 	.word	0x20000508
 8002ca0:	40000400 	.word	0x40000400

08002ca4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b08e      	sub	sp, #56	; 0x38
 8002ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002caa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	605a      	str	r2, [r3, #4]
 8002cb4:	609a      	str	r2, [r3, #8]
 8002cb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cb8:	f107 0320 	add.w	r3, r7, #32
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cc2:	1d3b      	adds	r3, r7, #4
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	605a      	str	r2, [r3, #4]
 8002cca:	609a      	str	r2, [r3, #8]
 8002ccc:	60da      	str	r2, [r3, #12]
 8002cce:	611a      	str	r2, [r3, #16]
 8002cd0:	615a      	str	r2, [r3, #20]
 8002cd2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002cd4:	4b3d      	ldr	r3, [pc, #244]	; (8002dcc <MX_TIM4_Init+0x128>)
 8002cd6:	4a3e      	ldr	r2, [pc, #248]	; (8002dd0 <MX_TIM4_Init+0x12c>)
 8002cd8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 5-1;
 8002cda:	4b3c      	ldr	r3, [pc, #240]	; (8002dcc <MX_TIM4_Init+0x128>)
 8002cdc:	2204      	movs	r2, #4
 8002cde:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ce0:	4b3a      	ldr	r3, [pc, #232]	; (8002dcc <MX_TIM4_Init+0x128>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8002ce6:	4b39      	ldr	r3, [pc, #228]	; (8002dcc <MX_TIM4_Init+0x128>)
 8002ce8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002cec:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cee:	4b37      	ldr	r3, [pc, #220]	; (8002dcc <MX_TIM4_Init+0x128>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002cf4:	4b35      	ldr	r3, [pc, #212]	; (8002dcc <MX_TIM4_Init+0x128>)
 8002cf6:	2280      	movs	r2, #128	; 0x80
 8002cf8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002cfa:	4834      	ldr	r0, [pc, #208]	; (8002dcc <MX_TIM4_Init+0x128>)
 8002cfc:	f003 fb8e 	bl	800641c <HAL_TIM_Base_Init>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002d06:	f000 fe65 	bl	80039d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002d10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d14:	4619      	mov	r1, r3
 8002d16:	482d      	ldr	r0, [pc, #180]	; (8002dcc <MX_TIM4_Init+0x128>)
 8002d18:	f003 ff2c 	bl	8006b74 <HAL_TIM_ConfigClockSource>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002d22:	f000 fe57 	bl	80039d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002d26:	4829      	ldr	r0, [pc, #164]	; (8002dcc <MX_TIM4_Init+0x128>)
 8002d28:	f003 fc38 	bl	800659c <HAL_TIM_PWM_Init>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002d32:	f000 fe4f 	bl	80039d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d36:	2300      	movs	r3, #0
 8002d38:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002d3e:	f107 0320 	add.w	r3, r7, #32
 8002d42:	4619      	mov	r1, r3
 8002d44:	4821      	ldr	r0, [pc, #132]	; (8002dcc <MX_TIM4_Init+0x128>)
 8002d46:	f004 fb15 	bl	8007374 <HAL_TIMEx_MasterConfigSynchronization>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002d50:	f000 fe40 	bl	80039d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d54:	2360      	movs	r3, #96	; 0x60
 8002d56:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d60:	2300      	movs	r3, #0
 8002d62:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d64:	1d3b      	adds	r3, r7, #4
 8002d66:	2200      	movs	r2, #0
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4818      	ldr	r0, [pc, #96]	; (8002dcc <MX_TIM4_Init+0x128>)
 8002d6c:	f003 fe40 	bl	80069f0 <HAL_TIM_PWM_ConfigChannel>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002d76:	f000 fe2d 	bl	80039d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d7a:	1d3b      	adds	r3, r7, #4
 8002d7c:	2204      	movs	r2, #4
 8002d7e:	4619      	mov	r1, r3
 8002d80:	4812      	ldr	r0, [pc, #72]	; (8002dcc <MX_TIM4_Init+0x128>)
 8002d82:	f003 fe35 	bl	80069f0 <HAL_TIM_PWM_ConfigChannel>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8002d8c:	f000 fe22 	bl	80039d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d90:	1d3b      	adds	r3, r7, #4
 8002d92:	2208      	movs	r2, #8
 8002d94:	4619      	mov	r1, r3
 8002d96:	480d      	ldr	r0, [pc, #52]	; (8002dcc <MX_TIM4_Init+0x128>)
 8002d98:	f003 fe2a 	bl	80069f0 <HAL_TIM_PWM_ConfigChannel>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8002da2:	f000 fe17 	bl	80039d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002da6:	1d3b      	adds	r3, r7, #4
 8002da8:	220c      	movs	r2, #12
 8002daa:	4619      	mov	r1, r3
 8002dac:	4807      	ldr	r0, [pc, #28]	; (8002dcc <MX_TIM4_Init+0x128>)
 8002dae:	f003 fe1f 	bl	80069f0 <HAL_TIM_PWM_ConfigChannel>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8002db8:	f000 fe0c 	bl	80039d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002dbc:	4803      	ldr	r0, [pc, #12]	; (8002dcc <MX_TIM4_Init+0x128>)
 8002dbe:	f001 f909 	bl	8003fd4 <HAL_TIM_MspPostInit>

}
 8002dc2:	bf00      	nop
 8002dc4:	3738      	adds	r7, #56	; 0x38
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	20000550 	.word	0x20000550
 8002dd0:	40000800 	.word	0x40000800

08002dd4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b08e      	sub	sp, #56	; 0x38
 8002dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dde:	2200      	movs	r2, #0
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	605a      	str	r2, [r3, #4]
 8002de4:	609a      	str	r2, [r3, #8]
 8002de6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002de8:	f107 0320 	add.w	r3, r7, #32
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002df2:	1d3b      	adds	r3, r7, #4
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	605a      	str	r2, [r3, #4]
 8002dfa:	609a      	str	r2, [r3, #8]
 8002dfc:	60da      	str	r2, [r3, #12]
 8002dfe:	611a      	str	r2, [r3, #16]
 8002e00:	615a      	str	r2, [r3, #20]
 8002e02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002e04:	4b32      	ldr	r3, [pc, #200]	; (8002ed0 <MX_TIM5_Init+0xfc>)
 8002e06:	4a33      	ldr	r2, [pc, #204]	; (8002ed4 <MX_TIM5_Init+0x100>)
 8002e08:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 5-1;
 8002e0a:	4b31      	ldr	r3, [pc, #196]	; (8002ed0 <MX_TIM5_Init+0xfc>)
 8002e0c:	2204      	movs	r2, #4
 8002e0e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e10:	4b2f      	ldr	r3, [pc, #188]	; (8002ed0 <MX_TIM5_Init+0xfc>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8002e16:	4b2e      	ldr	r3, [pc, #184]	; (8002ed0 <MX_TIM5_Init+0xfc>)
 8002e18:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e1c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e1e:	4b2c      	ldr	r3, [pc, #176]	; (8002ed0 <MX_TIM5_Init+0xfc>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e24:	4b2a      	ldr	r3, [pc, #168]	; (8002ed0 <MX_TIM5_Init+0xfc>)
 8002e26:	2280      	movs	r2, #128	; 0x80
 8002e28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002e2a:	4829      	ldr	r0, [pc, #164]	; (8002ed0 <MX_TIM5_Init+0xfc>)
 8002e2c:	f003 faf6 	bl	800641c <HAL_TIM_Base_Init>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8002e36:	f000 fdcd 	bl	80039d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e3e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002e40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e44:	4619      	mov	r1, r3
 8002e46:	4822      	ldr	r0, [pc, #136]	; (8002ed0 <MX_TIM5_Init+0xfc>)
 8002e48:	f003 fe94 	bl	8006b74 <HAL_TIM_ConfigClockSource>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8002e52:	f000 fdbf 	bl	80039d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002e56:	481e      	ldr	r0, [pc, #120]	; (8002ed0 <MX_TIM5_Init+0xfc>)
 8002e58:	f003 fba0 	bl	800659c <HAL_TIM_PWM_Init>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8002e62:	f000 fdb7 	bl	80039d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e66:	2300      	movs	r3, #0
 8002e68:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002e6e:	f107 0320 	add.w	r3, r7, #32
 8002e72:	4619      	mov	r1, r3
 8002e74:	4816      	ldr	r0, [pc, #88]	; (8002ed0 <MX_TIM5_Init+0xfc>)
 8002e76:	f004 fa7d 	bl	8007374 <HAL_TIMEx_MasterConfigSynchronization>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8002e80:	f000 fda8 	bl	80039d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e84:	2360      	movs	r3, #96	; 0x60
 8002e86:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e90:	2300      	movs	r3, #0
 8002e92:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e94:	1d3b      	adds	r3, r7, #4
 8002e96:	2200      	movs	r2, #0
 8002e98:	4619      	mov	r1, r3
 8002e9a:	480d      	ldr	r0, [pc, #52]	; (8002ed0 <MX_TIM5_Init+0xfc>)
 8002e9c:	f003 fda8 	bl	80069f0 <HAL_TIM_PWM_ConfigChannel>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8002ea6:	f000 fd95 	bl	80039d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002eaa:	1d3b      	adds	r3, r7, #4
 8002eac:	2204      	movs	r2, #4
 8002eae:	4619      	mov	r1, r3
 8002eb0:	4807      	ldr	r0, [pc, #28]	; (8002ed0 <MX_TIM5_Init+0xfc>)
 8002eb2:	f003 fd9d 	bl	80069f0 <HAL_TIM_PWM_ConfigChannel>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 8002ebc:	f000 fd8a 	bl	80039d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002ec0:	4803      	ldr	r0, [pc, #12]	; (8002ed0 <MX_TIM5_Init+0xfc>)
 8002ec2:	f001 f887 	bl	8003fd4 <HAL_TIM_MspPostInit>

}
 8002ec6:	bf00      	nop
 8002ec8:	3738      	adds	r7, #56	; 0x38
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	20000598 	.word	0x20000598
 8002ed4:	40000c00 	.word	0x40000c00

08002ed8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b096      	sub	sp, #88	; 0x58
 8002edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ede:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	605a      	str	r2, [r3, #4]
 8002ee8:	609a      	str	r2, [r3, #8]
 8002eea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002efa:	2200      	movs	r2, #0
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	605a      	str	r2, [r3, #4]
 8002f00:	609a      	str	r2, [r3, #8]
 8002f02:	60da      	str	r2, [r3, #12]
 8002f04:	611a      	str	r2, [r3, #16]
 8002f06:	615a      	str	r2, [r3, #20]
 8002f08:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002f0a:	1d3b      	adds	r3, r7, #4
 8002f0c:	2220      	movs	r2, #32
 8002f0e:	2100      	movs	r1, #0
 8002f10:	4618      	mov	r0, r3
 8002f12:	f006 fdfa 	bl	8009b0a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002f16:	4b44      	ldr	r3, [pc, #272]	; (8003028 <MX_TIM8_Init+0x150>)
 8002f18:	4a44      	ldr	r2, [pc, #272]	; (800302c <MX_TIM8_Init+0x154>)
 8002f1a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 10-1;
 8002f1c:	4b42      	ldr	r3, [pc, #264]	; (8003028 <MX_TIM8_Init+0x150>)
 8002f1e:	2209      	movs	r2, #9
 8002f20:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f22:	4b41      	ldr	r3, [pc, #260]	; (8003028 <MX_TIM8_Init+0x150>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000-1;
 8002f28:	4b3f      	ldr	r3, [pc, #252]	; (8003028 <MX_TIM8_Init+0x150>)
 8002f2a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f2e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f30:	4b3d      	ldr	r3, [pc, #244]	; (8003028 <MX_TIM8_Init+0x150>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002f36:	4b3c      	ldr	r3, [pc, #240]	; (8003028 <MX_TIM8_Init+0x150>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f3c:	4b3a      	ldr	r3, [pc, #232]	; (8003028 <MX_TIM8_Init+0x150>)
 8002f3e:	2280      	movs	r2, #128	; 0x80
 8002f40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002f42:	4839      	ldr	r0, [pc, #228]	; (8003028 <MX_TIM8_Init+0x150>)
 8002f44:	f003 fa6a 	bl	800641c <HAL_TIM_Base_Init>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8002f4e:	f000 fd41 	bl	80039d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f56:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002f58:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4832      	ldr	r0, [pc, #200]	; (8003028 <MX_TIM8_Init+0x150>)
 8002f60:	f003 fe08 	bl	8006b74 <HAL_TIM_ConfigClockSource>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002f6a:	f000 fd33 	bl	80039d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002f6e:	482e      	ldr	r0, [pc, #184]	; (8003028 <MX_TIM8_Init+0x150>)
 8002f70:	f003 fb14 	bl	800659c <HAL_TIM_PWM_Init>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002f7a:	f000 fd2b 	bl	80039d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f82:	2300      	movs	r3, #0
 8002f84:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002f86:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4826      	ldr	r0, [pc, #152]	; (8003028 <MX_TIM8_Init+0x150>)
 8002f8e:	f004 f9f1 	bl	8007374 <HAL_TIMEx_MasterConfigSynchronization>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002f98:	f000 fd1c 	bl	80039d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f9c:	2360      	movs	r3, #96	; 0x60
 8002f9e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fac:	2300      	movs	r3, #0
 8002fae:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002fb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	4819      	ldr	r0, [pc, #100]	; (8003028 <MX_TIM8_Init+0x150>)
 8002fc2:	f003 fd15 	bl	80069f0 <HAL_TIM_PWM_ConfigChannel>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8002fcc:	f000 fd02 	bl	80039d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002fd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fd4:	2204      	movs	r2, #4
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	4813      	ldr	r0, [pc, #76]	; (8003028 <MX_TIM8_Init+0x150>)
 8002fda:	f003 fd09 	bl	80069f0 <HAL_TIM_PWM_ConfigChannel>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8002fe4:	f000 fcf6 	bl	80039d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002fec:	2300      	movs	r3, #0
 8002fee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002ffc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003000:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003002:	2300      	movs	r3, #0
 8003004:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003006:	1d3b      	adds	r3, r7, #4
 8003008:	4619      	mov	r1, r3
 800300a:	4807      	ldr	r0, [pc, #28]	; (8003028 <MX_TIM8_Init+0x150>)
 800300c:	f004 fa2e 	bl	800746c <HAL_TIMEx_ConfigBreakDeadTime>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8003016:	f000 fcdd 	bl	80039d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800301a:	4803      	ldr	r0, [pc, #12]	; (8003028 <MX_TIM8_Init+0x150>)
 800301c:	f000 ffda 	bl	8003fd4 <HAL_TIM_MspPostInit>

}
 8003020:	bf00      	nop
 8003022:	3758      	adds	r7, #88	; 0x58
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	200005e0 	.word	0x200005e0
 800302c:	40010400 	.word	0x40010400

08003030 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b08c      	sub	sp, #48	; 0x30
 8003034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003036:	f107 0320 	add.w	r3, r7, #32
 800303a:	2200      	movs	r2, #0
 800303c:	601a      	str	r2, [r3, #0]
 800303e:	605a      	str	r2, [r3, #4]
 8003040:	609a      	str	r2, [r3, #8]
 8003042:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003044:	1d3b      	adds	r3, r7, #4
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]
 800304a:	605a      	str	r2, [r3, #4]
 800304c:	609a      	str	r2, [r3, #8]
 800304e:	60da      	str	r2, [r3, #12]
 8003050:	611a      	str	r2, [r3, #16]
 8003052:	615a      	str	r2, [r3, #20]
 8003054:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003056:	4b2b      	ldr	r3, [pc, #172]	; (8003104 <MX_TIM9_Init+0xd4>)
 8003058:	4a2b      	ldr	r2, [pc, #172]	; (8003108 <MX_TIM9_Init+0xd8>)
 800305a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 10-1;
 800305c:	4b29      	ldr	r3, [pc, #164]	; (8003104 <MX_TIM9_Init+0xd4>)
 800305e:	2209      	movs	r2, #9
 8003060:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003062:	4b28      	ldr	r3, [pc, #160]	; (8003104 <MX_TIM9_Init+0xd4>)
 8003064:	2200      	movs	r2, #0
 8003066:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 8003068:	4b26      	ldr	r3, [pc, #152]	; (8003104 <MX_TIM9_Init+0xd4>)
 800306a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800306e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003070:	4b24      	ldr	r3, [pc, #144]	; (8003104 <MX_TIM9_Init+0xd4>)
 8003072:	2200      	movs	r2, #0
 8003074:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003076:	4b23      	ldr	r3, [pc, #140]	; (8003104 <MX_TIM9_Init+0xd4>)
 8003078:	2280      	movs	r2, #128	; 0x80
 800307a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800307c:	4821      	ldr	r0, [pc, #132]	; (8003104 <MX_TIM9_Init+0xd4>)
 800307e:	f003 f9cd 	bl	800641c <HAL_TIM_Base_Init>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8003088:	f000 fca4 	bl	80039d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800308c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003090:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8003092:	f107 0320 	add.w	r3, r7, #32
 8003096:	4619      	mov	r1, r3
 8003098:	481a      	ldr	r0, [pc, #104]	; (8003104 <MX_TIM9_Init+0xd4>)
 800309a:	f003 fd6b 	bl	8006b74 <HAL_TIM_ConfigClockSource>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 80030a4:	f000 fc96 	bl	80039d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80030a8:	4816      	ldr	r0, [pc, #88]	; (8003104 <MX_TIM9_Init+0xd4>)
 80030aa:	f003 fa77 	bl	800659c <HAL_TIM_PWM_Init>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 80030b4:	f000 fc8e 	bl	80039d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030b8:	2360      	movs	r3, #96	; 0x60
 80030ba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80030bc:	2300      	movs	r3, #0
 80030be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030c0:	2300      	movs	r3, #0
 80030c2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030c4:	2300      	movs	r3, #0
 80030c6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030c8:	1d3b      	adds	r3, r7, #4
 80030ca:	2200      	movs	r2, #0
 80030cc:	4619      	mov	r1, r3
 80030ce:	480d      	ldr	r0, [pc, #52]	; (8003104 <MX_TIM9_Init+0xd4>)
 80030d0:	f003 fc8e 	bl	80069f0 <HAL_TIM_PWM_ConfigChannel>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 80030da:	f000 fc7b 	bl	80039d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80030de:	1d3b      	adds	r3, r7, #4
 80030e0:	2204      	movs	r2, #4
 80030e2:	4619      	mov	r1, r3
 80030e4:	4807      	ldr	r0, [pc, #28]	; (8003104 <MX_TIM9_Init+0xd4>)
 80030e6:	f003 fc83 	bl	80069f0 <HAL_TIM_PWM_ConfigChannel>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <MX_TIM9_Init+0xc4>
  {
    Error_Handler();
 80030f0:	f000 fc70 	bl	80039d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80030f4:	4803      	ldr	r0, [pc, #12]	; (8003104 <MX_TIM9_Init+0xd4>)
 80030f6:	f000 ff6d 	bl	8003fd4 <HAL_TIM_MspPostInit>

}
 80030fa:	bf00      	nop
 80030fc:	3730      	adds	r7, #48	; 0x30
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20000628 	.word	0x20000628
 8003108:	40014000 	.word	0x40014000

0800310c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b08c      	sub	sp, #48	; 0x30
 8003110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003112:	f107 0320 	add.w	r3, r7, #32
 8003116:	2200      	movs	r2, #0
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	605a      	str	r2, [r3, #4]
 800311c:	609a      	str	r2, [r3, #8]
 800311e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003120:	1d3b      	adds	r3, r7, #4
 8003122:	2200      	movs	r2, #0
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	605a      	str	r2, [r3, #4]
 8003128:	609a      	str	r2, [r3, #8]
 800312a:	60da      	str	r2, [r3, #12]
 800312c:	611a      	str	r2, [r3, #16]
 800312e:	615a      	str	r2, [r3, #20]
 8003130:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8003132:	4b2b      	ldr	r3, [pc, #172]	; (80031e0 <MX_TIM12_Init+0xd4>)
 8003134:	4a2b      	ldr	r2, [pc, #172]	; (80031e4 <MX_TIM12_Init+0xd8>)
 8003136:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 30-1;
 8003138:	4b29      	ldr	r3, [pc, #164]	; (80031e0 <MX_TIM12_Init+0xd4>)
 800313a:	221d      	movs	r2, #29
 800313c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800313e:	4b28      	ldr	r3, [pc, #160]	; (80031e0 <MX_TIM12_Init+0xd4>)
 8003140:	2200      	movs	r2, #0
 8003142:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 60000-1;
 8003144:	4b26      	ldr	r3, [pc, #152]	; (80031e0 <MX_TIM12_Init+0xd4>)
 8003146:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800314a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800314c:	4b24      	ldr	r3, [pc, #144]	; (80031e0 <MX_TIM12_Init+0xd4>)
 800314e:	2200      	movs	r2, #0
 8003150:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003152:	4b23      	ldr	r3, [pc, #140]	; (80031e0 <MX_TIM12_Init+0xd4>)
 8003154:	2280      	movs	r2, #128	; 0x80
 8003156:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8003158:	4821      	ldr	r0, [pc, #132]	; (80031e0 <MX_TIM12_Init+0xd4>)
 800315a:	f003 f95f 	bl	800641c <HAL_TIM_Base_Init>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8003164:	f000 fc36 	bl	80039d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003168:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800316c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800316e:	f107 0320 	add.w	r3, r7, #32
 8003172:	4619      	mov	r1, r3
 8003174:	481a      	ldr	r0, [pc, #104]	; (80031e0 <MX_TIM12_Init+0xd4>)
 8003176:	f003 fcfd 	bl	8006b74 <HAL_TIM_ConfigClockSource>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8003180:	f000 fc28 	bl	80039d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8003184:	4816      	ldr	r0, [pc, #88]	; (80031e0 <MX_TIM12_Init+0xd4>)
 8003186:	f003 fa09 	bl	800659c <HAL_TIM_PWM_Init>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8003190:	f000 fc20 	bl	80039d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003194:	2360      	movs	r3, #96	; 0x60
 8003196:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003198:	2300      	movs	r3, #0
 800319a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800319c:	2300      	movs	r3, #0
 800319e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031a0:	2300      	movs	r3, #0
 80031a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80031a4:	1d3b      	adds	r3, r7, #4
 80031a6:	2200      	movs	r2, #0
 80031a8:	4619      	mov	r1, r3
 80031aa:	480d      	ldr	r0, [pc, #52]	; (80031e0 <MX_TIM12_Init+0xd4>)
 80031ac:	f003 fc20 	bl	80069f0 <HAL_TIM_PWM_ConfigChannel>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 80031b6:	f000 fc0d 	bl	80039d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80031ba:	1d3b      	adds	r3, r7, #4
 80031bc:	2204      	movs	r2, #4
 80031be:	4619      	mov	r1, r3
 80031c0:	4807      	ldr	r0, [pc, #28]	; (80031e0 <MX_TIM12_Init+0xd4>)
 80031c2:	f003 fc15 	bl	80069f0 <HAL_TIM_PWM_ConfigChannel>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 80031cc:	f000 fc02 	bl	80039d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80031d0:	4803      	ldr	r0, [pc, #12]	; (80031e0 <MX_TIM12_Init+0xd4>)
 80031d2:	f000 feff 	bl	8003fd4 <HAL_TIM_MspPostInit>

}
 80031d6:	bf00      	nop
 80031d8:	3730      	adds	r7, #48	; 0x30
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	20000670 	.word	0x20000670
 80031e4:	40001800 	.word	0x40001800

080031e8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80031ec:	4b11      	ldr	r3, [pc, #68]	; (8003234 <MX_USART3_UART_Init+0x4c>)
 80031ee:	4a12      	ldr	r2, [pc, #72]	; (8003238 <MX_USART3_UART_Init+0x50>)
 80031f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80031f2:	4b10      	ldr	r3, [pc, #64]	; (8003234 <MX_USART3_UART_Init+0x4c>)
 80031f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80031f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80031fa:	4b0e      	ldr	r3, [pc, #56]	; (8003234 <MX_USART3_UART_Init+0x4c>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003200:	4b0c      	ldr	r3, [pc, #48]	; (8003234 <MX_USART3_UART_Init+0x4c>)
 8003202:	2200      	movs	r2, #0
 8003204:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003206:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <MX_USART3_UART_Init+0x4c>)
 8003208:	2200      	movs	r2, #0
 800320a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800320c:	4b09      	ldr	r3, [pc, #36]	; (8003234 <MX_USART3_UART_Init+0x4c>)
 800320e:	220c      	movs	r2, #12
 8003210:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003212:	4b08      	ldr	r3, [pc, #32]	; (8003234 <MX_USART3_UART_Init+0x4c>)
 8003214:	2200      	movs	r2, #0
 8003216:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003218:	4b06      	ldr	r3, [pc, #24]	; (8003234 <MX_USART3_UART_Init+0x4c>)
 800321a:	2200      	movs	r2, #0
 800321c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800321e:	4805      	ldr	r0, [pc, #20]	; (8003234 <MX_USART3_UART_Init+0x4c>)
 8003220:	f004 f98a 	bl	8007538 <HAL_UART_Init>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800322a:	f000 fbd3 	bl	80039d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800322e:	bf00      	nop
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	200006b8 	.word	0x200006b8
 8003238:	40004800 	.word	0x40004800

0800323c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b08e      	sub	sp, #56	; 0x38
 8003240:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003242:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003246:	2200      	movs	r2, #0
 8003248:	601a      	str	r2, [r3, #0]
 800324a:	605a      	str	r2, [r3, #4]
 800324c:	609a      	str	r2, [r3, #8]
 800324e:	60da      	str	r2, [r3, #12]
 8003250:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003252:	2300      	movs	r3, #0
 8003254:	623b      	str	r3, [r7, #32]
 8003256:	4bba      	ldr	r3, [pc, #744]	; (8003540 <MX_GPIO_Init+0x304>)
 8003258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325a:	4ab9      	ldr	r2, [pc, #740]	; (8003540 <MX_GPIO_Init+0x304>)
 800325c:	f043 0310 	orr.w	r3, r3, #16
 8003260:	6313      	str	r3, [r2, #48]	; 0x30
 8003262:	4bb7      	ldr	r3, [pc, #732]	; (8003540 <MX_GPIO_Init+0x304>)
 8003264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003266:	f003 0310 	and.w	r3, r3, #16
 800326a:	623b      	str	r3, [r7, #32]
 800326c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800326e:	2300      	movs	r3, #0
 8003270:	61fb      	str	r3, [r7, #28]
 8003272:	4bb3      	ldr	r3, [pc, #716]	; (8003540 <MX_GPIO_Init+0x304>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	4ab2      	ldr	r2, [pc, #712]	; (8003540 <MX_GPIO_Init+0x304>)
 8003278:	f043 0304 	orr.w	r3, r3, #4
 800327c:	6313      	str	r3, [r2, #48]	; 0x30
 800327e:	4bb0      	ldr	r3, [pc, #704]	; (8003540 <MX_GPIO_Init+0x304>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	f003 0304 	and.w	r3, r3, #4
 8003286:	61fb      	str	r3, [r7, #28]
 8003288:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800328a:	2300      	movs	r3, #0
 800328c:	61bb      	str	r3, [r7, #24]
 800328e:	4bac      	ldr	r3, [pc, #688]	; (8003540 <MX_GPIO_Init+0x304>)
 8003290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003292:	4aab      	ldr	r2, [pc, #684]	; (8003540 <MX_GPIO_Init+0x304>)
 8003294:	f043 0320 	orr.w	r3, r3, #32
 8003298:	6313      	str	r3, [r2, #48]	; 0x30
 800329a:	4ba9      	ldr	r3, [pc, #676]	; (8003540 <MX_GPIO_Init+0x304>)
 800329c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329e:	f003 0320 	and.w	r3, r3, #32
 80032a2:	61bb      	str	r3, [r7, #24]
 80032a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80032a6:	2300      	movs	r3, #0
 80032a8:	617b      	str	r3, [r7, #20]
 80032aa:	4ba5      	ldr	r3, [pc, #660]	; (8003540 <MX_GPIO_Init+0x304>)
 80032ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ae:	4aa4      	ldr	r2, [pc, #656]	; (8003540 <MX_GPIO_Init+0x304>)
 80032b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032b4:	6313      	str	r3, [r2, #48]	; 0x30
 80032b6:	4ba2      	ldr	r3, [pc, #648]	; (8003540 <MX_GPIO_Init+0x304>)
 80032b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032be:	617b      	str	r3, [r7, #20]
 80032c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032c2:	2300      	movs	r3, #0
 80032c4:	613b      	str	r3, [r7, #16]
 80032c6:	4b9e      	ldr	r3, [pc, #632]	; (8003540 <MX_GPIO_Init+0x304>)
 80032c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ca:	4a9d      	ldr	r2, [pc, #628]	; (8003540 <MX_GPIO_Init+0x304>)
 80032cc:	f043 0301 	orr.w	r3, r3, #1
 80032d0:	6313      	str	r3, [r2, #48]	; 0x30
 80032d2:	4b9b      	ldr	r3, [pc, #620]	; (8003540 <MX_GPIO_Init+0x304>)
 80032d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	613b      	str	r3, [r7, #16]
 80032dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032de:	2300      	movs	r3, #0
 80032e0:	60fb      	str	r3, [r7, #12]
 80032e2:	4b97      	ldr	r3, [pc, #604]	; (8003540 <MX_GPIO_Init+0x304>)
 80032e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e6:	4a96      	ldr	r2, [pc, #600]	; (8003540 <MX_GPIO_Init+0x304>)
 80032e8:	f043 0302 	orr.w	r3, r3, #2
 80032ec:	6313      	str	r3, [r2, #48]	; 0x30
 80032ee:	4b94      	ldr	r3, [pc, #592]	; (8003540 <MX_GPIO_Init+0x304>)
 80032f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80032fa:	2300      	movs	r3, #0
 80032fc:	60bb      	str	r3, [r7, #8]
 80032fe:	4b90      	ldr	r3, [pc, #576]	; (8003540 <MX_GPIO_Init+0x304>)
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	4a8f      	ldr	r2, [pc, #572]	; (8003540 <MX_GPIO_Init+0x304>)
 8003304:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003308:	6313      	str	r3, [r2, #48]	; 0x30
 800330a:	4b8d      	ldr	r3, [pc, #564]	; (8003540 <MX_GPIO_Init+0x304>)
 800330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003312:	60bb      	str	r3, [r7, #8]
 8003314:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003316:	2300      	movs	r3, #0
 8003318:	607b      	str	r3, [r7, #4]
 800331a:	4b89      	ldr	r3, [pc, #548]	; (8003540 <MX_GPIO_Init+0x304>)
 800331c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331e:	4a88      	ldr	r2, [pc, #544]	; (8003540 <MX_GPIO_Init+0x304>)
 8003320:	f043 0308 	orr.w	r3, r3, #8
 8003324:	6313      	str	r3, [r2, #48]	; 0x30
 8003326:	4b86      	ldr	r3, [pc, #536]	; (8003540 <MX_GPIO_Init+0x304>)
 8003328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332a:	f003 0308 	and.w	r3, r3, #8
 800332e:	607b      	str	r3, [r7, #4]
 8003330:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8003332:	2200      	movs	r2, #0
 8003334:	2140      	movs	r1, #64	; 0x40
 8003336:	4883      	ldr	r0, [pc, #524]	; (8003544 <MX_GPIO_Init+0x308>)
 8003338:	f001 fd54 	bl	8004de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PISTON_PELONTAR_Pin|PISTON_A_Pin|PISTON_B_Pin|PISTON_BOLA_Pin
 800333c:	2200      	movs	r2, #0
 800333e:	f641 010f 	movw	r1, #6159	; 0x180f
 8003342:	4881      	ldr	r0, [pc, #516]	; (8003548 <MX_GPIO_Init+0x30c>)
 8003344:	f001 fd4e 	bl	8004de4 <HAL_GPIO_WritePin>
                          |PISTON_PADI_Pin|PISTON_D_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|EN_EXDR_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003348:	2200      	movs	r2, #0
 800334a:	21c1      	movs	r1, #193	; 0xc1
 800334c:	487f      	ldr	r0, [pc, #508]	; (800354c <MX_GPIO_Init+0x310>)
 800334e:	f001 fd49 	bl	8004de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, EN_LF_Pin|EN_RF_Pin|EN_EXDL_Pin|EN_RB_Pin
 8003352:	2200      	movs	r2, #0
 8003354:	f64b 4102 	movw	r1, #48130	; 0xbc02
 8003358:	487d      	ldr	r0, [pc, #500]	; (8003550 <MX_GPIO_Init+0x314>)
 800335a:	f001 fd43 	bl	8004de4 <HAL_GPIO_WritePin>
                          |EN_PADI_Pin|EN_PELONTAR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, EN_LB_Pin|PISTON_C_Pin, GPIO_PIN_RESET);
 800335e:	2200      	movs	r2, #0
 8003360:	2105      	movs	r1, #5
 8003362:	487c      	ldr	r0, [pc, #496]	; (8003554 <MX_GPIO_Init+0x318>)
 8003364:	f001 fd3e 	bl	8004de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_BOLA_GPIO_Port, EN_BOLA_Pin, GPIO_PIN_RESET);
 8003368:	2200      	movs	r2, #0
 800336a:	2102      	movs	r1, #2
 800336c:	487a      	ldr	r0, [pc, #488]	; (8003558 <MX_GPIO_Init+0x31c>)
 800336e:	f001 fd39 	bl	8004de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENC4_A_Pin ENC4_B_Pin ENC3_B_Pin ENC1_A_Pin
                           ENC2_A_Pin ENC3_A_Pin ENC2_B_Pin */
  GPIO_InitStruct.Pin = ENC4_A_Pin|ENC4_B_Pin|ENC3_B_Pin|ENC1_A_Pin
 8003372:	f64b 030e 	movw	r3, #47118	; 0xb80e
 8003376:	627b      	str	r3, [r7, #36]	; 0x24
                          |ENC2_A_Pin|ENC3_A_Pin|ENC2_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003378:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800337c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800337e:	2301      	movs	r3, #1
 8003380:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003382:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003386:	4619      	mov	r1, r3
 8003388:	486e      	ldr	r0, [pc, #440]	; (8003544 <MX_GPIO_Init+0x308>)
 800338a:	f001 fb67 	bl	8004a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 800338e:	2340      	movs	r3, #64	; 0x40
 8003390:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003392:	2301      	movs	r3, #1
 8003394:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003396:	2300      	movs	r3, #0
 8003398:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800339a:	2300      	movs	r3, #0
 800339c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 800339e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033a2:	4619      	mov	r1, r3
 80033a4:	4867      	ldr	r0, [pc, #412]	; (8003544 <MX_GPIO_Init+0x308>)
 80033a6:	f001 fb59 	bl	8004a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PISTON_PELONTAR_Pin PISTON_A_Pin PISTON_B_Pin PISTON_BOLA_Pin
                           PISTON_PADI_Pin PISTON_D_Pin */
  GPIO_InitStruct.Pin = PISTON_PELONTAR_Pin|PISTON_A_Pin|PISTON_B_Pin|PISTON_BOLA_Pin
 80033aa:	f641 030f 	movw	r3, #6159	; 0x180f
 80033ae:	627b      	str	r3, [r7, #36]	; 0x24
                          |PISTON_PADI_Pin|PISTON_D_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033b0:	2301      	movs	r3, #1
 80033b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b4:	2300      	movs	r3, #0
 80033b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80033b8:	2301      	movs	r3, #1
 80033ba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033c0:	4619      	mov	r1, r3
 80033c2:	4861      	ldr	r0, [pc, #388]	; (8003548 <MX_GPIO_Init+0x30c>)
 80033c4:	f001 fb4a 	bl	8004a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin EN_EXDR_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|EN_EXDR_Pin|LD2_Pin;
 80033c8:	23c1      	movs	r3, #193	; 0xc1
 80033ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033cc:	2301      	movs	r3, #1
 80033ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d0:	2300      	movs	r3, #0
 80033d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033d4:	2300      	movs	r3, #0
 80033d6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033dc:	4619      	mov	r1, r3
 80033de:	485b      	ldr	r0, [pc, #364]	; (800354c <MX_GPIO_Init+0x310>)
 80033e0:	f001 fb3c 	bl	8004a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LS_2_Pin LS_3_Pin LS_1_Pin ENC1_B_Pin */
  GPIO_InitStruct.Pin = LS_2_Pin|LS_3_Pin|LS_1_Pin|ENC1_B_Pin;
 80033e4:	f244 2321 	movw	r3, #16929	; 0x4221
 80033e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80033ea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80033ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033f0:	2301      	movs	r3, #1
 80033f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80033f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033f8:	4619      	mov	r1, r3
 80033fa:	4855      	ldr	r0, [pc, #340]	; (8003550 <MX_GPIO_Init+0x314>)
 80033fc:	f001 fb2e 	bl	8004a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_LF_Pin EN_RF_Pin EN_EXDL_Pin EN_RB_Pin
                           EN_PADI_Pin EN_PELONTAR_Pin */
  GPIO_InitStruct.Pin = EN_LF_Pin|EN_RF_Pin|EN_EXDL_Pin|EN_RB_Pin
 8003400:	f64b 4302 	movw	r3, #48130	; 0xbc02
 8003404:	627b      	str	r3, [r7, #36]	; 0x24
                          |EN_PADI_Pin|EN_PELONTAR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003406:	2301      	movs	r3, #1
 8003408:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340a:	2300      	movs	r3, #0
 800340c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800340e:	2300      	movs	r3, #0
 8003410:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003416:	4619      	mov	r1, r3
 8003418:	484d      	ldr	r0, [pc, #308]	; (8003550 <MX_GPIO_Init+0x314>)
 800341a:	f001 fb1f 	bl	8004a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LS_4_Pin LS_5_Pin */
  GPIO_InitStruct.Pin = LS_4_Pin|LS_5_Pin;
 800341e:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8003422:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003424:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003428:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800342a:	2301      	movs	r3, #1
 800342c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800342e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003432:	4619      	mov	r1, r3
 8003434:	4847      	ldr	r0, [pc, #284]	; (8003554 <MX_GPIO_Init+0x318>)
 8003436:	f001 fb11 	bl	8004a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800343a:	2380      	movs	r3, #128	; 0x80
 800343c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800343e:	2300      	movs	r3, #0
 8003440:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003442:	2300      	movs	r3, #0
 8003444:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003446:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800344a:	4619      	mov	r1, r3
 800344c:	4840      	ldr	r0, [pc, #256]	; (8003550 <MX_GPIO_Init+0x314>)
 800344e:	f001 fb05 	bl	8004a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LS_7_Pin */
  GPIO_InitStruct.Pin = LS_7_Pin;
 8003452:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003456:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003458:	2300      	movs	r3, #0
 800345a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800345c:	2301      	movs	r3, #1
 800345e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LS_7_GPIO_Port, &GPIO_InitStruct);
 8003460:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003464:	4619      	mov	r1, r3
 8003466:	483a      	ldr	r0, [pc, #232]	; (8003550 <MX_GPIO_Init+0x314>)
 8003468:	f001 faf8 	bl	8004a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_LB_Pin */
  GPIO_InitStruct.Pin = EN_LB_Pin;
 800346c:	2301      	movs	r3, #1
 800346e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003470:	2301      	movs	r3, #1
 8003472:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003474:	2300      	movs	r3, #0
 8003476:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003478:	2300      	movs	r3, #0
 800347a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(EN_LB_GPIO_Port, &GPIO_InitStruct);
 800347c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003480:	4619      	mov	r1, r3
 8003482:	4834      	ldr	r0, [pc, #208]	; (8003554 <MX_GPIO_Init+0x318>)
 8003484:	f001 faea 	bl	8004a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PISTON_C_Pin */
  GPIO_InitStruct.Pin = PISTON_C_Pin;
 8003488:	2304      	movs	r3, #4
 800348a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800348c:	2301      	movs	r3, #1
 800348e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003490:	2300      	movs	r3, #0
 8003492:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003494:	2301      	movs	r3, #1
 8003496:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PISTON_C_GPIO_Port, &GPIO_InitStruct);
 8003498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800349c:	4619      	mov	r1, r3
 800349e:	482d      	ldr	r0, [pc, #180]	; (8003554 <MX_GPIO_Init+0x318>)
 80034a0:	f001 fadc 	bl	8004a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LS_6_Pin */
  GPIO_InitStruct.Pin = LS_6_Pin;
 80034a4:	2380      	movs	r3, #128	; 0x80
 80034a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034a8:	2300      	movs	r3, #0
 80034aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034ac:	2301      	movs	r3, #1
 80034ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LS_6_GPIO_Port, &GPIO_InitStruct);
 80034b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034b4:	4619      	mov	r1, r3
 80034b6:	4827      	ldr	r0, [pc, #156]	; (8003554 <MX_GPIO_Init+0x318>)
 80034b8:	f001 fad0 	bl	8004a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_BOLA_Pin */
  GPIO_InitStruct.Pin = EN_BOLA_Pin;
 80034bc:	2302      	movs	r3, #2
 80034be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034c0:	2301      	movs	r3, #1
 80034c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c4:	2300      	movs	r3, #0
 80034c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034c8:	2300      	movs	r3, #0
 80034ca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(EN_BOLA_GPIO_Port, &GPIO_InitStruct);
 80034cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034d0:	4619      	mov	r1, r3
 80034d2:	4821      	ldr	r0, [pc, #132]	; (8003558 <MX_GPIO_Init+0x31c>)
 80034d4:	f001 fac2 	bl	8004a5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80034d8:	2200      	movs	r2, #0
 80034da:	2105      	movs	r1, #5
 80034dc:	2006      	movs	r0, #6
 80034de:	f001 fa01 	bl	80048e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80034e2:	2006      	movs	r0, #6
 80034e4:	f001 fa1a 	bl	800491c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80034e8:	2200      	movs	r2, #0
 80034ea:	2105      	movs	r1, #5
 80034ec:	2007      	movs	r0, #7
 80034ee:	f001 f9f9 	bl	80048e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80034f2:	2007      	movs	r0, #7
 80034f4:	f001 fa12 	bl	800491c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80034f8:	2200      	movs	r2, #0
 80034fa:	2105      	movs	r1, #5
 80034fc:	2008      	movs	r0, #8
 80034fe:	f001 f9f1 	bl	80048e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003502:	2008      	movs	r0, #8
 8003504:	f001 fa0a 	bl	800491c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8003508:	2200      	movs	r2, #0
 800350a:	2105      	movs	r1, #5
 800350c:	2009      	movs	r0, #9
 800350e:	f001 f9e9 	bl	80048e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003512:	2009      	movs	r0, #9
 8003514:	f001 fa02 	bl	800491c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8003518:	2200      	movs	r2, #0
 800351a:	2105      	movs	r1, #5
 800351c:	200a      	movs	r0, #10
 800351e:	f001 f9e1 	bl	80048e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003522:	200a      	movs	r0, #10
 8003524:	f001 f9fa 	bl	800491c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8003528:	2200      	movs	r2, #0
 800352a:	2105      	movs	r1, #5
 800352c:	2017      	movs	r0, #23
 800352e:	f001 f9d9 	bl	80048e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003532:	2017      	movs	r0, #23
 8003534:	f001 f9f2 	bl	800491c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8003538:	2200      	movs	r2, #0
 800353a:	2105      	movs	r1, #5
 800353c:	2028      	movs	r0, #40	; 0x28
 800353e:	e00d      	b.n	800355c <MX_GPIO_Init+0x320>
 8003540:	40023800 	.word	0x40023800
 8003544:	40021400 	.word	0x40021400
 8003548:	40020800 	.word	0x40020800
 800354c:	40020400 	.word	0x40020400
 8003550:	40021800 	.word	0x40021800
 8003554:	40020c00 	.word	0x40020c00
 8003558:	40021000 	.word	0x40021000
 800355c:	f001 f9c2 	bl	80048e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003560:	2028      	movs	r0, #40	; 0x28
 8003562:	f001 f9db 	bl	800491c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003566:	bf00      	nop
 8003568:	3738      	adds	r7, #56	; 0x38
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop

08003570 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	4603      	mov	r3, r0
 8003578:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == LS_1_Pin) {
 800357a:	88fb      	ldrh	r3, [r7, #6]
 800357c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003580:	d102      	bne.n	8003588 <HAL_GPIO_EXTI_Callback+0x18>
		lsflag_1 = 1;
 8003582:	4b11      	ldr	r3, [pc, #68]	; (80035c8 <HAL_GPIO_EXTI_Callback+0x58>)
 8003584:	2201      	movs	r2, #1
 8003586:	601a      	str	r2, [r3, #0]
	}
	if (GPIO_Pin == LS_2_Pin) {
 8003588:	88fb      	ldrh	r3, [r7, #6]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d102      	bne.n	8003594 <HAL_GPIO_EXTI_Callback+0x24>
		lsflag_2 = 1;
 800358e:	4b0f      	ldr	r3, [pc, #60]	; (80035cc <HAL_GPIO_EXTI_Callback+0x5c>)
 8003590:	2201      	movs	r2, #1
 8003592:	601a      	str	r2, [r3, #0]
	}
	if (GPIO_Pin == LS_3_Pin) {
 8003594:	88fb      	ldrh	r3, [r7, #6]
 8003596:	2b20      	cmp	r3, #32
 8003598:	d102      	bne.n	80035a0 <HAL_GPIO_EXTI_Callback+0x30>
		lsflag_3 = 1;
 800359a:	4b0d      	ldr	r3, [pc, #52]	; (80035d0 <HAL_GPIO_EXTI_Callback+0x60>)
 800359c:	2201      	movs	r2, #1
 800359e:	601a      	str	r2, [r3, #0]
	}
	if (GPIO_Pin == LS_4_Pin) {
 80035a0:	88fb      	ldrh	r3, [r7, #6]
 80035a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035a6:	d102      	bne.n	80035ae <HAL_GPIO_EXTI_Callback+0x3e>
		lsflag_4 = 1;
 80035a8:	4b0a      	ldr	r3, [pc, #40]	; (80035d4 <HAL_GPIO_EXTI_Callback+0x64>)
 80035aa:	2201      	movs	r2, #1
 80035ac:	601a      	str	r2, [r3, #0]
	}
	if (GPIO_Pin == LS_5_Pin) {
 80035ae:	88fb      	ldrh	r3, [r7, #6]
 80035b0:	2b10      	cmp	r3, #16
 80035b2:	d102      	bne.n	80035ba <HAL_GPIO_EXTI_Callback+0x4a>
		lsflag_5 = 1;
 80035b4:	4b08      	ldr	r3, [pc, #32]	; (80035d8 <HAL_GPIO_EXTI_Callback+0x68>)
 80035b6:	2201      	movs	r2, #1
 80035b8:	601a      	str	r2, [r3, #0]
//		lsflag_6 = 1;
//	}
//	if (GPIO_Pin == LS_7_Pin) {
//		lsflag_7 = 1;
//	}
}
 80035ba:	bf00      	nop
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	20000790 	.word	0x20000790
 80035cc:	20000794 	.word	0x20000794
 80035d0:	20000798 	.word	0x20000798
 80035d4:	2000079c 	.word	0x2000079c
 80035d8:	200007a0 	.word	0x200007a0

080035dc <InputHandle_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_InputHandle_Task */
void InputHandle_Task(void const * argument)
{
 80035dc:	b5b0      	push	{r4, r5, r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af04      	add	r7, sp, #16
 80035e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
//	  printf("input task\r\n");
	  ds4();
 80035e4:	f7fe f960 	bl	80018a8 <ds4>
	  lxm = lx - lxs;
 80035e8:	4b1b      	ldr	r3, [pc, #108]	; (8003658 <InputHandle_Task+0x7c>)
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	4b1b      	ldr	r3, [pc, #108]	; (800365c <InputHandle_Task+0x80>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	4a1b      	ldr	r2, [pc, #108]	; (8003660 <InputHandle_Task+0x84>)
 80035f4:	6013      	str	r3, [r2, #0]
	  lym = ly - lys;
 80035f6:	4b1b      	ldr	r3, [pc, #108]	; (8003664 <InputHandle_Task+0x88>)
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	4b1b      	ldr	r3, [pc, #108]	; (8003668 <InputHandle_Task+0x8c>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	4a1a      	ldr	r2, [pc, #104]	; (800366c <InputHandle_Task+0x90>)
 8003602:	6013      	str	r3, [r2, #0]

//	  printf("\r\n at:%d, ki:%d, bw:%d, ka:%d, se3:%d, se4:%d, x:%d, o:%d,r1:%d, l1:%d, r3:%d, l3:%d, shr:%d, opt:%d, ps:%d, tpad:%d, lx:%d, ly:%d  ",
//			  atas, kiri, bawah, kanan, segitiga, kotak,silang,bulat,r1, l1, r3, l3, share, options,ps,tpad, lxm, lym);
	  printf("\r\n lxs:%d , lys:%d, lx:%d, ly:%d, lxm:%d, lym:%d",
 8003604:	4b15      	ldr	r3, [pc, #84]	; (800365c <InputHandle_Task+0x80>)
 8003606:	6818      	ldr	r0, [r3, #0]
 8003608:	4b17      	ldr	r3, [pc, #92]	; (8003668 <InputHandle_Task+0x8c>)
 800360a:	681c      	ldr	r4, [r3, #0]
 800360c:	4b12      	ldr	r3, [pc, #72]	; (8003658 <InputHandle_Task+0x7c>)
 800360e:	681d      	ldr	r5, [r3, #0]
 8003610:	4b14      	ldr	r3, [pc, #80]	; (8003664 <InputHandle_Task+0x88>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a12      	ldr	r2, [pc, #72]	; (8003660 <InputHandle_Task+0x84>)
 8003616:	6812      	ldr	r2, [r2, #0]
 8003618:	4914      	ldr	r1, [pc, #80]	; (800366c <InputHandle_Task+0x90>)
 800361a:	6809      	ldr	r1, [r1, #0]
 800361c:	9102      	str	r1, [sp, #8]
 800361e:	9201      	str	r2, [sp, #4]
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	462b      	mov	r3, r5
 8003624:	4622      	mov	r2, r4
 8003626:	4601      	mov	r1, r0
 8003628:	4811      	ldr	r0, [pc, #68]	; (8003670 <InputHandle_Task+0x94>)
 800362a:	f006 fa19 	bl	8009a60 <iprintf>
	  			   lxs, lys, lx, ly, lxm, lym);
	  printf("w1:%d, w2:%d, w3:%d, w4:%d, putar:%d", wheel[0], wheel[1], wheel[2], wheel[3], putar);
 800362e:	4b11      	ldr	r3, [pc, #68]	; (8003674 <InputHandle_Task+0x98>)
 8003630:	6819      	ldr	r1, [r3, #0]
 8003632:	4b10      	ldr	r3, [pc, #64]	; (8003674 <InputHandle_Task+0x98>)
 8003634:	6858      	ldr	r0, [r3, #4]
 8003636:	4b0f      	ldr	r3, [pc, #60]	; (8003674 <InputHandle_Task+0x98>)
 8003638:	689c      	ldr	r4, [r3, #8]
 800363a:	4b0e      	ldr	r3, [pc, #56]	; (8003674 <InputHandle_Task+0x98>)
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	4a0e      	ldr	r2, [pc, #56]	; (8003678 <InputHandle_Task+0x9c>)
 8003640:	6812      	ldr	r2, [r2, #0]
 8003642:	9201      	str	r2, [sp, #4]
 8003644:	9300      	str	r3, [sp, #0]
 8003646:	4623      	mov	r3, r4
 8003648:	4602      	mov	r2, r0
 800364a:	480c      	ldr	r0, [pc, #48]	; (800367c <InputHandle_Task+0xa0>)
 800364c:	f006 fa08 	bl	8009a60 <iprintf>
	  osDelay(1);
 8003650:	2001      	movs	r0, #1
 8003652:	f004 ff34 	bl	80084be <osDelay>
	  ds4();
 8003656:	e7c5      	b.n	80035e4 <InputHandle_Task+0x8>
 8003658:	20000750 	.word	0x20000750
 800365c:	20000760 	.word	0x20000760
 8003660:	20000768 	.word	0x20000768
 8003664:	20000754 	.word	0x20000754
 8003668:	20000764 	.word	0x20000764
 800366c:	2000076c 	.word	0x2000076c
 8003670:	0800a88c 	.word	0x0800a88c
 8003674:	20000774 	.word	0x20000774
 8003678:	20000788 	.word	0x20000788
 800367c:	0800a8c0 	.word	0x0800a8c0

08003680 <MechanismHandle_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MechanismHandle_Task */
void MechanismHandle_Task(void const * argument)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MechanismHandle_Task */
  /* Infinite loop */
  for(;;)
  {
	  currentTick = HAL_GetTick(); //kayak millis
 8003688:	f001 f844 	bl	8004714 <HAL_GetTick>
 800368c:	4603      	mov	r3, r0
 800368e:	4a30      	ldr	r2, [pc, #192]	; (8003750 <MechanismHandle_Task+0xd0>)
 8003690:	6013      	str	r3, [r2, #0]
	  if(segitiga==1){
 8003692:	4b30      	ldr	r3, [pc, #192]	; (8003754 <MechanismHandle_Task+0xd4>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d124      	bne.n	80036e4 <MechanismHandle_Task+0x64>
		  if(currentTick-nowTick>100 && nos<2){
 800369a:	4b2d      	ldr	r3, [pc, #180]	; (8003750 <MechanismHandle_Task+0xd0>)
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	4b2e      	ldr	r3, [pc, #184]	; (8003758 <MechanismHandle_Task+0xd8>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b64      	cmp	r3, #100	; 0x64
 80036a6:	d923      	bls.n	80036f0 <MechanismHandle_Task+0x70>
 80036a8:	4b2c      	ldr	r3, [pc, #176]	; (800375c <MechanismHandle_Task+0xdc>)
 80036aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036ae:	f04f 0200 	mov.w	r2, #0
 80036b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80036b6:	f7fd fa19 	bl	8000aec <__aeabi_dcmplt>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d017      	beq.n	80036f0 <MechanismHandle_Task+0x70>
			  nos+=0.2;
 80036c0:	4b26      	ldr	r3, [pc, #152]	; (800375c <MechanismHandle_Task+0xdc>)
 80036c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036c6:	a320      	add	r3, pc, #128	; (adr r3, 8003748 <MechanismHandle_Task+0xc8>)
 80036c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036cc:	f7fc fde6 	bl	800029c <__adddf3>
 80036d0:	4602      	mov	r2, r0
 80036d2:	460b      	mov	r3, r1
 80036d4:	4921      	ldr	r1, [pc, #132]	; (800375c <MechanismHandle_Task+0xdc>)
 80036d6:	e9c1 2300 	strd	r2, r3, [r1]
			  nowTick = currentTick;
 80036da:	4b1d      	ldr	r3, [pc, #116]	; (8003750 <MechanismHandle_Task+0xd0>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a1e      	ldr	r2, [pc, #120]	; (8003758 <MechanismHandle_Task+0xd8>)
 80036e0:	6013      	str	r3, [r2, #0]
 80036e2:	e005      	b.n	80036f0 <MechanismHandle_Task+0x70>
		  }
	  }
	  else nos = 1;
 80036e4:	491d      	ldr	r1, [pc, #116]	; (800375c <MechanismHandle_Task+0xdc>)
 80036e6:	f04f 0200 	mov.w	r2, #0
 80036ea:	4b1d      	ldr	r3, [pc, #116]	; (8003760 <MechanismHandle_Task+0xe0>)
 80036ec:	e9c1 2300 	strd	r2, r3, [r1]
	  if (ps == 1) {
 80036f0:	4b1c      	ldr	r3, [pc, #112]	; (8003764 <MechanismHandle_Task+0xe4>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d116      	bne.n	8003726 <MechanismHandle_Task+0xa6>
		  if (currentTick - nowTick > 500) {
 80036f8:	4b15      	ldr	r3, [pc, #84]	; (8003750 <MechanismHandle_Task+0xd0>)
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	4b16      	ldr	r3, [pc, #88]	; (8003758 <MechanismHandle_Task+0xd8>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003706:	d90e      	bls.n	8003726 <MechanismHandle_Task+0xa6>
			  kec=0;
 8003708:	4b17      	ldr	r3, [pc, #92]	; (8003768 <MechanismHandle_Task+0xe8>)
 800370a:	2200      	movs	r2, #0
 800370c:	601a      	str	r2, [r3, #0]
			  adj=0;
 800370e:	4b17      	ldr	r3, [pc, #92]	; (800376c <MechanismHandle_Task+0xec>)
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]
			  mode=mode*-1;
 8003714:	4b16      	ldr	r3, [pc, #88]	; (8003770 <MechanismHandle_Task+0xf0>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	425b      	negs	r3, r3
 800371a:	4a15      	ldr	r2, [pc, #84]	; (8003770 <MechanismHandle_Task+0xf0>)
 800371c:	6013      	str	r3, [r2, #0]
			  nowTick = currentTick;
 800371e:	4b0c      	ldr	r3, [pc, #48]	; (8003750 <MechanismHandle_Task+0xd0>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a0d      	ldr	r2, [pc, #52]	; (8003758 <MechanismHandle_Task+0xd8>)
 8003724:	6013      	str	r3, [r2, #0]
		  }
	  }

	  if (mode>0) {
 8003726:	4b12      	ldr	r3, [pc, #72]	; (8003770 <MechanismHandle_Task+0xf0>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	dd02      	ble.n	8003734 <MechanismHandle_Task+0xb4>
		  mode_padi();
 800372e:	f7fe f949 	bl	80019c4 <mode_padi>
 8003732:	e005      	b.n	8003740 <MechanismHandle_Task+0xc0>
	  }
	  else if (mode<0) {
 8003734:	4b0e      	ldr	r3, [pc, #56]	; (8003770 <MechanismHandle_Task+0xf0>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	da01      	bge.n	8003740 <MechanismHandle_Task+0xc0>
		  mode_bola();
 800373c:	f7fe fd26 	bl	800218c <mode_bola>
	  }

	  //printf("mechanism task\r\n");
	  osDelay(1);
 8003740:	2001      	movs	r0, #1
 8003742:	f004 febc 	bl	80084be <osDelay>
	  currentTick = HAL_GetTick(); //kayak millis
 8003746:	e79f      	b.n	8003688 <MechanismHandle_Task+0x8>
 8003748:	9999999a 	.word	0x9999999a
 800374c:	3fc99999 	.word	0x3fc99999
 8003750:	200007e0 	.word	0x200007e0
 8003754:	2000072c 	.word	0x2000072c
 8003758:	200007e4 	.word	0x200007e4
 800375c:	20000020 	.word	0x20000020
 8003760:	3ff00000 	.word	0x3ff00000
 8003764:	20000748 	.word	0x20000748
 8003768:	200007d4 	.word	0x200007d4
 800376c:	200007dc 	.word	0x200007dc
 8003770:	20000028 	.word	0x20000028

08003774 <OmniHandle_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OmniHandle_Task */
void OmniHandle_Task(void const * argument)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af02      	add	r7, sp, #8
 800377a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OmniHandle_Task */
  /* Infinite loop */
  for(;;)
  {
//	  printf("omni task\r\n");
	  if (l2 < r2) putar = -1*r2;
 800377c:	4b7a      	ldr	r3, [pc, #488]	; (8003968 <OmniHandle_Task+0x1f4>)
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	4b7a      	ldr	r3, [pc, #488]	; (800396c <OmniHandle_Task+0x1f8>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	429a      	cmp	r2, r3
 8003786:	da05      	bge.n	8003794 <OmniHandle_Task+0x20>
 8003788:	4b78      	ldr	r3, [pc, #480]	; (800396c <OmniHandle_Task+0x1f8>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	425b      	negs	r3, r3
 800378e:	4a78      	ldr	r2, [pc, #480]	; (8003970 <OmniHandle_Task+0x1fc>)
 8003790:	6013      	str	r3, [r2, #0]
 8003792:	e00d      	b.n	80037b0 <OmniHandle_Task+0x3c>
	  else if (l2 > r2) putar = l2;
 8003794:	4b74      	ldr	r3, [pc, #464]	; (8003968 <OmniHandle_Task+0x1f4>)
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	4b74      	ldr	r3, [pc, #464]	; (800396c <OmniHandle_Task+0x1f8>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	429a      	cmp	r2, r3
 800379e:	dd04      	ble.n	80037aa <OmniHandle_Task+0x36>
 80037a0:	4b71      	ldr	r3, [pc, #452]	; (8003968 <OmniHandle_Task+0x1f4>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a72      	ldr	r2, [pc, #456]	; (8003970 <OmniHandle_Task+0x1fc>)
 80037a6:	6013      	str	r3, [r2, #0]
 80037a8:	e002      	b.n	80037b0 <OmniHandle_Task+0x3c>
	  else putar = 0;
 80037aa:	4b71      	ldr	r3, [pc, #452]	; (8003970 <OmniHandle_Task+0x1fc>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]

	  if (mode>0) putar1=putar/1.5;
 80037b0:	4b70      	ldr	r3, [pc, #448]	; (8003974 <OmniHandle_Task+0x200>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	dd13      	ble.n	80037e0 <OmniHandle_Task+0x6c>
 80037b8:	4b6d      	ldr	r3, [pc, #436]	; (8003970 <OmniHandle_Task+0x1fc>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4618      	mov	r0, r3
 80037be:	f7fc feb9 	bl	8000534 <__aeabi_i2d>
 80037c2:	f04f 0200 	mov.w	r2, #0
 80037c6:	4b6c      	ldr	r3, [pc, #432]	; (8003978 <OmniHandle_Task+0x204>)
 80037c8:	f7fd f848 	bl	800085c <__aeabi_ddiv>
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	4610      	mov	r0, r2
 80037d2:	4619      	mov	r1, r3
 80037d4:	f7fd f9b2 	bl	8000b3c <__aeabi_d2iz>
 80037d8:	4603      	mov	r3, r0
 80037da:	4a68      	ldr	r2, [pc, #416]	; (800397c <OmniHandle_Task+0x208>)
 80037dc:	6013      	str	r3, [r2, #0]
 80037de:	e016      	b.n	800380e <OmniHandle_Task+0x9a>
	  else if (mode<0) putar1=putar/1.5;
 80037e0:	4b64      	ldr	r3, [pc, #400]	; (8003974 <OmniHandle_Task+0x200>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	da12      	bge.n	800380e <OmniHandle_Task+0x9a>
 80037e8:	4b61      	ldr	r3, [pc, #388]	; (8003970 <OmniHandle_Task+0x1fc>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7fc fea1 	bl	8000534 <__aeabi_i2d>
 80037f2:	f04f 0200 	mov.w	r2, #0
 80037f6:	4b60      	ldr	r3, [pc, #384]	; (8003978 <OmniHandle_Task+0x204>)
 80037f8:	f7fd f830 	bl	800085c <__aeabi_ddiv>
 80037fc:	4602      	mov	r2, r0
 80037fe:	460b      	mov	r3, r1
 8003800:	4610      	mov	r0, r2
 8003802:	4619      	mov	r1, r3
 8003804:	f7fd f99a 	bl	8000b3c <__aeabi_d2iz>
 8003808:	4603      	mov	r3, r0
 800380a:	4a5c      	ldr	r2, [pc, #368]	; (800397c <OmniHandle_Task+0x208>)
 800380c:	6013      	str	r3, [r2, #0]

	  th = putar1;
 800380e:	4b5b      	ldr	r3, [pc, #364]	; (800397c <OmniHandle_Task+0x208>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a5b      	ldr	r2, [pc, #364]	; (8003980 <OmniHandle_Task+0x20c>)
 8003814:	6013      	str	r3, [r2, #0]
//	  		  wheel[0]=wheel[0];
//	  		  wheel[1]=wheel[1];
//	  		  wheel[2]=wheel[2];
//	  		  wheel[3]=wheel[3];
//	  	  }
	  kinematikM(lxm, lym, th, nos);
 8003816:	4b5b      	ldr	r3, [pc, #364]	; (8003984 <OmniHandle_Task+0x210>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a5b      	ldr	r2, [pc, #364]	; (8003988 <OmniHandle_Task+0x214>)
 800381c:	6811      	ldr	r1, [r2, #0]
 800381e:	4a58      	ldr	r2, [pc, #352]	; (8003980 <OmniHandle_Task+0x20c>)
 8003820:	6812      	ldr	r2, [r2, #0]
 8003822:	485a      	ldr	r0, [pc, #360]	; (800398c <OmniHandle_Task+0x218>)
 8003824:	ed90 7b00 	vldr	d7, [r0]
 8003828:	eeb0 0a47 	vmov.f32	s0, s14
 800382c:	eef0 0a67 	vmov.f32	s1, s15
 8003830:	4618      	mov	r0, r3
 8003832:	f7fd fb29 	bl	8000e88 <kinematikM>
	  for (uint8_t i = 0; i < 4; i++) {
 8003836:	2300      	movs	r3, #0
 8003838:	73fb      	strb	r3, [r7, #15]
 800383a:	e04e      	b.n	80038da <OmniHandle_Task+0x166>
		  wheel[0] = map(out[0], -360, 360, -1000, 1000);//386
 800383c:	4b54      	ldr	r3, [pc, #336]	; (8003990 <OmniHandle_Task+0x21c>)
 800383e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003842:	4610      	mov	r0, r2
 8003844:	4619      	mov	r1, r3
 8003846:	f7fd f979 	bl	8000b3c <__aeabi_d2iz>
 800384a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800384e:	9300      	str	r3, [sp, #0]
 8003850:	4b50      	ldr	r3, [pc, #320]	; (8003994 <OmniHandle_Task+0x220>)
 8003852:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8003856:	4950      	ldr	r1, [pc, #320]	; (8003998 <OmniHandle_Task+0x224>)
 8003858:	f7fe f884 	bl	8001964 <map>
 800385c:	4603      	mov	r3, r0
 800385e:	4a4f      	ldr	r2, [pc, #316]	; (800399c <OmniHandle_Task+0x228>)
 8003860:	6013      	str	r3, [r2, #0]
		  wheel[1] = map(out[1], -360, 360, -1000, 1000);
 8003862:	4b4b      	ldr	r3, [pc, #300]	; (8003990 <OmniHandle_Task+0x21c>)
 8003864:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003868:	4610      	mov	r0, r2
 800386a:	4619      	mov	r1, r3
 800386c:	f7fd f966 	bl	8000b3c <__aeabi_d2iz>
 8003870:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	4b47      	ldr	r3, [pc, #284]	; (8003994 <OmniHandle_Task+0x220>)
 8003878:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800387c:	4946      	ldr	r1, [pc, #280]	; (8003998 <OmniHandle_Task+0x224>)
 800387e:	f7fe f871 	bl	8001964 <map>
 8003882:	4603      	mov	r3, r0
 8003884:	4a45      	ldr	r2, [pc, #276]	; (800399c <OmniHandle_Task+0x228>)
 8003886:	6053      	str	r3, [r2, #4]
		  wheel[2] = map(out[2], -360, 360, -1000, 1000);
 8003888:	4b41      	ldr	r3, [pc, #260]	; (8003990 <OmniHandle_Task+0x21c>)
 800388a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800388e:	4610      	mov	r0, r2
 8003890:	4619      	mov	r1, r3
 8003892:	f7fd f953 	bl	8000b3c <__aeabi_d2iz>
 8003896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	4b3d      	ldr	r3, [pc, #244]	; (8003994 <OmniHandle_Task+0x220>)
 800389e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80038a2:	493d      	ldr	r1, [pc, #244]	; (8003998 <OmniHandle_Task+0x224>)
 80038a4:	f7fe f85e 	bl	8001964 <map>
 80038a8:	4603      	mov	r3, r0
 80038aa:	4a3c      	ldr	r2, [pc, #240]	; (800399c <OmniHandle_Task+0x228>)
 80038ac:	6093      	str	r3, [r2, #8]
		  wheel[3] = map(out[3], -360, 360, -1000, 1000);
 80038ae:	4b38      	ldr	r3, [pc, #224]	; (8003990 <OmniHandle_Task+0x21c>)
 80038b0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80038b4:	4610      	mov	r0, r2
 80038b6:	4619      	mov	r1, r3
 80038b8:	f7fd f940 	bl	8000b3c <__aeabi_d2iz>
 80038bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	4b34      	ldr	r3, [pc, #208]	; (8003994 <OmniHandle_Task+0x220>)
 80038c4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80038c8:	4933      	ldr	r1, [pc, #204]	; (8003998 <OmniHandle_Task+0x224>)
 80038ca:	f7fe f84b 	bl	8001964 <map>
 80038ce:	4603      	mov	r3, r0
 80038d0:	4a32      	ldr	r2, [pc, #200]	; (800399c <OmniHandle_Task+0x228>)
 80038d2:	60d3      	str	r3, [r2, #12]
	  for (uint8_t i = 0; i < 4; i++) {
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
 80038d6:	3301      	adds	r3, #1
 80038d8:	73fb      	strb	r3, [r7, #15]
 80038da:	7bfb      	ldrb	r3, [r7, #15]
 80038dc:	2b03      	cmp	r3, #3
 80038de:	d9ad      	bls.n	800383c <OmniHandle_Task+0xc8>
//	  motor_drive(&LeftFront, out[0], lf.output);
//	  motor_drive(&LeftBack, out[1], lb.output);
//	  motor_drive(&RightBack, out[2], rb.output);
//	  motor_drive(&RightFront, out[3], rf.output);

	  motor_drive(&LeftFront, out[0], wheel[0]);
 80038e0:	4b2b      	ldr	r3, [pc, #172]	; (8003990 <OmniHandle_Task+0x21c>)
 80038e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e6:	4610      	mov	r0, r2
 80038e8:	4619      	mov	r1, r3
 80038ea:	f7fd f927 	bl	8000b3c <__aeabi_d2iz>
 80038ee:	4603      	mov	r3, r0
 80038f0:	b21b      	sxth	r3, r3
 80038f2:	4a2a      	ldr	r2, [pc, #168]	; (800399c <OmniHandle_Task+0x228>)
 80038f4:	6812      	ldr	r2, [r2, #0]
 80038f6:	b212      	sxth	r2, r2
 80038f8:	4619      	mov	r1, r3
 80038fa:	4829      	ldr	r0, [pc, #164]	; (80039a0 <OmniHandle_Task+0x22c>)
 80038fc:	f000 f8d6 	bl	8003aac <motor_drive>
	  motor_drive(&LeftBack, out[1], wheel[1]);
 8003900:	4b23      	ldr	r3, [pc, #140]	; (8003990 <OmniHandle_Task+0x21c>)
 8003902:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003906:	4610      	mov	r0, r2
 8003908:	4619      	mov	r1, r3
 800390a:	f7fd f917 	bl	8000b3c <__aeabi_d2iz>
 800390e:	4603      	mov	r3, r0
 8003910:	b21b      	sxth	r3, r3
 8003912:	4a22      	ldr	r2, [pc, #136]	; (800399c <OmniHandle_Task+0x228>)
 8003914:	6852      	ldr	r2, [r2, #4]
 8003916:	b212      	sxth	r2, r2
 8003918:	4619      	mov	r1, r3
 800391a:	4822      	ldr	r0, [pc, #136]	; (80039a4 <OmniHandle_Task+0x230>)
 800391c:	f000 f8c6 	bl	8003aac <motor_drive>
	  motor_drive(&RightBack, out[2], wheel[2]);
 8003920:	4b1b      	ldr	r3, [pc, #108]	; (8003990 <OmniHandle_Task+0x21c>)
 8003922:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003926:	4610      	mov	r0, r2
 8003928:	4619      	mov	r1, r3
 800392a:	f7fd f907 	bl	8000b3c <__aeabi_d2iz>
 800392e:	4603      	mov	r3, r0
 8003930:	b21b      	sxth	r3, r3
 8003932:	4a1a      	ldr	r2, [pc, #104]	; (800399c <OmniHandle_Task+0x228>)
 8003934:	6892      	ldr	r2, [r2, #8]
 8003936:	b212      	sxth	r2, r2
 8003938:	4619      	mov	r1, r3
 800393a:	481b      	ldr	r0, [pc, #108]	; (80039a8 <OmniHandle_Task+0x234>)
 800393c:	f000 f8b6 	bl	8003aac <motor_drive>
	  motor_drive(&RightFront, out[3], wheel[3]);
 8003940:	4b13      	ldr	r3, [pc, #76]	; (8003990 <OmniHandle_Task+0x21c>)
 8003942:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003946:	4610      	mov	r0, r2
 8003948:	4619      	mov	r1, r3
 800394a:	f7fd f8f7 	bl	8000b3c <__aeabi_d2iz>
 800394e:	4603      	mov	r3, r0
 8003950:	b21b      	sxth	r3, r3
 8003952:	4a12      	ldr	r2, [pc, #72]	; (800399c <OmniHandle_Task+0x228>)
 8003954:	68d2      	ldr	r2, [r2, #12]
 8003956:	b212      	sxth	r2, r2
 8003958:	4619      	mov	r1, r3
 800395a:	4814      	ldr	r0, [pc, #80]	; (80039ac <OmniHandle_Task+0x238>)
 800395c:	f000 f8a6 	bl	8003aac <motor_drive>
//	  printf("out0:%d,out1:%d,out2:%d,out3:%d", out[0],out[1],out[2],out[3]);
	  osDelay(1);
 8003960:	2001      	movs	r0, #1
 8003962:	f004 fdac 	bl	80084be <osDelay>
	  if (l2 < r2) putar = -1*r2;
 8003966:	e709      	b.n	800377c <OmniHandle_Task+0x8>
 8003968:	20000758 	.word	0x20000758
 800396c:	2000075c 	.word	0x2000075c
 8003970:	20000788 	.word	0x20000788
 8003974:	20000028 	.word	0x20000028
 8003978:	3ff80000 	.word	0x3ff80000
 800397c:	2000078c 	.word	0x2000078c
 8003980:	20000770 	.word	0x20000770
 8003984:	20000768 	.word	0x20000768
 8003988:	2000076c 	.word	0x2000076c
 800398c:	20000020 	.word	0x20000020
 8003990:	200001a8 	.word	0x200001a8
 8003994:	fffffc18 	.word	0xfffffc18
 8003998:	fffffe98 	.word	0xfffffe98
 800399c:	20000774 	.word	0x20000774
 80039a0:	20000044 	.word	0x20000044
 80039a4:	2000005c 	.word	0x2000005c
 80039a8:	2000008c 	.word	0x2000008c
 80039ac:	20000074 	.word	0x20000074

080039b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a04      	ldr	r2, [pc, #16]	; (80039d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d101      	bne.n	80039c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80039c2:	f000 fe93 	bl	80046ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80039c6:	bf00      	nop
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	40001400 	.word	0x40001400

080039d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80039d8:	b672      	cpsid	i
}
 80039da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80039dc:	e7fe      	b.n	80039dc <Error_Handler+0x8>

080039de <motor_init>:
		.ch1_ = TIM_CHANNEL_2, .ch2_ = TIM_CHANNEL_1,
		.en_port = EN_PADI_GPIO_Port,
		.en_pin = EN_PADI_Pin
};

void motor_init(motor_channel *wheel_n){
 80039de:	b580      	push	{r7, lr}
 80039e0:	b082      	sub	sp, #8
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(wheel_n->en_port, wheel_n->en_pin, GPIO_PIN_SET);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6918      	ldr	r0, [r3, #16]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	8a9b      	ldrh	r3, [r3, #20]
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	2201      	movs	r2, #1
 80039f2:	4619      	mov	r1, r3
 80039f4:	f001 f9f6 	bl	8004de4 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(wheel_n->in1_, wheel_n->ch1_);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	4619      	mov	r1, r3
 8003a02:	4610      	mov	r0, r2
 8003a04:	f002 fe24 	bl	8006650 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(wheel_n->in2_, wheel_n->ch2_);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685a      	ldr	r2, [r3, #4]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	4619      	mov	r1, r3
 8003a12:	4610      	mov	r0, r2
 8003a14:	f002 fe1c 	bl	8006650 <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(wheel_n->in1_, wheel_n->ch1_, 0);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d105      	bne.n	8003a2c <motor_init+0x4e>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2200      	movs	r2, #0
 8003a28:	635a      	str	r2, [r3, #52]	; 0x34
 8003a2a:	e018      	b.n	8003a5e <motor_init+0x80>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	2b04      	cmp	r3, #4
 8003a32:	d105      	bne.n	8003a40 <motor_init+0x62>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	6393      	str	r3, [r2, #56]	; 0x38
 8003a3e:	e00e      	b.n	8003a5e <motor_init+0x80>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	2b08      	cmp	r3, #8
 8003a46:	d105      	bne.n	8003a54 <motor_init+0x76>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	2300      	movs	r3, #0
 8003a50:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003a52:	e004      	b.n	8003a5e <motor_init+0x80>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(wheel_n->in2_, wheel_n->ch2_, 0);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d105      	bne.n	8003a72 <motor_init+0x94>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003a70:	e018      	b.n	8003aa4 <motor_init+0xc6>
	__HAL_TIM_SET_COMPARE(wheel_n->in2_, wheel_n->ch2_, 0);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	2b04      	cmp	r3, #4
 8003a78:	d105      	bne.n	8003a86 <motor_init+0xa8>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	2300      	movs	r3, #0
 8003a82:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003a84:	e00e      	b.n	8003aa4 <motor_init+0xc6>
	__HAL_TIM_SET_COMPARE(wheel_n->in2_, wheel_n->ch2_, 0);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	2b08      	cmp	r3, #8
 8003a8c:	d105      	bne.n	8003a9a <motor_init+0xbc>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	2300      	movs	r3, #0
 8003a96:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8003a98:	e004      	b.n	8003aa4 <motor_init+0xc6>
	__HAL_TIM_SET_COMPARE(wheel_n->in2_, wheel_n->ch2_, 0);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	6413      	str	r3, [r2, #64]	; 0x40
}
 8003aa4:	bf00      	nop
 8003aa6:	3708      	adds	r7, #8
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <motor_drive>:

void motor_drive(motor_channel *wheel_n, int16_t dir, int16_t rpm){
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	807b      	strh	r3, [r7, #2]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	803b      	strh	r3, [r7, #0]
	if(dir > 0){
 8003abc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	dd4a      	ble.n	8003b5a <motor_drive+0xae>
		__HAL_TIM_SET_COMPARE(wheel_n->in1_, wheel_n->ch1_, rpm);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d106      	bne.n	8003ada <motor_drive+0x2e>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003ad6:	635a      	str	r2, [r3, #52]	; 0x34
 8003ad8:	e01b      	b.n	8003b12 <motor_drive+0x66>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	2b04      	cmp	r3, #4
 8003ae0:	d106      	bne.n	8003af0 <motor_drive+0x44>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003aec:	6393      	str	r3, [r2, #56]	; 0x38
 8003aee:	e010      	b.n	8003b12 <motor_drive+0x66>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	2b08      	cmp	r3, #8
 8003af6:	d106      	bne.n	8003b06 <motor_drive+0x5a>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003b02:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003b04:	e005      	b.n	8003b12 <motor_drive+0x66>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003b10:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(wheel_n->in2_, wheel_n->ch2_, 0);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d105      	bne.n	8003b26 <motor_drive+0x7a>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2200      	movs	r2, #0
 8003b22:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else{
		__HAL_TIM_SET_COMPARE(wheel_n->in1_, wheel_n->ch1_, 0);
		__HAL_TIM_SET_COMPARE(wheel_n->in2_, wheel_n->ch2_, 0);
	}
}
 8003b24:	e0c2      	b.n	8003cac <motor_drive+0x200>
		__HAL_TIM_SET_COMPARE(wheel_n->in2_, wheel_n->ch2_, 0);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	2b04      	cmp	r3, #4
 8003b2c:	d105      	bne.n	8003b3a <motor_drive+0x8e>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	2300      	movs	r3, #0
 8003b36:	6393      	str	r3, [r2, #56]	; 0x38
 8003b38:	e0b8      	b.n	8003cac <motor_drive+0x200>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	2b08      	cmp	r3, #8
 8003b40:	d105      	bne.n	8003b4e <motor_drive+0xa2>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	2300      	movs	r3, #0
 8003b4a:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003b4c:	e0ae      	b.n	8003cac <motor_drive+0x200>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	2300      	movs	r3, #0
 8003b56:	6413      	str	r3, [r2, #64]	; 0x40
}
 8003b58:	e0a8      	b.n	8003cac <motor_drive+0x200>
	else if(dir < 0){
 8003b5a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	da5d      	bge.n	8003c1e <motor_drive+0x172>
		__HAL_TIM_SET_COMPARE(wheel_n->in1_, wheel_n->ch1_, 0);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d105      	bne.n	8003b76 <motor_drive+0xca>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2200      	movs	r2, #0
 8003b72:	635a      	str	r2, [r3, #52]	; 0x34
 8003b74:	e018      	b.n	8003ba8 <motor_drive+0xfc>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	2b04      	cmp	r3, #4
 8003b7c:	d105      	bne.n	8003b8a <motor_drive+0xde>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	2300      	movs	r3, #0
 8003b86:	6393      	str	r3, [r2, #56]	; 0x38
 8003b88:	e00e      	b.n	8003ba8 <motor_drive+0xfc>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	2b08      	cmp	r3, #8
 8003b90:	d105      	bne.n	8003b9e <motor_drive+0xf2>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	2300      	movs	r3, #0
 8003b9a:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003b9c:	e004      	b.n	8003ba8 <motor_drive+0xfc>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(wheel_n->in2_, wheel_n->ch2_, abs(rpm));
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10a      	bne.n	8003bc6 <motor_drive+0x11a>
 8003bb0:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	bfb8      	it	lt
 8003bb8:	425b      	neglt	r3, r3
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003bc4:	e072      	b.n	8003cac <motor_drive+0x200>
		__HAL_TIM_SET_COMPARE(wheel_n->in2_, wheel_n->ch2_, abs(rpm));
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	d10b      	bne.n	8003be6 <motor_drive+0x13a>
 8003bce:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	bfb8      	it	lt
 8003bd6:	425b      	neglt	r3, r3
 8003bd8:	b299      	uxth	r1, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	460b      	mov	r3, r1
 8003be2:	6393      	str	r3, [r2, #56]	; 0x38
 8003be4:	e062      	b.n	8003cac <motor_drive+0x200>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	2b08      	cmp	r3, #8
 8003bec:	d10b      	bne.n	8003c06 <motor_drive+0x15a>
 8003bee:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	bfb8      	it	lt
 8003bf6:	425b      	neglt	r3, r3
 8003bf8:	b299      	uxth	r1, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	460b      	mov	r3, r1
 8003c02:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003c04:	e052      	b.n	8003cac <motor_drive+0x200>
 8003c06:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	bfb8      	it	lt
 8003c0e:	425b      	neglt	r3, r3
 8003c10:	b299      	uxth	r1, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	460b      	mov	r3, r1
 8003c1a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8003c1c:	e046      	b.n	8003cac <motor_drive+0x200>
		__HAL_TIM_SET_COMPARE(wheel_n->in1_, wheel_n->ch1_, 0);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d105      	bne.n	8003c32 <motor_drive+0x186>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	635a      	str	r2, [r3, #52]	; 0x34
 8003c30:	e018      	b.n	8003c64 <motor_drive+0x1b8>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	d105      	bne.n	8003c46 <motor_drive+0x19a>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	2300      	movs	r3, #0
 8003c42:	6393      	str	r3, [r2, #56]	; 0x38
 8003c44:	e00e      	b.n	8003c64 <motor_drive+0x1b8>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	2b08      	cmp	r3, #8
 8003c4c:	d105      	bne.n	8003c5a <motor_drive+0x1ae>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	2300      	movs	r3, #0
 8003c56:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003c58:	e004      	b.n	8003c64 <motor_drive+0x1b8>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	2300      	movs	r3, #0
 8003c62:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(wheel_n->in2_, wheel_n->ch2_, 0);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d105      	bne.n	8003c78 <motor_drive+0x1cc>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2200      	movs	r2, #0
 8003c74:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003c76:	e019      	b.n	8003cac <motor_drive+0x200>
		__HAL_TIM_SET_COMPARE(wheel_n->in2_, wheel_n->ch2_, 0);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	2b04      	cmp	r3, #4
 8003c7e:	d105      	bne.n	8003c8c <motor_drive+0x1e0>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	2300      	movs	r3, #0
 8003c88:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003c8a:	e00f      	b.n	8003cac <motor_drive+0x200>
		__HAL_TIM_SET_COMPARE(wheel_n->in2_, wheel_n->ch2_, 0);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	2b08      	cmp	r3, #8
 8003c92:	d105      	bne.n	8003ca0 <motor_drive+0x1f4>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8003c9e:	e005      	b.n	8003cac <motor_drive+0x200>
		__HAL_TIM_SET_COMPARE(wheel_n->in2_, wheel_n->ch2_, 0);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	6413      	str	r3, [r2, #64]	; 0x40
}
 8003caa:	e7ff      	b.n	8003cac <motor_drive+0x200>
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <enable_motor>:

void disable_motor(motor_channel *wheel_n){
	HAL_GPIO_WritePin(wheel_n->en_port, wheel_n->en_pin, GPIO_PIN_RESET);
}

void enable_motor(motor_channel *wheel_n){
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(wheel_n->en_port, wheel_n->en_pin, GPIO_PIN_SET);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6918      	ldr	r0, [r3, #16]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	8a9b      	ldrh	r3, [r3, #20]
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	2201      	movs	r2, #1
 8003ccc:	4619      	mov	r1, r3
 8003cce:	f001 f889 	bl	8004de4 <HAL_GPIO_WritePin>
}
 8003cd2:	bf00      	nop
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <bldc_init>:

void bldc_init(esc *servo, uint32_t sp) {
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b082      	sub	sp, #8
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
 8003ce2:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Start(servo->htim, servo->channel);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	4619      	mov	r1, r3
 8003cee:	4610      	mov	r0, r2
 8003cf0:	f002 fcae 	bl	8006650 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(servo->htim, servo->channel, sp);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d105      	bne.n	8003d08 <bldc_init+0x2e>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003d06:	e018      	b.n	8003d3a <bldc_init+0x60>
	__HAL_TIM_SET_COMPARE(servo->htim, servo->channel, sp);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	2b04      	cmp	r3, #4
 8003d0e:	d105      	bne.n	8003d1c <bldc_init+0x42>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003d1a:	e00e      	b.n	8003d3a <bldc_init+0x60>
	__HAL_TIM_SET_COMPARE(servo->htim, servo->channel, sp);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	2b08      	cmp	r3, #8
 8003d22:	d105      	bne.n	8003d30 <bldc_init+0x56>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8003d2e:	e004      	b.n	8003d3a <bldc_init+0x60>
	__HAL_TIM_SET_COMPARE(servo->htim, servo->channel, sp);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	6413      	str	r3, [r2, #64]	; 0x40
}
 8003d3a:	bf00      	nop
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <bldc_drive>:

void bldc_drive(esc *servo, uint32_t duty) {
 8003d42:	b480      	push	{r7}
 8003d44:	b083      	sub	sp, #12
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
 8003d4a:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COMPARE(servo->htim, servo->channel, duty);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d105      	bne.n	8003d60 <bldc_drive+0x1e>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003d5e:	e018      	b.n	8003d92 <bldc_drive+0x50>
	__HAL_TIM_SET_COMPARE(servo->htim, servo->channel, duty);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	2b04      	cmp	r3, #4
 8003d66:	d105      	bne.n	8003d74 <bldc_drive+0x32>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003d72:	e00e      	b.n	8003d92 <bldc_drive+0x50>
	__HAL_TIM_SET_COMPARE(servo->htim, servo->channel, duty);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	2b08      	cmp	r3, #8
 8003d7a:	d105      	bne.n	8003d88 <bldc_drive+0x46>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8003d86:	e004      	b.n	8003d92 <bldc_drive+0x50>
	__HAL_TIM_SET_COMPARE(servo->htim, servo->channel, duty);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	6413      	str	r3, [r2, #64]	; 0x40
}
 8003d92:	bf00      	nop
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
	...

08003da0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003da6:	2300      	movs	r3, #0
 8003da8:	607b      	str	r3, [r7, #4]
 8003daa:	4b12      	ldr	r3, [pc, #72]	; (8003df4 <HAL_MspInit+0x54>)
 8003dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dae:	4a11      	ldr	r2, [pc, #68]	; (8003df4 <HAL_MspInit+0x54>)
 8003db0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003db4:	6453      	str	r3, [r2, #68]	; 0x44
 8003db6:	4b0f      	ldr	r3, [pc, #60]	; (8003df4 <HAL_MspInit+0x54>)
 8003db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dbe:	607b      	str	r3, [r7, #4]
 8003dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	603b      	str	r3, [r7, #0]
 8003dc6:	4b0b      	ldr	r3, [pc, #44]	; (8003df4 <HAL_MspInit+0x54>)
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	4a0a      	ldr	r2, [pc, #40]	; (8003df4 <HAL_MspInit+0x54>)
 8003dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8003dd2:	4b08      	ldr	r3, [pc, #32]	; (8003df4 <HAL_MspInit+0x54>)
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dda:	603b      	str	r3, [r7, #0]
 8003ddc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003dde:	2200      	movs	r2, #0
 8003de0:	210f      	movs	r1, #15
 8003de2:	f06f 0001 	mvn.w	r0, #1
 8003de6:	f000 fd7d 	bl	80048e4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003dea:	bf00      	nop
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	40023800 	.word	0x40023800

08003df8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b08a      	sub	sp, #40	; 0x28
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e00:	f107 0314 	add.w	r3, r7, #20
 8003e04:	2200      	movs	r2, #0
 8003e06:	601a      	str	r2, [r3, #0]
 8003e08:	605a      	str	r2, [r3, #4]
 8003e0a:	609a      	str	r2, [r3, #8]
 8003e0c:	60da      	str	r2, [r3, #12]
 8003e0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a19      	ldr	r2, [pc, #100]	; (8003e7c <HAL_SPI_MspInit+0x84>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d12c      	bne.n	8003e74 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	613b      	str	r3, [r7, #16]
 8003e1e:	4b18      	ldr	r3, [pc, #96]	; (8003e80 <HAL_SPI_MspInit+0x88>)
 8003e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e22:	4a17      	ldr	r2, [pc, #92]	; (8003e80 <HAL_SPI_MspInit+0x88>)
 8003e24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e28:	6453      	str	r3, [r2, #68]	; 0x44
 8003e2a:	4b15      	ldr	r3, [pc, #84]	; (8003e80 <HAL_SPI_MspInit+0x88>)
 8003e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e32:	613b      	str	r3, [r7, #16]
 8003e34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003e36:	2300      	movs	r3, #0
 8003e38:	60fb      	str	r3, [r7, #12]
 8003e3a:	4b11      	ldr	r3, [pc, #68]	; (8003e80 <HAL_SPI_MspInit+0x88>)
 8003e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3e:	4a10      	ldr	r2, [pc, #64]	; (8003e80 <HAL_SPI_MspInit+0x88>)
 8003e40:	f043 0320 	orr.w	r3, r3, #32
 8003e44:	6313      	str	r3, [r2, #48]	; 0x30
 8003e46:	4b0e      	ldr	r3, [pc, #56]	; (8003e80 <HAL_SPI_MspInit+0x88>)
 8003e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4a:	f003 0320 	and.w	r3, r3, #32
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003e52:	f44f 7360 	mov.w	r3, #896	; 0x380
 8003e56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e58:	2302      	movs	r3, #2
 8003e5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e60:	2303      	movs	r3, #3
 8003e62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003e64:	2305      	movs	r3, #5
 8003e66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003e68:	f107 0314 	add.w	r3, r7, #20
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	4805      	ldr	r0, [pc, #20]	; (8003e84 <HAL_SPI_MspInit+0x8c>)
 8003e70:	f000 fdf4 	bl	8004a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8003e74:	bf00      	nop
 8003e76:	3728      	adds	r7, #40	; 0x28
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	40015000 	.word	0x40015000
 8003e80:	40023800 	.word	0x40023800
 8003e84:	40021400 	.word	0x40021400

08003e88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b08b      	sub	sp, #44	; 0x2c
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a47      	ldr	r2, [pc, #284]	; (8003fb4 <HAL_TIM_Base_MspInit+0x12c>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d10e      	bne.n	8003eb8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e9e:	4b46      	ldr	r3, [pc, #280]	; (8003fb8 <HAL_TIM_Base_MspInit+0x130>)
 8003ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea2:	4a45      	ldr	r2, [pc, #276]	; (8003fb8 <HAL_TIM_Base_MspInit+0x130>)
 8003ea4:	f043 0301 	orr.w	r3, r3, #1
 8003ea8:	6453      	str	r3, [r2, #68]	; 0x44
 8003eaa:	4b43      	ldr	r3, [pc, #268]	; (8003fb8 <HAL_TIM_Base_MspInit+0x130>)
 8003eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8003eb6:	e076      	b.n	8003fa6 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM3)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a3f      	ldr	r2, [pc, #252]	; (8003fbc <HAL_TIM_Base_MspInit+0x134>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d10e      	bne.n	8003ee0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	623b      	str	r3, [r7, #32]
 8003ec6:	4b3c      	ldr	r3, [pc, #240]	; (8003fb8 <HAL_TIM_Base_MspInit+0x130>)
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	4a3b      	ldr	r2, [pc, #236]	; (8003fb8 <HAL_TIM_Base_MspInit+0x130>)
 8003ecc:	f043 0302 	orr.w	r3, r3, #2
 8003ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ed2:	4b39      	ldr	r3, [pc, #228]	; (8003fb8 <HAL_TIM_Base_MspInit+0x130>)
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	623b      	str	r3, [r7, #32]
 8003edc:	6a3b      	ldr	r3, [r7, #32]
}
 8003ede:	e062      	b.n	8003fa6 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM4)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a36      	ldr	r2, [pc, #216]	; (8003fc0 <HAL_TIM_Base_MspInit+0x138>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d10e      	bne.n	8003f08 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003eea:	2300      	movs	r3, #0
 8003eec:	61fb      	str	r3, [r7, #28]
 8003eee:	4b32      	ldr	r3, [pc, #200]	; (8003fb8 <HAL_TIM_Base_MspInit+0x130>)
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef2:	4a31      	ldr	r2, [pc, #196]	; (8003fb8 <HAL_TIM_Base_MspInit+0x130>)
 8003ef4:	f043 0304 	orr.w	r3, r3, #4
 8003ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8003efa:	4b2f      	ldr	r3, [pc, #188]	; (8003fb8 <HAL_TIM_Base_MspInit+0x130>)
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	f003 0304 	and.w	r3, r3, #4
 8003f02:	61fb      	str	r3, [r7, #28]
 8003f04:	69fb      	ldr	r3, [r7, #28]
}
 8003f06:	e04e      	b.n	8003fa6 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM5)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a2d      	ldr	r2, [pc, #180]	; (8003fc4 <HAL_TIM_Base_MspInit+0x13c>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d10e      	bne.n	8003f30 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003f12:	2300      	movs	r3, #0
 8003f14:	61bb      	str	r3, [r7, #24]
 8003f16:	4b28      	ldr	r3, [pc, #160]	; (8003fb8 <HAL_TIM_Base_MspInit+0x130>)
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	4a27      	ldr	r2, [pc, #156]	; (8003fb8 <HAL_TIM_Base_MspInit+0x130>)
 8003f1c:	f043 0308 	orr.w	r3, r3, #8
 8003f20:	6413      	str	r3, [r2, #64]	; 0x40
 8003f22:	4b25      	ldr	r3, [pc, #148]	; (8003fb8 <HAL_TIM_Base_MspInit+0x130>)
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	f003 0308 	and.w	r3, r3, #8
 8003f2a:	61bb      	str	r3, [r7, #24]
 8003f2c:	69bb      	ldr	r3, [r7, #24]
}
 8003f2e:	e03a      	b.n	8003fa6 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM8)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a24      	ldr	r2, [pc, #144]	; (8003fc8 <HAL_TIM_Base_MspInit+0x140>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d10e      	bne.n	8003f58 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	617b      	str	r3, [r7, #20]
 8003f3e:	4b1e      	ldr	r3, [pc, #120]	; (8003fb8 <HAL_TIM_Base_MspInit+0x130>)
 8003f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f42:	4a1d      	ldr	r2, [pc, #116]	; (8003fb8 <HAL_TIM_Base_MspInit+0x130>)
 8003f44:	f043 0302 	orr.w	r3, r3, #2
 8003f48:	6453      	str	r3, [r2, #68]	; 0x44
 8003f4a:	4b1b      	ldr	r3, [pc, #108]	; (8003fb8 <HAL_TIM_Base_MspInit+0x130>)
 8003f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	617b      	str	r3, [r7, #20]
 8003f54:	697b      	ldr	r3, [r7, #20]
}
 8003f56:	e026      	b.n	8003fa6 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM9)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a1b      	ldr	r2, [pc, #108]	; (8003fcc <HAL_TIM_Base_MspInit+0x144>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d10e      	bne.n	8003f80 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003f62:	2300      	movs	r3, #0
 8003f64:	613b      	str	r3, [r7, #16]
 8003f66:	4b14      	ldr	r3, [pc, #80]	; (8003fb8 <HAL_TIM_Base_MspInit+0x130>)
 8003f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f6a:	4a13      	ldr	r2, [pc, #76]	; (8003fb8 <HAL_TIM_Base_MspInit+0x130>)
 8003f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f70:	6453      	str	r3, [r2, #68]	; 0x44
 8003f72:	4b11      	ldr	r3, [pc, #68]	; (8003fb8 <HAL_TIM_Base_MspInit+0x130>)
 8003f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f7a:	613b      	str	r3, [r7, #16]
 8003f7c:	693b      	ldr	r3, [r7, #16]
}
 8003f7e:	e012      	b.n	8003fa6 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM12)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a12      	ldr	r2, [pc, #72]	; (8003fd0 <HAL_TIM_Base_MspInit+0x148>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d10d      	bne.n	8003fa6 <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60fb      	str	r3, [r7, #12]
 8003f8e:	4b0a      	ldr	r3, [pc, #40]	; (8003fb8 <HAL_TIM_Base_MspInit+0x130>)
 8003f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f92:	4a09      	ldr	r2, [pc, #36]	; (8003fb8 <HAL_TIM_Base_MspInit+0x130>)
 8003f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f98:	6413      	str	r3, [r2, #64]	; 0x40
 8003f9a:	4b07      	ldr	r3, [pc, #28]	; (8003fb8 <HAL_TIM_Base_MspInit+0x130>)
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa2:	60fb      	str	r3, [r7, #12]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
}
 8003fa6:	bf00      	nop
 8003fa8:	372c      	adds	r7, #44	; 0x2c
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	40010000 	.word	0x40010000
 8003fb8:	40023800 	.word	0x40023800
 8003fbc:	40000400 	.word	0x40000400
 8003fc0:	40000800 	.word	0x40000800
 8003fc4:	40000c00 	.word	0x40000c00
 8003fc8:	40010400 	.word	0x40010400
 8003fcc:	40014000 	.word	0x40014000
 8003fd0:	40001800 	.word	0x40001800

08003fd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b090      	sub	sp, #64	; 0x40
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	601a      	str	r2, [r3, #0]
 8003fe4:	605a      	str	r2, [r3, #4]
 8003fe6:	609a      	str	r2, [r3, #8]
 8003fe8:	60da      	str	r2, [r3, #12]
 8003fea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a9e      	ldr	r2, [pc, #632]	; (800426c <HAL_TIM_MspPostInit+0x298>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d11f      	bne.n	8004036 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ffa:	4b9d      	ldr	r3, [pc, #628]	; (8004270 <HAL_TIM_MspPostInit+0x29c>)
 8003ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffe:	4a9c      	ldr	r2, [pc, #624]	; (8004270 <HAL_TIM_MspPostInit+0x29c>)
 8004000:	f043 0310 	orr.w	r3, r3, #16
 8004004:	6313      	str	r3, [r2, #48]	; 0x30
 8004006:	4b9a      	ldr	r3, [pc, #616]	; (8004270 <HAL_TIM_MspPostInit+0x29c>)
 8004008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400a:	f003 0310 	and.w	r3, r3, #16
 800400e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004010:	6abb      	ldr	r3, [r7, #40]	; 0x28
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LF_CH1_Pin|LF_CH2_Pin|LB_CH1_Pin|LB_CH2_Pin;
 8004012:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8004016:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004018:	2302      	movs	r3, #2
 800401a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800401c:	2300      	movs	r3, #0
 800401e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004020:	2300      	movs	r3, #0
 8004022:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004024:	2301      	movs	r3, #1
 8004026:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004028:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800402c:	4619      	mov	r1, r3
 800402e:	4891      	ldr	r0, [pc, #580]	; (8004274 <HAL_TIM_MspPostInit+0x2a0>)
 8004030:	f000 fd14 	bl	8004a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8004034:	e115      	b.n	8004262 <HAL_TIM_MspPostInit+0x28e>
  else if(htim->Instance==TIM3)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a8f      	ldr	r2, [pc, #572]	; (8004278 <HAL_TIM_MspPostInit+0x2a4>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d15b      	bne.n	80040f8 <HAL_TIM_MspPostInit+0x124>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004040:	2300      	movs	r3, #0
 8004042:	627b      	str	r3, [r7, #36]	; 0x24
 8004044:	4b8a      	ldr	r3, [pc, #552]	; (8004270 <HAL_TIM_MspPostInit+0x29c>)
 8004046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004048:	4a89      	ldr	r2, [pc, #548]	; (8004270 <HAL_TIM_MspPostInit+0x29c>)
 800404a:	f043 0301 	orr.w	r3, r3, #1
 800404e:	6313      	str	r3, [r2, #48]	; 0x30
 8004050:	4b87      	ldr	r3, [pc, #540]	; (8004270 <HAL_TIM_MspPostInit+0x29c>)
 8004052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	627b      	str	r3, [r7, #36]	; 0x24
 800405a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800405c:	2300      	movs	r3, #0
 800405e:	623b      	str	r3, [r7, #32]
 8004060:	4b83      	ldr	r3, [pc, #524]	; (8004270 <HAL_TIM_MspPostInit+0x29c>)
 8004062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004064:	4a82      	ldr	r2, [pc, #520]	; (8004270 <HAL_TIM_MspPostInit+0x29c>)
 8004066:	f043 0302 	orr.w	r3, r3, #2
 800406a:	6313      	str	r3, [r2, #48]	; 0x30
 800406c:	4b80      	ldr	r3, [pc, #512]	; (8004270 <HAL_TIM_MspPostInit+0x29c>)
 800406e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	623b      	str	r3, [r7, #32]
 8004076:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004078:	2300      	movs	r3, #0
 800407a:	61fb      	str	r3, [r7, #28]
 800407c:	4b7c      	ldr	r3, [pc, #496]	; (8004270 <HAL_TIM_MspPostInit+0x29c>)
 800407e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004080:	4a7b      	ldr	r2, [pc, #492]	; (8004270 <HAL_TIM_MspPostInit+0x29c>)
 8004082:	f043 0304 	orr.w	r3, r3, #4
 8004086:	6313      	str	r3, [r2, #48]	; 0x30
 8004088:	4b79      	ldr	r3, [pc, #484]	; (8004270 <HAL_TIM_MspPostInit+0x29c>)
 800408a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408c:	f003 0304 	and.w	r3, r3, #4
 8004090:	61fb      	str	r3, [r7, #28]
 8004092:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = RF_CH1_Pin|RF_CH2_Pin;
 8004094:	23c0      	movs	r3, #192	; 0xc0
 8004096:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004098:	2302      	movs	r3, #2
 800409a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800409c:	2300      	movs	r3, #0
 800409e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040a0:	2300      	movs	r3, #0
 80040a2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80040a4:	2302      	movs	r3, #2
 80040a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040ac:	4619      	mov	r1, r3
 80040ae:	4873      	ldr	r0, [pc, #460]	; (800427c <HAL_TIM_MspPostInit+0x2a8>)
 80040b0:	f000 fcd4 	bl	8004a5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RB_CH2_Pin;
 80040b4:	2302      	movs	r3, #2
 80040b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040b8:	2302      	movs	r3, #2
 80040ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040bc:	2300      	movs	r3, #0
 80040be:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040c0:	2300      	movs	r3, #0
 80040c2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80040c4:	2302      	movs	r3, #2
 80040c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(RB_CH2_GPIO_Port, &GPIO_InitStruct);
 80040c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040cc:	4619      	mov	r1, r3
 80040ce:	486c      	ldr	r0, [pc, #432]	; (8004280 <HAL_TIM_MspPostInit+0x2ac>)
 80040d0:	f000 fcc4 	bl	8004a5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RB_CH1_Pin;
 80040d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040da:	2302      	movs	r3, #2
 80040dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040de:	2300      	movs	r3, #0
 80040e0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040e2:	2300      	movs	r3, #0
 80040e4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80040e6:	2302      	movs	r3, #2
 80040e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(RB_CH1_GPIO_Port, &GPIO_InitStruct);
 80040ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040ee:	4619      	mov	r1, r3
 80040f0:	4864      	ldr	r0, [pc, #400]	; (8004284 <HAL_TIM_MspPostInit+0x2b0>)
 80040f2:	f000 fcb3 	bl	8004a5c <HAL_GPIO_Init>
}
 80040f6:	e0b4      	b.n	8004262 <HAL_TIM_MspPostInit+0x28e>
  else if(htim->Instance==TIM4)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a62      	ldr	r2, [pc, #392]	; (8004288 <HAL_TIM_MspPostInit+0x2b4>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d11f      	bne.n	8004142 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004102:	2300      	movs	r3, #0
 8004104:	61bb      	str	r3, [r7, #24]
 8004106:	4b5a      	ldr	r3, [pc, #360]	; (8004270 <HAL_TIM_MspPostInit+0x29c>)
 8004108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410a:	4a59      	ldr	r2, [pc, #356]	; (8004270 <HAL_TIM_MspPostInit+0x29c>)
 800410c:	f043 0308 	orr.w	r3, r3, #8
 8004110:	6313      	str	r3, [r2, #48]	; 0x30
 8004112:	4b57      	ldr	r3, [pc, #348]	; (8004270 <HAL_TIM_MspPostInit+0x29c>)
 8004114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004116:	f003 0308 	and.w	r3, r3, #8
 800411a:	61bb      	str	r3, [r7, #24]
 800411c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = M_PELONTAR_CH1_Pin|M_PELONTAR_CH2_Pin|M_BOLA_CH1_Pin|M_BOLA_CH2_Pin;
 800411e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8004122:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004124:	2302      	movs	r3, #2
 8004126:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004128:	2300      	movs	r3, #0
 800412a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800412c:	2300      	movs	r3, #0
 800412e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004130:	2302      	movs	r3, #2
 8004132:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004134:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004138:	4619      	mov	r1, r3
 800413a:	4854      	ldr	r0, [pc, #336]	; (800428c <HAL_TIM_MspPostInit+0x2b8>)
 800413c:	f000 fc8e 	bl	8004a5c <HAL_GPIO_Init>
}
 8004140:	e08f      	b.n	8004262 <HAL_TIM_MspPostInit+0x28e>
  else if(htim->Instance==TIM5)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a52      	ldr	r2, [pc, #328]	; (8004290 <HAL_TIM_MspPostInit+0x2bc>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d11e      	bne.n	800418a <HAL_TIM_MspPostInit+0x1b6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800414c:	2300      	movs	r3, #0
 800414e:	617b      	str	r3, [r7, #20]
 8004150:	4b47      	ldr	r3, [pc, #284]	; (8004270 <HAL_TIM_MspPostInit+0x29c>)
 8004152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004154:	4a46      	ldr	r2, [pc, #280]	; (8004270 <HAL_TIM_MspPostInit+0x29c>)
 8004156:	f043 0301 	orr.w	r3, r3, #1
 800415a:	6313      	str	r3, [r2, #48]	; 0x30
 800415c:	4b44      	ldr	r3, [pc, #272]	; (8004270 <HAL_TIM_MspPostInit+0x29c>)
 800415e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004160:	f003 0301 	and.w	r3, r3, #1
 8004164:	617b      	str	r3, [r7, #20]
 8004166:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = M_EXDL_CH1_Pin|M_EXDL_CH2_Pin;
 8004168:	2303      	movs	r3, #3
 800416a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800416c:	2302      	movs	r3, #2
 800416e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004170:	2300      	movs	r3, #0
 8004172:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004174:	2300      	movs	r3, #0
 8004176:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004178:	2302      	movs	r3, #2
 800417a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800417c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004180:	4619      	mov	r1, r3
 8004182:	483e      	ldr	r0, [pc, #248]	; (800427c <HAL_TIM_MspPostInit+0x2a8>)
 8004184:	f000 fc6a 	bl	8004a5c <HAL_GPIO_Init>
}
 8004188:	e06b      	b.n	8004262 <HAL_TIM_MspPostInit+0x28e>
  else if(htim->Instance==TIM8)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a41      	ldr	r2, [pc, #260]	; (8004294 <HAL_TIM_MspPostInit+0x2c0>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d11e      	bne.n	80041d2 <HAL_TIM_MspPostInit+0x1fe>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004194:	2300      	movs	r3, #0
 8004196:	613b      	str	r3, [r7, #16]
 8004198:	4b35      	ldr	r3, [pc, #212]	; (8004270 <HAL_TIM_MspPostInit+0x29c>)
 800419a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419c:	4a34      	ldr	r2, [pc, #208]	; (8004270 <HAL_TIM_MspPostInit+0x29c>)
 800419e:	f043 0304 	orr.w	r3, r3, #4
 80041a2:	6313      	str	r3, [r2, #48]	; 0x30
 80041a4:	4b32      	ldr	r3, [pc, #200]	; (8004270 <HAL_TIM_MspPostInit+0x29c>)
 80041a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	613b      	str	r3, [r7, #16]
 80041ae:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = M_EXDR_CH1_Pin|M_EXDR_CH2_Pin;
 80041b0:	23c0      	movs	r3, #192	; 0xc0
 80041b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041b4:	2302      	movs	r3, #2
 80041b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b8:	2300      	movs	r3, #0
 80041ba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041bc:	2300      	movs	r3, #0
 80041be:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80041c0:	2303      	movs	r3, #3
 80041c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041c8:	4619      	mov	r1, r3
 80041ca:	482e      	ldr	r0, [pc, #184]	; (8004284 <HAL_TIM_MspPostInit+0x2b0>)
 80041cc:	f000 fc46 	bl	8004a5c <HAL_GPIO_Init>
}
 80041d0:	e047      	b.n	8004262 <HAL_TIM_MspPostInit+0x28e>
  else if(htim->Instance==TIM9)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a30      	ldr	r2, [pc, #192]	; (8004298 <HAL_TIM_MspPostInit+0x2c4>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d11e      	bne.n	800421a <HAL_TIM_MspPostInit+0x246>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80041dc:	2300      	movs	r3, #0
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	4b23      	ldr	r3, [pc, #140]	; (8004270 <HAL_TIM_MspPostInit+0x29c>)
 80041e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e4:	4a22      	ldr	r2, [pc, #136]	; (8004270 <HAL_TIM_MspPostInit+0x29c>)
 80041e6:	f043 0310 	orr.w	r3, r3, #16
 80041ea:	6313      	str	r3, [r2, #48]	; 0x30
 80041ec:	4b20      	ldr	r3, [pc, #128]	; (8004270 <HAL_TIM_MspPostInit+0x29c>)
 80041ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f0:	f003 0310 	and.w	r3, r3, #16
 80041f4:	60fb      	str	r3, [r7, #12]
 80041f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M_PADI_CH1_Pin|M_PADI_CH2_Pin;
 80041f8:	2360      	movs	r3, #96	; 0x60
 80041fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041fc:	2302      	movs	r3, #2
 80041fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004200:	2300      	movs	r3, #0
 8004202:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004204:	2300      	movs	r3, #0
 8004206:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8004208:	2303      	movs	r3, #3
 800420a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800420c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004210:	4619      	mov	r1, r3
 8004212:	4818      	ldr	r0, [pc, #96]	; (8004274 <HAL_TIM_MspPostInit+0x2a0>)
 8004214:	f000 fc22 	bl	8004a5c <HAL_GPIO_Init>
}
 8004218:	e023      	b.n	8004262 <HAL_TIM_MspPostInit+0x28e>
  else if(htim->Instance==TIM12)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a1f      	ldr	r2, [pc, #124]	; (800429c <HAL_TIM_MspPostInit+0x2c8>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d11e      	bne.n	8004262 <HAL_TIM_MspPostInit+0x28e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004224:	2300      	movs	r3, #0
 8004226:	60bb      	str	r3, [r7, #8]
 8004228:	4b11      	ldr	r3, [pc, #68]	; (8004270 <HAL_TIM_MspPostInit+0x29c>)
 800422a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422c:	4a10      	ldr	r2, [pc, #64]	; (8004270 <HAL_TIM_MspPostInit+0x29c>)
 800422e:	f043 0302 	orr.w	r3, r3, #2
 8004232:	6313      	str	r3, [r2, #48]	; 0x30
 8004234:	4b0e      	ldr	r3, [pc, #56]	; (8004270 <HAL_TIM_MspPostInit+0x29c>)
 8004236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	60bb      	str	r3, [r7, #8]
 800423e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ESC1_Pin|ESC2_Pin;
 8004240:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004244:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004246:	2302      	movs	r3, #2
 8004248:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800424a:	2300      	movs	r3, #0
 800424c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800424e:	2300      	movs	r3, #0
 8004250:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8004252:	2309      	movs	r3, #9
 8004254:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004256:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800425a:	4619      	mov	r1, r3
 800425c:	4808      	ldr	r0, [pc, #32]	; (8004280 <HAL_TIM_MspPostInit+0x2ac>)
 800425e:	f000 fbfd 	bl	8004a5c <HAL_GPIO_Init>
}
 8004262:	bf00      	nop
 8004264:	3740      	adds	r7, #64	; 0x40
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	40010000 	.word	0x40010000
 8004270:	40023800 	.word	0x40023800
 8004274:	40021000 	.word	0x40021000
 8004278:	40000400 	.word	0x40000400
 800427c:	40020000 	.word	0x40020000
 8004280:	40020400 	.word	0x40020400
 8004284:	40020800 	.word	0x40020800
 8004288:	40000800 	.word	0x40000800
 800428c:	40020c00 	.word	0x40020c00
 8004290:	40000c00 	.word	0x40000c00
 8004294:	40010400 	.word	0x40010400
 8004298:	40014000 	.word	0x40014000
 800429c:	40001800 	.word	0x40001800

080042a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b08a      	sub	sp, #40	; 0x28
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042a8:	f107 0314 	add.w	r3, r7, #20
 80042ac:	2200      	movs	r2, #0
 80042ae:	601a      	str	r2, [r3, #0]
 80042b0:	605a      	str	r2, [r3, #4]
 80042b2:	609a      	str	r2, [r3, #8]
 80042b4:	60da      	str	r2, [r3, #12]
 80042b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a1d      	ldr	r2, [pc, #116]	; (8004334 <HAL_UART_MspInit+0x94>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d134      	bne.n	800432c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80042c2:	2300      	movs	r3, #0
 80042c4:	613b      	str	r3, [r7, #16]
 80042c6:	4b1c      	ldr	r3, [pc, #112]	; (8004338 <HAL_UART_MspInit+0x98>)
 80042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ca:	4a1b      	ldr	r2, [pc, #108]	; (8004338 <HAL_UART_MspInit+0x98>)
 80042cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042d0:	6413      	str	r3, [r2, #64]	; 0x40
 80042d2:	4b19      	ldr	r3, [pc, #100]	; (8004338 <HAL_UART_MspInit+0x98>)
 80042d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042da:	613b      	str	r3, [r7, #16]
 80042dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80042de:	2300      	movs	r3, #0
 80042e0:	60fb      	str	r3, [r7, #12]
 80042e2:	4b15      	ldr	r3, [pc, #84]	; (8004338 <HAL_UART_MspInit+0x98>)
 80042e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e6:	4a14      	ldr	r2, [pc, #80]	; (8004338 <HAL_UART_MspInit+0x98>)
 80042e8:	f043 0308 	orr.w	r3, r3, #8
 80042ec:	6313      	str	r3, [r2, #48]	; 0x30
 80042ee:	4b12      	ldr	r3, [pc, #72]	; (8004338 <HAL_UART_MspInit+0x98>)
 80042f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f2:	f003 0308 	and.w	r3, r3, #8
 80042f6:	60fb      	str	r3, [r7, #12]
 80042f8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80042fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80042fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004300:	2302      	movs	r3, #2
 8004302:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004304:	2300      	movs	r3, #0
 8004306:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004308:	2303      	movs	r3, #3
 800430a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800430c:	2307      	movs	r3, #7
 800430e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004310:	f107 0314 	add.w	r3, r7, #20
 8004314:	4619      	mov	r1, r3
 8004316:	4809      	ldr	r0, [pc, #36]	; (800433c <HAL_UART_MspInit+0x9c>)
 8004318:	f000 fba0 	bl	8004a5c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800431c:	2200      	movs	r2, #0
 800431e:	2105      	movs	r1, #5
 8004320:	2027      	movs	r0, #39	; 0x27
 8004322:	f000 fadf 	bl	80048e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004326:	2027      	movs	r0, #39	; 0x27
 8004328:	f000 faf8 	bl	800491c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800432c:	bf00      	nop
 800432e:	3728      	adds	r7, #40	; 0x28
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	40004800 	.word	0x40004800
 8004338:	40023800 	.word	0x40023800
 800433c:	40020c00 	.word	0x40020c00

08004340 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b08e      	sub	sp, #56	; 0x38
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004348:	2300      	movs	r3, #0
 800434a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800434c:	2300      	movs	r3, #0
 800434e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8004350:	2300      	movs	r3, #0
 8004352:	60fb      	str	r3, [r7, #12]
 8004354:	4b33      	ldr	r3, [pc, #204]	; (8004424 <HAL_InitTick+0xe4>)
 8004356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004358:	4a32      	ldr	r2, [pc, #200]	; (8004424 <HAL_InitTick+0xe4>)
 800435a:	f043 0320 	orr.w	r3, r3, #32
 800435e:	6413      	str	r3, [r2, #64]	; 0x40
 8004360:	4b30      	ldr	r3, [pc, #192]	; (8004424 <HAL_InitTick+0xe4>)
 8004362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004364:	f003 0320 	and.w	r3, r3, #32
 8004368:	60fb      	str	r3, [r7, #12]
 800436a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800436c:	f107 0210 	add.w	r2, r7, #16
 8004370:	f107 0314 	add.w	r3, r7, #20
 8004374:	4611      	mov	r1, r2
 8004376:	4618      	mov	r0, r3
 8004378:	f001 fa68 	bl	800584c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800437c:	6a3b      	ldr	r3, [r7, #32]
 800437e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004382:	2b00      	cmp	r3, #0
 8004384:	d103      	bne.n	800438e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004386:	f001 fa39 	bl	80057fc <HAL_RCC_GetPCLK1Freq>
 800438a:	6378      	str	r0, [r7, #52]	; 0x34
 800438c:	e004      	b.n	8004398 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800438e:	f001 fa35 	bl	80057fc <HAL_RCC_GetPCLK1Freq>
 8004392:	4603      	mov	r3, r0
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800439a:	4a23      	ldr	r2, [pc, #140]	; (8004428 <HAL_InitTick+0xe8>)
 800439c:	fba2 2303 	umull	r2, r3, r2, r3
 80043a0:	0c9b      	lsrs	r3, r3, #18
 80043a2:	3b01      	subs	r3, #1
 80043a4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80043a6:	4b21      	ldr	r3, [pc, #132]	; (800442c <HAL_InitTick+0xec>)
 80043a8:	4a21      	ldr	r2, [pc, #132]	; (8004430 <HAL_InitTick+0xf0>)
 80043aa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80043ac:	4b1f      	ldr	r3, [pc, #124]	; (800442c <HAL_InitTick+0xec>)
 80043ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80043b2:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80043b4:	4a1d      	ldr	r2, [pc, #116]	; (800442c <HAL_InitTick+0xec>)
 80043b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b8:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80043ba:	4b1c      	ldr	r3, [pc, #112]	; (800442c <HAL_InitTick+0xec>)
 80043bc:	2200      	movs	r2, #0
 80043be:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043c0:	4b1a      	ldr	r3, [pc, #104]	; (800442c <HAL_InitTick+0xec>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043c6:	4b19      	ldr	r3, [pc, #100]	; (800442c <HAL_InitTick+0xec>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 80043cc:	4817      	ldr	r0, [pc, #92]	; (800442c <HAL_InitTick+0xec>)
 80043ce:	f002 f825 	bl	800641c <HAL_TIM_Base_Init>
 80043d2:	4603      	mov	r3, r0
 80043d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80043d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d11b      	bne.n	8004418 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 80043e0:	4812      	ldr	r0, [pc, #72]	; (800442c <HAL_InitTick+0xec>)
 80043e2:	f002 f86b 	bl	80064bc <HAL_TIM_Base_Start_IT>
 80043e6:	4603      	mov	r3, r0
 80043e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80043ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d111      	bne.n	8004418 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80043f4:	2037      	movs	r0, #55	; 0x37
 80043f6:	f000 fa91 	bl	800491c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b0f      	cmp	r3, #15
 80043fe:	d808      	bhi.n	8004412 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8004400:	2200      	movs	r2, #0
 8004402:	6879      	ldr	r1, [r7, #4]
 8004404:	2037      	movs	r0, #55	; 0x37
 8004406:	f000 fa6d 	bl	80048e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800440a:	4a0a      	ldr	r2, [pc, #40]	; (8004434 <HAL_InitTick+0xf4>)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6013      	str	r3, [r2, #0]
 8004410:	e002      	b.n	8004418 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004418:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800441c:	4618      	mov	r0, r3
 800441e:	3738      	adds	r7, #56	; 0x38
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40023800 	.word	0x40023800
 8004428:	431bde83 	.word	0x431bde83
 800442c:	200007fc 	.word	0x200007fc
 8004430:	40001400 	.word	0x40001400
 8004434:	20000120 	.word	0x20000120

08004438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004438:	b480      	push	{r7}
 800443a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800443c:	e7fe      	b.n	800443c <NMI_Handler+0x4>

0800443e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800443e:	b480      	push	{r7}
 8004440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004442:	e7fe      	b.n	8004442 <HardFault_Handler+0x4>

08004444 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004444:	b480      	push	{r7}
 8004446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004448:	e7fe      	b.n	8004448 <MemManage_Handler+0x4>

0800444a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800444a:	b480      	push	{r7}
 800444c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800444e:	e7fe      	b.n	800444e <BusFault_Handler+0x4>

08004450 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004450:	b480      	push	{r7}
 8004452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004454:	e7fe      	b.n	8004454 <UsageFault_Handler+0x4>

08004456 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004456:	b480      	push	{r7}
 8004458:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800445a:	bf00      	nop
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LS_2_Pin);
 8004468:	2001      	movs	r0, #1
 800446a:	f000 fcef 	bl	8004e4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800446e:	bf00      	nop
 8004470:	bd80      	pop	{r7, pc}

08004472 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC4_A_Pin);
 8004476:	2002      	movs	r0, #2
 8004478:	f000 fce8 	bl	8004e4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800447c:	bf00      	nop
 800447e:	bd80      	pop	{r7, pc}

08004480 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC4_B_Pin);
 8004484:	2004      	movs	r0, #4
 8004486:	f000 fce1 	bl	8004e4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800448a:	bf00      	nop
 800448c:	bd80      	pop	{r7, pc}

0800448e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800448e:	b580      	push	{r7, lr}
 8004490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC3_B_Pin);
 8004492:	2008      	movs	r0, #8
 8004494:	f000 fcda 	bl	8004e4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004498:	bf00      	nop
 800449a:	bd80      	pop	{r7, pc}

0800449c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LS_5_Pin);
 80044a0:	2010      	movs	r0, #16
 80044a2:	f000 fcd3 	bl	8004e4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80044a6:	bf00      	nop
 80044a8:	bd80      	pop	{r7, pc}

080044aa <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LS_3_Pin);
 80044ae:	2020      	movs	r0, #32
 80044b0:	f000 fccc 	bl	8004e4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LS_1_Pin);
 80044b4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80044b8:	f000 fcc8 	bl	8004e4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80044bc:	bf00      	nop
 80044be:	bd80      	pop	{r7, pc}

080044c0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80044c4:	4802      	ldr	r0, [pc, #8]	; (80044d0 <USART3_IRQHandler+0x10>)
 80044c6:	f003 f8c9 	bl	800765c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80044ca:	bf00      	nop
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	200006b8 	.word	0x200006b8

080044d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LS_4_Pin);
 80044d8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80044dc:	f000 fcb6 	bl	8004e4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC1_A_Pin);
 80044e0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80044e4:	f000 fcb2 	bl	8004e4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC2_A_Pin);
 80044e8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80044ec:	f000 fcae 	bl	8004e4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC3_A_Pin);
 80044f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80044f4:	f000 fcaa 	bl	8004e4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC1_B_Pin);
 80044f8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80044fc:	f000 fca6 	bl	8004e4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC2_B_Pin);
 8004500:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004504:	f000 fca2 	bl	8004e4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004508:	bf00      	nop
 800450a:	bd80      	pop	{r7, pc}

0800450c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004510:	4802      	ldr	r0, [pc, #8]	; (800451c <TIM7_IRQHandler+0x10>)
 8004512:	f002 f965 	bl	80067e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004516:	bf00      	nop
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	200007fc 	.word	0x200007fc

08004520 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b086      	sub	sp, #24
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800452c:	2300      	movs	r3, #0
 800452e:	617b      	str	r3, [r7, #20]
 8004530:	e00a      	b.n	8004548 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004532:	f3af 8000 	nop.w
 8004536:	4601      	mov	r1, r0
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	1c5a      	adds	r2, r3, #1
 800453c:	60ba      	str	r2, [r7, #8]
 800453e:	b2ca      	uxtb	r2, r1
 8004540:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	3301      	adds	r3, #1
 8004546:	617b      	str	r3, [r7, #20]
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	429a      	cmp	r2, r3
 800454e:	dbf0      	blt.n	8004532 <_read+0x12>
  }

  return len;
 8004550:	687b      	ldr	r3, [r7, #4]
}
 8004552:	4618      	mov	r0, r3
 8004554:	3718      	adds	r7, #24
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <_close>:
  }
  return len;
}

int _close(int file)
{
 800455a:	b480      	push	{r7}
 800455c:	b083      	sub	sp, #12
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004562:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004566:	4618      	mov	r0, r3
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004572:	b480      	push	{r7}
 8004574:	b083      	sub	sp, #12
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
 800457a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004582:	605a      	str	r2, [r3, #4]
  return 0;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <_isatty>:

int _isatty(int file)
{
 8004592:	b480      	push	{r7}
 8004594:	b083      	sub	sp, #12
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800459a:	2301      	movs	r3, #1
}
 800459c:	4618      	mov	r0, r3
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3714      	adds	r7, #20
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
	...

080045c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80045cc:	4a14      	ldr	r2, [pc, #80]	; (8004620 <_sbrk+0x5c>)
 80045ce:	4b15      	ldr	r3, [pc, #84]	; (8004624 <_sbrk+0x60>)
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80045d8:	4b13      	ldr	r3, [pc, #76]	; (8004628 <_sbrk+0x64>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d102      	bne.n	80045e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80045e0:	4b11      	ldr	r3, [pc, #68]	; (8004628 <_sbrk+0x64>)
 80045e2:	4a12      	ldr	r2, [pc, #72]	; (800462c <_sbrk+0x68>)
 80045e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80045e6:	4b10      	ldr	r3, [pc, #64]	; (8004628 <_sbrk+0x64>)
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4413      	add	r3, r2
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d207      	bcs.n	8004604 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80045f4:	f005 fb2e 	bl	8009c54 <__errno>
 80045f8:	4603      	mov	r3, r0
 80045fa:	220c      	movs	r2, #12
 80045fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80045fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004602:	e009      	b.n	8004618 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004604:	4b08      	ldr	r3, [pc, #32]	; (8004628 <_sbrk+0x64>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800460a:	4b07      	ldr	r3, [pc, #28]	; (8004628 <_sbrk+0x64>)
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4413      	add	r3, r2
 8004612:	4a05      	ldr	r2, [pc, #20]	; (8004628 <_sbrk+0x64>)
 8004614:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004616:	68fb      	ldr	r3, [r7, #12]
}
 8004618:	4618      	mov	r0, r3
 800461a:	3718      	adds	r7, #24
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	20030000 	.word	0x20030000
 8004624:	00000400 	.word	0x00000400
 8004628:	20000844 	.word	0x20000844
 800462c:	200046f0 	.word	0x200046f0

08004630 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004630:	b480      	push	{r7}
 8004632:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004634:	4b06      	ldr	r3, [pc, #24]	; (8004650 <SystemInit+0x20>)
 8004636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800463a:	4a05      	ldr	r2, [pc, #20]	; (8004650 <SystemInit+0x20>)
 800463c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004640:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004644:	bf00      	nop
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	e000ed00 	.word	0xe000ed00

08004654 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004654:	f8df d034 	ldr.w	sp, [pc, #52]	; 800468c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004658:	480d      	ldr	r0, [pc, #52]	; (8004690 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800465a:	490e      	ldr	r1, [pc, #56]	; (8004694 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800465c:	4a0e      	ldr	r2, [pc, #56]	; (8004698 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800465e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004660:	e002      	b.n	8004668 <LoopCopyDataInit>

08004662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004666:	3304      	adds	r3, #4

08004668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800466a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800466c:	d3f9      	bcc.n	8004662 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800466e:	4a0b      	ldr	r2, [pc, #44]	; (800469c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004670:	4c0b      	ldr	r4, [pc, #44]	; (80046a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004674:	e001      	b.n	800467a <LoopFillZerobss>

08004676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004678:	3204      	adds	r2, #4

0800467a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800467a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800467c:	d3fb      	bcc.n	8004676 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800467e:	f7ff ffd7 	bl	8004630 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004682:	f005 faed 	bl	8009c60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004686:	f7fe f829 	bl	80026dc <main>
  bx  lr    
 800468a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800468c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8004690:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004694:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 8004698:	0800a94c 	.word	0x0800a94c
  ldr r2, =_sbss
 800469c:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 80046a0:	200046ec 	.word	0x200046ec

080046a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80046a4:	e7fe      	b.n	80046a4 <ADC_IRQHandler>
	...

080046a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80046ac:	4b0e      	ldr	r3, [pc, #56]	; (80046e8 <HAL_Init+0x40>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a0d      	ldr	r2, [pc, #52]	; (80046e8 <HAL_Init+0x40>)
 80046b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80046b8:	4b0b      	ldr	r3, [pc, #44]	; (80046e8 <HAL_Init+0x40>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a0a      	ldr	r2, [pc, #40]	; (80046e8 <HAL_Init+0x40>)
 80046be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80046c4:	4b08      	ldr	r3, [pc, #32]	; (80046e8 <HAL_Init+0x40>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a07      	ldr	r2, [pc, #28]	; (80046e8 <HAL_Init+0x40>)
 80046ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046d0:	2003      	movs	r0, #3
 80046d2:	f000 f8fc 	bl	80048ce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80046d6:	200f      	movs	r0, #15
 80046d8:	f7ff fe32 	bl	8004340 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80046dc:	f7ff fb60 	bl	8003da0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	40023c00 	.word	0x40023c00

080046ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046ec:	b480      	push	{r7}
 80046ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80046f0:	4b06      	ldr	r3, [pc, #24]	; (800470c <HAL_IncTick+0x20>)
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	461a      	mov	r2, r3
 80046f6:	4b06      	ldr	r3, [pc, #24]	; (8004710 <HAL_IncTick+0x24>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4413      	add	r3, r2
 80046fc:	4a04      	ldr	r2, [pc, #16]	; (8004710 <HAL_IncTick+0x24>)
 80046fe:	6013      	str	r3, [r2, #0]
}
 8004700:	bf00      	nop
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	20000124 	.word	0x20000124
 8004710:	20000848 	.word	0x20000848

08004714 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004714:	b480      	push	{r7}
 8004716:	af00      	add	r7, sp, #0
  return uwTick;
 8004718:	4b03      	ldr	r3, [pc, #12]	; (8004728 <HAL_GetTick+0x14>)
 800471a:	681b      	ldr	r3, [r3, #0]
}
 800471c:	4618      	mov	r0, r3
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	20000848 	.word	0x20000848

0800472c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004734:	f7ff ffee 	bl	8004714 <HAL_GetTick>
 8004738:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004744:	d005      	beq.n	8004752 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004746:	4b0a      	ldr	r3, [pc, #40]	; (8004770 <HAL_Delay+0x44>)
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	461a      	mov	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4413      	add	r3, r2
 8004750:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004752:	bf00      	nop
 8004754:	f7ff ffde 	bl	8004714 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	429a      	cmp	r2, r3
 8004762:	d8f7      	bhi.n	8004754 <HAL_Delay+0x28>
  {
  }
}
 8004764:	bf00      	nop
 8004766:	bf00      	nop
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	20000124 	.word	0x20000124

08004774 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f003 0307 	and.w	r3, r3, #7
 8004782:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004784:	4b0c      	ldr	r3, [pc, #48]	; (80047b8 <__NVIC_SetPriorityGrouping+0x44>)
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800478a:	68ba      	ldr	r2, [r7, #8]
 800478c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004790:	4013      	ands	r3, r2
 8004792:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800479c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80047a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047a6:	4a04      	ldr	r2, [pc, #16]	; (80047b8 <__NVIC_SetPriorityGrouping+0x44>)
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	60d3      	str	r3, [r2, #12]
}
 80047ac:	bf00      	nop
 80047ae:	3714      	adds	r7, #20
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	e000ed00 	.word	0xe000ed00

080047bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047bc:	b480      	push	{r7}
 80047be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047c0:	4b04      	ldr	r3, [pc, #16]	; (80047d4 <__NVIC_GetPriorityGrouping+0x18>)
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	0a1b      	lsrs	r3, r3, #8
 80047c6:	f003 0307 	and.w	r3, r3, #7
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	e000ed00 	.word	0xe000ed00

080047d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	4603      	mov	r3, r0
 80047e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	db0b      	blt.n	8004802 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047ea:	79fb      	ldrb	r3, [r7, #7]
 80047ec:	f003 021f 	and.w	r2, r3, #31
 80047f0:	4907      	ldr	r1, [pc, #28]	; (8004810 <__NVIC_EnableIRQ+0x38>)
 80047f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047f6:	095b      	lsrs	r3, r3, #5
 80047f8:	2001      	movs	r0, #1
 80047fa:	fa00 f202 	lsl.w	r2, r0, r2
 80047fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004802:	bf00      	nop
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	e000e100 	.word	0xe000e100

08004814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	4603      	mov	r3, r0
 800481c:	6039      	str	r1, [r7, #0]
 800481e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004824:	2b00      	cmp	r3, #0
 8004826:	db0a      	blt.n	800483e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	b2da      	uxtb	r2, r3
 800482c:	490c      	ldr	r1, [pc, #48]	; (8004860 <__NVIC_SetPriority+0x4c>)
 800482e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004832:	0112      	lsls	r2, r2, #4
 8004834:	b2d2      	uxtb	r2, r2
 8004836:	440b      	add	r3, r1
 8004838:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800483c:	e00a      	b.n	8004854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	b2da      	uxtb	r2, r3
 8004842:	4908      	ldr	r1, [pc, #32]	; (8004864 <__NVIC_SetPriority+0x50>)
 8004844:	79fb      	ldrb	r3, [r7, #7]
 8004846:	f003 030f 	and.w	r3, r3, #15
 800484a:	3b04      	subs	r3, #4
 800484c:	0112      	lsls	r2, r2, #4
 800484e:	b2d2      	uxtb	r2, r2
 8004850:	440b      	add	r3, r1
 8004852:	761a      	strb	r2, [r3, #24]
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	e000e100 	.word	0xe000e100
 8004864:	e000ed00 	.word	0xe000ed00

08004868 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004868:	b480      	push	{r7}
 800486a:	b089      	sub	sp, #36	; 0x24
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f003 0307 	and.w	r3, r3, #7
 800487a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	f1c3 0307 	rsb	r3, r3, #7
 8004882:	2b04      	cmp	r3, #4
 8004884:	bf28      	it	cs
 8004886:	2304      	movcs	r3, #4
 8004888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	3304      	adds	r3, #4
 800488e:	2b06      	cmp	r3, #6
 8004890:	d902      	bls.n	8004898 <NVIC_EncodePriority+0x30>
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	3b03      	subs	r3, #3
 8004896:	e000      	b.n	800489a <NVIC_EncodePriority+0x32>
 8004898:	2300      	movs	r3, #0
 800489a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800489c:	f04f 32ff 	mov.w	r2, #4294967295
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	fa02 f303 	lsl.w	r3, r2, r3
 80048a6:	43da      	mvns	r2, r3
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	401a      	ands	r2, r3
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048b0:	f04f 31ff 	mov.w	r1, #4294967295
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	fa01 f303 	lsl.w	r3, r1, r3
 80048ba:	43d9      	mvns	r1, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048c0:	4313      	orrs	r3, r2
         );
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3724      	adds	r7, #36	; 0x24
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b082      	sub	sp, #8
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f7ff ff4c 	bl	8004774 <__NVIC_SetPriorityGrouping>
}
 80048dc:	bf00      	nop
 80048de:	3708      	adds	r7, #8
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b086      	sub	sp, #24
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	4603      	mov	r3, r0
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
 80048f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80048f2:	2300      	movs	r3, #0
 80048f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80048f6:	f7ff ff61 	bl	80047bc <__NVIC_GetPriorityGrouping>
 80048fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	68b9      	ldr	r1, [r7, #8]
 8004900:	6978      	ldr	r0, [r7, #20]
 8004902:	f7ff ffb1 	bl	8004868 <NVIC_EncodePriority>
 8004906:	4602      	mov	r2, r0
 8004908:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800490c:	4611      	mov	r1, r2
 800490e:	4618      	mov	r0, r3
 8004910:	f7ff ff80 	bl	8004814 <__NVIC_SetPriority>
}
 8004914:	bf00      	nop
 8004916:	3718      	adds	r7, #24
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	4603      	mov	r3, r0
 8004924:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800492a:	4618      	mov	r0, r3
 800492c:	f7ff ff54 	bl	80047d8 <__NVIC_EnableIRQ>
}
 8004930:	bf00      	nop
 8004932:	3708      	adds	r7, #8
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004944:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004946:	f7ff fee5 	bl	8004714 <HAL_GetTick>
 800494a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004952:	b2db      	uxtb	r3, r3
 8004954:	2b02      	cmp	r3, #2
 8004956:	d008      	beq.n	800496a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2280      	movs	r2, #128	; 0x80
 800495c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e052      	b.n	8004a10 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f022 0216 	bic.w	r2, r2, #22
 8004978:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	695a      	ldr	r2, [r3, #20]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004988:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498e:	2b00      	cmp	r3, #0
 8004990:	d103      	bne.n	800499a <HAL_DMA_Abort+0x62>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004996:	2b00      	cmp	r3, #0
 8004998:	d007      	beq.n	80049aa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f022 0208 	bic.w	r2, r2, #8
 80049a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f022 0201 	bic.w	r2, r2, #1
 80049b8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049ba:	e013      	b.n	80049e4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049bc:	f7ff feaa 	bl	8004714 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b05      	cmp	r3, #5
 80049c8:	d90c      	bls.n	80049e4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2220      	movs	r2, #32
 80049ce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2203      	movs	r2, #3
 80049d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e015      	b.n	8004a10 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1e4      	bne.n	80049bc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049f6:	223f      	movs	r2, #63	; 0x3f
 80049f8:	409a      	lsls	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2201      	movs	r2, #1
 8004a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d004      	beq.n	8004a36 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2280      	movs	r2, #128	; 0x80
 8004a30:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e00c      	b.n	8004a50 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2205      	movs	r2, #5
 8004a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f022 0201 	bic.w	r2, r2, #1
 8004a4c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b089      	sub	sp, #36	; 0x24
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a66:	2300      	movs	r3, #0
 8004a68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a72:	2300      	movs	r3, #0
 8004a74:	61fb      	str	r3, [r7, #28]
 8004a76:	e177      	b.n	8004d68 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a78:	2201      	movs	r2, #1
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	4013      	ands	r3, r2
 8004a8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	f040 8166 	bne.w	8004d62 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f003 0303 	and.w	r3, r3, #3
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d005      	beq.n	8004aae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d130      	bne.n	8004b10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	005b      	lsls	r3, r3, #1
 8004ab8:	2203      	movs	r2, #3
 8004aba:	fa02 f303 	lsl.w	r3, r2, r3
 8004abe:	43db      	mvns	r3, r3
 8004ac0:	69ba      	ldr	r2, [r7, #24]
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	68da      	ldr	r2, [r3, #12]
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	005b      	lsls	r3, r3, #1
 8004ace:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad2:	69ba      	ldr	r2, [r7, #24]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	69ba      	ldr	r2, [r7, #24]
 8004adc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8004aec:	43db      	mvns	r3, r3
 8004aee:	69ba      	ldr	r2, [r7, #24]
 8004af0:	4013      	ands	r3, r2
 8004af2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	091b      	lsrs	r3, r3, #4
 8004afa:	f003 0201 	and.w	r2, r3, #1
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	fa02 f303 	lsl.w	r3, r2, r3
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	69ba      	ldr	r2, [r7, #24]
 8004b0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f003 0303 	and.w	r3, r3, #3
 8004b18:	2b03      	cmp	r3, #3
 8004b1a:	d017      	beq.n	8004b4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	005b      	lsls	r3, r3, #1
 8004b26:	2203      	movs	r2, #3
 8004b28:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2c:	43db      	mvns	r3, r3
 8004b2e:	69ba      	ldr	r2, [r7, #24]
 8004b30:	4013      	ands	r3, r2
 8004b32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	689a      	ldr	r2, [r3, #8]
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	005b      	lsls	r3, r3, #1
 8004b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b40:	69ba      	ldr	r2, [r7, #24]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	69ba      	ldr	r2, [r7, #24]
 8004b4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f003 0303 	and.w	r3, r3, #3
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d123      	bne.n	8004ba0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	08da      	lsrs	r2, r3, #3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	3208      	adds	r2, #8
 8004b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	f003 0307 	and.w	r3, r3, #7
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	220f      	movs	r2, #15
 8004b70:	fa02 f303 	lsl.w	r3, r2, r3
 8004b74:	43db      	mvns	r3, r3
 8004b76:	69ba      	ldr	r2, [r7, #24]
 8004b78:	4013      	ands	r3, r2
 8004b7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	691a      	ldr	r2, [r3, #16]
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	f003 0307 	and.w	r3, r3, #7
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8c:	69ba      	ldr	r2, [r7, #24]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	08da      	lsrs	r2, r3, #3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	3208      	adds	r2, #8
 8004b9a:	69b9      	ldr	r1, [r7, #24]
 8004b9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	005b      	lsls	r3, r3, #1
 8004baa:	2203      	movs	r2, #3
 8004bac:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb0:	43db      	mvns	r3, r3
 8004bb2:	69ba      	ldr	r2, [r7, #24]
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f003 0203 	and.w	r2, r3, #3
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	005b      	lsls	r3, r3, #1
 8004bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc8:	69ba      	ldr	r2, [r7, #24]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f000 80c0 	beq.w	8004d62 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004be2:	2300      	movs	r3, #0
 8004be4:	60fb      	str	r3, [r7, #12]
 8004be6:	4b66      	ldr	r3, [pc, #408]	; (8004d80 <HAL_GPIO_Init+0x324>)
 8004be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bea:	4a65      	ldr	r2, [pc, #404]	; (8004d80 <HAL_GPIO_Init+0x324>)
 8004bec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8004bf2:	4b63      	ldr	r3, [pc, #396]	; (8004d80 <HAL_GPIO_Init+0x324>)
 8004bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bfa:	60fb      	str	r3, [r7, #12]
 8004bfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004bfe:	4a61      	ldr	r2, [pc, #388]	; (8004d84 <HAL_GPIO_Init+0x328>)
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	089b      	lsrs	r3, r3, #2
 8004c04:	3302      	adds	r3, #2
 8004c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	f003 0303 	and.w	r3, r3, #3
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	220f      	movs	r2, #15
 8004c16:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1a:	43db      	mvns	r3, r3
 8004c1c:	69ba      	ldr	r2, [r7, #24]
 8004c1e:	4013      	ands	r3, r2
 8004c20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a58      	ldr	r2, [pc, #352]	; (8004d88 <HAL_GPIO_Init+0x32c>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d037      	beq.n	8004c9a <HAL_GPIO_Init+0x23e>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a57      	ldr	r2, [pc, #348]	; (8004d8c <HAL_GPIO_Init+0x330>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d031      	beq.n	8004c96 <HAL_GPIO_Init+0x23a>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a56      	ldr	r2, [pc, #344]	; (8004d90 <HAL_GPIO_Init+0x334>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d02b      	beq.n	8004c92 <HAL_GPIO_Init+0x236>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a55      	ldr	r2, [pc, #340]	; (8004d94 <HAL_GPIO_Init+0x338>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d025      	beq.n	8004c8e <HAL_GPIO_Init+0x232>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a54      	ldr	r2, [pc, #336]	; (8004d98 <HAL_GPIO_Init+0x33c>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d01f      	beq.n	8004c8a <HAL_GPIO_Init+0x22e>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a53      	ldr	r2, [pc, #332]	; (8004d9c <HAL_GPIO_Init+0x340>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d019      	beq.n	8004c86 <HAL_GPIO_Init+0x22a>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a52      	ldr	r2, [pc, #328]	; (8004da0 <HAL_GPIO_Init+0x344>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d013      	beq.n	8004c82 <HAL_GPIO_Init+0x226>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a51      	ldr	r2, [pc, #324]	; (8004da4 <HAL_GPIO_Init+0x348>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d00d      	beq.n	8004c7e <HAL_GPIO_Init+0x222>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a50      	ldr	r2, [pc, #320]	; (8004da8 <HAL_GPIO_Init+0x34c>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d007      	beq.n	8004c7a <HAL_GPIO_Init+0x21e>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a4f      	ldr	r2, [pc, #316]	; (8004dac <HAL_GPIO_Init+0x350>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d101      	bne.n	8004c76 <HAL_GPIO_Init+0x21a>
 8004c72:	2309      	movs	r3, #9
 8004c74:	e012      	b.n	8004c9c <HAL_GPIO_Init+0x240>
 8004c76:	230a      	movs	r3, #10
 8004c78:	e010      	b.n	8004c9c <HAL_GPIO_Init+0x240>
 8004c7a:	2308      	movs	r3, #8
 8004c7c:	e00e      	b.n	8004c9c <HAL_GPIO_Init+0x240>
 8004c7e:	2307      	movs	r3, #7
 8004c80:	e00c      	b.n	8004c9c <HAL_GPIO_Init+0x240>
 8004c82:	2306      	movs	r3, #6
 8004c84:	e00a      	b.n	8004c9c <HAL_GPIO_Init+0x240>
 8004c86:	2305      	movs	r3, #5
 8004c88:	e008      	b.n	8004c9c <HAL_GPIO_Init+0x240>
 8004c8a:	2304      	movs	r3, #4
 8004c8c:	e006      	b.n	8004c9c <HAL_GPIO_Init+0x240>
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e004      	b.n	8004c9c <HAL_GPIO_Init+0x240>
 8004c92:	2302      	movs	r3, #2
 8004c94:	e002      	b.n	8004c9c <HAL_GPIO_Init+0x240>
 8004c96:	2301      	movs	r3, #1
 8004c98:	e000      	b.n	8004c9c <HAL_GPIO_Init+0x240>
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	69fa      	ldr	r2, [r7, #28]
 8004c9e:	f002 0203 	and.w	r2, r2, #3
 8004ca2:	0092      	lsls	r2, r2, #2
 8004ca4:	4093      	lsls	r3, r2
 8004ca6:	69ba      	ldr	r2, [r7, #24]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004cac:	4935      	ldr	r1, [pc, #212]	; (8004d84 <HAL_GPIO_Init+0x328>)
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	089b      	lsrs	r3, r3, #2
 8004cb2:	3302      	adds	r3, #2
 8004cb4:	69ba      	ldr	r2, [r7, #24]
 8004cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004cba:	4b3d      	ldr	r3, [pc, #244]	; (8004db0 <HAL_GPIO_Init+0x354>)
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	43db      	mvns	r3, r3
 8004cc4:	69ba      	ldr	r2, [r7, #24]
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d003      	beq.n	8004cde <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004cd6:	69ba      	ldr	r2, [r7, #24]
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004cde:	4a34      	ldr	r2, [pc, #208]	; (8004db0 <HAL_GPIO_Init+0x354>)
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ce4:	4b32      	ldr	r3, [pc, #200]	; (8004db0 <HAL_GPIO_Init+0x354>)
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	43db      	mvns	r3, r3
 8004cee:	69ba      	ldr	r2, [r7, #24]
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d003      	beq.n	8004d08 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004d00:	69ba      	ldr	r2, [r7, #24]
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d08:	4a29      	ldr	r2, [pc, #164]	; (8004db0 <HAL_GPIO_Init+0x354>)
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004d0e:	4b28      	ldr	r3, [pc, #160]	; (8004db0 <HAL_GPIO_Init+0x354>)
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	43db      	mvns	r3, r3
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d003      	beq.n	8004d32 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004d2a:	69ba      	ldr	r2, [r7, #24]
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d32:	4a1f      	ldr	r2, [pc, #124]	; (8004db0 <HAL_GPIO_Init+0x354>)
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d38:	4b1d      	ldr	r3, [pc, #116]	; (8004db0 <HAL_GPIO_Init+0x354>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	43db      	mvns	r3, r3
 8004d42:	69ba      	ldr	r2, [r7, #24]
 8004d44:	4013      	ands	r3, r2
 8004d46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d003      	beq.n	8004d5c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d5c:	4a14      	ldr	r2, [pc, #80]	; (8004db0 <HAL_GPIO_Init+0x354>)
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	3301      	adds	r3, #1
 8004d66:	61fb      	str	r3, [r7, #28]
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	2b0f      	cmp	r3, #15
 8004d6c:	f67f ae84 	bls.w	8004a78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d70:	bf00      	nop
 8004d72:	bf00      	nop
 8004d74:	3724      	adds	r7, #36	; 0x24
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	40023800 	.word	0x40023800
 8004d84:	40013800 	.word	0x40013800
 8004d88:	40020000 	.word	0x40020000
 8004d8c:	40020400 	.word	0x40020400
 8004d90:	40020800 	.word	0x40020800
 8004d94:	40020c00 	.word	0x40020c00
 8004d98:	40021000 	.word	0x40021000
 8004d9c:	40021400 	.word	0x40021400
 8004da0:	40021800 	.word	0x40021800
 8004da4:	40021c00 	.word	0x40021c00
 8004da8:	40022000 	.word	0x40022000
 8004dac:	40022400 	.word	0x40022400
 8004db0:	40013c00 	.word	0x40013c00

08004db4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	691a      	ldr	r2, [r3, #16]
 8004dc4:	887b      	ldrh	r3, [r7, #2]
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d002      	beq.n	8004dd2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	73fb      	strb	r3, [r7, #15]
 8004dd0:	e001      	b.n	8004dd6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3714      	adds	r7, #20
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	460b      	mov	r3, r1
 8004dee:	807b      	strh	r3, [r7, #2]
 8004df0:	4613      	mov	r3, r2
 8004df2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004df4:	787b      	ldrb	r3, [r7, #1]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004dfa:	887a      	ldrh	r2, [r7, #2]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004e00:	e003      	b.n	8004e0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004e02:	887b      	ldrh	r3, [r7, #2]
 8004e04:	041a      	lsls	r2, r3, #16
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	619a      	str	r2, [r3, #24]
}
 8004e0a:	bf00      	nop
 8004e0c:	370c      	adds	r7, #12
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr

08004e16 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e16:	b480      	push	{r7}
 8004e18:	b085      	sub	sp, #20
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
 8004e1e:	460b      	mov	r3, r1
 8004e20:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004e28:	887a      	ldrh	r2, [r7, #2]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	041a      	lsls	r2, r3, #16
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	43d9      	mvns	r1, r3
 8004e34:	887b      	ldrh	r3, [r7, #2]
 8004e36:	400b      	ands	r3, r1
 8004e38:	431a      	orrs	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	619a      	str	r2, [r3, #24]
}
 8004e3e:	bf00      	nop
 8004e40:	3714      	adds	r7, #20
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
	...

08004e4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	4603      	mov	r3, r0
 8004e54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004e56:	4b08      	ldr	r3, [pc, #32]	; (8004e78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e58:	695a      	ldr	r2, [r3, #20]
 8004e5a:	88fb      	ldrh	r3, [r7, #6]
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d006      	beq.n	8004e70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e62:	4a05      	ldr	r2, [pc, #20]	; (8004e78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e64:	88fb      	ldrh	r3, [r7, #6]
 8004e66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e68:	88fb      	ldrh	r3, [r7, #6]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7fe fb80 	bl	8003570 <HAL_GPIO_EXTI_Callback>
  }
}
 8004e70:	bf00      	nop
 8004e72:	3708      	adds	r7, #8
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	40013c00 	.word	0x40013c00

08004e7c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004e82:	2300      	movs	r3, #0
 8004e84:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004e86:	2300      	movs	r3, #0
 8004e88:	603b      	str	r3, [r7, #0]
 8004e8a:	4b20      	ldr	r3, [pc, #128]	; (8004f0c <HAL_PWREx_EnableOverDrive+0x90>)
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8e:	4a1f      	ldr	r2, [pc, #124]	; (8004f0c <HAL_PWREx_EnableOverDrive+0x90>)
 8004e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e94:	6413      	str	r3, [r2, #64]	; 0x40
 8004e96:	4b1d      	ldr	r3, [pc, #116]	; (8004f0c <HAL_PWREx_EnableOverDrive+0x90>)
 8004e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e9e:	603b      	str	r3, [r7, #0]
 8004ea0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004ea2:	4b1b      	ldr	r3, [pc, #108]	; (8004f10 <HAL_PWREx_EnableOverDrive+0x94>)
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ea8:	f7ff fc34 	bl	8004714 <HAL_GetTick>
 8004eac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004eae:	e009      	b.n	8004ec4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004eb0:	f7ff fc30 	bl	8004714 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ebe:	d901      	bls.n	8004ec4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e01f      	b.n	8004f04 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004ec4:	4b13      	ldr	r3, [pc, #76]	; (8004f14 <HAL_PWREx_EnableOverDrive+0x98>)
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ed0:	d1ee      	bne.n	8004eb0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004ed2:	4b11      	ldr	r3, [pc, #68]	; (8004f18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ed8:	f7ff fc1c 	bl	8004714 <HAL_GetTick>
 8004edc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004ede:	e009      	b.n	8004ef4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004ee0:	f7ff fc18 	bl	8004714 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004eee:	d901      	bls.n	8004ef4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e007      	b.n	8004f04 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004ef4:	4b07      	ldr	r3, [pc, #28]	; (8004f14 <HAL_PWREx_EnableOverDrive+0x98>)
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004efc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f00:	d1ee      	bne.n	8004ee0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3708      	adds	r7, #8
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	40023800 	.word	0x40023800
 8004f10:	420e0040 	.word	0x420e0040
 8004f14:	40007000 	.word	0x40007000
 8004f18:	420e0044 	.word	0x420e0044

08004f1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b086      	sub	sp, #24
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d101      	bne.n	8004f2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e267      	b.n	80053fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d075      	beq.n	8005026 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f3a:	4b88      	ldr	r3, [pc, #544]	; (800515c <HAL_RCC_OscConfig+0x240>)
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f003 030c 	and.w	r3, r3, #12
 8004f42:	2b04      	cmp	r3, #4
 8004f44:	d00c      	beq.n	8004f60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f46:	4b85      	ldr	r3, [pc, #532]	; (800515c <HAL_RCC_OscConfig+0x240>)
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f4e:	2b08      	cmp	r3, #8
 8004f50:	d112      	bne.n	8004f78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f52:	4b82      	ldr	r3, [pc, #520]	; (800515c <HAL_RCC_OscConfig+0x240>)
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f5e:	d10b      	bne.n	8004f78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f60:	4b7e      	ldr	r3, [pc, #504]	; (800515c <HAL_RCC_OscConfig+0x240>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d05b      	beq.n	8005024 <HAL_RCC_OscConfig+0x108>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d157      	bne.n	8005024 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e242      	b.n	80053fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f80:	d106      	bne.n	8004f90 <HAL_RCC_OscConfig+0x74>
 8004f82:	4b76      	ldr	r3, [pc, #472]	; (800515c <HAL_RCC_OscConfig+0x240>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a75      	ldr	r2, [pc, #468]	; (800515c <HAL_RCC_OscConfig+0x240>)
 8004f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f8c:	6013      	str	r3, [r2, #0]
 8004f8e:	e01d      	b.n	8004fcc <HAL_RCC_OscConfig+0xb0>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f98:	d10c      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x98>
 8004f9a:	4b70      	ldr	r3, [pc, #448]	; (800515c <HAL_RCC_OscConfig+0x240>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a6f      	ldr	r2, [pc, #444]	; (800515c <HAL_RCC_OscConfig+0x240>)
 8004fa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fa4:	6013      	str	r3, [r2, #0]
 8004fa6:	4b6d      	ldr	r3, [pc, #436]	; (800515c <HAL_RCC_OscConfig+0x240>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a6c      	ldr	r2, [pc, #432]	; (800515c <HAL_RCC_OscConfig+0x240>)
 8004fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fb0:	6013      	str	r3, [r2, #0]
 8004fb2:	e00b      	b.n	8004fcc <HAL_RCC_OscConfig+0xb0>
 8004fb4:	4b69      	ldr	r3, [pc, #420]	; (800515c <HAL_RCC_OscConfig+0x240>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a68      	ldr	r2, [pc, #416]	; (800515c <HAL_RCC_OscConfig+0x240>)
 8004fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fbe:	6013      	str	r3, [r2, #0]
 8004fc0:	4b66      	ldr	r3, [pc, #408]	; (800515c <HAL_RCC_OscConfig+0x240>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a65      	ldr	r2, [pc, #404]	; (800515c <HAL_RCC_OscConfig+0x240>)
 8004fc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d013      	beq.n	8004ffc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fd4:	f7ff fb9e 	bl	8004714 <HAL_GetTick>
 8004fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fda:	e008      	b.n	8004fee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fdc:	f7ff fb9a 	bl	8004714 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b64      	cmp	r3, #100	; 0x64
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e207      	b.n	80053fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fee:	4b5b      	ldr	r3, [pc, #364]	; (800515c <HAL_RCC_OscConfig+0x240>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d0f0      	beq.n	8004fdc <HAL_RCC_OscConfig+0xc0>
 8004ffa:	e014      	b.n	8005026 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ffc:	f7ff fb8a 	bl	8004714 <HAL_GetTick>
 8005000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005002:	e008      	b.n	8005016 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005004:	f7ff fb86 	bl	8004714 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b64      	cmp	r3, #100	; 0x64
 8005010:	d901      	bls.n	8005016 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e1f3      	b.n	80053fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005016:	4b51      	ldr	r3, [pc, #324]	; (800515c <HAL_RCC_OscConfig+0x240>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1f0      	bne.n	8005004 <HAL_RCC_OscConfig+0xe8>
 8005022:	e000      	b.n	8005026 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005024:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b00      	cmp	r3, #0
 8005030:	d063      	beq.n	80050fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005032:	4b4a      	ldr	r3, [pc, #296]	; (800515c <HAL_RCC_OscConfig+0x240>)
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f003 030c 	and.w	r3, r3, #12
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00b      	beq.n	8005056 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800503e:	4b47      	ldr	r3, [pc, #284]	; (800515c <HAL_RCC_OscConfig+0x240>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005046:	2b08      	cmp	r3, #8
 8005048:	d11c      	bne.n	8005084 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800504a:	4b44      	ldr	r3, [pc, #272]	; (800515c <HAL_RCC_OscConfig+0x240>)
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d116      	bne.n	8005084 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005056:	4b41      	ldr	r3, [pc, #260]	; (800515c <HAL_RCC_OscConfig+0x240>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0302 	and.w	r3, r3, #2
 800505e:	2b00      	cmp	r3, #0
 8005060:	d005      	beq.n	800506e <HAL_RCC_OscConfig+0x152>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d001      	beq.n	800506e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e1c7      	b.n	80053fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800506e:	4b3b      	ldr	r3, [pc, #236]	; (800515c <HAL_RCC_OscConfig+0x240>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	00db      	lsls	r3, r3, #3
 800507c:	4937      	ldr	r1, [pc, #220]	; (800515c <HAL_RCC_OscConfig+0x240>)
 800507e:	4313      	orrs	r3, r2
 8005080:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005082:	e03a      	b.n	80050fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d020      	beq.n	80050ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800508c:	4b34      	ldr	r3, [pc, #208]	; (8005160 <HAL_RCC_OscConfig+0x244>)
 800508e:	2201      	movs	r2, #1
 8005090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005092:	f7ff fb3f 	bl	8004714 <HAL_GetTick>
 8005096:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005098:	e008      	b.n	80050ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800509a:	f7ff fb3b 	bl	8004714 <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d901      	bls.n	80050ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e1a8      	b.n	80053fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050ac:	4b2b      	ldr	r3, [pc, #172]	; (800515c <HAL_RCC_OscConfig+0x240>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0302 	and.w	r3, r3, #2
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d0f0      	beq.n	800509a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050b8:	4b28      	ldr	r3, [pc, #160]	; (800515c <HAL_RCC_OscConfig+0x240>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	00db      	lsls	r3, r3, #3
 80050c6:	4925      	ldr	r1, [pc, #148]	; (800515c <HAL_RCC_OscConfig+0x240>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	600b      	str	r3, [r1, #0]
 80050cc:	e015      	b.n	80050fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050ce:	4b24      	ldr	r3, [pc, #144]	; (8005160 <HAL_RCC_OscConfig+0x244>)
 80050d0:	2200      	movs	r2, #0
 80050d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d4:	f7ff fb1e 	bl	8004714 <HAL_GetTick>
 80050d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050da:	e008      	b.n	80050ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050dc:	f7ff fb1a 	bl	8004714 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d901      	bls.n	80050ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e187      	b.n	80053fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050ee:	4b1b      	ldr	r3, [pc, #108]	; (800515c <HAL_RCC_OscConfig+0x240>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0302 	and.w	r3, r3, #2
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1f0      	bne.n	80050dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0308 	and.w	r3, r3, #8
 8005102:	2b00      	cmp	r3, #0
 8005104:	d036      	beq.n	8005174 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d016      	beq.n	800513c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800510e:	4b15      	ldr	r3, [pc, #84]	; (8005164 <HAL_RCC_OscConfig+0x248>)
 8005110:	2201      	movs	r2, #1
 8005112:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005114:	f7ff fafe 	bl	8004714 <HAL_GetTick>
 8005118:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800511a:	e008      	b.n	800512e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800511c:	f7ff fafa 	bl	8004714 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	2b02      	cmp	r3, #2
 8005128:	d901      	bls.n	800512e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e167      	b.n	80053fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800512e:	4b0b      	ldr	r3, [pc, #44]	; (800515c <HAL_RCC_OscConfig+0x240>)
 8005130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005132:	f003 0302 	and.w	r3, r3, #2
 8005136:	2b00      	cmp	r3, #0
 8005138:	d0f0      	beq.n	800511c <HAL_RCC_OscConfig+0x200>
 800513a:	e01b      	b.n	8005174 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800513c:	4b09      	ldr	r3, [pc, #36]	; (8005164 <HAL_RCC_OscConfig+0x248>)
 800513e:	2200      	movs	r2, #0
 8005140:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005142:	f7ff fae7 	bl	8004714 <HAL_GetTick>
 8005146:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005148:	e00e      	b.n	8005168 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800514a:	f7ff fae3 	bl	8004714 <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	2b02      	cmp	r3, #2
 8005156:	d907      	bls.n	8005168 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e150      	b.n	80053fe <HAL_RCC_OscConfig+0x4e2>
 800515c:	40023800 	.word	0x40023800
 8005160:	42470000 	.word	0x42470000
 8005164:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005168:	4b88      	ldr	r3, [pc, #544]	; (800538c <HAL_RCC_OscConfig+0x470>)
 800516a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800516c:	f003 0302 	and.w	r3, r3, #2
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1ea      	bne.n	800514a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0304 	and.w	r3, r3, #4
 800517c:	2b00      	cmp	r3, #0
 800517e:	f000 8097 	beq.w	80052b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005182:	2300      	movs	r3, #0
 8005184:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005186:	4b81      	ldr	r3, [pc, #516]	; (800538c <HAL_RCC_OscConfig+0x470>)
 8005188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10f      	bne.n	80051b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005192:	2300      	movs	r3, #0
 8005194:	60bb      	str	r3, [r7, #8]
 8005196:	4b7d      	ldr	r3, [pc, #500]	; (800538c <HAL_RCC_OscConfig+0x470>)
 8005198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519a:	4a7c      	ldr	r2, [pc, #496]	; (800538c <HAL_RCC_OscConfig+0x470>)
 800519c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051a0:	6413      	str	r3, [r2, #64]	; 0x40
 80051a2:	4b7a      	ldr	r3, [pc, #488]	; (800538c <HAL_RCC_OscConfig+0x470>)
 80051a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051aa:	60bb      	str	r3, [r7, #8]
 80051ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051ae:	2301      	movs	r3, #1
 80051b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051b2:	4b77      	ldr	r3, [pc, #476]	; (8005390 <HAL_RCC_OscConfig+0x474>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d118      	bne.n	80051f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051be:	4b74      	ldr	r3, [pc, #464]	; (8005390 <HAL_RCC_OscConfig+0x474>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a73      	ldr	r2, [pc, #460]	; (8005390 <HAL_RCC_OscConfig+0x474>)
 80051c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051ca:	f7ff faa3 	bl	8004714 <HAL_GetTick>
 80051ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051d0:	e008      	b.n	80051e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051d2:	f7ff fa9f 	bl	8004714 <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d901      	bls.n	80051e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e10c      	b.n	80053fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051e4:	4b6a      	ldr	r3, [pc, #424]	; (8005390 <HAL_RCC_OscConfig+0x474>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d0f0      	beq.n	80051d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d106      	bne.n	8005206 <HAL_RCC_OscConfig+0x2ea>
 80051f8:	4b64      	ldr	r3, [pc, #400]	; (800538c <HAL_RCC_OscConfig+0x470>)
 80051fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051fc:	4a63      	ldr	r2, [pc, #396]	; (800538c <HAL_RCC_OscConfig+0x470>)
 80051fe:	f043 0301 	orr.w	r3, r3, #1
 8005202:	6713      	str	r3, [r2, #112]	; 0x70
 8005204:	e01c      	b.n	8005240 <HAL_RCC_OscConfig+0x324>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	2b05      	cmp	r3, #5
 800520c:	d10c      	bne.n	8005228 <HAL_RCC_OscConfig+0x30c>
 800520e:	4b5f      	ldr	r3, [pc, #380]	; (800538c <HAL_RCC_OscConfig+0x470>)
 8005210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005212:	4a5e      	ldr	r2, [pc, #376]	; (800538c <HAL_RCC_OscConfig+0x470>)
 8005214:	f043 0304 	orr.w	r3, r3, #4
 8005218:	6713      	str	r3, [r2, #112]	; 0x70
 800521a:	4b5c      	ldr	r3, [pc, #368]	; (800538c <HAL_RCC_OscConfig+0x470>)
 800521c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800521e:	4a5b      	ldr	r2, [pc, #364]	; (800538c <HAL_RCC_OscConfig+0x470>)
 8005220:	f043 0301 	orr.w	r3, r3, #1
 8005224:	6713      	str	r3, [r2, #112]	; 0x70
 8005226:	e00b      	b.n	8005240 <HAL_RCC_OscConfig+0x324>
 8005228:	4b58      	ldr	r3, [pc, #352]	; (800538c <HAL_RCC_OscConfig+0x470>)
 800522a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800522c:	4a57      	ldr	r2, [pc, #348]	; (800538c <HAL_RCC_OscConfig+0x470>)
 800522e:	f023 0301 	bic.w	r3, r3, #1
 8005232:	6713      	str	r3, [r2, #112]	; 0x70
 8005234:	4b55      	ldr	r3, [pc, #340]	; (800538c <HAL_RCC_OscConfig+0x470>)
 8005236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005238:	4a54      	ldr	r2, [pc, #336]	; (800538c <HAL_RCC_OscConfig+0x470>)
 800523a:	f023 0304 	bic.w	r3, r3, #4
 800523e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d015      	beq.n	8005274 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005248:	f7ff fa64 	bl	8004714 <HAL_GetTick>
 800524c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800524e:	e00a      	b.n	8005266 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005250:	f7ff fa60 	bl	8004714 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	f241 3288 	movw	r2, #5000	; 0x1388
 800525e:	4293      	cmp	r3, r2
 8005260:	d901      	bls.n	8005266 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e0cb      	b.n	80053fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005266:	4b49      	ldr	r3, [pc, #292]	; (800538c <HAL_RCC_OscConfig+0x470>)
 8005268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d0ee      	beq.n	8005250 <HAL_RCC_OscConfig+0x334>
 8005272:	e014      	b.n	800529e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005274:	f7ff fa4e 	bl	8004714 <HAL_GetTick>
 8005278:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800527a:	e00a      	b.n	8005292 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800527c:	f7ff fa4a 	bl	8004714 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	f241 3288 	movw	r2, #5000	; 0x1388
 800528a:	4293      	cmp	r3, r2
 800528c:	d901      	bls.n	8005292 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e0b5      	b.n	80053fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005292:	4b3e      	ldr	r3, [pc, #248]	; (800538c <HAL_RCC_OscConfig+0x470>)
 8005294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005296:	f003 0302 	and.w	r3, r3, #2
 800529a:	2b00      	cmp	r3, #0
 800529c:	d1ee      	bne.n	800527c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800529e:	7dfb      	ldrb	r3, [r7, #23]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d105      	bne.n	80052b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052a4:	4b39      	ldr	r3, [pc, #228]	; (800538c <HAL_RCC_OscConfig+0x470>)
 80052a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a8:	4a38      	ldr	r2, [pc, #224]	; (800538c <HAL_RCC_OscConfig+0x470>)
 80052aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f000 80a1 	beq.w	80053fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052ba:	4b34      	ldr	r3, [pc, #208]	; (800538c <HAL_RCC_OscConfig+0x470>)
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f003 030c 	and.w	r3, r3, #12
 80052c2:	2b08      	cmp	r3, #8
 80052c4:	d05c      	beq.n	8005380 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d141      	bne.n	8005352 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ce:	4b31      	ldr	r3, [pc, #196]	; (8005394 <HAL_RCC_OscConfig+0x478>)
 80052d0:	2200      	movs	r2, #0
 80052d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052d4:	f7ff fa1e 	bl	8004714 <HAL_GetTick>
 80052d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052da:	e008      	b.n	80052ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052dc:	f7ff fa1a 	bl	8004714 <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d901      	bls.n	80052ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e087      	b.n	80053fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ee:	4b27      	ldr	r3, [pc, #156]	; (800538c <HAL_RCC_OscConfig+0x470>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1f0      	bne.n	80052dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	69da      	ldr	r2, [r3, #28]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	431a      	orrs	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005308:	019b      	lsls	r3, r3, #6
 800530a:	431a      	orrs	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005310:	085b      	lsrs	r3, r3, #1
 8005312:	3b01      	subs	r3, #1
 8005314:	041b      	lsls	r3, r3, #16
 8005316:	431a      	orrs	r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531c:	061b      	lsls	r3, r3, #24
 800531e:	491b      	ldr	r1, [pc, #108]	; (800538c <HAL_RCC_OscConfig+0x470>)
 8005320:	4313      	orrs	r3, r2
 8005322:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005324:	4b1b      	ldr	r3, [pc, #108]	; (8005394 <HAL_RCC_OscConfig+0x478>)
 8005326:	2201      	movs	r2, #1
 8005328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800532a:	f7ff f9f3 	bl	8004714 <HAL_GetTick>
 800532e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005330:	e008      	b.n	8005344 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005332:	f7ff f9ef 	bl	8004714 <HAL_GetTick>
 8005336:	4602      	mov	r2, r0
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	2b02      	cmp	r3, #2
 800533e:	d901      	bls.n	8005344 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	e05c      	b.n	80053fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005344:	4b11      	ldr	r3, [pc, #68]	; (800538c <HAL_RCC_OscConfig+0x470>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d0f0      	beq.n	8005332 <HAL_RCC_OscConfig+0x416>
 8005350:	e054      	b.n	80053fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005352:	4b10      	ldr	r3, [pc, #64]	; (8005394 <HAL_RCC_OscConfig+0x478>)
 8005354:	2200      	movs	r2, #0
 8005356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005358:	f7ff f9dc 	bl	8004714 <HAL_GetTick>
 800535c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800535e:	e008      	b.n	8005372 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005360:	f7ff f9d8 	bl	8004714 <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	2b02      	cmp	r3, #2
 800536c:	d901      	bls.n	8005372 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e045      	b.n	80053fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005372:	4b06      	ldr	r3, [pc, #24]	; (800538c <HAL_RCC_OscConfig+0x470>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1f0      	bne.n	8005360 <HAL_RCC_OscConfig+0x444>
 800537e:	e03d      	b.n	80053fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d107      	bne.n	8005398 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e038      	b.n	80053fe <HAL_RCC_OscConfig+0x4e2>
 800538c:	40023800 	.word	0x40023800
 8005390:	40007000 	.word	0x40007000
 8005394:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005398:	4b1b      	ldr	r3, [pc, #108]	; (8005408 <HAL_RCC_OscConfig+0x4ec>)
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d028      	beq.n	80053f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d121      	bne.n	80053f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053be:	429a      	cmp	r2, r3
 80053c0:	d11a      	bne.n	80053f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80053c8:	4013      	ands	r3, r2
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80053ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d111      	bne.n	80053f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053de:	085b      	lsrs	r3, r3, #1
 80053e0:	3b01      	subs	r3, #1
 80053e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d107      	bne.n	80053f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d001      	beq.n	80053fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e000      	b.n	80053fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3718      	adds	r7, #24
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	40023800 	.word	0x40023800

0800540c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d101      	bne.n	8005420 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e0cc      	b.n	80055ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005420:	4b68      	ldr	r3, [pc, #416]	; (80055c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 030f 	and.w	r3, r3, #15
 8005428:	683a      	ldr	r2, [r7, #0]
 800542a:	429a      	cmp	r2, r3
 800542c:	d90c      	bls.n	8005448 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800542e:	4b65      	ldr	r3, [pc, #404]	; (80055c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005430:	683a      	ldr	r2, [r7, #0]
 8005432:	b2d2      	uxtb	r2, r2
 8005434:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005436:	4b63      	ldr	r3, [pc, #396]	; (80055c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 030f 	and.w	r3, r3, #15
 800543e:	683a      	ldr	r2, [r7, #0]
 8005440:	429a      	cmp	r2, r3
 8005442:	d001      	beq.n	8005448 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e0b8      	b.n	80055ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0302 	and.w	r3, r3, #2
 8005450:	2b00      	cmp	r3, #0
 8005452:	d020      	beq.n	8005496 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0304 	and.w	r3, r3, #4
 800545c:	2b00      	cmp	r3, #0
 800545e:	d005      	beq.n	800546c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005460:	4b59      	ldr	r3, [pc, #356]	; (80055c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	4a58      	ldr	r2, [pc, #352]	; (80055c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005466:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800546a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0308 	and.w	r3, r3, #8
 8005474:	2b00      	cmp	r3, #0
 8005476:	d005      	beq.n	8005484 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005478:	4b53      	ldr	r3, [pc, #332]	; (80055c8 <HAL_RCC_ClockConfig+0x1bc>)
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	4a52      	ldr	r2, [pc, #328]	; (80055c8 <HAL_RCC_ClockConfig+0x1bc>)
 800547e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005482:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005484:	4b50      	ldr	r3, [pc, #320]	; (80055c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	494d      	ldr	r1, [pc, #308]	; (80055c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005492:	4313      	orrs	r3, r2
 8005494:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d044      	beq.n	800552c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d107      	bne.n	80054ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054aa:	4b47      	ldr	r3, [pc, #284]	; (80055c8 <HAL_RCC_ClockConfig+0x1bc>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d119      	bne.n	80054ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e07f      	b.n	80055ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d003      	beq.n	80054ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054c6:	2b03      	cmp	r3, #3
 80054c8:	d107      	bne.n	80054da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054ca:	4b3f      	ldr	r3, [pc, #252]	; (80055c8 <HAL_RCC_ClockConfig+0x1bc>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d109      	bne.n	80054ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e06f      	b.n	80055ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054da:	4b3b      	ldr	r3, [pc, #236]	; (80055c8 <HAL_RCC_ClockConfig+0x1bc>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0302 	and.w	r3, r3, #2
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d101      	bne.n	80054ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e067      	b.n	80055ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054ea:	4b37      	ldr	r3, [pc, #220]	; (80055c8 <HAL_RCC_ClockConfig+0x1bc>)
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f023 0203 	bic.w	r2, r3, #3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	4934      	ldr	r1, [pc, #208]	; (80055c8 <HAL_RCC_ClockConfig+0x1bc>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054fc:	f7ff f90a 	bl	8004714 <HAL_GetTick>
 8005500:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005502:	e00a      	b.n	800551a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005504:	f7ff f906 	bl	8004714 <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005512:	4293      	cmp	r3, r2
 8005514:	d901      	bls.n	800551a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e04f      	b.n	80055ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800551a:	4b2b      	ldr	r3, [pc, #172]	; (80055c8 <HAL_RCC_ClockConfig+0x1bc>)
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f003 020c 	and.w	r2, r3, #12
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	429a      	cmp	r2, r3
 800552a:	d1eb      	bne.n	8005504 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800552c:	4b25      	ldr	r3, [pc, #148]	; (80055c4 <HAL_RCC_ClockConfig+0x1b8>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 030f 	and.w	r3, r3, #15
 8005534:	683a      	ldr	r2, [r7, #0]
 8005536:	429a      	cmp	r2, r3
 8005538:	d20c      	bcs.n	8005554 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800553a:	4b22      	ldr	r3, [pc, #136]	; (80055c4 <HAL_RCC_ClockConfig+0x1b8>)
 800553c:	683a      	ldr	r2, [r7, #0]
 800553e:	b2d2      	uxtb	r2, r2
 8005540:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005542:	4b20      	ldr	r3, [pc, #128]	; (80055c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 030f 	and.w	r3, r3, #15
 800554a:	683a      	ldr	r2, [r7, #0]
 800554c:	429a      	cmp	r2, r3
 800554e:	d001      	beq.n	8005554 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e032      	b.n	80055ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0304 	and.w	r3, r3, #4
 800555c:	2b00      	cmp	r3, #0
 800555e:	d008      	beq.n	8005572 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005560:	4b19      	ldr	r3, [pc, #100]	; (80055c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	4916      	ldr	r1, [pc, #88]	; (80055c8 <HAL_RCC_ClockConfig+0x1bc>)
 800556e:	4313      	orrs	r3, r2
 8005570:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0308 	and.w	r3, r3, #8
 800557a:	2b00      	cmp	r3, #0
 800557c:	d009      	beq.n	8005592 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800557e:	4b12      	ldr	r3, [pc, #72]	; (80055c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	00db      	lsls	r3, r3, #3
 800558c:	490e      	ldr	r1, [pc, #56]	; (80055c8 <HAL_RCC_ClockConfig+0x1bc>)
 800558e:	4313      	orrs	r3, r2
 8005590:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005592:	f000 f821 	bl	80055d8 <HAL_RCC_GetSysClockFreq>
 8005596:	4602      	mov	r2, r0
 8005598:	4b0b      	ldr	r3, [pc, #44]	; (80055c8 <HAL_RCC_ClockConfig+0x1bc>)
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	091b      	lsrs	r3, r3, #4
 800559e:	f003 030f 	and.w	r3, r3, #15
 80055a2:	490a      	ldr	r1, [pc, #40]	; (80055cc <HAL_RCC_ClockConfig+0x1c0>)
 80055a4:	5ccb      	ldrb	r3, [r1, r3]
 80055a6:	fa22 f303 	lsr.w	r3, r2, r3
 80055aa:	4a09      	ldr	r2, [pc, #36]	; (80055d0 <HAL_RCC_ClockConfig+0x1c4>)
 80055ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80055ae:	4b09      	ldr	r3, [pc, #36]	; (80055d4 <HAL_RCC_ClockConfig+0x1c8>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7fe fec4 	bl	8004340 <HAL_InitTick>

  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	40023c00 	.word	0x40023c00
 80055c8:	40023800 	.word	0x40023800
 80055cc:	0800a8f0 	.word	0x0800a8f0
 80055d0:	2000011c 	.word	0x2000011c
 80055d4:	20000120 	.word	0x20000120

080055d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055dc:	b094      	sub	sp, #80	; 0x50
 80055de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80055e0:	2300      	movs	r3, #0
 80055e2:	647b      	str	r3, [r7, #68]	; 0x44
 80055e4:	2300      	movs	r3, #0
 80055e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055e8:	2300      	movs	r3, #0
 80055ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80055ec:	2300      	movs	r3, #0
 80055ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055f0:	4b79      	ldr	r3, [pc, #484]	; (80057d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f003 030c 	and.w	r3, r3, #12
 80055f8:	2b08      	cmp	r3, #8
 80055fa:	d00d      	beq.n	8005618 <HAL_RCC_GetSysClockFreq+0x40>
 80055fc:	2b08      	cmp	r3, #8
 80055fe:	f200 80e1 	bhi.w	80057c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005602:	2b00      	cmp	r3, #0
 8005604:	d002      	beq.n	800560c <HAL_RCC_GetSysClockFreq+0x34>
 8005606:	2b04      	cmp	r3, #4
 8005608:	d003      	beq.n	8005612 <HAL_RCC_GetSysClockFreq+0x3a>
 800560a:	e0db      	b.n	80057c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800560c:	4b73      	ldr	r3, [pc, #460]	; (80057dc <HAL_RCC_GetSysClockFreq+0x204>)
 800560e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005610:	e0db      	b.n	80057ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005612:	4b73      	ldr	r3, [pc, #460]	; (80057e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005614:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005616:	e0d8      	b.n	80057ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005618:	4b6f      	ldr	r3, [pc, #444]	; (80057d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005620:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005622:	4b6d      	ldr	r3, [pc, #436]	; (80057d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d063      	beq.n	80056f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800562e:	4b6a      	ldr	r3, [pc, #424]	; (80057d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	099b      	lsrs	r3, r3, #6
 8005634:	2200      	movs	r2, #0
 8005636:	63bb      	str	r3, [r7, #56]	; 0x38
 8005638:	63fa      	str	r2, [r7, #60]	; 0x3c
 800563a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800563c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005640:	633b      	str	r3, [r7, #48]	; 0x30
 8005642:	2300      	movs	r3, #0
 8005644:	637b      	str	r3, [r7, #52]	; 0x34
 8005646:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800564a:	4622      	mov	r2, r4
 800564c:	462b      	mov	r3, r5
 800564e:	f04f 0000 	mov.w	r0, #0
 8005652:	f04f 0100 	mov.w	r1, #0
 8005656:	0159      	lsls	r1, r3, #5
 8005658:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800565c:	0150      	lsls	r0, r2, #5
 800565e:	4602      	mov	r2, r0
 8005660:	460b      	mov	r3, r1
 8005662:	4621      	mov	r1, r4
 8005664:	1a51      	subs	r1, r2, r1
 8005666:	6139      	str	r1, [r7, #16]
 8005668:	4629      	mov	r1, r5
 800566a:	eb63 0301 	sbc.w	r3, r3, r1
 800566e:	617b      	str	r3, [r7, #20]
 8005670:	f04f 0200 	mov.w	r2, #0
 8005674:	f04f 0300 	mov.w	r3, #0
 8005678:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800567c:	4659      	mov	r1, fp
 800567e:	018b      	lsls	r3, r1, #6
 8005680:	4651      	mov	r1, sl
 8005682:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005686:	4651      	mov	r1, sl
 8005688:	018a      	lsls	r2, r1, #6
 800568a:	4651      	mov	r1, sl
 800568c:	ebb2 0801 	subs.w	r8, r2, r1
 8005690:	4659      	mov	r1, fp
 8005692:	eb63 0901 	sbc.w	r9, r3, r1
 8005696:	f04f 0200 	mov.w	r2, #0
 800569a:	f04f 0300 	mov.w	r3, #0
 800569e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056aa:	4690      	mov	r8, r2
 80056ac:	4699      	mov	r9, r3
 80056ae:	4623      	mov	r3, r4
 80056b0:	eb18 0303 	adds.w	r3, r8, r3
 80056b4:	60bb      	str	r3, [r7, #8]
 80056b6:	462b      	mov	r3, r5
 80056b8:	eb49 0303 	adc.w	r3, r9, r3
 80056bc:	60fb      	str	r3, [r7, #12]
 80056be:	f04f 0200 	mov.w	r2, #0
 80056c2:	f04f 0300 	mov.w	r3, #0
 80056c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80056ca:	4629      	mov	r1, r5
 80056cc:	024b      	lsls	r3, r1, #9
 80056ce:	4621      	mov	r1, r4
 80056d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80056d4:	4621      	mov	r1, r4
 80056d6:	024a      	lsls	r2, r1, #9
 80056d8:	4610      	mov	r0, r2
 80056da:	4619      	mov	r1, r3
 80056dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056de:	2200      	movs	r2, #0
 80056e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80056e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80056e8:	f7fb fa50 	bl	8000b8c <__aeabi_uldivmod>
 80056ec:	4602      	mov	r2, r0
 80056ee:	460b      	mov	r3, r1
 80056f0:	4613      	mov	r3, r2
 80056f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056f4:	e058      	b.n	80057a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056f6:	4b38      	ldr	r3, [pc, #224]	; (80057d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	099b      	lsrs	r3, r3, #6
 80056fc:	2200      	movs	r2, #0
 80056fe:	4618      	mov	r0, r3
 8005700:	4611      	mov	r1, r2
 8005702:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005706:	623b      	str	r3, [r7, #32]
 8005708:	2300      	movs	r3, #0
 800570a:	627b      	str	r3, [r7, #36]	; 0x24
 800570c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005710:	4642      	mov	r2, r8
 8005712:	464b      	mov	r3, r9
 8005714:	f04f 0000 	mov.w	r0, #0
 8005718:	f04f 0100 	mov.w	r1, #0
 800571c:	0159      	lsls	r1, r3, #5
 800571e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005722:	0150      	lsls	r0, r2, #5
 8005724:	4602      	mov	r2, r0
 8005726:	460b      	mov	r3, r1
 8005728:	4641      	mov	r1, r8
 800572a:	ebb2 0a01 	subs.w	sl, r2, r1
 800572e:	4649      	mov	r1, r9
 8005730:	eb63 0b01 	sbc.w	fp, r3, r1
 8005734:	f04f 0200 	mov.w	r2, #0
 8005738:	f04f 0300 	mov.w	r3, #0
 800573c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005740:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005744:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005748:	ebb2 040a 	subs.w	r4, r2, sl
 800574c:	eb63 050b 	sbc.w	r5, r3, fp
 8005750:	f04f 0200 	mov.w	r2, #0
 8005754:	f04f 0300 	mov.w	r3, #0
 8005758:	00eb      	lsls	r3, r5, #3
 800575a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800575e:	00e2      	lsls	r2, r4, #3
 8005760:	4614      	mov	r4, r2
 8005762:	461d      	mov	r5, r3
 8005764:	4643      	mov	r3, r8
 8005766:	18e3      	adds	r3, r4, r3
 8005768:	603b      	str	r3, [r7, #0]
 800576a:	464b      	mov	r3, r9
 800576c:	eb45 0303 	adc.w	r3, r5, r3
 8005770:	607b      	str	r3, [r7, #4]
 8005772:	f04f 0200 	mov.w	r2, #0
 8005776:	f04f 0300 	mov.w	r3, #0
 800577a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800577e:	4629      	mov	r1, r5
 8005780:	028b      	lsls	r3, r1, #10
 8005782:	4621      	mov	r1, r4
 8005784:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005788:	4621      	mov	r1, r4
 800578a:	028a      	lsls	r2, r1, #10
 800578c:	4610      	mov	r0, r2
 800578e:	4619      	mov	r1, r3
 8005790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005792:	2200      	movs	r2, #0
 8005794:	61bb      	str	r3, [r7, #24]
 8005796:	61fa      	str	r2, [r7, #28]
 8005798:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800579c:	f7fb f9f6 	bl	8000b8c <__aeabi_uldivmod>
 80057a0:	4602      	mov	r2, r0
 80057a2:	460b      	mov	r3, r1
 80057a4:	4613      	mov	r3, r2
 80057a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80057a8:	4b0b      	ldr	r3, [pc, #44]	; (80057d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	0c1b      	lsrs	r3, r3, #16
 80057ae:	f003 0303 	and.w	r3, r3, #3
 80057b2:	3301      	adds	r3, #1
 80057b4:	005b      	lsls	r3, r3, #1
 80057b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80057b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80057c2:	e002      	b.n	80057ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057c4:	4b05      	ldr	r3, [pc, #20]	; (80057dc <HAL_RCC_GetSysClockFreq+0x204>)
 80057c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80057c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3750      	adds	r7, #80	; 0x50
 80057d0:	46bd      	mov	sp, r7
 80057d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057d6:	bf00      	nop
 80057d8:	40023800 	.word	0x40023800
 80057dc:	00f42400 	.word	0x00f42400
 80057e0:	007a1200 	.word	0x007a1200

080057e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057e4:	b480      	push	{r7}
 80057e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057e8:	4b03      	ldr	r3, [pc, #12]	; (80057f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80057ea:	681b      	ldr	r3, [r3, #0]
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	2000011c 	.word	0x2000011c

080057fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005800:	f7ff fff0 	bl	80057e4 <HAL_RCC_GetHCLKFreq>
 8005804:	4602      	mov	r2, r0
 8005806:	4b05      	ldr	r3, [pc, #20]	; (800581c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	0a9b      	lsrs	r3, r3, #10
 800580c:	f003 0307 	and.w	r3, r3, #7
 8005810:	4903      	ldr	r1, [pc, #12]	; (8005820 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005812:	5ccb      	ldrb	r3, [r1, r3]
 8005814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005818:	4618      	mov	r0, r3
 800581a:	bd80      	pop	{r7, pc}
 800581c:	40023800 	.word	0x40023800
 8005820:	0800a900 	.word	0x0800a900

08005824 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005828:	f7ff ffdc 	bl	80057e4 <HAL_RCC_GetHCLKFreq>
 800582c:	4602      	mov	r2, r0
 800582e:	4b05      	ldr	r3, [pc, #20]	; (8005844 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	0b5b      	lsrs	r3, r3, #13
 8005834:	f003 0307 	and.w	r3, r3, #7
 8005838:	4903      	ldr	r1, [pc, #12]	; (8005848 <HAL_RCC_GetPCLK2Freq+0x24>)
 800583a:	5ccb      	ldrb	r3, [r1, r3]
 800583c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005840:	4618      	mov	r0, r3
 8005842:	bd80      	pop	{r7, pc}
 8005844:	40023800 	.word	0x40023800
 8005848:	0800a900 	.word	0x0800a900

0800584c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	220f      	movs	r2, #15
 800585a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800585c:	4b12      	ldr	r3, [pc, #72]	; (80058a8 <HAL_RCC_GetClockConfig+0x5c>)
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f003 0203 	and.w	r2, r3, #3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005868:	4b0f      	ldr	r3, [pc, #60]	; (80058a8 <HAL_RCC_GetClockConfig+0x5c>)
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005874:	4b0c      	ldr	r3, [pc, #48]	; (80058a8 <HAL_RCC_GetClockConfig+0x5c>)
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005880:	4b09      	ldr	r3, [pc, #36]	; (80058a8 <HAL_RCC_GetClockConfig+0x5c>)
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	08db      	lsrs	r3, r3, #3
 8005886:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800588e:	4b07      	ldr	r3, [pc, #28]	; (80058ac <HAL_RCC_GetClockConfig+0x60>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 020f 	and.w	r2, r3, #15
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	601a      	str	r2, [r3, #0]
}
 800589a:	bf00      	nop
 800589c:	370c      	adds	r7, #12
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	40023800 	.word	0x40023800
 80058ac:	40023c00 	.word	0x40023c00

080058b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d101      	bne.n	80058c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e07b      	b.n	80059ba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d108      	bne.n	80058dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058d2:	d009      	beq.n	80058e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	61da      	str	r2, [r3, #28]
 80058da:	e005      	b.n	80058e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d106      	bne.n	8005908 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f7fe fa78 	bl	8003df8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2202      	movs	r2, #2
 800590c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800591e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005930:	431a      	orrs	r2, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800593a:	431a      	orrs	r2, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	f003 0302 	and.w	r3, r3, #2
 8005944:	431a      	orrs	r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	431a      	orrs	r2, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005958:	431a      	orrs	r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	69db      	ldr	r3, [r3, #28]
 800595e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005962:	431a      	orrs	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a1b      	ldr	r3, [r3, #32]
 8005968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800596c:	ea42 0103 	orr.w	r1, r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005974:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	430a      	orrs	r2, r1
 800597e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	0c1b      	lsrs	r3, r3, #16
 8005986:	f003 0104 	and.w	r1, r3, #4
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598e:	f003 0210 	and.w	r2, r3, #16
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	430a      	orrs	r2, r1
 8005998:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	69da      	ldr	r2, [r3, #28]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3708      	adds	r7, #8
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059c2:	b580      	push	{r7, lr}
 80059c4:	b088      	sub	sp, #32
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	60f8      	str	r0, [r7, #12]
 80059ca:	60b9      	str	r1, [r7, #8]
 80059cc:	603b      	str	r3, [r7, #0]
 80059ce:	4613      	mov	r3, r2
 80059d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80059d2:	2300      	movs	r3, #0
 80059d4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d101      	bne.n	80059e4 <HAL_SPI_Transmit+0x22>
 80059e0:	2302      	movs	r3, #2
 80059e2:	e126      	b.n	8005c32 <HAL_SPI_Transmit+0x270>
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059ec:	f7fe fe92 	bl	8004714 <HAL_GetTick>
 80059f0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80059f2:	88fb      	ldrh	r3, [r7, #6]
 80059f4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d002      	beq.n	8005a08 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005a02:	2302      	movs	r3, #2
 8005a04:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a06:	e10b      	b.n	8005c20 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d002      	beq.n	8005a14 <HAL_SPI_Transmit+0x52>
 8005a0e:	88fb      	ldrh	r3, [r7, #6]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d102      	bne.n	8005a1a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a18:	e102      	b.n	8005c20 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2203      	movs	r2, #3
 8005a1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	88fa      	ldrh	r2, [r7, #6]
 8005a32:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	88fa      	ldrh	r2, [r7, #6]
 8005a38:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a60:	d10f      	bne.n	8005a82 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a70:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a80:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a8c:	2b40      	cmp	r3, #64	; 0x40
 8005a8e:	d007      	beq.n	8005aa0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a9e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aa8:	d14b      	bne.n	8005b42 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d002      	beq.n	8005ab8 <HAL_SPI_Transmit+0xf6>
 8005ab2:	8afb      	ldrh	r3, [r7, #22]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d13e      	bne.n	8005b36 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005abc:	881a      	ldrh	r2, [r3, #0]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac8:	1c9a      	adds	r2, r3, #2
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005adc:	e02b      	b.n	8005b36 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f003 0302 	and.w	r3, r3, #2
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d112      	bne.n	8005b12 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af0:	881a      	ldrh	r2, [r3, #0]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afc:	1c9a      	adds	r2, r3, #2
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005b10:	e011      	b.n	8005b36 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b12:	f7fe fdff 	bl	8004714 <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	683a      	ldr	r2, [r7, #0]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d803      	bhi.n	8005b2a <HAL_SPI_Transmit+0x168>
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b28:	d102      	bne.n	8005b30 <HAL_SPI_Transmit+0x16e>
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d102      	bne.n	8005b36 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005b34:	e074      	b.n	8005c20 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d1ce      	bne.n	8005ade <HAL_SPI_Transmit+0x11c>
 8005b40:	e04c      	b.n	8005bdc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d002      	beq.n	8005b50 <HAL_SPI_Transmit+0x18e>
 8005b4a:	8afb      	ldrh	r3, [r7, #22]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d140      	bne.n	8005bd2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	330c      	adds	r3, #12
 8005b5a:	7812      	ldrb	r2, [r2, #0]
 8005b5c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b62:	1c5a      	adds	r2, r3, #1
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005b76:	e02c      	b.n	8005bd2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f003 0302 	and.w	r3, r3, #2
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d113      	bne.n	8005bae <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	330c      	adds	r3, #12
 8005b90:	7812      	ldrb	r2, [r2, #0]
 8005b92:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b98:	1c5a      	adds	r2, r3, #1
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	86da      	strh	r2, [r3, #54]	; 0x36
 8005bac:	e011      	b.n	8005bd2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bae:	f7fe fdb1 	bl	8004714 <HAL_GetTick>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	683a      	ldr	r2, [r7, #0]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d803      	bhi.n	8005bc6 <HAL_SPI_Transmit+0x204>
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc4:	d102      	bne.n	8005bcc <HAL_SPI_Transmit+0x20a>
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d102      	bne.n	8005bd2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005bd0:	e026      	b.n	8005c20 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1cd      	bne.n	8005b78 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bdc:	69ba      	ldr	r2, [r7, #24]
 8005bde:	6839      	ldr	r1, [r7, #0]
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f000 fbd9 	bl	8006398 <SPI_EndRxTxTransaction>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d002      	beq.n	8005bf2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2220      	movs	r2, #32
 8005bf0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d10a      	bne.n	8005c10 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	613b      	str	r3, [r7, #16]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	613b      	str	r3, [r7, #16]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	613b      	str	r3, [r7, #16]
 8005c0e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d002      	beq.n	8005c1e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	77fb      	strb	r3, [r7, #31]
 8005c1c:	e000      	b.n	8005c20 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005c1e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005c30:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3720      	adds	r7, #32
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b088      	sub	sp, #32
 8005c3e:	af02      	add	r7, sp, #8
 8005c40:	60f8      	str	r0, [r7, #12]
 8005c42:	60b9      	str	r1, [r7, #8]
 8005c44:	603b      	str	r3, [r7, #0]
 8005c46:	4613      	mov	r3, r2
 8005c48:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c56:	d112      	bne.n	8005c7e <HAL_SPI_Receive+0x44>
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d10e      	bne.n	8005c7e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2204      	movs	r2, #4
 8005c64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005c68:	88fa      	ldrh	r2, [r7, #6]
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	9300      	str	r3, [sp, #0]
 8005c6e:	4613      	mov	r3, r2
 8005c70:	68ba      	ldr	r2, [r7, #8]
 8005c72:	68b9      	ldr	r1, [r7, #8]
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f000 f8f1 	bl	8005e5c <HAL_SPI_TransmitReceive>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	e0ea      	b.n	8005e54 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d101      	bne.n	8005c8c <HAL_SPI_Receive+0x52>
 8005c88:	2302      	movs	r3, #2
 8005c8a:	e0e3      	b.n	8005e54 <HAL_SPI_Receive+0x21a>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c94:	f7fe fd3e 	bl	8004714 <HAL_GetTick>
 8005c98:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d002      	beq.n	8005cac <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005ca6:	2302      	movs	r3, #2
 8005ca8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005caa:	e0ca      	b.n	8005e42 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d002      	beq.n	8005cb8 <HAL_SPI_Receive+0x7e>
 8005cb2:	88fb      	ldrh	r3, [r7, #6]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d102      	bne.n	8005cbe <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005cbc:	e0c1      	b.n	8005e42 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2204      	movs	r2, #4
 8005cc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	88fa      	ldrh	r2, [r7, #6]
 8005cd6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	88fa      	ldrh	r2, [r7, #6]
 8005cdc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d04:	d10f      	bne.n	8005d26 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d14:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005d24:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d30:	2b40      	cmp	r3, #64	; 0x40
 8005d32:	d007      	beq.n	8005d44 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d42:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d162      	bne.n	8005e12 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005d4c:	e02e      	b.n	8005dac <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	f003 0301 	and.w	r3, r3, #1
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d115      	bne.n	8005d88 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f103 020c 	add.w	r2, r3, #12
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d68:	7812      	ldrb	r2, [r2, #0]
 8005d6a:	b2d2      	uxtb	r2, r2
 8005d6c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d72:	1c5a      	adds	r2, r3, #1
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	b29a      	uxth	r2, r3
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d86:	e011      	b.n	8005dac <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d88:	f7fe fcc4 	bl	8004714 <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	683a      	ldr	r2, [r7, #0]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d803      	bhi.n	8005da0 <HAL_SPI_Receive+0x166>
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d9e:	d102      	bne.n	8005da6 <HAL_SPI_Receive+0x16c>
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d102      	bne.n	8005dac <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005daa:	e04a      	b.n	8005e42 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1cb      	bne.n	8005d4e <HAL_SPI_Receive+0x114>
 8005db6:	e031      	b.n	8005e1c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f003 0301 	and.w	r3, r3, #1
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d113      	bne.n	8005dee <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68da      	ldr	r2, [r3, #12]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd0:	b292      	uxth	r2, r2
 8005dd2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd8:	1c9a      	adds	r2, r3, #2
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	3b01      	subs	r3, #1
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005dec:	e011      	b.n	8005e12 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dee:	f7fe fc91 	bl	8004714 <HAL_GetTick>
 8005df2:	4602      	mov	r2, r0
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	683a      	ldr	r2, [r7, #0]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d803      	bhi.n	8005e06 <HAL_SPI_Receive+0x1cc>
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e04:	d102      	bne.n	8005e0c <HAL_SPI_Receive+0x1d2>
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d102      	bne.n	8005e12 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005e10:	e017      	b.n	8005e42 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1cd      	bne.n	8005db8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	6839      	ldr	r1, [r7, #0]
 8005e20:	68f8      	ldr	r0, [r7, #12]
 8005e22:	f000 fa53 	bl	80062cc <SPI_EndRxTransaction>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d002      	beq.n	8005e32 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2220      	movs	r2, #32
 8005e30:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d002      	beq.n	8005e40 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	75fb      	strb	r3, [r7, #23]
 8005e3e:	e000      	b.n	8005e42 <HAL_SPI_Receive+0x208>
  }

error :
 8005e40:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2201      	movs	r2, #1
 8005e46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005e52:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3718      	adds	r7, #24
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b08c      	sub	sp, #48	; 0x30
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
 8005e68:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d101      	bne.n	8005e82 <HAL_SPI_TransmitReceive+0x26>
 8005e7e:	2302      	movs	r3, #2
 8005e80:	e18a      	b.n	8006198 <HAL_SPI_TransmitReceive+0x33c>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e8a:	f7fe fc43 	bl	8004714 <HAL_GetTick>
 8005e8e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005ea0:	887b      	ldrh	r3, [r7, #2]
 8005ea2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005ea4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d00f      	beq.n	8005ecc <HAL_SPI_TransmitReceive+0x70>
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005eb2:	d107      	bne.n	8005ec4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d103      	bne.n	8005ec4 <HAL_SPI_TransmitReceive+0x68>
 8005ebc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ec0:	2b04      	cmp	r3, #4
 8005ec2:	d003      	beq.n	8005ecc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005eca:	e15b      	b.n	8006184 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d005      	beq.n	8005ede <HAL_SPI_TransmitReceive+0x82>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d002      	beq.n	8005ede <HAL_SPI_TransmitReceive+0x82>
 8005ed8:	887b      	ldrh	r3, [r7, #2]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d103      	bne.n	8005ee6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ee4:	e14e      	b.n	8006184 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	2b04      	cmp	r3, #4
 8005ef0:	d003      	beq.n	8005efa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2205      	movs	r2, #5
 8005ef6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	887a      	ldrh	r2, [r7, #2]
 8005f0a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	887a      	ldrh	r2, [r7, #2]
 8005f10:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	68ba      	ldr	r2, [r7, #8]
 8005f16:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	887a      	ldrh	r2, [r7, #2]
 8005f1c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	887a      	ldrh	r2, [r7, #2]
 8005f22:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f3a:	2b40      	cmp	r3, #64	; 0x40
 8005f3c:	d007      	beq.n	8005f4e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f4c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f56:	d178      	bne.n	800604a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d002      	beq.n	8005f66 <HAL_SPI_TransmitReceive+0x10a>
 8005f60:	8b7b      	ldrh	r3, [r7, #26]
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d166      	bne.n	8006034 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6a:	881a      	ldrh	r2, [r3, #0]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f76:	1c9a      	adds	r2, r3, #2
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	3b01      	subs	r3, #1
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f8a:	e053      	b.n	8006034 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f003 0302 	and.w	r3, r3, #2
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d11b      	bne.n	8005fd2 <HAL_SPI_TransmitReceive+0x176>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d016      	beq.n	8005fd2 <HAL_SPI_TransmitReceive+0x176>
 8005fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d113      	bne.n	8005fd2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fae:	881a      	ldrh	r2, [r3, #0]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fba:	1c9a      	adds	r2, r3, #2
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	f003 0301 	and.w	r3, r3, #1
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d119      	bne.n	8006014 <HAL_SPI_TransmitReceive+0x1b8>
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d014      	beq.n	8006014 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68da      	ldr	r2, [r3, #12]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff4:	b292      	uxth	r2, r2
 8005ff6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffc:	1c9a      	adds	r2, r3, #2
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006006:	b29b      	uxth	r3, r3
 8006008:	3b01      	subs	r3, #1
 800600a:	b29a      	uxth	r2, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006010:	2301      	movs	r3, #1
 8006012:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006014:	f7fe fb7e 	bl	8004714 <HAL_GetTick>
 8006018:	4602      	mov	r2, r0
 800601a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006020:	429a      	cmp	r2, r3
 8006022:	d807      	bhi.n	8006034 <HAL_SPI_TransmitReceive+0x1d8>
 8006024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800602a:	d003      	beq.n	8006034 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006032:	e0a7      	b.n	8006184 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006038:	b29b      	uxth	r3, r3
 800603a:	2b00      	cmp	r3, #0
 800603c:	d1a6      	bne.n	8005f8c <HAL_SPI_TransmitReceive+0x130>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006042:	b29b      	uxth	r3, r3
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1a1      	bne.n	8005f8c <HAL_SPI_TransmitReceive+0x130>
 8006048:	e07c      	b.n	8006144 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d002      	beq.n	8006058 <HAL_SPI_TransmitReceive+0x1fc>
 8006052:	8b7b      	ldrh	r3, [r7, #26]
 8006054:	2b01      	cmp	r3, #1
 8006056:	d16b      	bne.n	8006130 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	330c      	adds	r3, #12
 8006062:	7812      	ldrb	r2, [r2, #0]
 8006064:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800606a:	1c5a      	adds	r2, r3, #1
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006074:	b29b      	uxth	r3, r3
 8006076:	3b01      	subs	r3, #1
 8006078:	b29a      	uxth	r2, r3
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800607e:	e057      	b.n	8006130 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f003 0302 	and.w	r3, r3, #2
 800608a:	2b02      	cmp	r3, #2
 800608c:	d11c      	bne.n	80060c8 <HAL_SPI_TransmitReceive+0x26c>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006092:	b29b      	uxth	r3, r3
 8006094:	2b00      	cmp	r3, #0
 8006096:	d017      	beq.n	80060c8 <HAL_SPI_TransmitReceive+0x26c>
 8006098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800609a:	2b01      	cmp	r3, #1
 800609c:	d114      	bne.n	80060c8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	330c      	adds	r3, #12
 80060a8:	7812      	ldrb	r2, [r2, #0]
 80060aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b0:	1c5a      	adds	r2, r3, #1
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	3b01      	subs	r3, #1
 80060be:	b29a      	uxth	r2, r3
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80060c4:	2300      	movs	r3, #0
 80060c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	f003 0301 	and.w	r3, r3, #1
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d119      	bne.n	800610a <HAL_SPI_TransmitReceive+0x2ae>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060da:	b29b      	uxth	r3, r3
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d014      	beq.n	800610a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68da      	ldr	r2, [r3, #12]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ea:	b2d2      	uxtb	r2, r2
 80060ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f2:	1c5a      	adds	r2, r3, #1
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	3b01      	subs	r3, #1
 8006100:	b29a      	uxth	r2, r3
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006106:	2301      	movs	r3, #1
 8006108:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800610a:	f7fe fb03 	bl	8004714 <HAL_GetTick>
 800610e:	4602      	mov	r2, r0
 8006110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006116:	429a      	cmp	r2, r3
 8006118:	d803      	bhi.n	8006122 <HAL_SPI_TransmitReceive+0x2c6>
 800611a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800611c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006120:	d102      	bne.n	8006128 <HAL_SPI_TransmitReceive+0x2cc>
 8006122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006124:	2b00      	cmp	r3, #0
 8006126:	d103      	bne.n	8006130 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800612e:	e029      	b.n	8006184 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006134:	b29b      	uxth	r3, r3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1a2      	bne.n	8006080 <HAL_SPI_TransmitReceive+0x224>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800613e:	b29b      	uxth	r3, r3
 8006140:	2b00      	cmp	r3, #0
 8006142:	d19d      	bne.n	8006080 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006146:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	f000 f925 	bl	8006398 <SPI_EndRxTxTransaction>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d006      	beq.n	8006162 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2220      	movs	r2, #32
 800615e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006160:	e010      	b.n	8006184 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10b      	bne.n	8006182 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800616a:	2300      	movs	r3, #0
 800616c:	617b      	str	r3, [r7, #20]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	617b      	str	r3, [r7, #20]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	617b      	str	r3, [r7, #20]
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	e000      	b.n	8006184 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006182:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2200      	movs	r2, #0
 8006190:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006194:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006198:	4618      	mov	r0, r3
 800619a:	3730      	adds	r7, #48	; 0x30
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061ae:	b2db      	uxtb	r3, r3
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b088      	sub	sp, #32
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	603b      	str	r3, [r7, #0]
 80061c8:	4613      	mov	r3, r2
 80061ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80061cc:	f7fe faa2 	bl	8004714 <HAL_GetTick>
 80061d0:	4602      	mov	r2, r0
 80061d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d4:	1a9b      	subs	r3, r3, r2
 80061d6:	683a      	ldr	r2, [r7, #0]
 80061d8:	4413      	add	r3, r2
 80061da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80061dc:	f7fe fa9a 	bl	8004714 <HAL_GetTick>
 80061e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80061e2:	4b39      	ldr	r3, [pc, #228]	; (80062c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	015b      	lsls	r3, r3, #5
 80061e8:	0d1b      	lsrs	r3, r3, #20
 80061ea:	69fa      	ldr	r2, [r7, #28]
 80061ec:	fb02 f303 	mul.w	r3, r2, r3
 80061f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061f2:	e054      	b.n	800629e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061fa:	d050      	beq.n	800629e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061fc:	f7fe fa8a 	bl	8004714 <HAL_GetTick>
 8006200:	4602      	mov	r2, r0
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	69fa      	ldr	r2, [r7, #28]
 8006208:	429a      	cmp	r2, r3
 800620a:	d902      	bls.n	8006212 <SPI_WaitFlagStateUntilTimeout+0x56>
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d13d      	bne.n	800628e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	685a      	ldr	r2, [r3, #4]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006220:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800622a:	d111      	bne.n	8006250 <SPI_WaitFlagStateUntilTimeout+0x94>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006234:	d004      	beq.n	8006240 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800623e:	d107      	bne.n	8006250 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800624e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006254:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006258:	d10f      	bne.n	800627a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006268:	601a      	str	r2, [r3, #0]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006278:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2201      	movs	r2, #1
 800627e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2200      	movs	r2, #0
 8006286:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e017      	b.n	80062be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d101      	bne.n	8006298 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006294:	2300      	movs	r3, #0
 8006296:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	3b01      	subs	r3, #1
 800629c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	689a      	ldr	r2, [r3, #8]
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	4013      	ands	r3, r2
 80062a8:	68ba      	ldr	r2, [r7, #8]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	bf0c      	ite	eq
 80062ae:	2301      	moveq	r3, #1
 80062b0:	2300      	movne	r3, #0
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	461a      	mov	r2, r3
 80062b6:	79fb      	ldrb	r3, [r7, #7]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d19b      	bne.n	80061f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3720      	adds	r7, #32
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	2000011c 	.word	0x2000011c

080062cc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b086      	sub	sp, #24
 80062d0:	af02      	add	r7, sp, #8
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062e0:	d111      	bne.n	8006306 <SPI_EndRxTransaction+0x3a>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062ea:	d004      	beq.n	80062f6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062f4:	d107      	bne.n	8006306 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006304:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800630e:	d12a      	bne.n	8006366 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006318:	d012      	beq.n	8006340 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	9300      	str	r3, [sp, #0]
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	2200      	movs	r2, #0
 8006322:	2180      	movs	r1, #128	; 0x80
 8006324:	68f8      	ldr	r0, [r7, #12]
 8006326:	f7ff ff49 	bl	80061bc <SPI_WaitFlagStateUntilTimeout>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d02d      	beq.n	800638c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006334:	f043 0220 	orr.w	r2, r3, #32
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800633c:	2303      	movs	r3, #3
 800633e:	e026      	b.n	800638e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	9300      	str	r3, [sp, #0]
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	2200      	movs	r2, #0
 8006348:	2101      	movs	r1, #1
 800634a:	68f8      	ldr	r0, [r7, #12]
 800634c:	f7ff ff36 	bl	80061bc <SPI_WaitFlagStateUntilTimeout>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d01a      	beq.n	800638c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800635a:	f043 0220 	orr.w	r2, r3, #32
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	e013      	b.n	800638e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	9300      	str	r3, [sp, #0]
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	2200      	movs	r2, #0
 800636e:	2101      	movs	r1, #1
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f7ff ff23 	bl	80061bc <SPI_WaitFlagStateUntilTimeout>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d007      	beq.n	800638c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006380:	f043 0220 	orr.w	r2, r3, #32
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006388:	2303      	movs	r3, #3
 800638a:	e000      	b.n	800638e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3710      	adds	r7, #16
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
	...

08006398 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b088      	sub	sp, #32
 800639c:	af02      	add	r7, sp, #8
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80063a4:	4b1b      	ldr	r3, [pc, #108]	; (8006414 <SPI_EndRxTxTransaction+0x7c>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a1b      	ldr	r2, [pc, #108]	; (8006418 <SPI_EndRxTxTransaction+0x80>)
 80063aa:	fba2 2303 	umull	r2, r3, r2, r3
 80063ae:	0d5b      	lsrs	r3, r3, #21
 80063b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80063b4:	fb02 f303 	mul.w	r3, r2, r3
 80063b8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063c2:	d112      	bne.n	80063ea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	9300      	str	r3, [sp, #0]
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	2200      	movs	r2, #0
 80063cc:	2180      	movs	r1, #128	; 0x80
 80063ce:	68f8      	ldr	r0, [r7, #12]
 80063d0:	f7ff fef4 	bl	80061bc <SPI_WaitFlagStateUntilTimeout>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d016      	beq.n	8006408 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063de:	f043 0220 	orr.w	r2, r3, #32
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80063e6:	2303      	movs	r3, #3
 80063e8:	e00f      	b.n	800640a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00a      	beq.n	8006406 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	3b01      	subs	r3, #1
 80063f4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006400:	2b80      	cmp	r3, #128	; 0x80
 8006402:	d0f2      	beq.n	80063ea <SPI_EndRxTxTransaction+0x52>
 8006404:	e000      	b.n	8006408 <SPI_EndRxTxTransaction+0x70>
        break;
 8006406:	bf00      	nop
  }

  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3718      	adds	r7, #24
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	2000011c 	.word	0x2000011c
 8006418:	165e9f81 	.word	0x165e9f81

0800641c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d101      	bne.n	800642e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e041      	b.n	80064b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006434:	b2db      	uxtb	r3, r3
 8006436:	2b00      	cmp	r3, #0
 8006438:	d106      	bne.n	8006448 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f7fd fd20 	bl	8003e88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2202      	movs	r2, #2
 800644c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	3304      	adds	r3, #4
 8006458:	4619      	mov	r1, r3
 800645a:	4610      	mov	r0, r2
 800645c:	f000 fc7a 	bl	8006d54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3708      	adds	r7, #8
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
	...

080064bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80064bc:	b480      	push	{r7}
 80064be:	b085      	sub	sp, #20
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d001      	beq.n	80064d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e04e      	b.n	8006572 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2202      	movs	r2, #2
 80064d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68da      	ldr	r2, [r3, #12]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f042 0201 	orr.w	r2, r2, #1
 80064ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a23      	ldr	r2, [pc, #140]	; (8006580 <HAL_TIM_Base_Start_IT+0xc4>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d022      	beq.n	800653c <HAL_TIM_Base_Start_IT+0x80>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064fe:	d01d      	beq.n	800653c <HAL_TIM_Base_Start_IT+0x80>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a1f      	ldr	r2, [pc, #124]	; (8006584 <HAL_TIM_Base_Start_IT+0xc8>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d018      	beq.n	800653c <HAL_TIM_Base_Start_IT+0x80>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a1e      	ldr	r2, [pc, #120]	; (8006588 <HAL_TIM_Base_Start_IT+0xcc>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d013      	beq.n	800653c <HAL_TIM_Base_Start_IT+0x80>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a1c      	ldr	r2, [pc, #112]	; (800658c <HAL_TIM_Base_Start_IT+0xd0>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d00e      	beq.n	800653c <HAL_TIM_Base_Start_IT+0x80>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a1b      	ldr	r2, [pc, #108]	; (8006590 <HAL_TIM_Base_Start_IT+0xd4>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d009      	beq.n	800653c <HAL_TIM_Base_Start_IT+0x80>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a19      	ldr	r2, [pc, #100]	; (8006594 <HAL_TIM_Base_Start_IT+0xd8>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d004      	beq.n	800653c <HAL_TIM_Base_Start_IT+0x80>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a18      	ldr	r2, [pc, #96]	; (8006598 <HAL_TIM_Base_Start_IT+0xdc>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d111      	bne.n	8006560 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f003 0307 	and.w	r3, r3, #7
 8006546:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2b06      	cmp	r3, #6
 800654c:	d010      	beq.n	8006570 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f042 0201 	orr.w	r2, r2, #1
 800655c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800655e:	e007      	b.n	8006570 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f042 0201 	orr.w	r2, r2, #1
 800656e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3714      	adds	r7, #20
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	40010000 	.word	0x40010000
 8006584:	40000400 	.word	0x40000400
 8006588:	40000800 	.word	0x40000800
 800658c:	40000c00 	.word	0x40000c00
 8006590:	40010400 	.word	0x40010400
 8006594:	40014000 	.word	0x40014000
 8006598:	40001800 	.word	0x40001800

0800659c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d101      	bne.n	80065ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e041      	b.n	8006632 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d106      	bne.n	80065c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 f839 	bl	800663a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2202      	movs	r2, #2
 80065cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	3304      	adds	r3, #4
 80065d8:	4619      	mov	r1, r3
 80065da:	4610      	mov	r0, r2
 80065dc:	f000 fbba 	bl	8006d54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3708      	adds	r7, #8
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800663a:	b480      	push	{r7}
 800663c:	b083      	sub	sp, #12
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006642:	bf00      	nop
 8006644:	370c      	adds	r7, #12
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
	...

08006650 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d109      	bne.n	8006674 <HAL_TIM_PWM_Start+0x24>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006666:	b2db      	uxtb	r3, r3
 8006668:	2b01      	cmp	r3, #1
 800666a:	bf14      	ite	ne
 800666c:	2301      	movne	r3, #1
 800666e:	2300      	moveq	r3, #0
 8006670:	b2db      	uxtb	r3, r3
 8006672:	e022      	b.n	80066ba <HAL_TIM_PWM_Start+0x6a>
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	2b04      	cmp	r3, #4
 8006678:	d109      	bne.n	800668e <HAL_TIM_PWM_Start+0x3e>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006680:	b2db      	uxtb	r3, r3
 8006682:	2b01      	cmp	r3, #1
 8006684:	bf14      	ite	ne
 8006686:	2301      	movne	r3, #1
 8006688:	2300      	moveq	r3, #0
 800668a:	b2db      	uxtb	r3, r3
 800668c:	e015      	b.n	80066ba <HAL_TIM_PWM_Start+0x6a>
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	2b08      	cmp	r3, #8
 8006692:	d109      	bne.n	80066a8 <HAL_TIM_PWM_Start+0x58>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800669a:	b2db      	uxtb	r3, r3
 800669c:	2b01      	cmp	r3, #1
 800669e:	bf14      	ite	ne
 80066a0:	2301      	movne	r3, #1
 80066a2:	2300      	moveq	r3, #0
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	e008      	b.n	80066ba <HAL_TIM_PWM_Start+0x6a>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	bf14      	ite	ne
 80066b4:	2301      	movne	r3, #1
 80066b6:	2300      	moveq	r3, #0
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d001      	beq.n	80066c2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e07c      	b.n	80067bc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d104      	bne.n	80066d2 <HAL_TIM_PWM_Start+0x82>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2202      	movs	r2, #2
 80066cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066d0:	e013      	b.n	80066fa <HAL_TIM_PWM_Start+0xaa>
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	2b04      	cmp	r3, #4
 80066d6:	d104      	bne.n	80066e2 <HAL_TIM_PWM_Start+0x92>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2202      	movs	r2, #2
 80066dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066e0:	e00b      	b.n	80066fa <HAL_TIM_PWM_Start+0xaa>
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	2b08      	cmp	r3, #8
 80066e6:	d104      	bne.n	80066f2 <HAL_TIM_PWM_Start+0xa2>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2202      	movs	r2, #2
 80066ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066f0:	e003      	b.n	80066fa <HAL_TIM_PWM_Start+0xaa>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2202      	movs	r2, #2
 80066f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2201      	movs	r2, #1
 8006700:	6839      	ldr	r1, [r7, #0]
 8006702:	4618      	mov	r0, r3
 8006704:	f000 fe10 	bl	8007328 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a2d      	ldr	r2, [pc, #180]	; (80067c4 <HAL_TIM_PWM_Start+0x174>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d004      	beq.n	800671c <HAL_TIM_PWM_Start+0xcc>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a2c      	ldr	r2, [pc, #176]	; (80067c8 <HAL_TIM_PWM_Start+0x178>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d101      	bne.n	8006720 <HAL_TIM_PWM_Start+0xd0>
 800671c:	2301      	movs	r3, #1
 800671e:	e000      	b.n	8006722 <HAL_TIM_PWM_Start+0xd2>
 8006720:	2300      	movs	r3, #0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d007      	beq.n	8006736 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006734:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a22      	ldr	r2, [pc, #136]	; (80067c4 <HAL_TIM_PWM_Start+0x174>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d022      	beq.n	8006786 <HAL_TIM_PWM_Start+0x136>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006748:	d01d      	beq.n	8006786 <HAL_TIM_PWM_Start+0x136>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a1f      	ldr	r2, [pc, #124]	; (80067cc <HAL_TIM_PWM_Start+0x17c>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d018      	beq.n	8006786 <HAL_TIM_PWM_Start+0x136>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a1d      	ldr	r2, [pc, #116]	; (80067d0 <HAL_TIM_PWM_Start+0x180>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d013      	beq.n	8006786 <HAL_TIM_PWM_Start+0x136>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a1c      	ldr	r2, [pc, #112]	; (80067d4 <HAL_TIM_PWM_Start+0x184>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d00e      	beq.n	8006786 <HAL_TIM_PWM_Start+0x136>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a16      	ldr	r2, [pc, #88]	; (80067c8 <HAL_TIM_PWM_Start+0x178>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d009      	beq.n	8006786 <HAL_TIM_PWM_Start+0x136>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a18      	ldr	r2, [pc, #96]	; (80067d8 <HAL_TIM_PWM_Start+0x188>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d004      	beq.n	8006786 <HAL_TIM_PWM_Start+0x136>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a16      	ldr	r2, [pc, #88]	; (80067dc <HAL_TIM_PWM_Start+0x18c>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d111      	bne.n	80067aa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	f003 0307 	and.w	r3, r3, #7
 8006790:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2b06      	cmp	r3, #6
 8006796:	d010      	beq.n	80067ba <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f042 0201 	orr.w	r2, r2, #1
 80067a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067a8:	e007      	b.n	80067ba <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f042 0201 	orr.w	r2, r2, #1
 80067b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3710      	adds	r7, #16
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	40010000 	.word	0x40010000
 80067c8:	40010400 	.word	0x40010400
 80067cc:	40000400 	.word	0x40000400
 80067d0:	40000800 	.word	0x40000800
 80067d4:	40000c00 	.word	0x40000c00
 80067d8:	40014000 	.word	0x40014000
 80067dc:	40001800 	.word	0x40001800

080067e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	f003 0302 	and.w	r3, r3, #2
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	d122      	bne.n	800683c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	f003 0302 	and.w	r3, r3, #2
 8006800:	2b02      	cmp	r3, #2
 8006802:	d11b      	bne.n	800683c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f06f 0202 	mvn.w	r2, #2
 800680c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	f003 0303 	and.w	r3, r3, #3
 800681e:	2b00      	cmp	r3, #0
 8006820:	d003      	beq.n	800682a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 fa77 	bl	8006d16 <HAL_TIM_IC_CaptureCallback>
 8006828:	e005      	b.n	8006836 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 fa69 	bl	8006d02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 fa7a 	bl	8006d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	f003 0304 	and.w	r3, r3, #4
 8006846:	2b04      	cmp	r3, #4
 8006848:	d122      	bne.n	8006890 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	f003 0304 	and.w	r3, r3, #4
 8006854:	2b04      	cmp	r3, #4
 8006856:	d11b      	bne.n	8006890 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f06f 0204 	mvn.w	r2, #4
 8006860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2202      	movs	r2, #2
 8006866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	699b      	ldr	r3, [r3, #24]
 800686e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006872:	2b00      	cmp	r3, #0
 8006874:	d003      	beq.n	800687e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 fa4d 	bl	8006d16 <HAL_TIM_IC_CaptureCallback>
 800687c:	e005      	b.n	800688a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 fa3f 	bl	8006d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 fa50 	bl	8006d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	f003 0308 	and.w	r3, r3, #8
 800689a:	2b08      	cmp	r3, #8
 800689c:	d122      	bne.n	80068e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	f003 0308 	and.w	r3, r3, #8
 80068a8:	2b08      	cmp	r3, #8
 80068aa:	d11b      	bne.n	80068e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f06f 0208 	mvn.w	r2, #8
 80068b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2204      	movs	r2, #4
 80068ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	69db      	ldr	r3, [r3, #28]
 80068c2:	f003 0303 	and.w	r3, r3, #3
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d003      	beq.n	80068d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 fa23 	bl	8006d16 <HAL_TIM_IC_CaptureCallback>
 80068d0:	e005      	b.n	80068de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 fa15 	bl	8006d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 fa26 	bl	8006d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	f003 0310 	and.w	r3, r3, #16
 80068ee:	2b10      	cmp	r3, #16
 80068f0:	d122      	bne.n	8006938 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	f003 0310 	and.w	r3, r3, #16
 80068fc:	2b10      	cmp	r3, #16
 80068fe:	d11b      	bne.n	8006938 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f06f 0210 	mvn.w	r2, #16
 8006908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2208      	movs	r2, #8
 800690e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	69db      	ldr	r3, [r3, #28]
 8006916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800691a:	2b00      	cmp	r3, #0
 800691c:	d003      	beq.n	8006926 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 f9f9 	bl	8006d16 <HAL_TIM_IC_CaptureCallback>
 8006924:	e005      	b.n	8006932 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 f9eb 	bl	8006d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 f9fc 	bl	8006d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	f003 0301 	and.w	r3, r3, #1
 8006942:	2b01      	cmp	r3, #1
 8006944:	d10e      	bne.n	8006964 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	f003 0301 	and.w	r3, r3, #1
 8006950:	2b01      	cmp	r3, #1
 8006952:	d107      	bne.n	8006964 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f06f 0201 	mvn.w	r2, #1
 800695c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f7fd f826 	bl	80039b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800696e:	2b80      	cmp	r3, #128	; 0x80
 8006970:	d10e      	bne.n	8006990 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800697c:	2b80      	cmp	r3, #128	; 0x80
 800697e:	d107      	bne.n	8006990 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 fdca 	bl	8007524 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800699a:	2b40      	cmp	r3, #64	; 0x40
 800699c:	d10e      	bne.n	80069bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a8:	2b40      	cmp	r3, #64	; 0x40
 80069aa:	d107      	bne.n	80069bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80069b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f9c1 	bl	8006d3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	f003 0320 	and.w	r3, r3, #32
 80069c6:	2b20      	cmp	r3, #32
 80069c8:	d10e      	bne.n	80069e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	f003 0320 	and.w	r3, r3, #32
 80069d4:	2b20      	cmp	r3, #32
 80069d6:	d107      	bne.n	80069e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f06f 0220 	mvn.w	r2, #32
 80069e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 fd94 	bl	8007510 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069e8:	bf00      	nop
 80069ea:	3708      	adds	r7, #8
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b086      	sub	sp, #24
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069fc:	2300      	movs	r3, #0
 80069fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d101      	bne.n	8006a0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006a0a:	2302      	movs	r3, #2
 8006a0c:	e0ae      	b.n	8006b6c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2201      	movs	r2, #1
 8006a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2b0c      	cmp	r3, #12
 8006a1a:	f200 809f 	bhi.w	8006b5c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006a1e:	a201      	add	r2, pc, #4	; (adr r2, 8006a24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a24:	08006a59 	.word	0x08006a59
 8006a28:	08006b5d 	.word	0x08006b5d
 8006a2c:	08006b5d 	.word	0x08006b5d
 8006a30:	08006b5d 	.word	0x08006b5d
 8006a34:	08006a99 	.word	0x08006a99
 8006a38:	08006b5d 	.word	0x08006b5d
 8006a3c:	08006b5d 	.word	0x08006b5d
 8006a40:	08006b5d 	.word	0x08006b5d
 8006a44:	08006adb 	.word	0x08006adb
 8006a48:	08006b5d 	.word	0x08006b5d
 8006a4c:	08006b5d 	.word	0x08006b5d
 8006a50:	08006b5d 	.word	0x08006b5d
 8006a54:	08006b1b 	.word	0x08006b1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68b9      	ldr	r1, [r7, #8]
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f000 fa18 	bl	8006e94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	699a      	ldr	r2, [r3, #24]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f042 0208 	orr.w	r2, r2, #8
 8006a72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	699a      	ldr	r2, [r3, #24]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f022 0204 	bic.w	r2, r2, #4
 8006a82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	6999      	ldr	r1, [r3, #24]
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	691a      	ldr	r2, [r3, #16]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	430a      	orrs	r2, r1
 8006a94:	619a      	str	r2, [r3, #24]
      break;
 8006a96:	e064      	b.n	8006b62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68b9      	ldr	r1, [r7, #8]
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f000 fa68 	bl	8006f74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	699a      	ldr	r2, [r3, #24]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ab2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	699a      	ldr	r2, [r3, #24]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ac2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	6999      	ldr	r1, [r3, #24]
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	021a      	lsls	r2, r3, #8
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	430a      	orrs	r2, r1
 8006ad6:	619a      	str	r2, [r3, #24]
      break;
 8006ad8:	e043      	b.n	8006b62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68b9      	ldr	r1, [r7, #8]
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f000 fabd 	bl	8007060 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	69da      	ldr	r2, [r3, #28]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f042 0208 	orr.w	r2, r2, #8
 8006af4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	69da      	ldr	r2, [r3, #28]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f022 0204 	bic.w	r2, r2, #4
 8006b04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	69d9      	ldr	r1, [r3, #28]
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	691a      	ldr	r2, [r3, #16]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	430a      	orrs	r2, r1
 8006b16:	61da      	str	r2, [r3, #28]
      break;
 8006b18:	e023      	b.n	8006b62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68b9      	ldr	r1, [r7, #8]
 8006b20:	4618      	mov	r0, r3
 8006b22:	f000 fb11 	bl	8007148 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	69da      	ldr	r2, [r3, #28]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	69da      	ldr	r2, [r3, #28]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	69d9      	ldr	r1, [r3, #28]
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	021a      	lsls	r2, r3, #8
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	430a      	orrs	r2, r1
 8006b58:	61da      	str	r2, [r3, #28]
      break;
 8006b5a:	e002      	b.n	8006b62 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	75fb      	strb	r3, [r7, #23]
      break;
 8006b60:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3718      	adds	r7, #24
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d101      	bne.n	8006b90 <HAL_TIM_ConfigClockSource+0x1c>
 8006b8c:	2302      	movs	r3, #2
 8006b8e:	e0b4      	b.n	8006cfa <HAL_TIM_ConfigClockSource+0x186>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2202      	movs	r2, #2
 8006b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006bae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006bb6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68ba      	ldr	r2, [r7, #8]
 8006bbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bc8:	d03e      	beq.n	8006c48 <HAL_TIM_ConfigClockSource+0xd4>
 8006bca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bce:	f200 8087 	bhi.w	8006ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bd6:	f000 8086 	beq.w	8006ce6 <HAL_TIM_ConfigClockSource+0x172>
 8006bda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bde:	d87f      	bhi.n	8006ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8006be0:	2b70      	cmp	r3, #112	; 0x70
 8006be2:	d01a      	beq.n	8006c1a <HAL_TIM_ConfigClockSource+0xa6>
 8006be4:	2b70      	cmp	r3, #112	; 0x70
 8006be6:	d87b      	bhi.n	8006ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8006be8:	2b60      	cmp	r3, #96	; 0x60
 8006bea:	d050      	beq.n	8006c8e <HAL_TIM_ConfigClockSource+0x11a>
 8006bec:	2b60      	cmp	r3, #96	; 0x60
 8006bee:	d877      	bhi.n	8006ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bf0:	2b50      	cmp	r3, #80	; 0x50
 8006bf2:	d03c      	beq.n	8006c6e <HAL_TIM_ConfigClockSource+0xfa>
 8006bf4:	2b50      	cmp	r3, #80	; 0x50
 8006bf6:	d873      	bhi.n	8006ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bf8:	2b40      	cmp	r3, #64	; 0x40
 8006bfa:	d058      	beq.n	8006cae <HAL_TIM_ConfigClockSource+0x13a>
 8006bfc:	2b40      	cmp	r3, #64	; 0x40
 8006bfe:	d86f      	bhi.n	8006ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8006c00:	2b30      	cmp	r3, #48	; 0x30
 8006c02:	d064      	beq.n	8006cce <HAL_TIM_ConfigClockSource+0x15a>
 8006c04:	2b30      	cmp	r3, #48	; 0x30
 8006c06:	d86b      	bhi.n	8006ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8006c08:	2b20      	cmp	r3, #32
 8006c0a:	d060      	beq.n	8006cce <HAL_TIM_ConfigClockSource+0x15a>
 8006c0c:	2b20      	cmp	r3, #32
 8006c0e:	d867      	bhi.n	8006ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d05c      	beq.n	8006cce <HAL_TIM_ConfigClockSource+0x15a>
 8006c14:	2b10      	cmp	r3, #16
 8006c16:	d05a      	beq.n	8006cce <HAL_TIM_ConfigClockSource+0x15a>
 8006c18:	e062      	b.n	8006ce0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6818      	ldr	r0, [r3, #0]
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	6899      	ldr	r1, [r3, #8]
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	685a      	ldr	r2, [r3, #4]
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	f000 fb5d 	bl	80072e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68ba      	ldr	r2, [r7, #8]
 8006c44:	609a      	str	r2, [r3, #8]
      break;
 8006c46:	e04f      	b.n	8006ce8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6818      	ldr	r0, [r3, #0]
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	6899      	ldr	r1, [r3, #8]
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	685a      	ldr	r2, [r3, #4]
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	f000 fb46 	bl	80072e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	689a      	ldr	r2, [r3, #8]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c6a:	609a      	str	r2, [r3, #8]
      break;
 8006c6c:	e03c      	b.n	8006ce8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6818      	ldr	r0, [r3, #0]
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	6859      	ldr	r1, [r3, #4]
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	f000 faba 	bl	80071f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2150      	movs	r1, #80	; 0x50
 8006c86:	4618      	mov	r0, r3
 8006c88:	f000 fb13 	bl	80072b2 <TIM_ITRx_SetConfig>
      break;
 8006c8c:	e02c      	b.n	8006ce8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6818      	ldr	r0, [r3, #0]
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	6859      	ldr	r1, [r3, #4]
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	f000 fad9 	bl	8007252 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2160      	movs	r1, #96	; 0x60
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f000 fb03 	bl	80072b2 <TIM_ITRx_SetConfig>
      break;
 8006cac:	e01c      	b.n	8006ce8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6818      	ldr	r0, [r3, #0]
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	6859      	ldr	r1, [r3, #4]
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	461a      	mov	r2, r3
 8006cbc:	f000 fa9a 	bl	80071f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2140      	movs	r1, #64	; 0x40
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f000 faf3 	bl	80072b2 <TIM_ITRx_SetConfig>
      break;
 8006ccc:	e00c      	b.n	8006ce8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	4610      	mov	r0, r2
 8006cda:	f000 faea 	bl	80072b2 <TIM_ITRx_SetConfig>
      break;
 8006cde:	e003      	b.n	8006ce8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ce4:	e000      	b.n	8006ce8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006ce6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d02:	b480      	push	{r7}
 8006d04:	b083      	sub	sp, #12
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d0a:	bf00      	nop
 8006d0c:	370c      	adds	r7, #12
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr

08006d16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d16:	b480      	push	{r7}
 8006d18:	b083      	sub	sp, #12
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d1e:	bf00      	nop
 8006d20:	370c      	adds	r7, #12
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr

08006d2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b083      	sub	sp, #12
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d32:	bf00      	nop
 8006d34:	370c      	adds	r7, #12
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr

08006d3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d3e:	b480      	push	{r7}
 8006d40:	b083      	sub	sp, #12
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d46:	bf00      	nop
 8006d48:	370c      	adds	r7, #12
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr
	...

08006d54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b085      	sub	sp, #20
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a40      	ldr	r2, [pc, #256]	; (8006e68 <TIM_Base_SetConfig+0x114>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d013      	beq.n	8006d94 <TIM_Base_SetConfig+0x40>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d72:	d00f      	beq.n	8006d94 <TIM_Base_SetConfig+0x40>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a3d      	ldr	r2, [pc, #244]	; (8006e6c <TIM_Base_SetConfig+0x118>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d00b      	beq.n	8006d94 <TIM_Base_SetConfig+0x40>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a3c      	ldr	r2, [pc, #240]	; (8006e70 <TIM_Base_SetConfig+0x11c>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d007      	beq.n	8006d94 <TIM_Base_SetConfig+0x40>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	4a3b      	ldr	r2, [pc, #236]	; (8006e74 <TIM_Base_SetConfig+0x120>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d003      	beq.n	8006d94 <TIM_Base_SetConfig+0x40>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a3a      	ldr	r2, [pc, #232]	; (8006e78 <TIM_Base_SetConfig+0x124>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d108      	bne.n	8006da6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a2f      	ldr	r2, [pc, #188]	; (8006e68 <TIM_Base_SetConfig+0x114>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d02b      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006db4:	d027      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a2c      	ldr	r2, [pc, #176]	; (8006e6c <TIM_Base_SetConfig+0x118>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d023      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a2b      	ldr	r2, [pc, #172]	; (8006e70 <TIM_Base_SetConfig+0x11c>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d01f      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a2a      	ldr	r2, [pc, #168]	; (8006e74 <TIM_Base_SetConfig+0x120>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d01b      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a29      	ldr	r2, [pc, #164]	; (8006e78 <TIM_Base_SetConfig+0x124>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d017      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a28      	ldr	r2, [pc, #160]	; (8006e7c <TIM_Base_SetConfig+0x128>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d013      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a27      	ldr	r2, [pc, #156]	; (8006e80 <TIM_Base_SetConfig+0x12c>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d00f      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a26      	ldr	r2, [pc, #152]	; (8006e84 <TIM_Base_SetConfig+0x130>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d00b      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a25      	ldr	r2, [pc, #148]	; (8006e88 <TIM_Base_SetConfig+0x134>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d007      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a24      	ldr	r2, [pc, #144]	; (8006e8c <TIM_Base_SetConfig+0x138>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d003      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4a23      	ldr	r2, [pc, #140]	; (8006e90 <TIM_Base_SetConfig+0x13c>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d108      	bne.n	8006e18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	68fa      	ldr	r2, [r7, #12]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	689a      	ldr	r2, [r3, #8]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a0a      	ldr	r2, [pc, #40]	; (8006e68 <TIM_Base_SetConfig+0x114>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d003      	beq.n	8006e4c <TIM_Base_SetConfig+0xf8>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a0c      	ldr	r2, [pc, #48]	; (8006e78 <TIM_Base_SetConfig+0x124>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d103      	bne.n	8006e54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	691a      	ldr	r2, [r3, #16]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	615a      	str	r2, [r3, #20]
}
 8006e5a:	bf00      	nop
 8006e5c:	3714      	adds	r7, #20
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	40010000 	.word	0x40010000
 8006e6c:	40000400 	.word	0x40000400
 8006e70:	40000800 	.word	0x40000800
 8006e74:	40000c00 	.word	0x40000c00
 8006e78:	40010400 	.word	0x40010400
 8006e7c:	40014000 	.word	0x40014000
 8006e80:	40014400 	.word	0x40014400
 8006e84:	40014800 	.word	0x40014800
 8006e88:	40001800 	.word	0x40001800
 8006e8c:	40001c00 	.word	0x40001c00
 8006e90:	40002000 	.word	0x40002000

08006e94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b087      	sub	sp, #28
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a1b      	ldr	r3, [r3, #32]
 8006ea2:	f023 0201 	bic.w	r2, r3, #1
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a1b      	ldr	r3, [r3, #32]
 8006eae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f023 0303 	bic.w	r3, r3, #3
 8006eca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	f023 0302 	bic.w	r3, r3, #2
 8006edc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	697a      	ldr	r2, [r7, #20]
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4a20      	ldr	r2, [pc, #128]	; (8006f6c <TIM_OC1_SetConfig+0xd8>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d003      	beq.n	8006ef8 <TIM_OC1_SetConfig+0x64>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	4a1f      	ldr	r2, [pc, #124]	; (8006f70 <TIM_OC1_SetConfig+0xdc>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d10c      	bne.n	8006f12 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	f023 0308 	bic.w	r3, r3, #8
 8006efe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	f023 0304 	bic.w	r3, r3, #4
 8006f10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a15      	ldr	r2, [pc, #84]	; (8006f6c <TIM_OC1_SetConfig+0xd8>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d003      	beq.n	8006f22 <TIM_OC1_SetConfig+0x8e>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a14      	ldr	r2, [pc, #80]	; (8006f70 <TIM_OC1_SetConfig+0xdc>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d111      	bne.n	8006f46 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	695b      	ldr	r3, [r3, #20]
 8006f36:	693a      	ldr	r2, [r7, #16]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	699b      	ldr	r3, [r3, #24]
 8006f40:	693a      	ldr	r2, [r7, #16]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	693a      	ldr	r2, [r7, #16]
 8006f4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	685a      	ldr	r2, [r3, #4]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	697a      	ldr	r2, [r7, #20]
 8006f5e:	621a      	str	r2, [r3, #32]
}
 8006f60:	bf00      	nop
 8006f62:	371c      	adds	r7, #28
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr
 8006f6c:	40010000 	.word	0x40010000
 8006f70:	40010400 	.word	0x40010400

08006f74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b087      	sub	sp, #28
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a1b      	ldr	r3, [r3, #32]
 8006f82:	f023 0210 	bic.w	r2, r3, #16
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a1b      	ldr	r3, [r3, #32]
 8006f8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	699b      	ldr	r3, [r3, #24]
 8006f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006faa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	021b      	lsls	r3, r3, #8
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	f023 0320 	bic.w	r3, r3, #32
 8006fbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	011b      	lsls	r3, r3, #4
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a22      	ldr	r2, [pc, #136]	; (8007058 <TIM_OC2_SetConfig+0xe4>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d003      	beq.n	8006fdc <TIM_OC2_SetConfig+0x68>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	4a21      	ldr	r2, [pc, #132]	; (800705c <TIM_OC2_SetConfig+0xe8>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d10d      	bne.n	8006ff8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fe2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	011b      	lsls	r3, r3, #4
 8006fea:	697a      	ldr	r2, [r7, #20]
 8006fec:	4313      	orrs	r3, r2
 8006fee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ff6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4a17      	ldr	r2, [pc, #92]	; (8007058 <TIM_OC2_SetConfig+0xe4>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d003      	beq.n	8007008 <TIM_OC2_SetConfig+0x94>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a16      	ldr	r2, [pc, #88]	; (800705c <TIM_OC2_SetConfig+0xe8>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d113      	bne.n	8007030 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800700e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007016:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	695b      	ldr	r3, [r3, #20]
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	693a      	ldr	r2, [r7, #16]
 8007020:	4313      	orrs	r3, r2
 8007022:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	699b      	ldr	r3, [r3, #24]
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	693a      	ldr	r2, [r7, #16]
 800702c:	4313      	orrs	r3, r2
 800702e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	685a      	ldr	r2, [r3, #4]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	621a      	str	r2, [r3, #32]
}
 800704a:	bf00      	nop
 800704c:	371c      	adds	r7, #28
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop
 8007058:	40010000 	.word	0x40010000
 800705c:	40010400 	.word	0x40010400

08007060 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007060:	b480      	push	{r7}
 8007062:	b087      	sub	sp, #28
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a1b      	ldr	r3, [r3, #32]
 800706e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a1b      	ldr	r3, [r3, #32]
 800707a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	69db      	ldr	r3, [r3, #28]
 8007086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800708e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f023 0303 	bic.w	r3, r3, #3
 8007096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	4313      	orrs	r3, r2
 80070a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	021b      	lsls	r3, r3, #8
 80070b0:	697a      	ldr	r2, [r7, #20]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4a21      	ldr	r2, [pc, #132]	; (8007140 <TIM_OC3_SetConfig+0xe0>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d003      	beq.n	80070c6 <TIM_OC3_SetConfig+0x66>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4a20      	ldr	r2, [pc, #128]	; (8007144 <TIM_OC3_SetConfig+0xe4>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d10d      	bne.n	80070e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	021b      	lsls	r3, r3, #8
 80070d4:	697a      	ldr	r2, [r7, #20]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a16      	ldr	r2, [pc, #88]	; (8007140 <TIM_OC3_SetConfig+0xe0>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d003      	beq.n	80070f2 <TIM_OC3_SetConfig+0x92>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4a15      	ldr	r2, [pc, #84]	; (8007144 <TIM_OC3_SetConfig+0xe4>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d113      	bne.n	800711a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007100:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	695b      	ldr	r3, [r3, #20]
 8007106:	011b      	lsls	r3, r3, #4
 8007108:	693a      	ldr	r2, [r7, #16]
 800710a:	4313      	orrs	r3, r2
 800710c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	699b      	ldr	r3, [r3, #24]
 8007112:	011b      	lsls	r3, r3, #4
 8007114:	693a      	ldr	r2, [r7, #16]
 8007116:	4313      	orrs	r3, r2
 8007118:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	693a      	ldr	r2, [r7, #16]
 800711e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	68fa      	ldr	r2, [r7, #12]
 8007124:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	685a      	ldr	r2, [r3, #4]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	697a      	ldr	r2, [r7, #20]
 8007132:	621a      	str	r2, [r3, #32]
}
 8007134:	bf00      	nop
 8007136:	371c      	adds	r7, #28
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr
 8007140:	40010000 	.word	0x40010000
 8007144:	40010400 	.word	0x40010400

08007148 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007148:	b480      	push	{r7}
 800714a:	b087      	sub	sp, #28
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a1b      	ldr	r3, [r3, #32]
 8007156:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a1b      	ldr	r3, [r3, #32]
 8007162:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	69db      	ldr	r3, [r3, #28]
 800716e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800717e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	021b      	lsls	r3, r3, #8
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	4313      	orrs	r3, r2
 800718a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007192:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	031b      	lsls	r3, r3, #12
 800719a:	693a      	ldr	r2, [r7, #16]
 800719c:	4313      	orrs	r3, r2
 800719e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a12      	ldr	r2, [pc, #72]	; (80071ec <TIM_OC4_SetConfig+0xa4>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d003      	beq.n	80071b0 <TIM_OC4_SetConfig+0x68>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a11      	ldr	r2, [pc, #68]	; (80071f0 <TIM_OC4_SetConfig+0xa8>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d109      	bne.n	80071c4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	695b      	ldr	r3, [r3, #20]
 80071bc:	019b      	lsls	r3, r3, #6
 80071be:	697a      	ldr	r2, [r7, #20]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	697a      	ldr	r2, [r7, #20]
 80071c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	685a      	ldr	r2, [r3, #4]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	693a      	ldr	r2, [r7, #16]
 80071dc:	621a      	str	r2, [r3, #32]
}
 80071de:	bf00      	nop
 80071e0:	371c      	adds	r7, #28
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	40010000 	.word	0x40010000
 80071f0:	40010400 	.word	0x40010400

080071f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b087      	sub	sp, #28
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6a1b      	ldr	r3, [r3, #32]
 8007204:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6a1b      	ldr	r3, [r3, #32]
 800720a:	f023 0201 	bic.w	r2, r3, #1
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800721e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	011b      	lsls	r3, r3, #4
 8007224:	693a      	ldr	r2, [r7, #16]
 8007226:	4313      	orrs	r3, r2
 8007228:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	f023 030a 	bic.w	r3, r3, #10
 8007230:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007232:	697a      	ldr	r2, [r7, #20]
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	4313      	orrs	r3, r2
 8007238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	693a      	ldr	r2, [r7, #16]
 800723e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	697a      	ldr	r2, [r7, #20]
 8007244:	621a      	str	r2, [r3, #32]
}
 8007246:	bf00      	nop
 8007248:	371c      	adds	r7, #28
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr

08007252 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007252:	b480      	push	{r7}
 8007254:	b087      	sub	sp, #28
 8007256:	af00      	add	r7, sp, #0
 8007258:	60f8      	str	r0, [r7, #12]
 800725a:	60b9      	str	r1, [r7, #8]
 800725c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6a1b      	ldr	r3, [r3, #32]
 8007262:	f023 0210 	bic.w	r2, r3, #16
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6a1b      	ldr	r3, [r3, #32]
 8007274:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800727c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	031b      	lsls	r3, r3, #12
 8007282:	697a      	ldr	r2, [r7, #20]
 8007284:	4313      	orrs	r3, r2
 8007286:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800728e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	011b      	lsls	r3, r3, #4
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	4313      	orrs	r3, r2
 8007298:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	697a      	ldr	r2, [r7, #20]
 800729e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	693a      	ldr	r2, [r7, #16]
 80072a4:	621a      	str	r2, [r3, #32]
}
 80072a6:	bf00      	nop
 80072a8:	371c      	adds	r7, #28
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr

080072b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80072b2:	b480      	push	{r7}
 80072b4:	b085      	sub	sp, #20
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
 80072ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80072ca:	683a      	ldr	r2, [r7, #0]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	f043 0307 	orr.w	r3, r3, #7
 80072d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	68fa      	ldr	r2, [r7, #12]
 80072da:	609a      	str	r2, [r3, #8]
}
 80072dc:	bf00      	nop
 80072de:	3714      	adds	r7, #20
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b087      	sub	sp, #28
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	607a      	str	r2, [r7, #4]
 80072f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007302:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));

 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	021a      	lsls	r2, r3, #8
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	431a      	orrs	r2, r3
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	4313      	orrs	r3, r2
 8007310:	697a      	ldr	r2, [r7, #20]
 8007312:	4313      	orrs	r3, r2
 8007314:	617b      	str	r3, [r7, #20]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
}
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	697a      	ldr	r2, [r7, #20]
 800731a:	609a      	str	r2, [r3, #8]

 800731c:	bf00      	nop
 800731e:	371c      	adds	r7, #28
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr

08007328 <TIM_CCxChannelCmd>:
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
  uint32_t tmp;
 8007328:	b480      	push	{r7}
 800732a:	b087      	sub	sp, #28
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	f003 031f 	and.w	r3, r3, #31
 800733a:	2201      	movs	r2, #1
 800733c:	fa02 f303 	lsl.w	r3, r2, r3
 8007340:	617b      	str	r3, [r7, #20]
  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6a1a      	ldr	r2, [r3, #32]
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	43db      	mvns	r3, r3
 800734a:	401a      	ands	r2, r3
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	621a      	str	r2, [r3, #32]
  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
}
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6a1a      	ldr	r2, [r3, #32]
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	f003 031f 	and.w	r3, r3, #31
 800735a:	6879      	ldr	r1, [r7, #4]
 800735c:	fa01 f303 	lsl.w	r3, r1, r3
 8007360:	431a      	orrs	r2, r3
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	621a      	str	r2, [r3, #32]

 8007366:	bf00      	nop
 8007368:	371c      	adds	r7, #28
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr
	...

08007374 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007374:	b480      	push	{r7}
 8007376:	b085      	sub	sp, #20
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007384:	2b01      	cmp	r3, #1
 8007386:	d101      	bne.n	800738c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007388:	2302      	movs	r3, #2
 800738a:	e05a      	b.n	8007442 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2202      	movs	r2, #2
 8007398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	68fa      	ldr	r2, [r7, #12]
 80073c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a21      	ldr	r2, [pc, #132]	; (8007450 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d022      	beq.n	8007416 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073d8:	d01d      	beq.n	8007416 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a1d      	ldr	r2, [pc, #116]	; (8007454 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d018      	beq.n	8007416 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a1b      	ldr	r2, [pc, #108]	; (8007458 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d013      	beq.n	8007416 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a1a      	ldr	r2, [pc, #104]	; (800745c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d00e      	beq.n	8007416 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a18      	ldr	r2, [pc, #96]	; (8007460 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d009      	beq.n	8007416 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a17      	ldr	r2, [pc, #92]	; (8007464 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d004      	beq.n	8007416 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a15      	ldr	r2, [pc, #84]	; (8007468 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d10c      	bne.n	8007430 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800741c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	68ba      	ldr	r2, [r7, #8]
 8007424:	4313      	orrs	r3, r2
 8007426:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	68ba      	ldr	r2, [r7, #8]
 800742e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2201      	movs	r2, #1
 8007434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3714      	adds	r7, #20
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr
 800744e:	bf00      	nop
 8007450:	40010000 	.word	0x40010000
 8007454:	40000400 	.word	0x40000400
 8007458:	40000800 	.word	0x40000800
 800745c:	40000c00 	.word	0x40000c00
 8007460:	40010400 	.word	0x40010400
 8007464:	40014000 	.word	0x40014000
 8007468:	40001800 	.word	0x40001800

0800746c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800746c:	b480      	push	{r7}
 800746e:	b085      	sub	sp, #20
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007476:	2300      	movs	r3, #0
 8007478:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007480:	2b01      	cmp	r3, #1
 8007482:	d101      	bne.n	8007488 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007484:	2302      	movs	r3, #2
 8007486:	e03d      	b.n	8007504 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	4313      	orrs	r3, r2
 800749c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	4313      	orrs	r3, r2
 80074aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	4313      	orrs	r3, r2
 80074b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	4313      	orrs	r3, r2
 80074d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	695b      	ldr	r3, [r3, #20]
 80074e0:	4313      	orrs	r3, r2
 80074e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	69db      	ldr	r3, [r3, #28]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	68fa      	ldr	r2, [r7, #12]
 80074f8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007502:	2300      	movs	r3, #0
}
 8007504:	4618      	mov	r0, r3
 8007506:	3714      	adds	r7, #20
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007518:	bf00      	nop
 800751a:	370c      	adds	r7, #12
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr

08007524 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800752c:	bf00      	nop
 800752e:	370c      	adds	r7, #12
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d101      	bne.n	800754a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	e03f      	b.n	80075ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007550:	b2db      	uxtb	r3, r3
 8007552:	2b00      	cmp	r3, #0
 8007554:	d106      	bne.n	8007564 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f7fc fe9e 	bl	80042a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2224      	movs	r2, #36	; 0x24
 8007568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68da      	ldr	r2, [r3, #12]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800757a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 fcbf 	bl	8007f00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	691a      	ldr	r2, [r3, #16]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007590:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	695a      	ldr	r2, [r3, #20]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	68da      	ldr	r2, [r3, #12]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80075b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2220      	movs	r2, #32
 80075bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2220      	movs	r2, #32
 80075c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80075c8:	2300      	movs	r3, #0
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3708      	adds	r7, #8
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}

080075d2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80075d2:	b480      	push	{r7}
 80075d4:	b085      	sub	sp, #20
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	60f8      	str	r0, [r7, #12]
 80075da:	60b9      	str	r1, [r7, #8]
 80075dc:	4613      	mov	r3, r2
 80075de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	2b20      	cmp	r3, #32
 80075ea:	d130      	bne.n	800764e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d002      	beq.n	80075f8 <HAL_UART_Transmit_IT+0x26>
 80075f2:	88fb      	ldrh	r3, [r7, #6]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d101      	bne.n	80075fc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	e029      	b.n	8007650 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007602:	2b01      	cmp	r3, #1
 8007604:	d101      	bne.n	800760a <HAL_UART_Transmit_IT+0x38>
 8007606:	2302      	movs	r3, #2
 8007608:	e022      	b.n	8007650 <HAL_UART_Transmit_IT+0x7e>
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2201      	movs	r2, #1
 800760e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	68ba      	ldr	r2, [r7, #8]
 8007616:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	88fa      	ldrh	r2, [r7, #6]
 800761c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	88fa      	ldrh	r2, [r7, #6]
 8007622:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2200      	movs	r2, #0
 8007628:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2221      	movs	r2, #33	; 0x21
 800762e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2200      	movs	r2, #0
 8007636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	68da      	ldr	r2, [r3, #12]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007648:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800764a:	2300      	movs	r3, #0
 800764c:	e000      	b.n	8007650 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800764e:	2302      	movs	r3, #2
  }
}
 8007650:	4618      	mov	r0, r3
 8007652:	3714      	adds	r7, #20
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b0ba      	sub	sp, #232	; 0xe8
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	695b      	ldr	r3, [r3, #20]
 800767e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007682:	2300      	movs	r3, #0
 8007684:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007688:	2300      	movs	r3, #0
 800768a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800768e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007692:	f003 030f 	and.w	r3, r3, #15
 8007696:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800769a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d10f      	bne.n	80076c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80076a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076a6:	f003 0320 	and.w	r3, r3, #32
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d009      	beq.n	80076c2 <HAL_UART_IRQHandler+0x66>
 80076ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076b2:	f003 0320 	and.w	r3, r3, #32
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d003      	beq.n	80076c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 fb65 	bl	8007d8a <UART_Receive_IT>
      return;
 80076c0:	e256      	b.n	8007b70 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80076c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	f000 80de 	beq.w	8007888 <HAL_UART_IRQHandler+0x22c>
 80076cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076d0:	f003 0301 	and.w	r3, r3, #1
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d106      	bne.n	80076e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80076d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076dc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	f000 80d1 	beq.w	8007888 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80076e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076ea:	f003 0301 	and.w	r3, r3, #1
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d00b      	beq.n	800770a <HAL_UART_IRQHandler+0xae>
 80076f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d005      	beq.n	800770a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007702:	f043 0201 	orr.w	r2, r3, #1
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800770a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800770e:	f003 0304 	and.w	r3, r3, #4
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00b      	beq.n	800772e <HAL_UART_IRQHandler+0xd2>
 8007716:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800771a:	f003 0301 	and.w	r3, r3, #1
 800771e:	2b00      	cmp	r3, #0
 8007720:	d005      	beq.n	800772e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007726:	f043 0202 	orr.w	r2, r3, #2
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800772e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007732:	f003 0302 	and.w	r3, r3, #2
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00b      	beq.n	8007752 <HAL_UART_IRQHandler+0xf6>
 800773a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800773e:	f003 0301 	and.w	r3, r3, #1
 8007742:	2b00      	cmp	r3, #0
 8007744:	d005      	beq.n	8007752 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800774a:	f043 0204 	orr.w	r2, r3, #4
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007756:	f003 0308 	and.w	r3, r3, #8
 800775a:	2b00      	cmp	r3, #0
 800775c:	d011      	beq.n	8007782 <HAL_UART_IRQHandler+0x126>
 800775e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007762:	f003 0320 	and.w	r3, r3, #32
 8007766:	2b00      	cmp	r3, #0
 8007768:	d105      	bne.n	8007776 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800776a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800776e:	f003 0301 	and.w	r3, r3, #1
 8007772:	2b00      	cmp	r3, #0
 8007774:	d005      	beq.n	8007782 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777a:	f043 0208 	orr.w	r2, r3, #8
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007786:	2b00      	cmp	r3, #0
 8007788:	f000 81ed 	beq.w	8007b66 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800778c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007790:	f003 0320 	and.w	r3, r3, #32
 8007794:	2b00      	cmp	r3, #0
 8007796:	d008      	beq.n	80077aa <HAL_UART_IRQHandler+0x14e>
 8007798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800779c:	f003 0320 	and.w	r3, r3, #32
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d002      	beq.n	80077aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 faf0 	bl	8007d8a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	695b      	ldr	r3, [r3, #20]
 80077b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077b4:	2b40      	cmp	r3, #64	; 0x40
 80077b6:	bf0c      	ite	eq
 80077b8:	2301      	moveq	r3, #1
 80077ba:	2300      	movne	r3, #0
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c6:	f003 0308 	and.w	r3, r3, #8
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d103      	bne.n	80077d6 <HAL_UART_IRQHandler+0x17a>
 80077ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d04f      	beq.n	8007876 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f9f8 	bl	8007bcc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	695b      	ldr	r3, [r3, #20]
 80077e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077e6:	2b40      	cmp	r3, #64	; 0x40
 80077e8:	d141      	bne.n	800786e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	3314      	adds	r3, #20
 80077f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80077f8:	e853 3f00 	ldrex	r3, [r3]
 80077fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007800:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007804:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007808:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	3314      	adds	r3, #20
 8007812:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007816:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800781a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800781e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007822:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007826:	e841 2300 	strex	r3, r2, [r1]
 800782a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800782e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007832:	2b00      	cmp	r3, #0
 8007834:	d1d9      	bne.n	80077ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800783a:	2b00      	cmp	r3, #0
 800783c:	d013      	beq.n	8007866 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007842:	4a7d      	ldr	r2, [pc, #500]	; (8007a38 <HAL_UART_IRQHandler+0x3dc>)
 8007844:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800784a:	4618      	mov	r0, r3
 800784c:	f7fd f8e4 	bl	8004a18 <HAL_DMA_Abort_IT>
 8007850:	4603      	mov	r3, r0
 8007852:	2b00      	cmp	r3, #0
 8007854:	d016      	beq.n	8007884 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800785a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007860:	4610      	mov	r0, r2
 8007862:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007864:	e00e      	b.n	8007884 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 f99a 	bl	8007ba0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800786c:	e00a      	b.n	8007884 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 f996 	bl	8007ba0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007874:	e006      	b.n	8007884 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 f992 	bl	8007ba0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007882:	e170      	b.n	8007b66 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007884:	bf00      	nop
    return;
 8007886:	e16e      	b.n	8007b66 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800788c:	2b01      	cmp	r3, #1
 800788e:	f040 814a 	bne.w	8007b26 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007896:	f003 0310 	and.w	r3, r3, #16
 800789a:	2b00      	cmp	r3, #0
 800789c:	f000 8143 	beq.w	8007b26 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80078a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078a4:	f003 0310 	and.w	r3, r3, #16
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	f000 813c 	beq.w	8007b26 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80078ae:	2300      	movs	r3, #0
 80078b0:	60bb      	str	r3, [r7, #8]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	60bb      	str	r3, [r7, #8]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	60bb      	str	r3, [r7, #8]
 80078c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	695b      	ldr	r3, [r3, #20]
 80078ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ce:	2b40      	cmp	r3, #64	; 0x40
 80078d0:	f040 80b4 	bne.w	8007a3c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80078e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f000 8140 	beq.w	8007b6a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80078ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80078f2:	429a      	cmp	r2, r3
 80078f4:	f080 8139 	bcs.w	8007b6a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80078fe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007904:	69db      	ldr	r3, [r3, #28]
 8007906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800790a:	f000 8088 	beq.w	8007a1e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	330c      	adds	r3, #12
 8007914:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007918:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800791c:	e853 3f00 	ldrex	r3, [r3]
 8007920:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007924:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007928:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800792c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	330c      	adds	r3, #12
 8007936:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800793a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800793e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007942:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007946:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800794a:	e841 2300 	strex	r3, r2, [r1]
 800794e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007952:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007956:	2b00      	cmp	r3, #0
 8007958:	d1d9      	bne.n	800790e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	3314      	adds	r3, #20
 8007960:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007962:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007964:	e853 3f00 	ldrex	r3, [r3]
 8007968:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800796a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800796c:	f023 0301 	bic.w	r3, r3, #1
 8007970:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	3314      	adds	r3, #20
 800797a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800797e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007982:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007984:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007986:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800798a:	e841 2300 	strex	r3, r2, [r1]
 800798e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007990:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007992:	2b00      	cmp	r3, #0
 8007994:	d1e1      	bne.n	800795a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	3314      	adds	r3, #20
 800799c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80079a0:	e853 3f00 	ldrex	r3, [r3]
 80079a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80079a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	3314      	adds	r3, #20
 80079b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80079ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80079bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80079c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80079c2:	e841 2300 	strex	r3, r2, [r1]
 80079c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80079c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d1e3      	bne.n	8007996 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2220      	movs	r2, #32
 80079d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	330c      	adds	r3, #12
 80079e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079e6:	e853 3f00 	ldrex	r3, [r3]
 80079ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80079ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079ee:	f023 0310 	bic.w	r3, r3, #16
 80079f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	330c      	adds	r3, #12
 80079fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007a00:	65ba      	str	r2, [r7, #88]	; 0x58
 8007a02:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007a06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a08:	e841 2300 	strex	r3, r2, [r1]
 8007a0c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007a0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d1e3      	bne.n	80079dc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f7fc ff8d 	bl	8004938 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	1ad3      	subs	r3, r2, r3
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 f8c0 	bl	8007bb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007a34:	e099      	b.n	8007b6a <HAL_UART_IRQHandler+0x50e>
 8007a36:	bf00      	nop
 8007a38:	08007c93 	.word	0x08007c93
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	1ad3      	subs	r3, r2, r3
 8007a48:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	f000 808b 	beq.w	8007b6e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007a58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	f000 8086 	beq.w	8007b6e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	330c      	adds	r3, #12
 8007a68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a6c:	e853 3f00 	ldrex	r3, [r3]
 8007a70:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	330c      	adds	r3, #12
 8007a82:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007a86:	647a      	str	r2, [r7, #68]	; 0x44
 8007a88:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a8e:	e841 2300 	strex	r3, r2, [r1]
 8007a92:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d1e3      	bne.n	8007a62 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	3314      	adds	r3, #20
 8007aa0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa4:	e853 3f00 	ldrex	r3, [r3]
 8007aa8:	623b      	str	r3, [r7, #32]
   return(result);
 8007aaa:	6a3b      	ldr	r3, [r7, #32]
 8007aac:	f023 0301 	bic.w	r3, r3, #1
 8007ab0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	3314      	adds	r3, #20
 8007aba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007abe:	633a      	str	r2, [r7, #48]	; 0x30
 8007ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ac6:	e841 2300 	strex	r3, r2, [r1]
 8007aca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d1e3      	bne.n	8007a9a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2220      	movs	r2, #32
 8007ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	330c      	adds	r3, #12
 8007ae6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	e853 3f00 	ldrex	r3, [r3]
 8007aee:	60fb      	str	r3, [r7, #12]
   return(result);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f023 0310 	bic.w	r3, r3, #16
 8007af6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	330c      	adds	r3, #12
 8007b00:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007b04:	61fa      	str	r2, [r7, #28]
 8007b06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b08:	69b9      	ldr	r1, [r7, #24]
 8007b0a:	69fa      	ldr	r2, [r7, #28]
 8007b0c:	e841 2300 	strex	r3, r2, [r1]
 8007b10:	617b      	str	r3, [r7, #20]
   return(result);
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d1e3      	bne.n	8007ae0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007b18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 f848 	bl	8007bb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007b24:	e023      	b.n	8007b6e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d009      	beq.n	8007b46 <HAL_UART_IRQHandler+0x4ea>
 8007b32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d003      	beq.n	8007b46 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 f8bb 	bl	8007cba <UART_Transmit_IT>
    return;
 8007b44:	e014      	b.n	8007b70 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00e      	beq.n	8007b70 <HAL_UART_IRQHandler+0x514>
 8007b52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d008      	beq.n	8007b70 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 f8fb 	bl	8007d5a <UART_EndTransmit_IT>
    return;
 8007b64:	e004      	b.n	8007b70 <HAL_UART_IRQHandler+0x514>
    return;
 8007b66:	bf00      	nop
 8007b68:	e002      	b.n	8007b70 <HAL_UART_IRQHandler+0x514>
      return;
 8007b6a:	bf00      	nop
 8007b6c:	e000      	b.n	8007b70 <HAL_UART_IRQHandler+0x514>
      return;
 8007b6e:	bf00      	nop
  }
}
 8007b70:	37e8      	adds	r7, #232	; 0xe8
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop

08007b78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007b80:	bf00      	nop
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007b94:	bf00      	nop
 8007b96:	370c      	adds	r7, #12
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr

08007ba0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b083      	sub	sp, #12
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007ba8:	bf00      	nop
 8007baa:	370c      	adds	r7, #12
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr

08007bb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007bc0:	bf00      	nop
 8007bc2:	370c      	adds	r7, #12
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr

08007bcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b095      	sub	sp, #84	; 0x54
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	330c      	adds	r3, #12
 8007bda:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bde:	e853 3f00 	ldrex	r3, [r3]
 8007be2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	330c      	adds	r3, #12
 8007bf2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007bf4:	643a      	str	r2, [r7, #64]	; 0x40
 8007bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007bfa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007bfc:	e841 2300 	strex	r3, r2, [r1]
 8007c00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d1e5      	bne.n	8007bd4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	3314      	adds	r3, #20
 8007c0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c10:	6a3b      	ldr	r3, [r7, #32]
 8007c12:	e853 3f00 	ldrex	r3, [r3]
 8007c16:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c18:	69fb      	ldr	r3, [r7, #28]
 8007c1a:	f023 0301 	bic.w	r3, r3, #1
 8007c1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	3314      	adds	r3, #20
 8007c26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c30:	e841 2300 	strex	r3, r2, [r1]
 8007c34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d1e5      	bne.n	8007c08 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d119      	bne.n	8007c78 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	330c      	adds	r3, #12
 8007c4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	e853 3f00 	ldrex	r3, [r3]
 8007c52:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	f023 0310 	bic.w	r3, r3, #16
 8007c5a:	647b      	str	r3, [r7, #68]	; 0x44
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	330c      	adds	r3, #12
 8007c62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c64:	61ba      	str	r2, [r7, #24]
 8007c66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c68:	6979      	ldr	r1, [r7, #20]
 8007c6a:	69ba      	ldr	r2, [r7, #24]
 8007c6c:	e841 2300 	strex	r3, r2, [r1]
 8007c70:	613b      	str	r3, [r7, #16]
   return(result);
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d1e5      	bne.n	8007c44 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2220      	movs	r2, #32
 8007c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007c86:	bf00      	nop
 8007c88:	3754      	adds	r7, #84	; 0x54
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr

08007c92 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c92:	b580      	push	{r7, lr}
 8007c94:	b084      	sub	sp, #16
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c9e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007cac:	68f8      	ldr	r0, [r7, #12]
 8007cae:	f7ff ff77 	bl	8007ba0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cb2:	bf00      	nop
 8007cb4:	3710      	adds	r7, #16
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}

08007cba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007cba:	b480      	push	{r7}
 8007cbc:	b085      	sub	sp, #20
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	2b21      	cmp	r3, #33	; 0x21
 8007ccc:	d13e      	bne.n	8007d4c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cd6:	d114      	bne.n	8007d02 <UART_Transmit_IT+0x48>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	691b      	ldr	r3, [r3, #16]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d110      	bne.n	8007d02 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6a1b      	ldr	r3, [r3, #32]
 8007ce4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	881b      	ldrh	r3, [r3, #0]
 8007cea:	461a      	mov	r2, r3
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007cf4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6a1b      	ldr	r3, [r3, #32]
 8007cfa:	1c9a      	adds	r2, r3, #2
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	621a      	str	r2, [r3, #32]
 8007d00:	e008      	b.n	8007d14 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6a1b      	ldr	r3, [r3, #32]
 8007d06:	1c59      	adds	r1, r3, #1
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	6211      	str	r1, [r2, #32]
 8007d0c:	781a      	ldrb	r2, [r3, #0]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	3b01      	subs	r3, #1
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	4619      	mov	r1, r3
 8007d22:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d10f      	bne.n	8007d48 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	68da      	ldr	r2, [r3, #12]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d36:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	68da      	ldr	r2, [r3, #12]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d46:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	e000      	b.n	8007d4e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007d4c:	2302      	movs	r3, #2
  }
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3714      	adds	r7, #20
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr

08007d5a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d5a:	b580      	push	{r7, lr}
 8007d5c:	b082      	sub	sp, #8
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	68da      	ldr	r2, [r3, #12]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d70:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2220      	movs	r2, #32
 8007d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f7ff fefc 	bl	8007b78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007d80:	2300      	movs	r3, #0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3708      	adds	r7, #8
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b08c      	sub	sp, #48	; 0x30
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	2b22      	cmp	r3, #34	; 0x22
 8007d9c:	f040 80ab 	bne.w	8007ef6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007da8:	d117      	bne.n	8007dda <UART_Receive_IT+0x50>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	691b      	ldr	r3, [r3, #16]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d113      	bne.n	8007dda <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007db2:	2300      	movs	r3, #0
 8007db4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dc8:	b29a      	uxth	r2, r3
 8007dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dcc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd2:	1c9a      	adds	r2, r3, #2
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	629a      	str	r2, [r3, #40]	; 0x28
 8007dd8:	e026      	b.n	8007e28 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dde:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007de0:	2300      	movs	r3, #0
 8007de2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dec:	d007      	beq.n	8007dfe <UART_Receive_IT+0x74>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d10a      	bne.n	8007e0c <UART_Receive_IT+0x82>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	691b      	ldr	r3, [r3, #16]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d106      	bne.n	8007e0c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	b2da      	uxtb	r2, r3
 8007e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e08:	701a      	strb	r2, [r3, #0]
 8007e0a:	e008      	b.n	8007e1e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e18:	b2da      	uxtb	r2, r3
 8007e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e1c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e22:	1c5a      	adds	r2, r3, #1
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	3b01      	subs	r3, #1
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	4619      	mov	r1, r3
 8007e36:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d15a      	bne.n	8007ef2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	68da      	ldr	r2, [r3, #12]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f022 0220 	bic.w	r2, r2, #32
 8007e4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	68da      	ldr	r2, [r3, #12]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	695a      	ldr	r2, [r3, #20]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f022 0201 	bic.w	r2, r2, #1
 8007e6a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2220      	movs	r2, #32
 8007e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d135      	bne.n	8007ee8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	330c      	adds	r3, #12
 8007e88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	e853 3f00 	ldrex	r3, [r3]
 8007e90:	613b      	str	r3, [r7, #16]
   return(result);
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	f023 0310 	bic.w	r3, r3, #16
 8007e98:	627b      	str	r3, [r7, #36]	; 0x24
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	330c      	adds	r3, #12
 8007ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ea2:	623a      	str	r2, [r7, #32]
 8007ea4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea6:	69f9      	ldr	r1, [r7, #28]
 8007ea8:	6a3a      	ldr	r2, [r7, #32]
 8007eaa:	e841 2300 	strex	r3, r2, [r1]
 8007eae:	61bb      	str	r3, [r7, #24]
   return(result);
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d1e5      	bne.n	8007e82 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f003 0310 	and.w	r3, r3, #16
 8007ec0:	2b10      	cmp	r3, #16
 8007ec2:	d10a      	bne.n	8007eda <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	60fb      	str	r3, [r7, #12]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	60fb      	str	r3, [r7, #12]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	60fb      	str	r3, [r7, #12]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ede:	4619      	mov	r1, r3
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f7ff fe67 	bl	8007bb4 <HAL_UARTEx_RxEventCallback>
 8007ee6:	e002      	b.n	8007eee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f7ff fe4f 	bl	8007b8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	e002      	b.n	8007ef8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	e000      	b.n	8007ef8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007ef6:	2302      	movs	r3, #2
  }
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3730      	adds	r7, #48	; 0x30
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f04:	b0c0      	sub	sp, #256	; 0x100
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	691b      	ldr	r3, [r3, #16]
 8007f14:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f1c:	68d9      	ldr	r1, [r3, #12]
 8007f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	ea40 0301 	orr.w	r3, r0, r1
 8007f28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f2e:	689a      	ldr	r2, [r3, #8]
 8007f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f34:	691b      	ldr	r3, [r3, #16]
 8007f36:	431a      	orrs	r2, r3
 8007f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f3c:	695b      	ldr	r3, [r3, #20]
 8007f3e:	431a      	orrs	r2, r3
 8007f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f44:	69db      	ldr	r3, [r3, #28]
 8007f46:	4313      	orrs	r3, r2
 8007f48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007f58:	f021 010c 	bic.w	r1, r1, #12
 8007f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007f66:	430b      	orrs	r3, r1
 8007f68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	695b      	ldr	r3, [r3, #20]
 8007f72:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f7a:	6999      	ldr	r1, [r3, #24]
 8007f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f80:	681a      	ldr	r2, [r3, #0]
 8007f82:	ea40 0301 	orr.w	r3, r0, r1
 8007f86:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	4b8f      	ldr	r3, [pc, #572]	; (80081cc <UART_SetConfig+0x2cc>)
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d005      	beq.n	8007fa0 <UART_SetConfig+0xa0>
 8007f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	4b8d      	ldr	r3, [pc, #564]	; (80081d0 <UART_SetConfig+0x2d0>)
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d104      	bne.n	8007faa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007fa0:	f7fd fc40 	bl	8005824 <HAL_RCC_GetPCLK2Freq>
 8007fa4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007fa8:	e003      	b.n	8007fb2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007faa:	f7fd fc27 	bl	80057fc <HAL_RCC_GetPCLK1Freq>
 8007fae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fb6:	69db      	ldr	r3, [r3, #28]
 8007fb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fbc:	f040 810c 	bne.w	80081d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007fc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007fca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007fce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007fd2:	4622      	mov	r2, r4
 8007fd4:	462b      	mov	r3, r5
 8007fd6:	1891      	adds	r1, r2, r2
 8007fd8:	65b9      	str	r1, [r7, #88]	; 0x58
 8007fda:	415b      	adcs	r3, r3
 8007fdc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007fde:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007fe2:	4621      	mov	r1, r4
 8007fe4:	eb12 0801 	adds.w	r8, r2, r1
 8007fe8:	4629      	mov	r1, r5
 8007fea:	eb43 0901 	adc.w	r9, r3, r1
 8007fee:	f04f 0200 	mov.w	r2, #0
 8007ff2:	f04f 0300 	mov.w	r3, #0
 8007ff6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007ffa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007ffe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008002:	4690      	mov	r8, r2
 8008004:	4699      	mov	r9, r3
 8008006:	4623      	mov	r3, r4
 8008008:	eb18 0303 	adds.w	r3, r8, r3
 800800c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008010:	462b      	mov	r3, r5
 8008012:	eb49 0303 	adc.w	r3, r9, r3
 8008016:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800801a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008026:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800802a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800802e:	460b      	mov	r3, r1
 8008030:	18db      	adds	r3, r3, r3
 8008032:	653b      	str	r3, [r7, #80]	; 0x50
 8008034:	4613      	mov	r3, r2
 8008036:	eb42 0303 	adc.w	r3, r2, r3
 800803a:	657b      	str	r3, [r7, #84]	; 0x54
 800803c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008040:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008044:	f7f8 fda2 	bl	8000b8c <__aeabi_uldivmod>
 8008048:	4602      	mov	r2, r0
 800804a:	460b      	mov	r3, r1
 800804c:	4b61      	ldr	r3, [pc, #388]	; (80081d4 <UART_SetConfig+0x2d4>)
 800804e:	fba3 2302 	umull	r2, r3, r3, r2
 8008052:	095b      	lsrs	r3, r3, #5
 8008054:	011c      	lsls	r4, r3, #4
 8008056:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800805a:	2200      	movs	r2, #0
 800805c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008060:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008064:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008068:	4642      	mov	r2, r8
 800806a:	464b      	mov	r3, r9
 800806c:	1891      	adds	r1, r2, r2
 800806e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008070:	415b      	adcs	r3, r3
 8008072:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008074:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008078:	4641      	mov	r1, r8
 800807a:	eb12 0a01 	adds.w	sl, r2, r1
 800807e:	4649      	mov	r1, r9
 8008080:	eb43 0b01 	adc.w	fp, r3, r1
 8008084:	f04f 0200 	mov.w	r2, #0
 8008088:	f04f 0300 	mov.w	r3, #0
 800808c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008090:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008094:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008098:	4692      	mov	sl, r2
 800809a:	469b      	mov	fp, r3
 800809c:	4643      	mov	r3, r8
 800809e:	eb1a 0303 	adds.w	r3, sl, r3
 80080a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80080a6:	464b      	mov	r3, r9
 80080a8:	eb4b 0303 	adc.w	r3, fp, r3
 80080ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80080b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	2200      	movs	r2, #0
 80080b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80080bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80080c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80080c4:	460b      	mov	r3, r1
 80080c6:	18db      	adds	r3, r3, r3
 80080c8:	643b      	str	r3, [r7, #64]	; 0x40
 80080ca:	4613      	mov	r3, r2
 80080cc:	eb42 0303 	adc.w	r3, r2, r3
 80080d0:	647b      	str	r3, [r7, #68]	; 0x44
 80080d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80080d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80080da:	f7f8 fd57 	bl	8000b8c <__aeabi_uldivmod>
 80080de:	4602      	mov	r2, r0
 80080e0:	460b      	mov	r3, r1
 80080e2:	4611      	mov	r1, r2
 80080e4:	4b3b      	ldr	r3, [pc, #236]	; (80081d4 <UART_SetConfig+0x2d4>)
 80080e6:	fba3 2301 	umull	r2, r3, r3, r1
 80080ea:	095b      	lsrs	r3, r3, #5
 80080ec:	2264      	movs	r2, #100	; 0x64
 80080ee:	fb02 f303 	mul.w	r3, r2, r3
 80080f2:	1acb      	subs	r3, r1, r3
 80080f4:	00db      	lsls	r3, r3, #3
 80080f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80080fa:	4b36      	ldr	r3, [pc, #216]	; (80081d4 <UART_SetConfig+0x2d4>)
 80080fc:	fba3 2302 	umull	r2, r3, r3, r2
 8008100:	095b      	lsrs	r3, r3, #5
 8008102:	005b      	lsls	r3, r3, #1
 8008104:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008108:	441c      	add	r4, r3
 800810a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800810e:	2200      	movs	r2, #0
 8008110:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008114:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008118:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800811c:	4642      	mov	r2, r8
 800811e:	464b      	mov	r3, r9
 8008120:	1891      	adds	r1, r2, r2
 8008122:	63b9      	str	r1, [r7, #56]	; 0x38
 8008124:	415b      	adcs	r3, r3
 8008126:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008128:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800812c:	4641      	mov	r1, r8
 800812e:	1851      	adds	r1, r2, r1
 8008130:	6339      	str	r1, [r7, #48]	; 0x30
 8008132:	4649      	mov	r1, r9
 8008134:	414b      	adcs	r3, r1
 8008136:	637b      	str	r3, [r7, #52]	; 0x34
 8008138:	f04f 0200 	mov.w	r2, #0
 800813c:	f04f 0300 	mov.w	r3, #0
 8008140:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008144:	4659      	mov	r1, fp
 8008146:	00cb      	lsls	r3, r1, #3
 8008148:	4651      	mov	r1, sl
 800814a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800814e:	4651      	mov	r1, sl
 8008150:	00ca      	lsls	r2, r1, #3
 8008152:	4610      	mov	r0, r2
 8008154:	4619      	mov	r1, r3
 8008156:	4603      	mov	r3, r0
 8008158:	4642      	mov	r2, r8
 800815a:	189b      	adds	r3, r3, r2
 800815c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008160:	464b      	mov	r3, r9
 8008162:	460a      	mov	r2, r1
 8008164:	eb42 0303 	adc.w	r3, r2, r3
 8008168:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800816c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008178:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800817c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008180:	460b      	mov	r3, r1
 8008182:	18db      	adds	r3, r3, r3
 8008184:	62bb      	str	r3, [r7, #40]	; 0x28
 8008186:	4613      	mov	r3, r2
 8008188:	eb42 0303 	adc.w	r3, r2, r3
 800818c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800818e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008192:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008196:	f7f8 fcf9 	bl	8000b8c <__aeabi_uldivmod>
 800819a:	4602      	mov	r2, r0
 800819c:	460b      	mov	r3, r1
 800819e:	4b0d      	ldr	r3, [pc, #52]	; (80081d4 <UART_SetConfig+0x2d4>)
 80081a0:	fba3 1302 	umull	r1, r3, r3, r2
 80081a4:	095b      	lsrs	r3, r3, #5
 80081a6:	2164      	movs	r1, #100	; 0x64
 80081a8:	fb01 f303 	mul.w	r3, r1, r3
 80081ac:	1ad3      	subs	r3, r2, r3
 80081ae:	00db      	lsls	r3, r3, #3
 80081b0:	3332      	adds	r3, #50	; 0x32
 80081b2:	4a08      	ldr	r2, [pc, #32]	; (80081d4 <UART_SetConfig+0x2d4>)
 80081b4:	fba2 2303 	umull	r2, r3, r2, r3
 80081b8:	095b      	lsrs	r3, r3, #5
 80081ba:	f003 0207 	and.w	r2, r3, #7
 80081be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4422      	add	r2, r4
 80081c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80081c8:	e106      	b.n	80083d8 <UART_SetConfig+0x4d8>
 80081ca:	bf00      	nop
 80081cc:	40011000 	.word	0x40011000
 80081d0:	40011400 	.word	0x40011400
 80081d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80081d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081dc:	2200      	movs	r2, #0
 80081de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80081e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80081e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80081ea:	4642      	mov	r2, r8
 80081ec:	464b      	mov	r3, r9
 80081ee:	1891      	adds	r1, r2, r2
 80081f0:	6239      	str	r1, [r7, #32]
 80081f2:	415b      	adcs	r3, r3
 80081f4:	627b      	str	r3, [r7, #36]	; 0x24
 80081f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80081fa:	4641      	mov	r1, r8
 80081fc:	1854      	adds	r4, r2, r1
 80081fe:	4649      	mov	r1, r9
 8008200:	eb43 0501 	adc.w	r5, r3, r1
 8008204:	f04f 0200 	mov.w	r2, #0
 8008208:	f04f 0300 	mov.w	r3, #0
 800820c:	00eb      	lsls	r3, r5, #3
 800820e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008212:	00e2      	lsls	r2, r4, #3
 8008214:	4614      	mov	r4, r2
 8008216:	461d      	mov	r5, r3
 8008218:	4643      	mov	r3, r8
 800821a:	18e3      	adds	r3, r4, r3
 800821c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008220:	464b      	mov	r3, r9
 8008222:	eb45 0303 	adc.w	r3, r5, r3
 8008226:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800822a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008236:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800823a:	f04f 0200 	mov.w	r2, #0
 800823e:	f04f 0300 	mov.w	r3, #0
 8008242:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008246:	4629      	mov	r1, r5
 8008248:	008b      	lsls	r3, r1, #2
 800824a:	4621      	mov	r1, r4
 800824c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008250:	4621      	mov	r1, r4
 8008252:	008a      	lsls	r2, r1, #2
 8008254:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008258:	f7f8 fc98 	bl	8000b8c <__aeabi_uldivmod>
 800825c:	4602      	mov	r2, r0
 800825e:	460b      	mov	r3, r1
 8008260:	4b60      	ldr	r3, [pc, #384]	; (80083e4 <UART_SetConfig+0x4e4>)
 8008262:	fba3 2302 	umull	r2, r3, r3, r2
 8008266:	095b      	lsrs	r3, r3, #5
 8008268:	011c      	lsls	r4, r3, #4
 800826a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800826e:	2200      	movs	r2, #0
 8008270:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008274:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008278:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800827c:	4642      	mov	r2, r8
 800827e:	464b      	mov	r3, r9
 8008280:	1891      	adds	r1, r2, r2
 8008282:	61b9      	str	r1, [r7, #24]
 8008284:	415b      	adcs	r3, r3
 8008286:	61fb      	str	r3, [r7, #28]
 8008288:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800828c:	4641      	mov	r1, r8
 800828e:	1851      	adds	r1, r2, r1
 8008290:	6139      	str	r1, [r7, #16]
 8008292:	4649      	mov	r1, r9
 8008294:	414b      	adcs	r3, r1
 8008296:	617b      	str	r3, [r7, #20]
 8008298:	f04f 0200 	mov.w	r2, #0
 800829c:	f04f 0300 	mov.w	r3, #0
 80082a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80082a4:	4659      	mov	r1, fp
 80082a6:	00cb      	lsls	r3, r1, #3
 80082a8:	4651      	mov	r1, sl
 80082aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80082ae:	4651      	mov	r1, sl
 80082b0:	00ca      	lsls	r2, r1, #3
 80082b2:	4610      	mov	r0, r2
 80082b4:	4619      	mov	r1, r3
 80082b6:	4603      	mov	r3, r0
 80082b8:	4642      	mov	r2, r8
 80082ba:	189b      	adds	r3, r3, r2
 80082bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80082c0:	464b      	mov	r3, r9
 80082c2:	460a      	mov	r2, r1
 80082c4:	eb42 0303 	adc.w	r3, r2, r3
 80082c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80082cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80082d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80082d8:	f04f 0200 	mov.w	r2, #0
 80082dc:	f04f 0300 	mov.w	r3, #0
 80082e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80082e4:	4649      	mov	r1, r9
 80082e6:	008b      	lsls	r3, r1, #2
 80082e8:	4641      	mov	r1, r8
 80082ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80082ee:	4641      	mov	r1, r8
 80082f0:	008a      	lsls	r2, r1, #2
 80082f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80082f6:	f7f8 fc49 	bl	8000b8c <__aeabi_uldivmod>
 80082fa:	4602      	mov	r2, r0
 80082fc:	460b      	mov	r3, r1
 80082fe:	4611      	mov	r1, r2
 8008300:	4b38      	ldr	r3, [pc, #224]	; (80083e4 <UART_SetConfig+0x4e4>)
 8008302:	fba3 2301 	umull	r2, r3, r3, r1
 8008306:	095b      	lsrs	r3, r3, #5
 8008308:	2264      	movs	r2, #100	; 0x64
 800830a:	fb02 f303 	mul.w	r3, r2, r3
 800830e:	1acb      	subs	r3, r1, r3
 8008310:	011b      	lsls	r3, r3, #4
 8008312:	3332      	adds	r3, #50	; 0x32
 8008314:	4a33      	ldr	r2, [pc, #204]	; (80083e4 <UART_SetConfig+0x4e4>)
 8008316:	fba2 2303 	umull	r2, r3, r2, r3
 800831a:	095b      	lsrs	r3, r3, #5
 800831c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008320:	441c      	add	r4, r3
 8008322:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008326:	2200      	movs	r2, #0
 8008328:	673b      	str	r3, [r7, #112]	; 0x70
 800832a:	677a      	str	r2, [r7, #116]	; 0x74
 800832c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008330:	4642      	mov	r2, r8
 8008332:	464b      	mov	r3, r9
 8008334:	1891      	adds	r1, r2, r2
 8008336:	60b9      	str	r1, [r7, #8]
 8008338:	415b      	adcs	r3, r3
 800833a:	60fb      	str	r3, [r7, #12]
 800833c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008340:	4641      	mov	r1, r8
 8008342:	1851      	adds	r1, r2, r1
 8008344:	6039      	str	r1, [r7, #0]
 8008346:	4649      	mov	r1, r9
 8008348:	414b      	adcs	r3, r1
 800834a:	607b      	str	r3, [r7, #4]
 800834c:	f04f 0200 	mov.w	r2, #0
 8008350:	f04f 0300 	mov.w	r3, #0
 8008354:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008358:	4659      	mov	r1, fp
 800835a:	00cb      	lsls	r3, r1, #3
 800835c:	4651      	mov	r1, sl
 800835e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008362:	4651      	mov	r1, sl
 8008364:	00ca      	lsls	r2, r1, #3
 8008366:	4610      	mov	r0, r2
 8008368:	4619      	mov	r1, r3
 800836a:	4603      	mov	r3, r0
 800836c:	4642      	mov	r2, r8
 800836e:	189b      	adds	r3, r3, r2
 8008370:	66bb      	str	r3, [r7, #104]	; 0x68
 8008372:	464b      	mov	r3, r9
 8008374:	460a      	mov	r2, r1
 8008376:	eb42 0303 	adc.w	r3, r2, r3
 800837a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800837c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	2200      	movs	r2, #0
 8008384:	663b      	str	r3, [r7, #96]	; 0x60
 8008386:	667a      	str	r2, [r7, #100]	; 0x64
 8008388:	f04f 0200 	mov.w	r2, #0
 800838c:	f04f 0300 	mov.w	r3, #0
 8008390:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008394:	4649      	mov	r1, r9
 8008396:	008b      	lsls	r3, r1, #2
 8008398:	4641      	mov	r1, r8
 800839a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800839e:	4641      	mov	r1, r8
 80083a0:	008a      	lsls	r2, r1, #2
 80083a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80083a6:	f7f8 fbf1 	bl	8000b8c <__aeabi_uldivmod>
 80083aa:	4602      	mov	r2, r0
 80083ac:	460b      	mov	r3, r1
 80083ae:	4b0d      	ldr	r3, [pc, #52]	; (80083e4 <UART_SetConfig+0x4e4>)
 80083b0:	fba3 1302 	umull	r1, r3, r3, r2
 80083b4:	095b      	lsrs	r3, r3, #5
 80083b6:	2164      	movs	r1, #100	; 0x64
 80083b8:	fb01 f303 	mul.w	r3, r1, r3
 80083bc:	1ad3      	subs	r3, r2, r3
 80083be:	011b      	lsls	r3, r3, #4
 80083c0:	3332      	adds	r3, #50	; 0x32
 80083c2:	4a08      	ldr	r2, [pc, #32]	; (80083e4 <UART_SetConfig+0x4e4>)
 80083c4:	fba2 2303 	umull	r2, r3, r2, r3
 80083c8:	095b      	lsrs	r3, r3, #5
 80083ca:	f003 020f 	and.w	r2, r3, #15
 80083ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4422      	add	r2, r4
 80083d6:	609a      	str	r2, [r3, #8]
}
 80083d8:	bf00      	nop
 80083da:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80083de:	46bd      	mov	sp, r7
 80083e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083e4:	51eb851f 	.word	0x51eb851f

080083e8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b085      	sub	sp, #20
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	4603      	mov	r3, r0
 80083f0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80083f2:	2300      	movs	r3, #0
 80083f4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80083f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80083fa:	2b84      	cmp	r3, #132	; 0x84
 80083fc:	d005      	beq.n	800840a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80083fe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	4413      	add	r3, r2
 8008406:	3303      	adds	r3, #3
 8008408:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800840a:	68fb      	ldr	r3, [r7, #12]
}
 800840c:	4618      	mov	r0, r3
 800840e:	3714      	adds	r7, #20
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr

08008418 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800841c:	f000 faf6 	bl	8008a0c <vTaskStartScheduler>
  
  return osOK;
 8008420:	2300      	movs	r3, #0
}
 8008422:	4618      	mov	r0, r3
 8008424:	bd80      	pop	{r7, pc}

08008426 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008426:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008428:	b089      	sub	sp, #36	; 0x24
 800842a:	af04      	add	r7, sp, #16
 800842c:	6078      	str	r0, [r7, #4]
 800842e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	695b      	ldr	r3, [r3, #20]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d020      	beq.n	800847a <osThreadCreate+0x54>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	699b      	ldr	r3, [r3, #24]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d01c      	beq.n	800847a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	685c      	ldr	r4, [r3, #4]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	691e      	ldr	r6, [r3, #16]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008452:	4618      	mov	r0, r3
 8008454:	f7ff ffc8 	bl	80083e8 <makeFreeRtosPriority>
 8008458:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	695b      	ldr	r3, [r3, #20]
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008462:	9202      	str	r2, [sp, #8]
 8008464:	9301      	str	r3, [sp, #4]
 8008466:	9100      	str	r1, [sp, #0]
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	4632      	mov	r2, r6
 800846c:	4629      	mov	r1, r5
 800846e:	4620      	mov	r0, r4
 8008470:	f000 f8ed 	bl	800864e <xTaskCreateStatic>
 8008474:	4603      	mov	r3, r0
 8008476:	60fb      	str	r3, [r7, #12]
 8008478:	e01c      	b.n	80084b4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	685c      	ldr	r4, [r3, #4]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008486:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800848e:	4618      	mov	r0, r3
 8008490:	f7ff ffaa 	bl	80083e8 <makeFreeRtosPriority>
 8008494:	4602      	mov	r2, r0
 8008496:	f107 030c 	add.w	r3, r7, #12
 800849a:	9301      	str	r3, [sp, #4]
 800849c:	9200      	str	r2, [sp, #0]
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	4632      	mov	r2, r6
 80084a2:	4629      	mov	r1, r5
 80084a4:	4620      	mov	r0, r4
 80084a6:	f000 f92f 	bl	8008708 <xTaskCreate>
 80084aa:	4603      	mov	r3, r0
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d001      	beq.n	80084b4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80084b0:	2300      	movs	r3, #0
 80084b2:	e000      	b.n	80084b6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80084b4:	68fb      	ldr	r3, [r7, #12]
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3714      	adds	r7, #20
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080084be <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80084be:	b580      	push	{r7, lr}
 80084c0:	b084      	sub	sp, #16
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d001      	beq.n	80084d4 <osDelay+0x16>
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	e000      	b.n	80084d6 <osDelay+0x18>
 80084d4:	2301      	movs	r3, #1
 80084d6:	4618      	mov	r0, r3
 80084d8:	f000 fa64 	bl	80089a4 <vTaskDelay>
  
  return osOK;
 80084dc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3710      	adds	r7, #16
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}

080084e6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80084e6:	b480      	push	{r7}
 80084e8:	b083      	sub	sp, #12
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f103 0208 	add.w	r2, r3, #8
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f04f 32ff 	mov.w	r2, #4294967295
 80084fe:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f103 0208 	add.w	r2, r3, #8
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f103 0208 	add.w	r2, r3, #8
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2200      	movs	r2, #0
 8008518:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800851a:	bf00      	nop
 800851c:	370c      	adds	r7, #12
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr

08008526 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008526:	b480      	push	{r7}
 8008528:	b083      	sub	sp, #12
 800852a:	af00      	add	r7, sp, #0
 800852c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008534:	bf00      	nop
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008540:	b480      	push	{r7}
 8008542:	b085      	sub	sp, #20
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	68fa      	ldr	r2, [r7, #12]
 8008554:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	689a      	ldr	r2, [r3, #8]
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	683a      	ldr	r2, [r7, #0]
 8008564:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	683a      	ldr	r2, [r7, #0]
 800856a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	1c5a      	adds	r2, r3, #1
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	601a      	str	r2, [r3, #0]
}
 800857c:	bf00      	nop
 800857e:	3714      	adds	r7, #20
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr

08008588 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008588:	b480      	push	{r7}
 800858a:	b085      	sub	sp, #20
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800859e:	d103      	bne.n	80085a8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	691b      	ldr	r3, [r3, #16]
 80085a4:	60fb      	str	r3, [r7, #12]
 80085a6:	e00c      	b.n	80085c2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	3308      	adds	r3, #8
 80085ac:	60fb      	str	r3, [r7, #12]
 80085ae:	e002      	b.n	80085b6 <vListInsert+0x2e>
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	60fb      	str	r3, [r7, #12]
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	68ba      	ldr	r2, [r7, #8]
 80085be:	429a      	cmp	r2, r3
 80085c0:	d2f6      	bcs.n	80085b0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	685a      	ldr	r2, [r3, #4]
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	683a      	ldr	r2, [r7, #0]
 80085d0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	68fa      	ldr	r2, [r7, #12]
 80085d6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	683a      	ldr	r2, [r7, #0]
 80085dc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	1c5a      	adds	r2, r3, #1
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	601a      	str	r2, [r3, #0]
}
 80085ee:	bf00      	nop
 80085f0:	3714      	adds	r7, #20
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr

080085fa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80085fa:	b480      	push	{r7}
 80085fc:	b085      	sub	sp, #20
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	691b      	ldr	r3, [r3, #16]
 8008606:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	6892      	ldr	r2, [r2, #8]
 8008610:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	6852      	ldr	r2, [r2, #4]
 800861a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	429a      	cmp	r2, r3
 8008624:	d103      	bne.n	800862e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	689a      	ldr	r2, [r3, #8]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2200      	movs	r2, #0
 8008632:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	1e5a      	subs	r2, r3, #1
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
}
 8008642:	4618      	mov	r0, r3
 8008644:	3714      	adds	r7, #20
 8008646:	46bd      	mov	sp, r7
 8008648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864c:	4770      	bx	lr

0800864e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800864e:	b580      	push	{r7, lr}
 8008650:	b08e      	sub	sp, #56	; 0x38
 8008652:	af04      	add	r7, sp, #16
 8008654:	60f8      	str	r0, [r7, #12]
 8008656:	60b9      	str	r1, [r7, #8]
 8008658:	607a      	str	r2, [r7, #4]
 800865a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800865c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800865e:	2b00      	cmp	r3, #0
 8008660:	d10a      	bne.n	8008678 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008666:	f383 8811 	msr	BASEPRI, r3
 800866a:	f3bf 8f6f 	isb	sy
 800866e:	f3bf 8f4f 	dsb	sy
 8008672:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008674:	bf00      	nop
 8008676:	e7fe      	b.n	8008676 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800867a:	2b00      	cmp	r3, #0
 800867c:	d10a      	bne.n	8008694 <xTaskCreateStatic+0x46>
	__asm volatile
 800867e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008682:	f383 8811 	msr	BASEPRI, r3
 8008686:	f3bf 8f6f 	isb	sy
 800868a:	f3bf 8f4f 	dsb	sy
 800868e:	61fb      	str	r3, [r7, #28]
}
 8008690:	bf00      	nop
 8008692:	e7fe      	b.n	8008692 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008694:	23a0      	movs	r3, #160	; 0xa0
 8008696:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	2ba0      	cmp	r3, #160	; 0xa0
 800869c:	d00a      	beq.n	80086b4 <xTaskCreateStatic+0x66>
	__asm volatile
 800869e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a2:	f383 8811 	msr	BASEPRI, r3
 80086a6:	f3bf 8f6f 	isb	sy
 80086aa:	f3bf 8f4f 	dsb	sy
 80086ae:	61bb      	str	r3, [r7, #24]
}
 80086b0:	bf00      	nop
 80086b2:	e7fe      	b.n	80086b2 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80086b4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80086b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d01e      	beq.n	80086fa <xTaskCreateStatic+0xac>
 80086bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d01b      	beq.n	80086fa <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80086c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80086c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086ca:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80086cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ce:	2202      	movs	r2, #2
 80086d0:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80086d4:	2300      	movs	r3, #0
 80086d6:	9303      	str	r3, [sp, #12]
 80086d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086da:	9302      	str	r3, [sp, #8]
 80086dc:	f107 0314 	add.w	r3, r7, #20
 80086e0:	9301      	str	r3, [sp, #4]
 80086e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e4:	9300      	str	r3, [sp, #0]
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	68b9      	ldr	r1, [r7, #8]
 80086ec:	68f8      	ldr	r0, [r7, #12]
 80086ee:	f000 f851 	bl	8008794 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80086f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80086f4:	f000 f8ec 	bl	80088d0 <prvAddNewTaskToReadyList>
 80086f8:	e001      	b.n	80086fe <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80086fa:	2300      	movs	r3, #0
 80086fc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80086fe:	697b      	ldr	r3, [r7, #20]
	}
 8008700:	4618      	mov	r0, r3
 8008702:	3728      	adds	r7, #40	; 0x28
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}

08008708 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008708:	b580      	push	{r7, lr}
 800870a:	b08c      	sub	sp, #48	; 0x30
 800870c:	af04      	add	r7, sp, #16
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	60b9      	str	r1, [r7, #8]
 8008712:	603b      	str	r3, [r7, #0]
 8008714:	4613      	mov	r3, r2
 8008716:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008718:	88fb      	ldrh	r3, [r7, #6]
 800871a:	009b      	lsls	r3, r3, #2
 800871c:	4618      	mov	r0, r3
 800871e:	f000 fef3 	bl	8009508 <pvPortMalloc>
 8008722:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00e      	beq.n	8008748 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800872a:	20a0      	movs	r0, #160	; 0xa0
 800872c:	f000 feec 	bl	8009508 <pvPortMalloc>
 8008730:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008732:	69fb      	ldr	r3, [r7, #28]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d003      	beq.n	8008740 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008738:	69fb      	ldr	r3, [r7, #28]
 800873a:	697a      	ldr	r2, [r7, #20]
 800873c:	631a      	str	r2, [r3, #48]	; 0x30
 800873e:	e005      	b.n	800874c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008740:	6978      	ldr	r0, [r7, #20]
 8008742:	f000 ffad 	bl	80096a0 <vPortFree>
 8008746:	e001      	b.n	800874c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008748:	2300      	movs	r3, #0
 800874a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800874c:	69fb      	ldr	r3, [r7, #28]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d017      	beq.n	8008782 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008752:	69fb      	ldr	r3, [r7, #28]
 8008754:	2200      	movs	r2, #0
 8008756:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800875a:	88fa      	ldrh	r2, [r7, #6]
 800875c:	2300      	movs	r3, #0
 800875e:	9303      	str	r3, [sp, #12]
 8008760:	69fb      	ldr	r3, [r7, #28]
 8008762:	9302      	str	r3, [sp, #8]
 8008764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008766:	9301      	str	r3, [sp, #4]
 8008768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800876a:	9300      	str	r3, [sp, #0]
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	68b9      	ldr	r1, [r7, #8]
 8008770:	68f8      	ldr	r0, [r7, #12]
 8008772:	f000 f80f 	bl	8008794 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008776:	69f8      	ldr	r0, [r7, #28]
 8008778:	f000 f8aa 	bl	80088d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800877c:	2301      	movs	r3, #1
 800877e:	61bb      	str	r3, [r7, #24]
 8008780:	e002      	b.n	8008788 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008782:	f04f 33ff 	mov.w	r3, #4294967295
 8008786:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008788:	69bb      	ldr	r3, [r7, #24]
	}
 800878a:	4618      	mov	r0, r3
 800878c:	3720      	adds	r7, #32
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
	...

08008794 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b088      	sub	sp, #32
 8008798:	af00      	add	r7, sp, #0
 800879a:	60f8      	str	r0, [r7, #12]
 800879c:	60b9      	str	r1, [r7, #8]
 800879e:	607a      	str	r2, [r7, #4]
 80087a0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80087a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80087ac:	3b01      	subs	r3, #1
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	4413      	add	r3, r2
 80087b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	f023 0307 	bic.w	r3, r3, #7
 80087ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80087bc:	69bb      	ldr	r3, [r7, #24]
 80087be:	f003 0307 	and.w	r3, r3, #7
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d00a      	beq.n	80087dc <prvInitialiseNewTask+0x48>
	__asm volatile
 80087c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ca:	f383 8811 	msr	BASEPRI, r3
 80087ce:	f3bf 8f6f 	isb	sy
 80087d2:	f3bf 8f4f 	dsb	sy
 80087d6:	617b      	str	r3, [r7, #20]
}
 80087d8:	bf00      	nop
 80087da:	e7fe      	b.n	80087da <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d01f      	beq.n	8008822 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80087e2:	2300      	movs	r3, #0
 80087e4:	61fb      	str	r3, [r7, #28]
 80087e6:	e012      	b.n	800880e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80087e8:	68ba      	ldr	r2, [r7, #8]
 80087ea:	69fb      	ldr	r3, [r7, #28]
 80087ec:	4413      	add	r3, r2
 80087ee:	7819      	ldrb	r1, [r3, #0]
 80087f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087f2:	69fb      	ldr	r3, [r7, #28]
 80087f4:	4413      	add	r3, r2
 80087f6:	3334      	adds	r3, #52	; 0x34
 80087f8:	460a      	mov	r2, r1
 80087fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80087fc:	68ba      	ldr	r2, [r7, #8]
 80087fe:	69fb      	ldr	r3, [r7, #28]
 8008800:	4413      	add	r3, r2
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d006      	beq.n	8008816 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	3301      	adds	r3, #1
 800880c:	61fb      	str	r3, [r7, #28]
 800880e:	69fb      	ldr	r3, [r7, #28]
 8008810:	2b0f      	cmp	r3, #15
 8008812:	d9e9      	bls.n	80087e8 <prvInitialiseNewTask+0x54>
 8008814:	e000      	b.n	8008818 <prvInitialiseNewTask+0x84>
			{
				break;
 8008816:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800881a:	2200      	movs	r2, #0
 800881c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008820:	e003      	b.n	800882a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008824:	2200      	movs	r2, #0
 8008826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800882a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800882c:	2b06      	cmp	r3, #6
 800882e:	d901      	bls.n	8008834 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008830:	2306      	movs	r3, #6
 8008832:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008836:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008838:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800883a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800883e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008842:	2200      	movs	r2, #0
 8008844:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008848:	3304      	adds	r3, #4
 800884a:	4618      	mov	r0, r3
 800884c:	f7ff fe6b 	bl	8008526 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008852:	3318      	adds	r3, #24
 8008854:	4618      	mov	r0, r3
 8008856:	f7ff fe66 	bl	8008526 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800885a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800885c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800885e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008862:	f1c3 0207 	rsb	r2, r3, #7
 8008866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008868:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800886a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800886c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800886e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008872:	2200      	movs	r2, #0
 8008874:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800887a:	2200      	movs	r2, #0
 800887c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008882:	334c      	adds	r3, #76	; 0x4c
 8008884:	224c      	movs	r2, #76	; 0x4c
 8008886:	2100      	movs	r1, #0
 8008888:	4618      	mov	r0, r3
 800888a:	f001 f93e 	bl	8009b0a <memset>
 800888e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008890:	4a0c      	ldr	r2, [pc, #48]	; (80088c4 <prvInitialiseNewTask+0x130>)
 8008892:	651a      	str	r2, [r3, #80]	; 0x50
 8008894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008896:	4a0c      	ldr	r2, [pc, #48]	; (80088c8 <prvInitialiseNewTask+0x134>)
 8008898:	655a      	str	r2, [r3, #84]	; 0x54
 800889a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800889c:	4a0b      	ldr	r2, [pc, #44]	; (80088cc <prvInitialiseNewTask+0x138>)
 800889e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80088a0:	683a      	ldr	r2, [r7, #0]
 80088a2:	68f9      	ldr	r1, [r7, #12]
 80088a4:	69b8      	ldr	r0, [r7, #24]
 80088a6:	f000 fc1f 	bl	80090e8 <pxPortInitialiseStack>
 80088aa:	4602      	mov	r2, r0
 80088ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80088b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d002      	beq.n	80088bc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80088b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80088bc:	bf00      	nop
 80088be:	3720      	adds	r7, #32
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}
 80088c4:	200045a0 	.word	0x200045a0
 80088c8:	20004608 	.word	0x20004608
 80088cc:	20004670 	.word	0x20004670

080088d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b082      	sub	sp, #8
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80088d8:	f000 fd34 	bl	8009344 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80088dc:	4b2a      	ldr	r3, [pc, #168]	; (8008988 <prvAddNewTaskToReadyList+0xb8>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	3301      	adds	r3, #1
 80088e2:	4a29      	ldr	r2, [pc, #164]	; (8008988 <prvAddNewTaskToReadyList+0xb8>)
 80088e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80088e6:	4b29      	ldr	r3, [pc, #164]	; (800898c <prvAddNewTaskToReadyList+0xbc>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d109      	bne.n	8008902 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80088ee:	4a27      	ldr	r2, [pc, #156]	; (800898c <prvAddNewTaskToReadyList+0xbc>)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80088f4:	4b24      	ldr	r3, [pc, #144]	; (8008988 <prvAddNewTaskToReadyList+0xb8>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d110      	bne.n	800891e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80088fc:	f000 facc 	bl	8008e98 <prvInitialiseTaskLists>
 8008900:	e00d      	b.n	800891e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008902:	4b23      	ldr	r3, [pc, #140]	; (8008990 <prvAddNewTaskToReadyList+0xc0>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d109      	bne.n	800891e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800890a:	4b20      	ldr	r3, [pc, #128]	; (800898c <prvAddNewTaskToReadyList+0xbc>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008914:	429a      	cmp	r2, r3
 8008916:	d802      	bhi.n	800891e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008918:	4a1c      	ldr	r2, [pc, #112]	; (800898c <prvAddNewTaskToReadyList+0xbc>)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800891e:	4b1d      	ldr	r3, [pc, #116]	; (8008994 <prvAddNewTaskToReadyList+0xc4>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	3301      	adds	r3, #1
 8008924:	4a1b      	ldr	r2, [pc, #108]	; (8008994 <prvAddNewTaskToReadyList+0xc4>)
 8008926:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800892c:	2201      	movs	r2, #1
 800892e:	409a      	lsls	r2, r3
 8008930:	4b19      	ldr	r3, [pc, #100]	; (8008998 <prvAddNewTaskToReadyList+0xc8>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4313      	orrs	r3, r2
 8008936:	4a18      	ldr	r2, [pc, #96]	; (8008998 <prvAddNewTaskToReadyList+0xc8>)
 8008938:	6013      	str	r3, [r2, #0]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800893e:	4613      	mov	r3, r2
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	4413      	add	r3, r2
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	4a15      	ldr	r2, [pc, #84]	; (800899c <prvAddNewTaskToReadyList+0xcc>)
 8008948:	441a      	add	r2, r3
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	3304      	adds	r3, #4
 800894e:	4619      	mov	r1, r3
 8008950:	4610      	mov	r0, r2
 8008952:	f7ff fdf5 	bl	8008540 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008956:	f000 fd25 	bl	80093a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800895a:	4b0d      	ldr	r3, [pc, #52]	; (8008990 <prvAddNewTaskToReadyList+0xc0>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d00e      	beq.n	8008980 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008962:	4b0a      	ldr	r3, [pc, #40]	; (800898c <prvAddNewTaskToReadyList+0xbc>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800896c:	429a      	cmp	r2, r3
 800896e:	d207      	bcs.n	8008980 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008970:	4b0b      	ldr	r3, [pc, #44]	; (80089a0 <prvAddNewTaskToReadyList+0xd0>)
 8008972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008976:	601a      	str	r2, [r3, #0]
 8008978:	f3bf 8f4f 	dsb	sy
 800897c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008980:	bf00      	nop
 8008982:	3708      	adds	r7, #8
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}
 8008988:	2000094c 	.word	0x2000094c
 800898c:	2000084c 	.word	0x2000084c
 8008990:	20000958 	.word	0x20000958
 8008994:	20000968 	.word	0x20000968
 8008998:	20000954 	.word	0x20000954
 800899c:	20000850 	.word	0x20000850
 80089a0:	e000ed04 	.word	0xe000ed04

080089a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80089ac:	2300      	movs	r3, #0
 80089ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d017      	beq.n	80089e6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80089b6:	4b13      	ldr	r3, [pc, #76]	; (8008a04 <vTaskDelay+0x60>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d00a      	beq.n	80089d4 <vTaskDelay+0x30>
	__asm volatile
 80089be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c2:	f383 8811 	msr	BASEPRI, r3
 80089c6:	f3bf 8f6f 	isb	sy
 80089ca:	f3bf 8f4f 	dsb	sy
 80089ce:	60bb      	str	r3, [r7, #8]
}
 80089d0:	bf00      	nop
 80089d2:	e7fe      	b.n	80089d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80089d4:	f000 f884 	bl	8008ae0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80089d8:	2100      	movs	r1, #0
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 fb1e 	bl	800901c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80089e0:	f000 f88c 	bl	8008afc <xTaskResumeAll>
 80089e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d107      	bne.n	80089fc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80089ec:	4b06      	ldr	r3, [pc, #24]	; (8008a08 <vTaskDelay+0x64>)
 80089ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089f2:	601a      	str	r2, [r3, #0]
 80089f4:	f3bf 8f4f 	dsb	sy
 80089f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80089fc:	bf00      	nop
 80089fe:	3710      	adds	r7, #16
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}
 8008a04:	20000974 	.word	0x20000974
 8008a08:	e000ed04 	.word	0xe000ed04

08008a0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b08a      	sub	sp, #40	; 0x28
 8008a10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008a12:	2300      	movs	r3, #0
 8008a14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008a16:	2300      	movs	r3, #0
 8008a18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008a1a:	463a      	mov	r2, r7
 8008a1c:	1d39      	adds	r1, r7, #4
 8008a1e:	f107 0308 	add.w	r3, r7, #8
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7f8 ff84 	bl	8001930 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008a28:	6839      	ldr	r1, [r7, #0]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	68ba      	ldr	r2, [r7, #8]
 8008a2e:	9202      	str	r2, [sp, #8]
 8008a30:	9301      	str	r3, [sp, #4]
 8008a32:	2300      	movs	r3, #0
 8008a34:	9300      	str	r3, [sp, #0]
 8008a36:	2300      	movs	r3, #0
 8008a38:	460a      	mov	r2, r1
 8008a3a:	4921      	ldr	r1, [pc, #132]	; (8008ac0 <vTaskStartScheduler+0xb4>)
 8008a3c:	4821      	ldr	r0, [pc, #132]	; (8008ac4 <vTaskStartScheduler+0xb8>)
 8008a3e:	f7ff fe06 	bl	800864e <xTaskCreateStatic>
 8008a42:	4603      	mov	r3, r0
 8008a44:	4a20      	ldr	r2, [pc, #128]	; (8008ac8 <vTaskStartScheduler+0xbc>)
 8008a46:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008a48:	4b1f      	ldr	r3, [pc, #124]	; (8008ac8 <vTaskStartScheduler+0xbc>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d002      	beq.n	8008a56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008a50:	2301      	movs	r3, #1
 8008a52:	617b      	str	r3, [r7, #20]
 8008a54:	e001      	b.n	8008a5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008a56:	2300      	movs	r3, #0
 8008a58:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d11b      	bne.n	8008a98 <vTaskStartScheduler+0x8c>
	__asm volatile
 8008a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a64:	f383 8811 	msr	BASEPRI, r3
 8008a68:	f3bf 8f6f 	isb	sy
 8008a6c:	f3bf 8f4f 	dsb	sy
 8008a70:	613b      	str	r3, [r7, #16]
}
 8008a72:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008a74:	4b15      	ldr	r3, [pc, #84]	; (8008acc <vTaskStartScheduler+0xc0>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	334c      	adds	r3, #76	; 0x4c
 8008a7a:	4a15      	ldr	r2, [pc, #84]	; (8008ad0 <vTaskStartScheduler+0xc4>)
 8008a7c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008a7e:	4b15      	ldr	r3, [pc, #84]	; (8008ad4 <vTaskStartScheduler+0xc8>)
 8008a80:	f04f 32ff 	mov.w	r2, #4294967295
 8008a84:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008a86:	4b14      	ldr	r3, [pc, #80]	; (8008ad8 <vTaskStartScheduler+0xcc>)
 8008a88:	2201      	movs	r2, #1
 8008a8a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008a8c:	4b13      	ldr	r3, [pc, #76]	; (8008adc <vTaskStartScheduler+0xd0>)
 8008a8e:	2200      	movs	r2, #0
 8008a90:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008a92:	f000 fbb5 	bl	8009200 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008a96:	e00e      	b.n	8008ab6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a9e:	d10a      	bne.n	8008ab6 <vTaskStartScheduler+0xaa>
	__asm volatile
 8008aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa4:	f383 8811 	msr	BASEPRI, r3
 8008aa8:	f3bf 8f6f 	isb	sy
 8008aac:	f3bf 8f4f 	dsb	sy
 8008ab0:	60fb      	str	r3, [r7, #12]
}
 8008ab2:	bf00      	nop
 8008ab4:	e7fe      	b.n	8008ab4 <vTaskStartScheduler+0xa8>
}
 8008ab6:	bf00      	nop
 8008ab8:	3718      	adds	r7, #24
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	bf00      	nop
 8008ac0:	0800a8e8 	.word	0x0800a8e8
 8008ac4:	08008e69 	.word	0x08008e69
 8008ac8:	20000970 	.word	0x20000970
 8008acc:	2000084c 	.word	0x2000084c
 8008ad0:	20000184 	.word	0x20000184
 8008ad4:	2000096c 	.word	0x2000096c
 8008ad8:	20000958 	.word	0x20000958
 8008adc:	20000950 	.word	0x20000950

08008ae0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008ae4:	4b04      	ldr	r3, [pc, #16]	; (8008af8 <vTaskSuspendAll+0x18>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	3301      	adds	r3, #1
 8008aea:	4a03      	ldr	r2, [pc, #12]	; (8008af8 <vTaskSuspendAll+0x18>)
 8008aec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008aee:	bf00      	nop
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr
 8008af8:	20000974 	.word	0x20000974

08008afc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008b02:	2300      	movs	r3, #0
 8008b04:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008b06:	2300      	movs	r3, #0
 8008b08:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008b0a:	4b41      	ldr	r3, [pc, #260]	; (8008c10 <xTaskResumeAll+0x114>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d10a      	bne.n	8008b28 <xTaskResumeAll+0x2c>
	__asm volatile
 8008b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b16:	f383 8811 	msr	BASEPRI, r3
 8008b1a:	f3bf 8f6f 	isb	sy
 8008b1e:	f3bf 8f4f 	dsb	sy
 8008b22:	603b      	str	r3, [r7, #0]
}
 8008b24:	bf00      	nop
 8008b26:	e7fe      	b.n	8008b26 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008b28:	f000 fc0c 	bl	8009344 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008b2c:	4b38      	ldr	r3, [pc, #224]	; (8008c10 <xTaskResumeAll+0x114>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	3b01      	subs	r3, #1
 8008b32:	4a37      	ldr	r2, [pc, #220]	; (8008c10 <xTaskResumeAll+0x114>)
 8008b34:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b36:	4b36      	ldr	r3, [pc, #216]	; (8008c10 <xTaskResumeAll+0x114>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d161      	bne.n	8008c02 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008b3e:	4b35      	ldr	r3, [pc, #212]	; (8008c14 <xTaskResumeAll+0x118>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d05d      	beq.n	8008c02 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b46:	e02e      	b.n	8008ba6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b48:	4b33      	ldr	r3, [pc, #204]	; (8008c18 <xTaskResumeAll+0x11c>)
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	68db      	ldr	r3, [r3, #12]
 8008b4e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	3318      	adds	r3, #24
 8008b54:	4618      	mov	r0, r3
 8008b56:	f7ff fd50 	bl	80085fa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	3304      	adds	r3, #4
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f7ff fd4b 	bl	80085fa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b68:	2201      	movs	r2, #1
 8008b6a:	409a      	lsls	r2, r3
 8008b6c:	4b2b      	ldr	r3, [pc, #172]	; (8008c1c <xTaskResumeAll+0x120>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4313      	orrs	r3, r2
 8008b72:	4a2a      	ldr	r2, [pc, #168]	; (8008c1c <xTaskResumeAll+0x120>)
 8008b74:	6013      	str	r3, [r2, #0]
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b7a:	4613      	mov	r3, r2
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	4413      	add	r3, r2
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	4a27      	ldr	r2, [pc, #156]	; (8008c20 <xTaskResumeAll+0x124>)
 8008b84:	441a      	add	r2, r3
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	3304      	adds	r3, #4
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	4610      	mov	r0, r2
 8008b8e:	f7ff fcd7 	bl	8008540 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b96:	4b23      	ldr	r3, [pc, #140]	; (8008c24 <xTaskResumeAll+0x128>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d302      	bcc.n	8008ba6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008ba0:	4b21      	ldr	r3, [pc, #132]	; (8008c28 <xTaskResumeAll+0x12c>)
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008ba6:	4b1c      	ldr	r3, [pc, #112]	; (8008c18 <xTaskResumeAll+0x11c>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d1cc      	bne.n	8008b48 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d001      	beq.n	8008bb8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008bb4:	f000 fa12 	bl	8008fdc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008bb8:	4b1c      	ldr	r3, [pc, #112]	; (8008c2c <xTaskResumeAll+0x130>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d010      	beq.n	8008be6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008bc4:	f000 f836 	bl	8008c34 <xTaskIncrementTick>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d002      	beq.n	8008bd4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008bce:	4b16      	ldr	r3, [pc, #88]	; (8008c28 <xTaskResumeAll+0x12c>)
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	3b01      	subs	r3, #1
 8008bd8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d1f1      	bne.n	8008bc4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008be0:	4b12      	ldr	r3, [pc, #72]	; (8008c2c <xTaskResumeAll+0x130>)
 8008be2:	2200      	movs	r2, #0
 8008be4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008be6:	4b10      	ldr	r3, [pc, #64]	; (8008c28 <xTaskResumeAll+0x12c>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d009      	beq.n	8008c02 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008bf2:	4b0f      	ldr	r3, [pc, #60]	; (8008c30 <xTaskResumeAll+0x134>)
 8008bf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bf8:	601a      	str	r2, [r3, #0]
 8008bfa:	f3bf 8f4f 	dsb	sy
 8008bfe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c02:	f000 fbcf 	bl	80093a4 <vPortExitCritical>

	return xAlreadyYielded;
 8008c06:	68bb      	ldr	r3, [r7, #8]
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3710      	adds	r7, #16
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}
 8008c10:	20000974 	.word	0x20000974
 8008c14:	2000094c 	.word	0x2000094c
 8008c18:	2000090c 	.word	0x2000090c
 8008c1c:	20000954 	.word	0x20000954
 8008c20:	20000850 	.word	0x20000850
 8008c24:	2000084c 	.word	0x2000084c
 8008c28:	20000960 	.word	0x20000960
 8008c2c:	2000095c 	.word	0x2000095c
 8008c30:	e000ed04 	.word	0xe000ed04

08008c34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b086      	sub	sp, #24
 8008c38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c3e:	4b4e      	ldr	r3, [pc, #312]	; (8008d78 <xTaskIncrementTick+0x144>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	f040 808e 	bne.w	8008d64 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008c48:	4b4c      	ldr	r3, [pc, #304]	; (8008d7c <xTaskIncrementTick+0x148>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008c50:	4a4a      	ldr	r2, [pc, #296]	; (8008d7c <xTaskIncrementTick+0x148>)
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d120      	bne.n	8008c9e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008c5c:	4b48      	ldr	r3, [pc, #288]	; (8008d80 <xTaskIncrementTick+0x14c>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d00a      	beq.n	8008c7c <xTaskIncrementTick+0x48>
	__asm volatile
 8008c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c6a:	f383 8811 	msr	BASEPRI, r3
 8008c6e:	f3bf 8f6f 	isb	sy
 8008c72:	f3bf 8f4f 	dsb	sy
 8008c76:	603b      	str	r3, [r7, #0]
}
 8008c78:	bf00      	nop
 8008c7a:	e7fe      	b.n	8008c7a <xTaskIncrementTick+0x46>
 8008c7c:	4b40      	ldr	r3, [pc, #256]	; (8008d80 <xTaskIncrementTick+0x14c>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	60fb      	str	r3, [r7, #12]
 8008c82:	4b40      	ldr	r3, [pc, #256]	; (8008d84 <xTaskIncrementTick+0x150>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a3e      	ldr	r2, [pc, #248]	; (8008d80 <xTaskIncrementTick+0x14c>)
 8008c88:	6013      	str	r3, [r2, #0]
 8008c8a:	4a3e      	ldr	r2, [pc, #248]	; (8008d84 <xTaskIncrementTick+0x150>)
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6013      	str	r3, [r2, #0]
 8008c90:	4b3d      	ldr	r3, [pc, #244]	; (8008d88 <xTaskIncrementTick+0x154>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	3301      	adds	r3, #1
 8008c96:	4a3c      	ldr	r2, [pc, #240]	; (8008d88 <xTaskIncrementTick+0x154>)
 8008c98:	6013      	str	r3, [r2, #0]
 8008c9a:	f000 f99f 	bl	8008fdc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008c9e:	4b3b      	ldr	r3, [pc, #236]	; (8008d8c <xTaskIncrementTick+0x158>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	693a      	ldr	r2, [r7, #16]
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d348      	bcc.n	8008d3a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ca8:	4b35      	ldr	r3, [pc, #212]	; (8008d80 <xTaskIncrementTick+0x14c>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d104      	bne.n	8008cbc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cb2:	4b36      	ldr	r3, [pc, #216]	; (8008d8c <xTaskIncrementTick+0x158>)
 8008cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8008cb8:	601a      	str	r2, [r3, #0]
					break;
 8008cba:	e03e      	b.n	8008d3a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cbc:	4b30      	ldr	r3, [pc, #192]	; (8008d80 <xTaskIncrementTick+0x14c>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	68db      	ldr	r3, [r3, #12]
 8008cc2:	68db      	ldr	r3, [r3, #12]
 8008cc4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008ccc:	693a      	ldr	r2, [r7, #16]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d203      	bcs.n	8008cdc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008cd4:	4a2d      	ldr	r2, [pc, #180]	; (8008d8c <xTaskIncrementTick+0x158>)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008cda:	e02e      	b.n	8008d3a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	3304      	adds	r3, #4
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f7ff fc8a 	bl	80085fa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d004      	beq.n	8008cf8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	3318      	adds	r3, #24
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7ff fc81 	bl	80085fa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	409a      	lsls	r2, r3
 8008d00:	4b23      	ldr	r3, [pc, #140]	; (8008d90 <xTaskIncrementTick+0x15c>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4313      	orrs	r3, r2
 8008d06:	4a22      	ldr	r2, [pc, #136]	; (8008d90 <xTaskIncrementTick+0x15c>)
 8008d08:	6013      	str	r3, [r2, #0]
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d0e:	4613      	mov	r3, r2
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	4413      	add	r3, r2
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	4a1f      	ldr	r2, [pc, #124]	; (8008d94 <xTaskIncrementTick+0x160>)
 8008d18:	441a      	add	r2, r3
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	3304      	adds	r3, #4
 8008d1e:	4619      	mov	r1, r3
 8008d20:	4610      	mov	r0, r2
 8008d22:	f7ff fc0d 	bl	8008540 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d2a:	4b1b      	ldr	r3, [pc, #108]	; (8008d98 <xTaskIncrementTick+0x164>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d3b9      	bcc.n	8008ca8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008d34:	2301      	movs	r3, #1
 8008d36:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d38:	e7b6      	b.n	8008ca8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008d3a:	4b17      	ldr	r3, [pc, #92]	; (8008d98 <xTaskIncrementTick+0x164>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d40:	4914      	ldr	r1, [pc, #80]	; (8008d94 <xTaskIncrementTick+0x160>)
 8008d42:	4613      	mov	r3, r2
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	4413      	add	r3, r2
 8008d48:	009b      	lsls	r3, r3, #2
 8008d4a:	440b      	add	r3, r1
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	d901      	bls.n	8008d56 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8008d52:	2301      	movs	r3, #1
 8008d54:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008d56:	4b11      	ldr	r3, [pc, #68]	; (8008d9c <xTaskIncrementTick+0x168>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d007      	beq.n	8008d6e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	617b      	str	r3, [r7, #20]
 8008d62:	e004      	b.n	8008d6e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008d64:	4b0e      	ldr	r3, [pc, #56]	; (8008da0 <xTaskIncrementTick+0x16c>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	3301      	adds	r3, #1
 8008d6a:	4a0d      	ldr	r2, [pc, #52]	; (8008da0 <xTaskIncrementTick+0x16c>)
 8008d6c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008d6e:	697b      	ldr	r3, [r7, #20]
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3718      	adds	r7, #24
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	20000974 	.word	0x20000974
 8008d7c:	20000950 	.word	0x20000950
 8008d80:	20000904 	.word	0x20000904
 8008d84:	20000908 	.word	0x20000908
 8008d88:	20000964 	.word	0x20000964
 8008d8c:	2000096c 	.word	0x2000096c
 8008d90:	20000954 	.word	0x20000954
 8008d94:	20000850 	.word	0x20000850
 8008d98:	2000084c 	.word	0x2000084c
 8008d9c:	20000960 	.word	0x20000960
 8008da0:	2000095c 	.word	0x2000095c

08008da4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008da4:	b480      	push	{r7}
 8008da6:	b087      	sub	sp, #28
 8008da8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008daa:	4b29      	ldr	r3, [pc, #164]	; (8008e50 <vTaskSwitchContext+0xac>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d003      	beq.n	8008dba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008db2:	4b28      	ldr	r3, [pc, #160]	; (8008e54 <vTaskSwitchContext+0xb0>)
 8008db4:	2201      	movs	r2, #1
 8008db6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008db8:	e044      	b.n	8008e44 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8008dba:	4b26      	ldr	r3, [pc, #152]	; (8008e54 <vTaskSwitchContext+0xb0>)
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008dc0:	4b25      	ldr	r3, [pc, #148]	; (8008e58 <vTaskSwitchContext+0xb4>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	fab3 f383 	clz	r3, r3
 8008dcc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008dce:	7afb      	ldrb	r3, [r7, #11]
 8008dd0:	f1c3 031f 	rsb	r3, r3, #31
 8008dd4:	617b      	str	r3, [r7, #20]
 8008dd6:	4921      	ldr	r1, [pc, #132]	; (8008e5c <vTaskSwitchContext+0xb8>)
 8008dd8:	697a      	ldr	r2, [r7, #20]
 8008dda:	4613      	mov	r3, r2
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	4413      	add	r3, r2
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	440b      	add	r3, r1
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d10a      	bne.n	8008e00 <vTaskSwitchContext+0x5c>
	__asm volatile
 8008dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dee:	f383 8811 	msr	BASEPRI, r3
 8008df2:	f3bf 8f6f 	isb	sy
 8008df6:	f3bf 8f4f 	dsb	sy
 8008dfa:	607b      	str	r3, [r7, #4]
}
 8008dfc:	bf00      	nop
 8008dfe:	e7fe      	b.n	8008dfe <vTaskSwitchContext+0x5a>
 8008e00:	697a      	ldr	r2, [r7, #20]
 8008e02:	4613      	mov	r3, r2
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	4413      	add	r3, r2
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	4a14      	ldr	r2, [pc, #80]	; (8008e5c <vTaskSwitchContext+0xb8>)
 8008e0c:	4413      	add	r3, r2
 8008e0e:	613b      	str	r3, [r7, #16]
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	685a      	ldr	r2, [r3, #4]
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	605a      	str	r2, [r3, #4]
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	685a      	ldr	r2, [r3, #4]
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	3308      	adds	r3, #8
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d104      	bne.n	8008e30 <vTaskSwitchContext+0x8c>
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	685a      	ldr	r2, [r3, #4]
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	605a      	str	r2, [r3, #4]
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	68db      	ldr	r3, [r3, #12]
 8008e36:	4a0a      	ldr	r2, [pc, #40]	; (8008e60 <vTaskSwitchContext+0xbc>)
 8008e38:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008e3a:	4b09      	ldr	r3, [pc, #36]	; (8008e60 <vTaskSwitchContext+0xbc>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	334c      	adds	r3, #76	; 0x4c
 8008e40:	4a08      	ldr	r2, [pc, #32]	; (8008e64 <vTaskSwitchContext+0xc0>)
 8008e42:	6013      	str	r3, [r2, #0]
}
 8008e44:	bf00      	nop
 8008e46:	371c      	adds	r7, #28
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr
 8008e50:	20000974 	.word	0x20000974
 8008e54:	20000960 	.word	0x20000960
 8008e58:	20000954 	.word	0x20000954
 8008e5c:	20000850 	.word	0x20000850
 8008e60:	2000084c 	.word	0x2000084c
 8008e64:	20000184 	.word	0x20000184

08008e68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008e70:	f000 f852 	bl	8008f18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008e74:	4b06      	ldr	r3, [pc, #24]	; (8008e90 <prvIdleTask+0x28>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	d9f9      	bls.n	8008e70 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008e7c:	4b05      	ldr	r3, [pc, #20]	; (8008e94 <prvIdleTask+0x2c>)
 8008e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e82:	601a      	str	r2, [r3, #0]
 8008e84:	f3bf 8f4f 	dsb	sy
 8008e88:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008e8c:	e7f0      	b.n	8008e70 <prvIdleTask+0x8>
 8008e8e:	bf00      	nop
 8008e90:	20000850 	.word	0x20000850
 8008e94:	e000ed04 	.word	0xe000ed04

08008e98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b082      	sub	sp, #8
 8008e9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	607b      	str	r3, [r7, #4]
 8008ea2:	e00c      	b.n	8008ebe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	4613      	mov	r3, r2
 8008ea8:	009b      	lsls	r3, r3, #2
 8008eaa:	4413      	add	r3, r2
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	4a12      	ldr	r2, [pc, #72]	; (8008ef8 <prvInitialiseTaskLists+0x60>)
 8008eb0:	4413      	add	r3, r2
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f7ff fb17 	bl	80084e6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	3301      	adds	r3, #1
 8008ebc:	607b      	str	r3, [r7, #4]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2b06      	cmp	r3, #6
 8008ec2:	d9ef      	bls.n	8008ea4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008ec4:	480d      	ldr	r0, [pc, #52]	; (8008efc <prvInitialiseTaskLists+0x64>)
 8008ec6:	f7ff fb0e 	bl	80084e6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008eca:	480d      	ldr	r0, [pc, #52]	; (8008f00 <prvInitialiseTaskLists+0x68>)
 8008ecc:	f7ff fb0b 	bl	80084e6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008ed0:	480c      	ldr	r0, [pc, #48]	; (8008f04 <prvInitialiseTaskLists+0x6c>)
 8008ed2:	f7ff fb08 	bl	80084e6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008ed6:	480c      	ldr	r0, [pc, #48]	; (8008f08 <prvInitialiseTaskLists+0x70>)
 8008ed8:	f7ff fb05 	bl	80084e6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008edc:	480b      	ldr	r0, [pc, #44]	; (8008f0c <prvInitialiseTaskLists+0x74>)
 8008ede:	f7ff fb02 	bl	80084e6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008ee2:	4b0b      	ldr	r3, [pc, #44]	; (8008f10 <prvInitialiseTaskLists+0x78>)
 8008ee4:	4a05      	ldr	r2, [pc, #20]	; (8008efc <prvInitialiseTaskLists+0x64>)
 8008ee6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008ee8:	4b0a      	ldr	r3, [pc, #40]	; (8008f14 <prvInitialiseTaskLists+0x7c>)
 8008eea:	4a05      	ldr	r2, [pc, #20]	; (8008f00 <prvInitialiseTaskLists+0x68>)
 8008eec:	601a      	str	r2, [r3, #0]
}
 8008eee:	bf00      	nop
 8008ef0:	3708      	adds	r7, #8
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
 8008ef6:	bf00      	nop
 8008ef8:	20000850 	.word	0x20000850
 8008efc:	200008dc 	.word	0x200008dc
 8008f00:	200008f0 	.word	0x200008f0
 8008f04:	2000090c 	.word	0x2000090c
 8008f08:	20000920 	.word	0x20000920
 8008f0c:	20000938 	.word	0x20000938
 8008f10:	20000904 	.word	0x20000904
 8008f14:	20000908 	.word	0x20000908

08008f18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f1e:	e019      	b.n	8008f54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008f20:	f000 fa10 	bl	8009344 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f24:	4b10      	ldr	r3, [pc, #64]	; (8008f68 <prvCheckTasksWaitingTermination+0x50>)
 8008f26:	68db      	ldr	r3, [r3, #12]
 8008f28:	68db      	ldr	r3, [r3, #12]
 8008f2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	3304      	adds	r3, #4
 8008f30:	4618      	mov	r0, r3
 8008f32:	f7ff fb62 	bl	80085fa <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008f36:	4b0d      	ldr	r3, [pc, #52]	; (8008f6c <prvCheckTasksWaitingTermination+0x54>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	3b01      	subs	r3, #1
 8008f3c:	4a0b      	ldr	r2, [pc, #44]	; (8008f6c <prvCheckTasksWaitingTermination+0x54>)
 8008f3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008f40:	4b0b      	ldr	r3, [pc, #44]	; (8008f70 <prvCheckTasksWaitingTermination+0x58>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	3b01      	subs	r3, #1
 8008f46:	4a0a      	ldr	r2, [pc, #40]	; (8008f70 <prvCheckTasksWaitingTermination+0x58>)
 8008f48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008f4a:	f000 fa2b 	bl	80093a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 f810 	bl	8008f74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f54:	4b06      	ldr	r3, [pc, #24]	; (8008f70 <prvCheckTasksWaitingTermination+0x58>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d1e1      	bne.n	8008f20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008f5c:	bf00      	nop
 8008f5e:	bf00      	nop
 8008f60:	3708      	adds	r7, #8
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	bf00      	nop
 8008f68:	20000920 	.word	0x20000920
 8008f6c:	2000094c 	.word	0x2000094c
 8008f70:	20000934 	.word	0x20000934

08008f74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	334c      	adds	r3, #76	; 0x4c
 8008f80:	4618      	mov	r0, r3
 8008f82:	f000 fddb 	bl	8009b3c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d108      	bne.n	8008fa2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f94:	4618      	mov	r0, r3
 8008f96:	f000 fb83 	bl	80096a0 <vPortFree>
				vPortFree( pxTCB );
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 fb80 	bl	80096a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008fa0:	e018      	b.n	8008fd4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d103      	bne.n	8008fb4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f000 fb77 	bl	80096a0 <vPortFree>
	}
 8008fb2:	e00f      	b.n	8008fd4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8008fba:	2b02      	cmp	r3, #2
 8008fbc:	d00a      	beq.n	8008fd4 <prvDeleteTCB+0x60>
	__asm volatile
 8008fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc2:	f383 8811 	msr	BASEPRI, r3
 8008fc6:	f3bf 8f6f 	isb	sy
 8008fca:	f3bf 8f4f 	dsb	sy
 8008fce:	60fb      	str	r3, [r7, #12]
}
 8008fd0:	bf00      	nop
 8008fd2:	e7fe      	b.n	8008fd2 <prvDeleteTCB+0x5e>
	}
 8008fd4:	bf00      	nop
 8008fd6:	3710      	adds	r7, #16
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b083      	sub	sp, #12
 8008fe0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008fe2:	4b0c      	ldr	r3, [pc, #48]	; (8009014 <prvResetNextTaskUnblockTime+0x38>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d104      	bne.n	8008ff6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008fec:	4b0a      	ldr	r3, [pc, #40]	; (8009018 <prvResetNextTaskUnblockTime+0x3c>)
 8008fee:	f04f 32ff 	mov.w	r2, #4294967295
 8008ff2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008ff4:	e008      	b.n	8009008 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ff6:	4b07      	ldr	r3, [pc, #28]	; (8009014 <prvResetNextTaskUnblockTime+0x38>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	68db      	ldr	r3, [r3, #12]
 8008ffc:	68db      	ldr	r3, [r3, #12]
 8008ffe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	4a04      	ldr	r2, [pc, #16]	; (8009018 <prvResetNextTaskUnblockTime+0x3c>)
 8009006:	6013      	str	r3, [r2, #0]
}
 8009008:	bf00      	nop
 800900a:	370c      	adds	r7, #12
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr
 8009014:	20000904 	.word	0x20000904
 8009018:	2000096c 	.word	0x2000096c

0800901c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009026:	4b29      	ldr	r3, [pc, #164]	; (80090cc <prvAddCurrentTaskToDelayedList+0xb0>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800902c:	4b28      	ldr	r3, [pc, #160]	; (80090d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	3304      	adds	r3, #4
 8009032:	4618      	mov	r0, r3
 8009034:	f7ff fae1 	bl	80085fa <uxListRemove>
 8009038:	4603      	mov	r3, r0
 800903a:	2b00      	cmp	r3, #0
 800903c:	d10b      	bne.n	8009056 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800903e:	4b24      	ldr	r3, [pc, #144]	; (80090d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009044:	2201      	movs	r2, #1
 8009046:	fa02 f303 	lsl.w	r3, r2, r3
 800904a:	43da      	mvns	r2, r3
 800904c:	4b21      	ldr	r3, [pc, #132]	; (80090d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4013      	ands	r3, r2
 8009052:	4a20      	ldr	r2, [pc, #128]	; (80090d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009054:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800905c:	d10a      	bne.n	8009074 <prvAddCurrentTaskToDelayedList+0x58>
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d007      	beq.n	8009074 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009064:	4b1a      	ldr	r3, [pc, #104]	; (80090d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	3304      	adds	r3, #4
 800906a:	4619      	mov	r1, r3
 800906c:	481a      	ldr	r0, [pc, #104]	; (80090d8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800906e:	f7ff fa67 	bl	8008540 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009072:	e026      	b.n	80090c2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009074:	68fa      	ldr	r2, [r7, #12]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	4413      	add	r3, r2
 800907a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800907c:	4b14      	ldr	r3, [pc, #80]	; (80090d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	68ba      	ldr	r2, [r7, #8]
 8009082:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009084:	68ba      	ldr	r2, [r7, #8]
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	429a      	cmp	r2, r3
 800908a:	d209      	bcs.n	80090a0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800908c:	4b13      	ldr	r3, [pc, #76]	; (80090dc <prvAddCurrentTaskToDelayedList+0xc0>)
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	4b0f      	ldr	r3, [pc, #60]	; (80090d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	3304      	adds	r3, #4
 8009096:	4619      	mov	r1, r3
 8009098:	4610      	mov	r0, r2
 800909a:	f7ff fa75 	bl	8008588 <vListInsert>
}
 800909e:	e010      	b.n	80090c2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80090a0:	4b0f      	ldr	r3, [pc, #60]	; (80090e0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	4b0a      	ldr	r3, [pc, #40]	; (80090d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	3304      	adds	r3, #4
 80090aa:	4619      	mov	r1, r3
 80090ac:	4610      	mov	r0, r2
 80090ae:	f7ff fa6b 	bl	8008588 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80090b2:	4b0c      	ldr	r3, [pc, #48]	; (80090e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	68ba      	ldr	r2, [r7, #8]
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d202      	bcs.n	80090c2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80090bc:	4a09      	ldr	r2, [pc, #36]	; (80090e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	6013      	str	r3, [r2, #0]
}
 80090c2:	bf00      	nop
 80090c4:	3710      	adds	r7, #16
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	bf00      	nop
 80090cc:	20000950 	.word	0x20000950
 80090d0:	2000084c 	.word	0x2000084c
 80090d4:	20000954 	.word	0x20000954
 80090d8:	20000938 	.word	0x20000938
 80090dc:	20000908 	.word	0x20000908
 80090e0:	20000904 	.word	0x20000904
 80090e4:	2000096c 	.word	0x2000096c

080090e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80090e8:	b480      	push	{r7}
 80090ea:	b085      	sub	sp, #20
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	3b04      	subs	r3, #4
 80090f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009100:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	3b04      	subs	r3, #4
 8009106:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	f023 0201 	bic.w	r2, r3, #1
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	3b04      	subs	r3, #4
 8009116:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009118:	4a0c      	ldr	r2, [pc, #48]	; (800914c <pxPortInitialiseStack+0x64>)
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	3b14      	subs	r3, #20
 8009122:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	3b04      	subs	r3, #4
 800912e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f06f 0202 	mvn.w	r2, #2
 8009136:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	3b20      	subs	r3, #32
 800913c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800913e:	68fb      	ldr	r3, [r7, #12]
}
 8009140:	4618      	mov	r0, r3
 8009142:	3714      	adds	r7, #20
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr
 800914c:	08009151 	.word	0x08009151

08009150 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009150:	b480      	push	{r7}
 8009152:	b085      	sub	sp, #20
 8009154:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009156:	2300      	movs	r3, #0
 8009158:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800915a:	4b12      	ldr	r3, [pc, #72]	; (80091a4 <prvTaskExitError+0x54>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009162:	d00a      	beq.n	800917a <prvTaskExitError+0x2a>
	__asm volatile
 8009164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009168:	f383 8811 	msr	BASEPRI, r3
 800916c:	f3bf 8f6f 	isb	sy
 8009170:	f3bf 8f4f 	dsb	sy
 8009174:	60fb      	str	r3, [r7, #12]
}
 8009176:	bf00      	nop
 8009178:	e7fe      	b.n	8009178 <prvTaskExitError+0x28>
	__asm volatile
 800917a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800917e:	f383 8811 	msr	BASEPRI, r3
 8009182:	f3bf 8f6f 	isb	sy
 8009186:	f3bf 8f4f 	dsb	sy
 800918a:	60bb      	str	r3, [r7, #8]
}
 800918c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800918e:	bf00      	nop
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d0fc      	beq.n	8009190 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009196:	bf00      	nop
 8009198:	bf00      	nop
 800919a:	3714      	adds	r7, #20
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr
 80091a4:	20000128 	.word	0x20000128
	...

080091b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80091b0:	4b07      	ldr	r3, [pc, #28]	; (80091d0 <pxCurrentTCBConst2>)
 80091b2:	6819      	ldr	r1, [r3, #0]
 80091b4:	6808      	ldr	r0, [r1, #0]
 80091b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091ba:	f380 8809 	msr	PSP, r0
 80091be:	f3bf 8f6f 	isb	sy
 80091c2:	f04f 0000 	mov.w	r0, #0
 80091c6:	f380 8811 	msr	BASEPRI, r0
 80091ca:	4770      	bx	lr
 80091cc:	f3af 8000 	nop.w

080091d0 <pxCurrentTCBConst2>:
 80091d0:	2000084c 	.word	0x2000084c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80091d4:	bf00      	nop
 80091d6:	bf00      	nop

080091d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80091d8:	4808      	ldr	r0, [pc, #32]	; (80091fc <prvPortStartFirstTask+0x24>)
 80091da:	6800      	ldr	r0, [r0, #0]
 80091dc:	6800      	ldr	r0, [r0, #0]
 80091de:	f380 8808 	msr	MSP, r0
 80091e2:	f04f 0000 	mov.w	r0, #0
 80091e6:	f380 8814 	msr	CONTROL, r0
 80091ea:	b662      	cpsie	i
 80091ec:	b661      	cpsie	f
 80091ee:	f3bf 8f4f 	dsb	sy
 80091f2:	f3bf 8f6f 	isb	sy
 80091f6:	df00      	svc	0
 80091f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80091fa:	bf00      	nop
 80091fc:	e000ed08 	.word	0xe000ed08

08009200 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b086      	sub	sp, #24
 8009204:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009206:	4b46      	ldr	r3, [pc, #280]	; (8009320 <xPortStartScheduler+0x120>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a46      	ldr	r2, [pc, #280]	; (8009324 <xPortStartScheduler+0x124>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d10a      	bne.n	8009226 <xPortStartScheduler+0x26>
	__asm volatile
 8009210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009214:	f383 8811 	msr	BASEPRI, r3
 8009218:	f3bf 8f6f 	isb	sy
 800921c:	f3bf 8f4f 	dsb	sy
 8009220:	613b      	str	r3, [r7, #16]
}
 8009222:	bf00      	nop
 8009224:	e7fe      	b.n	8009224 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009226:	4b3e      	ldr	r3, [pc, #248]	; (8009320 <xPortStartScheduler+0x120>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4a3f      	ldr	r2, [pc, #252]	; (8009328 <xPortStartScheduler+0x128>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d10a      	bne.n	8009246 <xPortStartScheduler+0x46>
	__asm volatile
 8009230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009234:	f383 8811 	msr	BASEPRI, r3
 8009238:	f3bf 8f6f 	isb	sy
 800923c:	f3bf 8f4f 	dsb	sy
 8009240:	60fb      	str	r3, [r7, #12]
}
 8009242:	bf00      	nop
 8009244:	e7fe      	b.n	8009244 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009246:	4b39      	ldr	r3, [pc, #228]	; (800932c <xPortStartScheduler+0x12c>)
 8009248:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	781b      	ldrb	r3, [r3, #0]
 800924e:	b2db      	uxtb	r3, r3
 8009250:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	22ff      	movs	r2, #255	; 0xff
 8009256:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	b2db      	uxtb	r3, r3
 800925e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009260:	78fb      	ldrb	r3, [r7, #3]
 8009262:	b2db      	uxtb	r3, r3
 8009264:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009268:	b2da      	uxtb	r2, r3
 800926a:	4b31      	ldr	r3, [pc, #196]	; (8009330 <xPortStartScheduler+0x130>)
 800926c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800926e:	4b31      	ldr	r3, [pc, #196]	; (8009334 <xPortStartScheduler+0x134>)
 8009270:	2207      	movs	r2, #7
 8009272:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009274:	e009      	b.n	800928a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009276:	4b2f      	ldr	r3, [pc, #188]	; (8009334 <xPortStartScheduler+0x134>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	3b01      	subs	r3, #1
 800927c:	4a2d      	ldr	r2, [pc, #180]	; (8009334 <xPortStartScheduler+0x134>)
 800927e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009280:	78fb      	ldrb	r3, [r7, #3]
 8009282:	b2db      	uxtb	r3, r3
 8009284:	005b      	lsls	r3, r3, #1
 8009286:	b2db      	uxtb	r3, r3
 8009288:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800928a:	78fb      	ldrb	r3, [r7, #3]
 800928c:	b2db      	uxtb	r3, r3
 800928e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009292:	2b80      	cmp	r3, #128	; 0x80
 8009294:	d0ef      	beq.n	8009276 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009296:	4b27      	ldr	r3, [pc, #156]	; (8009334 <xPortStartScheduler+0x134>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f1c3 0307 	rsb	r3, r3, #7
 800929e:	2b04      	cmp	r3, #4
 80092a0:	d00a      	beq.n	80092b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80092a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a6:	f383 8811 	msr	BASEPRI, r3
 80092aa:	f3bf 8f6f 	isb	sy
 80092ae:	f3bf 8f4f 	dsb	sy
 80092b2:	60bb      	str	r3, [r7, #8]
}
 80092b4:	bf00      	nop
 80092b6:	e7fe      	b.n	80092b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80092b8:	4b1e      	ldr	r3, [pc, #120]	; (8009334 <xPortStartScheduler+0x134>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	021b      	lsls	r3, r3, #8
 80092be:	4a1d      	ldr	r2, [pc, #116]	; (8009334 <xPortStartScheduler+0x134>)
 80092c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80092c2:	4b1c      	ldr	r3, [pc, #112]	; (8009334 <xPortStartScheduler+0x134>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80092ca:	4a1a      	ldr	r2, [pc, #104]	; (8009334 <xPortStartScheduler+0x134>)
 80092cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	b2da      	uxtb	r2, r3
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80092d6:	4b18      	ldr	r3, [pc, #96]	; (8009338 <xPortStartScheduler+0x138>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4a17      	ldr	r2, [pc, #92]	; (8009338 <xPortStartScheduler+0x138>)
 80092dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80092e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80092e2:	4b15      	ldr	r3, [pc, #84]	; (8009338 <xPortStartScheduler+0x138>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a14      	ldr	r2, [pc, #80]	; (8009338 <xPortStartScheduler+0x138>)
 80092e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80092ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80092ee:	f000 f8dd 	bl	80094ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80092f2:	4b12      	ldr	r3, [pc, #72]	; (800933c <xPortStartScheduler+0x13c>)
 80092f4:	2200      	movs	r2, #0
 80092f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80092f8:	f000 f8fc 	bl	80094f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80092fc:	4b10      	ldr	r3, [pc, #64]	; (8009340 <xPortStartScheduler+0x140>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a0f      	ldr	r2, [pc, #60]	; (8009340 <xPortStartScheduler+0x140>)
 8009302:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009306:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009308:	f7ff ff66 	bl	80091d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800930c:	f7ff fd4a 	bl	8008da4 <vTaskSwitchContext>
	prvTaskExitError();
 8009310:	f7ff ff1e 	bl	8009150 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009314:	2300      	movs	r3, #0
}
 8009316:	4618      	mov	r0, r3
 8009318:	3718      	adds	r7, #24
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	e000ed00 	.word	0xe000ed00
 8009324:	410fc271 	.word	0x410fc271
 8009328:	410fc270 	.word	0x410fc270
 800932c:	e000e400 	.word	0xe000e400
 8009330:	20000978 	.word	0x20000978
 8009334:	2000097c 	.word	0x2000097c
 8009338:	e000ed20 	.word	0xe000ed20
 800933c:	20000128 	.word	0x20000128
 8009340:	e000ef34 	.word	0xe000ef34

08009344 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009344:	b480      	push	{r7}
 8009346:	b083      	sub	sp, #12
 8009348:	af00      	add	r7, sp, #0
	__asm volatile
 800934a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800934e:	f383 8811 	msr	BASEPRI, r3
 8009352:	f3bf 8f6f 	isb	sy
 8009356:	f3bf 8f4f 	dsb	sy
 800935a:	607b      	str	r3, [r7, #4]
}
 800935c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800935e:	4b0f      	ldr	r3, [pc, #60]	; (800939c <vPortEnterCritical+0x58>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	3301      	adds	r3, #1
 8009364:	4a0d      	ldr	r2, [pc, #52]	; (800939c <vPortEnterCritical+0x58>)
 8009366:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009368:	4b0c      	ldr	r3, [pc, #48]	; (800939c <vPortEnterCritical+0x58>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	2b01      	cmp	r3, #1
 800936e:	d10f      	bne.n	8009390 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009370:	4b0b      	ldr	r3, [pc, #44]	; (80093a0 <vPortEnterCritical+0x5c>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	b2db      	uxtb	r3, r3
 8009376:	2b00      	cmp	r3, #0
 8009378:	d00a      	beq.n	8009390 <vPortEnterCritical+0x4c>
	__asm volatile
 800937a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800937e:	f383 8811 	msr	BASEPRI, r3
 8009382:	f3bf 8f6f 	isb	sy
 8009386:	f3bf 8f4f 	dsb	sy
 800938a:	603b      	str	r3, [r7, #0]
}
 800938c:	bf00      	nop
 800938e:	e7fe      	b.n	800938e <vPortEnterCritical+0x4a>
	}
}
 8009390:	bf00      	nop
 8009392:	370c      	adds	r7, #12
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr
 800939c:	20000128 	.word	0x20000128
 80093a0:	e000ed04 	.word	0xe000ed04

080093a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80093a4:	b480      	push	{r7}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80093aa:	4b12      	ldr	r3, [pc, #72]	; (80093f4 <vPortExitCritical+0x50>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d10a      	bne.n	80093c8 <vPortExitCritical+0x24>
	__asm volatile
 80093b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b6:	f383 8811 	msr	BASEPRI, r3
 80093ba:	f3bf 8f6f 	isb	sy
 80093be:	f3bf 8f4f 	dsb	sy
 80093c2:	607b      	str	r3, [r7, #4]
}
 80093c4:	bf00      	nop
 80093c6:	e7fe      	b.n	80093c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80093c8:	4b0a      	ldr	r3, [pc, #40]	; (80093f4 <vPortExitCritical+0x50>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	3b01      	subs	r3, #1
 80093ce:	4a09      	ldr	r2, [pc, #36]	; (80093f4 <vPortExitCritical+0x50>)
 80093d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80093d2:	4b08      	ldr	r3, [pc, #32]	; (80093f4 <vPortExitCritical+0x50>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d105      	bne.n	80093e6 <vPortExitCritical+0x42>
 80093da:	2300      	movs	r3, #0
 80093dc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80093e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80093e6:	bf00      	nop
 80093e8:	370c      	adds	r7, #12
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr
 80093f2:	bf00      	nop
 80093f4:	20000128 	.word	0x20000128
	...

08009400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009400:	f3ef 8009 	mrs	r0, PSP
 8009404:	f3bf 8f6f 	isb	sy
 8009408:	4b15      	ldr	r3, [pc, #84]	; (8009460 <pxCurrentTCBConst>)
 800940a:	681a      	ldr	r2, [r3, #0]
 800940c:	f01e 0f10 	tst.w	lr, #16
 8009410:	bf08      	it	eq
 8009412:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009416:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800941a:	6010      	str	r0, [r2, #0]
 800941c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009420:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009424:	f380 8811 	msr	BASEPRI, r0
 8009428:	f3bf 8f4f 	dsb	sy
 800942c:	f3bf 8f6f 	isb	sy
 8009430:	f7ff fcb8 	bl	8008da4 <vTaskSwitchContext>
 8009434:	f04f 0000 	mov.w	r0, #0
 8009438:	f380 8811 	msr	BASEPRI, r0
 800943c:	bc09      	pop	{r0, r3}
 800943e:	6819      	ldr	r1, [r3, #0]
 8009440:	6808      	ldr	r0, [r1, #0]
 8009442:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009446:	f01e 0f10 	tst.w	lr, #16
 800944a:	bf08      	it	eq
 800944c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009450:	f380 8809 	msr	PSP, r0
 8009454:	f3bf 8f6f 	isb	sy
 8009458:	4770      	bx	lr
 800945a:	bf00      	nop
 800945c:	f3af 8000 	nop.w

08009460 <pxCurrentTCBConst>:
 8009460:	2000084c 	.word	0x2000084c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009464:	bf00      	nop
 8009466:	bf00      	nop

08009468 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	af00      	add	r7, sp, #0
	__asm volatile
 800946e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009472:	f383 8811 	msr	BASEPRI, r3
 8009476:	f3bf 8f6f 	isb	sy
 800947a:	f3bf 8f4f 	dsb	sy
 800947e:	607b      	str	r3, [r7, #4]
}
 8009480:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009482:	f7ff fbd7 	bl	8008c34 <xTaskIncrementTick>
 8009486:	4603      	mov	r3, r0
 8009488:	2b00      	cmp	r3, #0
 800948a:	d003      	beq.n	8009494 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800948c:	4b06      	ldr	r3, [pc, #24]	; (80094a8 <SysTick_Handler+0x40>)
 800948e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009492:	601a      	str	r2, [r3, #0]
 8009494:	2300      	movs	r3, #0
 8009496:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	f383 8811 	msr	BASEPRI, r3
}
 800949e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80094a0:	bf00      	nop
 80094a2:	3708      	adds	r7, #8
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}
 80094a8:	e000ed04 	.word	0xe000ed04

080094ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80094ac:	b480      	push	{r7}
 80094ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80094b0:	4b0b      	ldr	r3, [pc, #44]	; (80094e0 <vPortSetupTimerInterrupt+0x34>)
 80094b2:	2200      	movs	r2, #0
 80094b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80094b6:	4b0b      	ldr	r3, [pc, #44]	; (80094e4 <vPortSetupTimerInterrupt+0x38>)
 80094b8:	2200      	movs	r2, #0
 80094ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80094bc:	4b0a      	ldr	r3, [pc, #40]	; (80094e8 <vPortSetupTimerInterrupt+0x3c>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4a0a      	ldr	r2, [pc, #40]	; (80094ec <vPortSetupTimerInterrupt+0x40>)
 80094c2:	fba2 2303 	umull	r2, r3, r2, r3
 80094c6:	099b      	lsrs	r3, r3, #6
 80094c8:	4a09      	ldr	r2, [pc, #36]	; (80094f0 <vPortSetupTimerInterrupt+0x44>)
 80094ca:	3b01      	subs	r3, #1
 80094cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80094ce:	4b04      	ldr	r3, [pc, #16]	; (80094e0 <vPortSetupTimerInterrupt+0x34>)
 80094d0:	2207      	movs	r2, #7
 80094d2:	601a      	str	r2, [r3, #0]
}
 80094d4:	bf00      	nop
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr
 80094de:	bf00      	nop
 80094e0:	e000e010 	.word	0xe000e010
 80094e4:	e000e018 	.word	0xe000e018
 80094e8:	2000011c 	.word	0x2000011c
 80094ec:	10624dd3 	.word	0x10624dd3
 80094f0:	e000e014 	.word	0xe000e014

080094f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80094f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009504 <vPortEnableVFP+0x10>
 80094f8:	6801      	ldr	r1, [r0, #0]
 80094fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80094fe:	6001      	str	r1, [r0, #0]
 8009500:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009502:	bf00      	nop
 8009504:	e000ed88 	.word	0xe000ed88

08009508 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b08a      	sub	sp, #40	; 0x28
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009510:	2300      	movs	r3, #0
 8009512:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009514:	f7ff fae4 	bl	8008ae0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009518:	4b5b      	ldr	r3, [pc, #364]	; (8009688 <pvPortMalloc+0x180>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d101      	bne.n	8009524 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009520:	f000 f920 	bl	8009764 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009524:	4b59      	ldr	r3, [pc, #356]	; (800968c <pvPortMalloc+0x184>)
 8009526:	681a      	ldr	r2, [r3, #0]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	4013      	ands	r3, r2
 800952c:	2b00      	cmp	r3, #0
 800952e:	f040 8093 	bne.w	8009658 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d01d      	beq.n	8009574 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009538:	2208      	movs	r2, #8
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	4413      	add	r3, r2
 800953e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f003 0307 	and.w	r3, r3, #7
 8009546:	2b00      	cmp	r3, #0
 8009548:	d014      	beq.n	8009574 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f023 0307 	bic.w	r3, r3, #7
 8009550:	3308      	adds	r3, #8
 8009552:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f003 0307 	and.w	r3, r3, #7
 800955a:	2b00      	cmp	r3, #0
 800955c:	d00a      	beq.n	8009574 <pvPortMalloc+0x6c>
	__asm volatile
 800955e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009562:	f383 8811 	msr	BASEPRI, r3
 8009566:	f3bf 8f6f 	isb	sy
 800956a:	f3bf 8f4f 	dsb	sy
 800956e:	617b      	str	r3, [r7, #20]
}
 8009570:	bf00      	nop
 8009572:	e7fe      	b.n	8009572 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d06e      	beq.n	8009658 <pvPortMalloc+0x150>
 800957a:	4b45      	ldr	r3, [pc, #276]	; (8009690 <pvPortMalloc+0x188>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	429a      	cmp	r2, r3
 8009582:	d869      	bhi.n	8009658 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009584:	4b43      	ldr	r3, [pc, #268]	; (8009694 <pvPortMalloc+0x18c>)
 8009586:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009588:	4b42      	ldr	r3, [pc, #264]	; (8009694 <pvPortMalloc+0x18c>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800958e:	e004      	b.n	800959a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009592:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800959a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d903      	bls.n	80095ac <pvPortMalloc+0xa4>
 80095a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d1f1      	bne.n	8009590 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80095ac:	4b36      	ldr	r3, [pc, #216]	; (8009688 <pvPortMalloc+0x180>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095b2:	429a      	cmp	r2, r3
 80095b4:	d050      	beq.n	8009658 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80095b6:	6a3b      	ldr	r3, [r7, #32]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	2208      	movs	r2, #8
 80095bc:	4413      	add	r3, r2
 80095be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80095c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	6a3b      	ldr	r3, [r7, #32]
 80095c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80095c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ca:	685a      	ldr	r2, [r3, #4]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	1ad2      	subs	r2, r2, r3
 80095d0:	2308      	movs	r3, #8
 80095d2:	005b      	lsls	r3, r3, #1
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d91f      	bls.n	8009618 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80095d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	4413      	add	r3, r2
 80095de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80095e0:	69bb      	ldr	r3, [r7, #24]
 80095e2:	f003 0307 	and.w	r3, r3, #7
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d00a      	beq.n	8009600 <pvPortMalloc+0xf8>
	__asm volatile
 80095ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ee:	f383 8811 	msr	BASEPRI, r3
 80095f2:	f3bf 8f6f 	isb	sy
 80095f6:	f3bf 8f4f 	dsb	sy
 80095fa:	613b      	str	r3, [r7, #16]
}
 80095fc:	bf00      	nop
 80095fe:	e7fe      	b.n	80095fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009602:	685a      	ldr	r2, [r3, #4]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	1ad2      	subs	r2, r2, r3
 8009608:	69bb      	ldr	r3, [r7, #24]
 800960a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800960c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800960e:	687a      	ldr	r2, [r7, #4]
 8009610:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009612:	69b8      	ldr	r0, [r7, #24]
 8009614:	f000 f908 	bl	8009828 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009618:	4b1d      	ldr	r3, [pc, #116]	; (8009690 <pvPortMalloc+0x188>)
 800961a:	681a      	ldr	r2, [r3, #0]
 800961c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961e:	685b      	ldr	r3, [r3, #4]
 8009620:	1ad3      	subs	r3, r2, r3
 8009622:	4a1b      	ldr	r2, [pc, #108]	; (8009690 <pvPortMalloc+0x188>)
 8009624:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009626:	4b1a      	ldr	r3, [pc, #104]	; (8009690 <pvPortMalloc+0x188>)
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	4b1b      	ldr	r3, [pc, #108]	; (8009698 <pvPortMalloc+0x190>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	429a      	cmp	r2, r3
 8009630:	d203      	bcs.n	800963a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009632:	4b17      	ldr	r3, [pc, #92]	; (8009690 <pvPortMalloc+0x188>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4a18      	ldr	r2, [pc, #96]	; (8009698 <pvPortMalloc+0x190>)
 8009638:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800963a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800963c:	685a      	ldr	r2, [r3, #4]
 800963e:	4b13      	ldr	r3, [pc, #76]	; (800968c <pvPortMalloc+0x184>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	431a      	orrs	r2, r3
 8009644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009646:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964a:	2200      	movs	r2, #0
 800964c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800964e:	4b13      	ldr	r3, [pc, #76]	; (800969c <pvPortMalloc+0x194>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	3301      	adds	r3, #1
 8009654:	4a11      	ldr	r2, [pc, #68]	; (800969c <pvPortMalloc+0x194>)
 8009656:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009658:	f7ff fa50 	bl	8008afc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800965c:	69fb      	ldr	r3, [r7, #28]
 800965e:	f003 0307 	and.w	r3, r3, #7
 8009662:	2b00      	cmp	r3, #0
 8009664:	d00a      	beq.n	800967c <pvPortMalloc+0x174>
	__asm volatile
 8009666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800966a:	f383 8811 	msr	BASEPRI, r3
 800966e:	f3bf 8f6f 	isb	sy
 8009672:	f3bf 8f4f 	dsb	sy
 8009676:	60fb      	str	r3, [r7, #12]
}
 8009678:	bf00      	nop
 800967a:	e7fe      	b.n	800967a <pvPortMalloc+0x172>
	return pvReturn;
 800967c:	69fb      	ldr	r3, [r7, #28]
}
 800967e:	4618      	mov	r0, r3
 8009680:	3728      	adds	r7, #40	; 0x28
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
 8009686:	bf00      	nop
 8009688:	20004588 	.word	0x20004588
 800968c:	2000459c 	.word	0x2000459c
 8009690:	2000458c 	.word	0x2000458c
 8009694:	20004580 	.word	0x20004580
 8009698:	20004590 	.word	0x20004590
 800969c:	20004594 	.word	0x20004594

080096a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b086      	sub	sp, #24
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d04d      	beq.n	800974e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80096b2:	2308      	movs	r3, #8
 80096b4:	425b      	negs	r3, r3
 80096b6:	697a      	ldr	r2, [r7, #20]
 80096b8:	4413      	add	r3, r2
 80096ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	685a      	ldr	r2, [r3, #4]
 80096c4:	4b24      	ldr	r3, [pc, #144]	; (8009758 <vPortFree+0xb8>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4013      	ands	r3, r2
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d10a      	bne.n	80096e4 <vPortFree+0x44>
	__asm volatile
 80096ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d2:	f383 8811 	msr	BASEPRI, r3
 80096d6:	f3bf 8f6f 	isb	sy
 80096da:	f3bf 8f4f 	dsb	sy
 80096de:	60fb      	str	r3, [r7, #12]
}
 80096e0:	bf00      	nop
 80096e2:	e7fe      	b.n	80096e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d00a      	beq.n	8009702 <vPortFree+0x62>
	__asm volatile
 80096ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f0:	f383 8811 	msr	BASEPRI, r3
 80096f4:	f3bf 8f6f 	isb	sy
 80096f8:	f3bf 8f4f 	dsb	sy
 80096fc:	60bb      	str	r3, [r7, #8]
}
 80096fe:	bf00      	nop
 8009700:	e7fe      	b.n	8009700 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	685a      	ldr	r2, [r3, #4]
 8009706:	4b14      	ldr	r3, [pc, #80]	; (8009758 <vPortFree+0xb8>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4013      	ands	r3, r2
 800970c:	2b00      	cmp	r3, #0
 800970e:	d01e      	beq.n	800974e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d11a      	bne.n	800974e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	685a      	ldr	r2, [r3, #4]
 800971c:	4b0e      	ldr	r3, [pc, #56]	; (8009758 <vPortFree+0xb8>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	43db      	mvns	r3, r3
 8009722:	401a      	ands	r2, r3
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009728:	f7ff f9da 	bl	8008ae0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	685a      	ldr	r2, [r3, #4]
 8009730:	4b0a      	ldr	r3, [pc, #40]	; (800975c <vPortFree+0xbc>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4413      	add	r3, r2
 8009736:	4a09      	ldr	r2, [pc, #36]	; (800975c <vPortFree+0xbc>)
 8009738:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800973a:	6938      	ldr	r0, [r7, #16]
 800973c:	f000 f874 	bl	8009828 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009740:	4b07      	ldr	r3, [pc, #28]	; (8009760 <vPortFree+0xc0>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	3301      	adds	r3, #1
 8009746:	4a06      	ldr	r2, [pc, #24]	; (8009760 <vPortFree+0xc0>)
 8009748:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800974a:	f7ff f9d7 	bl	8008afc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800974e:	bf00      	nop
 8009750:	3718      	adds	r7, #24
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop
 8009758:	2000459c 	.word	0x2000459c
 800975c:	2000458c 	.word	0x2000458c
 8009760:	20004598 	.word	0x20004598

08009764 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009764:	b480      	push	{r7}
 8009766:	b085      	sub	sp, #20
 8009768:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800976a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800976e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009770:	4b27      	ldr	r3, [pc, #156]	; (8009810 <prvHeapInit+0xac>)
 8009772:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f003 0307 	and.w	r3, r3, #7
 800977a:	2b00      	cmp	r3, #0
 800977c:	d00c      	beq.n	8009798 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	3307      	adds	r3, #7
 8009782:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f023 0307 	bic.w	r3, r3, #7
 800978a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800978c:	68ba      	ldr	r2, [r7, #8]
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	1ad3      	subs	r3, r2, r3
 8009792:	4a1f      	ldr	r2, [pc, #124]	; (8009810 <prvHeapInit+0xac>)
 8009794:	4413      	add	r3, r2
 8009796:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800979c:	4a1d      	ldr	r2, [pc, #116]	; (8009814 <prvHeapInit+0xb0>)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80097a2:	4b1c      	ldr	r3, [pc, #112]	; (8009814 <prvHeapInit+0xb0>)
 80097a4:	2200      	movs	r2, #0
 80097a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	68ba      	ldr	r2, [r7, #8]
 80097ac:	4413      	add	r3, r2
 80097ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80097b0:	2208      	movs	r2, #8
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	1a9b      	subs	r3, r3, r2
 80097b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f023 0307 	bic.w	r3, r3, #7
 80097be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	4a15      	ldr	r2, [pc, #84]	; (8009818 <prvHeapInit+0xb4>)
 80097c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80097c6:	4b14      	ldr	r3, [pc, #80]	; (8009818 <prvHeapInit+0xb4>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	2200      	movs	r2, #0
 80097cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80097ce:	4b12      	ldr	r3, [pc, #72]	; (8009818 <prvHeapInit+0xb4>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	2200      	movs	r2, #0
 80097d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	68fa      	ldr	r2, [r7, #12]
 80097de:	1ad2      	subs	r2, r2, r3
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80097e4:	4b0c      	ldr	r3, [pc, #48]	; (8009818 <prvHeapInit+0xb4>)
 80097e6:	681a      	ldr	r2, [r3, #0]
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	4a0a      	ldr	r2, [pc, #40]	; (800981c <prvHeapInit+0xb8>)
 80097f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	4a09      	ldr	r2, [pc, #36]	; (8009820 <prvHeapInit+0xbc>)
 80097fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80097fc:	4b09      	ldr	r3, [pc, #36]	; (8009824 <prvHeapInit+0xc0>)
 80097fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009802:	601a      	str	r2, [r3, #0]
}
 8009804:	bf00      	nop
 8009806:	3714      	adds	r7, #20
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr
 8009810:	20000980 	.word	0x20000980
 8009814:	20004580 	.word	0x20004580
 8009818:	20004588 	.word	0x20004588
 800981c:	20004590 	.word	0x20004590
 8009820:	2000458c 	.word	0x2000458c
 8009824:	2000459c 	.word	0x2000459c

08009828 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009828:	b480      	push	{r7}
 800982a:	b085      	sub	sp, #20
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009830:	4b28      	ldr	r3, [pc, #160]	; (80098d4 <prvInsertBlockIntoFreeList+0xac>)
 8009832:	60fb      	str	r3, [r7, #12]
 8009834:	e002      	b.n	800983c <prvInsertBlockIntoFreeList+0x14>
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	60fb      	str	r3, [r7, #12]
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	687a      	ldr	r2, [r7, #4]
 8009842:	429a      	cmp	r2, r3
 8009844:	d8f7      	bhi.n	8009836 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	68ba      	ldr	r2, [r7, #8]
 8009850:	4413      	add	r3, r2
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	429a      	cmp	r2, r3
 8009856:	d108      	bne.n	800986a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	685a      	ldr	r2, [r3, #4]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	441a      	add	r2, r3
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	685b      	ldr	r3, [r3, #4]
 8009872:	68ba      	ldr	r2, [r7, #8]
 8009874:	441a      	add	r2, r3
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	429a      	cmp	r2, r3
 800987c:	d118      	bne.n	80098b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	4b15      	ldr	r3, [pc, #84]	; (80098d8 <prvInsertBlockIntoFreeList+0xb0>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	429a      	cmp	r2, r3
 8009888:	d00d      	beq.n	80098a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	685a      	ldr	r2, [r3, #4]
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	441a      	add	r2, r3
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	681a      	ldr	r2, [r3, #0]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	601a      	str	r2, [r3, #0]
 80098a4:	e008      	b.n	80098b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80098a6:	4b0c      	ldr	r3, [pc, #48]	; (80098d8 <prvInsertBlockIntoFreeList+0xb0>)
 80098a8:	681a      	ldr	r2, [r3, #0]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	601a      	str	r2, [r3, #0]
 80098ae:	e003      	b.n	80098b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681a      	ldr	r2, [r3, #0]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80098b8:	68fa      	ldr	r2, [r7, #12]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	429a      	cmp	r2, r3
 80098be:	d002      	beq.n	80098c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	687a      	ldr	r2, [r7, #4]
 80098c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80098c6:	bf00      	nop
 80098c8:	3714      	adds	r7, #20
 80098ca:	46bd      	mov	sp, r7
 80098cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d0:	4770      	bx	lr
 80098d2:	bf00      	nop
 80098d4:	20004580 	.word	0x20004580
 80098d8:	20004588 	.word	0x20004588

080098dc <std>:
 80098dc:	2300      	movs	r3, #0
 80098de:	b510      	push	{r4, lr}
 80098e0:	4604      	mov	r4, r0
 80098e2:	e9c0 3300 	strd	r3, r3, [r0]
 80098e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80098ea:	6083      	str	r3, [r0, #8]
 80098ec:	8181      	strh	r1, [r0, #12]
 80098ee:	6643      	str	r3, [r0, #100]	; 0x64
 80098f0:	81c2      	strh	r2, [r0, #14]
 80098f2:	6183      	str	r3, [r0, #24]
 80098f4:	4619      	mov	r1, r3
 80098f6:	2208      	movs	r2, #8
 80098f8:	305c      	adds	r0, #92	; 0x5c
 80098fa:	f000 f906 	bl	8009b0a <memset>
 80098fe:	4b0d      	ldr	r3, [pc, #52]	; (8009934 <std+0x58>)
 8009900:	6263      	str	r3, [r4, #36]	; 0x24
 8009902:	4b0d      	ldr	r3, [pc, #52]	; (8009938 <std+0x5c>)
 8009904:	62a3      	str	r3, [r4, #40]	; 0x28
 8009906:	4b0d      	ldr	r3, [pc, #52]	; (800993c <std+0x60>)
 8009908:	62e3      	str	r3, [r4, #44]	; 0x2c
 800990a:	4b0d      	ldr	r3, [pc, #52]	; (8009940 <std+0x64>)
 800990c:	6323      	str	r3, [r4, #48]	; 0x30
 800990e:	4b0d      	ldr	r3, [pc, #52]	; (8009944 <std+0x68>)
 8009910:	6224      	str	r4, [r4, #32]
 8009912:	429c      	cmp	r4, r3
 8009914:	d006      	beq.n	8009924 <std+0x48>
 8009916:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800991a:	4294      	cmp	r4, r2
 800991c:	d002      	beq.n	8009924 <std+0x48>
 800991e:	33d0      	adds	r3, #208	; 0xd0
 8009920:	429c      	cmp	r4, r3
 8009922:	d105      	bne.n	8009930 <std+0x54>
 8009924:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800992c:	f000 b9bc 	b.w	8009ca8 <__retarget_lock_init_recursive>
 8009930:	bd10      	pop	{r4, pc}
 8009932:	bf00      	nop
 8009934:	08009a85 	.word	0x08009a85
 8009938:	08009aa7 	.word	0x08009aa7
 800993c:	08009adf 	.word	0x08009adf
 8009940:	08009b03 	.word	0x08009b03
 8009944:	200045a0 	.word	0x200045a0

08009948 <stdio_exit_handler>:
 8009948:	4a02      	ldr	r2, [pc, #8]	; (8009954 <stdio_exit_handler+0xc>)
 800994a:	4903      	ldr	r1, [pc, #12]	; (8009958 <stdio_exit_handler+0x10>)
 800994c:	4803      	ldr	r0, [pc, #12]	; (800995c <stdio_exit_handler+0x14>)
 800994e:	f000 b869 	b.w	8009a24 <_fwalk_sglue>
 8009952:	bf00      	nop
 8009954:	2000012c 	.word	0x2000012c
 8009958:	0800a555 	.word	0x0800a555
 800995c:	20000138 	.word	0x20000138

08009960 <cleanup_stdio>:
 8009960:	6841      	ldr	r1, [r0, #4]
 8009962:	4b0c      	ldr	r3, [pc, #48]	; (8009994 <cleanup_stdio+0x34>)
 8009964:	4299      	cmp	r1, r3
 8009966:	b510      	push	{r4, lr}
 8009968:	4604      	mov	r4, r0
 800996a:	d001      	beq.n	8009970 <cleanup_stdio+0x10>
 800996c:	f000 fdf2 	bl	800a554 <_fflush_r>
 8009970:	68a1      	ldr	r1, [r4, #8]
 8009972:	4b09      	ldr	r3, [pc, #36]	; (8009998 <cleanup_stdio+0x38>)
 8009974:	4299      	cmp	r1, r3
 8009976:	d002      	beq.n	800997e <cleanup_stdio+0x1e>
 8009978:	4620      	mov	r0, r4
 800997a:	f000 fdeb 	bl	800a554 <_fflush_r>
 800997e:	68e1      	ldr	r1, [r4, #12]
 8009980:	4b06      	ldr	r3, [pc, #24]	; (800999c <cleanup_stdio+0x3c>)
 8009982:	4299      	cmp	r1, r3
 8009984:	d004      	beq.n	8009990 <cleanup_stdio+0x30>
 8009986:	4620      	mov	r0, r4
 8009988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800998c:	f000 bde2 	b.w	800a554 <_fflush_r>
 8009990:	bd10      	pop	{r4, pc}
 8009992:	bf00      	nop
 8009994:	200045a0 	.word	0x200045a0
 8009998:	20004608 	.word	0x20004608
 800999c:	20004670 	.word	0x20004670

080099a0 <global_stdio_init.part.0>:
 80099a0:	b510      	push	{r4, lr}
 80099a2:	4b0b      	ldr	r3, [pc, #44]	; (80099d0 <global_stdio_init.part.0+0x30>)
 80099a4:	4c0b      	ldr	r4, [pc, #44]	; (80099d4 <global_stdio_init.part.0+0x34>)
 80099a6:	4a0c      	ldr	r2, [pc, #48]	; (80099d8 <global_stdio_init.part.0+0x38>)
 80099a8:	601a      	str	r2, [r3, #0]
 80099aa:	4620      	mov	r0, r4
 80099ac:	2200      	movs	r2, #0
 80099ae:	2104      	movs	r1, #4
 80099b0:	f7ff ff94 	bl	80098dc <std>
 80099b4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80099b8:	2201      	movs	r2, #1
 80099ba:	2109      	movs	r1, #9
 80099bc:	f7ff ff8e 	bl	80098dc <std>
 80099c0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80099c4:	2202      	movs	r2, #2
 80099c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099ca:	2112      	movs	r1, #18
 80099cc:	f7ff bf86 	b.w	80098dc <std>
 80099d0:	200046d8 	.word	0x200046d8
 80099d4:	200045a0 	.word	0x200045a0
 80099d8:	08009949 	.word	0x08009949

080099dc <__sfp_lock_acquire>:
 80099dc:	4801      	ldr	r0, [pc, #4]	; (80099e4 <__sfp_lock_acquire+0x8>)
 80099de:	f000 b964 	b.w	8009caa <__retarget_lock_acquire_recursive>
 80099e2:	bf00      	nop
 80099e4:	200046e1 	.word	0x200046e1

080099e8 <__sfp_lock_release>:
 80099e8:	4801      	ldr	r0, [pc, #4]	; (80099f0 <__sfp_lock_release+0x8>)
 80099ea:	f000 b95f 	b.w	8009cac <__retarget_lock_release_recursive>
 80099ee:	bf00      	nop
 80099f0:	200046e1 	.word	0x200046e1

080099f4 <__sinit>:
 80099f4:	b510      	push	{r4, lr}
 80099f6:	4604      	mov	r4, r0
 80099f8:	f7ff fff0 	bl	80099dc <__sfp_lock_acquire>
 80099fc:	6a23      	ldr	r3, [r4, #32]
 80099fe:	b11b      	cbz	r3, 8009a08 <__sinit+0x14>
 8009a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a04:	f7ff bff0 	b.w	80099e8 <__sfp_lock_release>
 8009a08:	4b04      	ldr	r3, [pc, #16]	; (8009a1c <__sinit+0x28>)
 8009a0a:	6223      	str	r3, [r4, #32]
 8009a0c:	4b04      	ldr	r3, [pc, #16]	; (8009a20 <__sinit+0x2c>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d1f5      	bne.n	8009a00 <__sinit+0xc>
 8009a14:	f7ff ffc4 	bl	80099a0 <global_stdio_init.part.0>
 8009a18:	e7f2      	b.n	8009a00 <__sinit+0xc>
 8009a1a:	bf00      	nop
 8009a1c:	08009961 	.word	0x08009961
 8009a20:	200046d8 	.word	0x200046d8

08009a24 <_fwalk_sglue>:
 8009a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a28:	4607      	mov	r7, r0
 8009a2a:	4688      	mov	r8, r1
 8009a2c:	4614      	mov	r4, r2
 8009a2e:	2600      	movs	r6, #0
 8009a30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009a34:	f1b9 0901 	subs.w	r9, r9, #1
 8009a38:	d505      	bpl.n	8009a46 <_fwalk_sglue+0x22>
 8009a3a:	6824      	ldr	r4, [r4, #0]
 8009a3c:	2c00      	cmp	r4, #0
 8009a3e:	d1f7      	bne.n	8009a30 <_fwalk_sglue+0xc>
 8009a40:	4630      	mov	r0, r6
 8009a42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a46:	89ab      	ldrh	r3, [r5, #12]
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d907      	bls.n	8009a5c <_fwalk_sglue+0x38>
 8009a4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a50:	3301      	adds	r3, #1
 8009a52:	d003      	beq.n	8009a5c <_fwalk_sglue+0x38>
 8009a54:	4629      	mov	r1, r5
 8009a56:	4638      	mov	r0, r7
 8009a58:	47c0      	blx	r8
 8009a5a:	4306      	orrs	r6, r0
 8009a5c:	3568      	adds	r5, #104	; 0x68
 8009a5e:	e7e9      	b.n	8009a34 <_fwalk_sglue+0x10>

08009a60 <iprintf>:
 8009a60:	b40f      	push	{r0, r1, r2, r3}
 8009a62:	b507      	push	{r0, r1, r2, lr}
 8009a64:	4906      	ldr	r1, [pc, #24]	; (8009a80 <iprintf+0x20>)
 8009a66:	ab04      	add	r3, sp, #16
 8009a68:	6808      	ldr	r0, [r1, #0]
 8009a6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a6e:	6881      	ldr	r1, [r0, #8]
 8009a70:	9301      	str	r3, [sp, #4]
 8009a72:	f000 fa3f 	bl	8009ef4 <_vfiprintf_r>
 8009a76:	b003      	add	sp, #12
 8009a78:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a7c:	b004      	add	sp, #16
 8009a7e:	4770      	bx	lr
 8009a80:	20000184 	.word	0x20000184

08009a84 <__sread>:
 8009a84:	b510      	push	{r4, lr}
 8009a86:	460c      	mov	r4, r1
 8009a88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a8c:	f000 f8be 	bl	8009c0c <_read_r>
 8009a90:	2800      	cmp	r0, #0
 8009a92:	bfab      	itete	ge
 8009a94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009a96:	89a3      	ldrhlt	r3, [r4, #12]
 8009a98:	181b      	addge	r3, r3, r0
 8009a9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009a9e:	bfac      	ite	ge
 8009aa0:	6563      	strge	r3, [r4, #84]	; 0x54
 8009aa2:	81a3      	strhlt	r3, [r4, #12]
 8009aa4:	bd10      	pop	{r4, pc}

08009aa6 <__swrite>:
 8009aa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aaa:	461f      	mov	r7, r3
 8009aac:	898b      	ldrh	r3, [r1, #12]
 8009aae:	05db      	lsls	r3, r3, #23
 8009ab0:	4605      	mov	r5, r0
 8009ab2:	460c      	mov	r4, r1
 8009ab4:	4616      	mov	r6, r2
 8009ab6:	d505      	bpl.n	8009ac4 <__swrite+0x1e>
 8009ab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009abc:	2302      	movs	r3, #2
 8009abe:	2200      	movs	r2, #0
 8009ac0:	f000 f892 	bl	8009be8 <_lseek_r>
 8009ac4:	89a3      	ldrh	r3, [r4, #12]
 8009ac6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009aca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ace:	81a3      	strh	r3, [r4, #12]
 8009ad0:	4632      	mov	r2, r6
 8009ad2:	463b      	mov	r3, r7
 8009ad4:	4628      	mov	r0, r5
 8009ad6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ada:	f000 b8a9 	b.w	8009c30 <_write_r>

08009ade <__sseek>:
 8009ade:	b510      	push	{r4, lr}
 8009ae0:	460c      	mov	r4, r1
 8009ae2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ae6:	f000 f87f 	bl	8009be8 <_lseek_r>
 8009aea:	1c43      	adds	r3, r0, #1
 8009aec:	89a3      	ldrh	r3, [r4, #12]
 8009aee:	bf15      	itete	ne
 8009af0:	6560      	strne	r0, [r4, #84]	; 0x54
 8009af2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009af6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009afa:	81a3      	strheq	r3, [r4, #12]
 8009afc:	bf18      	it	ne
 8009afe:	81a3      	strhne	r3, [r4, #12]
 8009b00:	bd10      	pop	{r4, pc}

08009b02 <__sclose>:
 8009b02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b06:	f000 b809 	b.w	8009b1c <_close_r>

08009b0a <memset>:
 8009b0a:	4402      	add	r2, r0
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d100      	bne.n	8009b14 <memset+0xa>
 8009b12:	4770      	bx	lr
 8009b14:	f803 1b01 	strb.w	r1, [r3], #1
 8009b18:	e7f9      	b.n	8009b0e <memset+0x4>
	...

08009b1c <_close_r>:
 8009b1c:	b538      	push	{r3, r4, r5, lr}
 8009b1e:	4d06      	ldr	r5, [pc, #24]	; (8009b38 <_close_r+0x1c>)
 8009b20:	2300      	movs	r3, #0
 8009b22:	4604      	mov	r4, r0
 8009b24:	4608      	mov	r0, r1
 8009b26:	602b      	str	r3, [r5, #0]
 8009b28:	f7fa fd17 	bl	800455a <_close>
 8009b2c:	1c43      	adds	r3, r0, #1
 8009b2e:	d102      	bne.n	8009b36 <_close_r+0x1a>
 8009b30:	682b      	ldr	r3, [r5, #0]
 8009b32:	b103      	cbz	r3, 8009b36 <_close_r+0x1a>
 8009b34:	6023      	str	r3, [r4, #0]
 8009b36:	bd38      	pop	{r3, r4, r5, pc}
 8009b38:	200046dc 	.word	0x200046dc

08009b3c <_reclaim_reent>:
 8009b3c:	4b29      	ldr	r3, [pc, #164]	; (8009be4 <_reclaim_reent+0xa8>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4283      	cmp	r3, r0
 8009b42:	b570      	push	{r4, r5, r6, lr}
 8009b44:	4604      	mov	r4, r0
 8009b46:	d04b      	beq.n	8009be0 <_reclaim_reent+0xa4>
 8009b48:	69c3      	ldr	r3, [r0, #28]
 8009b4a:	b143      	cbz	r3, 8009b5e <_reclaim_reent+0x22>
 8009b4c:	68db      	ldr	r3, [r3, #12]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d144      	bne.n	8009bdc <_reclaim_reent+0xa0>
 8009b52:	69e3      	ldr	r3, [r4, #28]
 8009b54:	6819      	ldr	r1, [r3, #0]
 8009b56:	b111      	cbz	r1, 8009b5e <_reclaim_reent+0x22>
 8009b58:	4620      	mov	r0, r4
 8009b5a:	f000 f8a9 	bl	8009cb0 <_free_r>
 8009b5e:	6961      	ldr	r1, [r4, #20]
 8009b60:	b111      	cbz	r1, 8009b68 <_reclaim_reent+0x2c>
 8009b62:	4620      	mov	r0, r4
 8009b64:	f000 f8a4 	bl	8009cb0 <_free_r>
 8009b68:	69e1      	ldr	r1, [r4, #28]
 8009b6a:	b111      	cbz	r1, 8009b72 <_reclaim_reent+0x36>
 8009b6c:	4620      	mov	r0, r4
 8009b6e:	f000 f89f 	bl	8009cb0 <_free_r>
 8009b72:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009b74:	b111      	cbz	r1, 8009b7c <_reclaim_reent+0x40>
 8009b76:	4620      	mov	r0, r4
 8009b78:	f000 f89a 	bl	8009cb0 <_free_r>
 8009b7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b7e:	b111      	cbz	r1, 8009b86 <_reclaim_reent+0x4a>
 8009b80:	4620      	mov	r0, r4
 8009b82:	f000 f895 	bl	8009cb0 <_free_r>
 8009b86:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009b88:	b111      	cbz	r1, 8009b90 <_reclaim_reent+0x54>
 8009b8a:	4620      	mov	r0, r4
 8009b8c:	f000 f890 	bl	8009cb0 <_free_r>
 8009b90:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009b92:	b111      	cbz	r1, 8009b9a <_reclaim_reent+0x5e>
 8009b94:	4620      	mov	r0, r4
 8009b96:	f000 f88b 	bl	8009cb0 <_free_r>
 8009b9a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009b9c:	b111      	cbz	r1, 8009ba4 <_reclaim_reent+0x68>
 8009b9e:	4620      	mov	r0, r4
 8009ba0:	f000 f886 	bl	8009cb0 <_free_r>
 8009ba4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009ba6:	b111      	cbz	r1, 8009bae <_reclaim_reent+0x72>
 8009ba8:	4620      	mov	r0, r4
 8009baa:	f000 f881 	bl	8009cb0 <_free_r>
 8009bae:	6a23      	ldr	r3, [r4, #32]
 8009bb0:	b1b3      	cbz	r3, 8009be0 <_reclaim_reent+0xa4>
 8009bb2:	4620      	mov	r0, r4
 8009bb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009bb8:	4718      	bx	r3
 8009bba:	5949      	ldr	r1, [r1, r5]
 8009bbc:	b941      	cbnz	r1, 8009bd0 <_reclaim_reent+0x94>
 8009bbe:	3504      	adds	r5, #4
 8009bc0:	69e3      	ldr	r3, [r4, #28]
 8009bc2:	2d80      	cmp	r5, #128	; 0x80
 8009bc4:	68d9      	ldr	r1, [r3, #12]
 8009bc6:	d1f8      	bne.n	8009bba <_reclaim_reent+0x7e>
 8009bc8:	4620      	mov	r0, r4
 8009bca:	f000 f871 	bl	8009cb0 <_free_r>
 8009bce:	e7c0      	b.n	8009b52 <_reclaim_reent+0x16>
 8009bd0:	680e      	ldr	r6, [r1, #0]
 8009bd2:	4620      	mov	r0, r4
 8009bd4:	f000 f86c 	bl	8009cb0 <_free_r>
 8009bd8:	4631      	mov	r1, r6
 8009bda:	e7ef      	b.n	8009bbc <_reclaim_reent+0x80>
 8009bdc:	2500      	movs	r5, #0
 8009bde:	e7ef      	b.n	8009bc0 <_reclaim_reent+0x84>
 8009be0:	bd70      	pop	{r4, r5, r6, pc}
 8009be2:	bf00      	nop
 8009be4:	20000184 	.word	0x20000184

08009be8 <_lseek_r>:
 8009be8:	b538      	push	{r3, r4, r5, lr}
 8009bea:	4d07      	ldr	r5, [pc, #28]	; (8009c08 <_lseek_r+0x20>)
 8009bec:	4604      	mov	r4, r0
 8009bee:	4608      	mov	r0, r1
 8009bf0:	4611      	mov	r1, r2
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	602a      	str	r2, [r5, #0]
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	f7fa fcd6 	bl	80045a8 <_lseek>
 8009bfc:	1c43      	adds	r3, r0, #1
 8009bfe:	d102      	bne.n	8009c06 <_lseek_r+0x1e>
 8009c00:	682b      	ldr	r3, [r5, #0]
 8009c02:	b103      	cbz	r3, 8009c06 <_lseek_r+0x1e>
 8009c04:	6023      	str	r3, [r4, #0]
 8009c06:	bd38      	pop	{r3, r4, r5, pc}
 8009c08:	200046dc 	.word	0x200046dc

08009c0c <_read_r>:
 8009c0c:	b538      	push	{r3, r4, r5, lr}
 8009c0e:	4d07      	ldr	r5, [pc, #28]	; (8009c2c <_read_r+0x20>)
 8009c10:	4604      	mov	r4, r0
 8009c12:	4608      	mov	r0, r1
 8009c14:	4611      	mov	r1, r2
 8009c16:	2200      	movs	r2, #0
 8009c18:	602a      	str	r2, [r5, #0]
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	f7fa fc80 	bl	8004520 <_read>
 8009c20:	1c43      	adds	r3, r0, #1
 8009c22:	d102      	bne.n	8009c2a <_read_r+0x1e>
 8009c24:	682b      	ldr	r3, [r5, #0]
 8009c26:	b103      	cbz	r3, 8009c2a <_read_r+0x1e>
 8009c28:	6023      	str	r3, [r4, #0]
 8009c2a:	bd38      	pop	{r3, r4, r5, pc}
 8009c2c:	200046dc 	.word	0x200046dc

08009c30 <_write_r>:
 8009c30:	b538      	push	{r3, r4, r5, lr}
 8009c32:	4d07      	ldr	r5, [pc, #28]	; (8009c50 <_write_r+0x20>)
 8009c34:	4604      	mov	r4, r0
 8009c36:	4608      	mov	r0, r1
 8009c38:	4611      	mov	r1, r2
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	602a      	str	r2, [r5, #0]
 8009c3e:	461a      	mov	r2, r3
 8009c40:	f7f7 feac 	bl	800199c <_write>
 8009c44:	1c43      	adds	r3, r0, #1
 8009c46:	d102      	bne.n	8009c4e <_write_r+0x1e>
 8009c48:	682b      	ldr	r3, [r5, #0]
 8009c4a:	b103      	cbz	r3, 8009c4e <_write_r+0x1e>
 8009c4c:	6023      	str	r3, [r4, #0]
 8009c4e:	bd38      	pop	{r3, r4, r5, pc}
 8009c50:	200046dc 	.word	0x200046dc

08009c54 <__errno>:
 8009c54:	4b01      	ldr	r3, [pc, #4]	; (8009c5c <__errno+0x8>)
 8009c56:	6818      	ldr	r0, [r3, #0]
 8009c58:	4770      	bx	lr
 8009c5a:	bf00      	nop
 8009c5c:	20000184 	.word	0x20000184

08009c60 <__libc_init_array>:
 8009c60:	b570      	push	{r4, r5, r6, lr}
 8009c62:	4d0d      	ldr	r5, [pc, #52]	; (8009c98 <__libc_init_array+0x38>)
 8009c64:	4c0d      	ldr	r4, [pc, #52]	; (8009c9c <__libc_init_array+0x3c>)
 8009c66:	1b64      	subs	r4, r4, r5
 8009c68:	10a4      	asrs	r4, r4, #2
 8009c6a:	2600      	movs	r6, #0
 8009c6c:	42a6      	cmp	r6, r4
 8009c6e:	d109      	bne.n	8009c84 <__libc_init_array+0x24>
 8009c70:	4d0b      	ldr	r5, [pc, #44]	; (8009ca0 <__libc_init_array+0x40>)
 8009c72:	4c0c      	ldr	r4, [pc, #48]	; (8009ca4 <__libc_init_array+0x44>)
 8009c74:	f000 fdc0 	bl	800a7f8 <_init>
 8009c78:	1b64      	subs	r4, r4, r5
 8009c7a:	10a4      	asrs	r4, r4, #2
 8009c7c:	2600      	movs	r6, #0
 8009c7e:	42a6      	cmp	r6, r4
 8009c80:	d105      	bne.n	8009c8e <__libc_init_array+0x2e>
 8009c82:	bd70      	pop	{r4, r5, r6, pc}
 8009c84:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c88:	4798      	blx	r3
 8009c8a:	3601      	adds	r6, #1
 8009c8c:	e7ee      	b.n	8009c6c <__libc_init_array+0xc>
 8009c8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c92:	4798      	blx	r3
 8009c94:	3601      	adds	r6, #1
 8009c96:	e7f2      	b.n	8009c7e <__libc_init_array+0x1e>
 8009c98:	0800a944 	.word	0x0800a944
 8009c9c:	0800a944 	.word	0x0800a944
 8009ca0:	0800a944 	.word	0x0800a944
 8009ca4:	0800a948 	.word	0x0800a948

08009ca8 <__retarget_lock_init_recursive>:
 8009ca8:	4770      	bx	lr

08009caa <__retarget_lock_acquire_recursive>:
 8009caa:	4770      	bx	lr

08009cac <__retarget_lock_release_recursive>:
 8009cac:	4770      	bx	lr
	...

08009cb0 <_free_r>:
 8009cb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009cb2:	2900      	cmp	r1, #0
 8009cb4:	d044      	beq.n	8009d40 <_free_r+0x90>
 8009cb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cba:	9001      	str	r0, [sp, #4]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	f1a1 0404 	sub.w	r4, r1, #4
 8009cc2:	bfb8      	it	lt
 8009cc4:	18e4      	addlt	r4, r4, r3
 8009cc6:	f000 f8df 	bl	8009e88 <__malloc_lock>
 8009cca:	4a1e      	ldr	r2, [pc, #120]	; (8009d44 <_free_r+0x94>)
 8009ccc:	9801      	ldr	r0, [sp, #4]
 8009cce:	6813      	ldr	r3, [r2, #0]
 8009cd0:	b933      	cbnz	r3, 8009ce0 <_free_r+0x30>
 8009cd2:	6063      	str	r3, [r4, #4]
 8009cd4:	6014      	str	r4, [r2, #0]
 8009cd6:	b003      	add	sp, #12
 8009cd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009cdc:	f000 b8da 	b.w	8009e94 <__malloc_unlock>
 8009ce0:	42a3      	cmp	r3, r4
 8009ce2:	d908      	bls.n	8009cf6 <_free_r+0x46>
 8009ce4:	6825      	ldr	r5, [r4, #0]
 8009ce6:	1961      	adds	r1, r4, r5
 8009ce8:	428b      	cmp	r3, r1
 8009cea:	bf01      	itttt	eq
 8009cec:	6819      	ldreq	r1, [r3, #0]
 8009cee:	685b      	ldreq	r3, [r3, #4]
 8009cf0:	1949      	addeq	r1, r1, r5
 8009cf2:	6021      	streq	r1, [r4, #0]
 8009cf4:	e7ed      	b.n	8009cd2 <_free_r+0x22>
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	b10b      	cbz	r3, 8009d00 <_free_r+0x50>
 8009cfc:	42a3      	cmp	r3, r4
 8009cfe:	d9fa      	bls.n	8009cf6 <_free_r+0x46>
 8009d00:	6811      	ldr	r1, [r2, #0]
 8009d02:	1855      	adds	r5, r2, r1
 8009d04:	42a5      	cmp	r5, r4
 8009d06:	d10b      	bne.n	8009d20 <_free_r+0x70>
 8009d08:	6824      	ldr	r4, [r4, #0]
 8009d0a:	4421      	add	r1, r4
 8009d0c:	1854      	adds	r4, r2, r1
 8009d0e:	42a3      	cmp	r3, r4
 8009d10:	6011      	str	r1, [r2, #0]
 8009d12:	d1e0      	bne.n	8009cd6 <_free_r+0x26>
 8009d14:	681c      	ldr	r4, [r3, #0]
 8009d16:	685b      	ldr	r3, [r3, #4]
 8009d18:	6053      	str	r3, [r2, #4]
 8009d1a:	440c      	add	r4, r1
 8009d1c:	6014      	str	r4, [r2, #0]
 8009d1e:	e7da      	b.n	8009cd6 <_free_r+0x26>
 8009d20:	d902      	bls.n	8009d28 <_free_r+0x78>
 8009d22:	230c      	movs	r3, #12
 8009d24:	6003      	str	r3, [r0, #0]
 8009d26:	e7d6      	b.n	8009cd6 <_free_r+0x26>
 8009d28:	6825      	ldr	r5, [r4, #0]
 8009d2a:	1961      	adds	r1, r4, r5
 8009d2c:	428b      	cmp	r3, r1
 8009d2e:	bf04      	itt	eq
 8009d30:	6819      	ldreq	r1, [r3, #0]
 8009d32:	685b      	ldreq	r3, [r3, #4]
 8009d34:	6063      	str	r3, [r4, #4]
 8009d36:	bf04      	itt	eq
 8009d38:	1949      	addeq	r1, r1, r5
 8009d3a:	6021      	streq	r1, [r4, #0]
 8009d3c:	6054      	str	r4, [r2, #4]
 8009d3e:	e7ca      	b.n	8009cd6 <_free_r+0x26>
 8009d40:	b003      	add	sp, #12
 8009d42:	bd30      	pop	{r4, r5, pc}
 8009d44:	200046e4 	.word	0x200046e4

08009d48 <sbrk_aligned>:
 8009d48:	b570      	push	{r4, r5, r6, lr}
 8009d4a:	4e0e      	ldr	r6, [pc, #56]	; (8009d84 <sbrk_aligned+0x3c>)
 8009d4c:	460c      	mov	r4, r1
 8009d4e:	6831      	ldr	r1, [r6, #0]
 8009d50:	4605      	mov	r5, r0
 8009d52:	b911      	cbnz	r1, 8009d5a <sbrk_aligned+0x12>
 8009d54:	f000 fcbc 	bl	800a6d0 <_sbrk_r>
 8009d58:	6030      	str	r0, [r6, #0]
 8009d5a:	4621      	mov	r1, r4
 8009d5c:	4628      	mov	r0, r5
 8009d5e:	f000 fcb7 	bl	800a6d0 <_sbrk_r>
 8009d62:	1c43      	adds	r3, r0, #1
 8009d64:	d00a      	beq.n	8009d7c <sbrk_aligned+0x34>
 8009d66:	1cc4      	adds	r4, r0, #3
 8009d68:	f024 0403 	bic.w	r4, r4, #3
 8009d6c:	42a0      	cmp	r0, r4
 8009d6e:	d007      	beq.n	8009d80 <sbrk_aligned+0x38>
 8009d70:	1a21      	subs	r1, r4, r0
 8009d72:	4628      	mov	r0, r5
 8009d74:	f000 fcac 	bl	800a6d0 <_sbrk_r>
 8009d78:	3001      	adds	r0, #1
 8009d7a:	d101      	bne.n	8009d80 <sbrk_aligned+0x38>
 8009d7c:	f04f 34ff 	mov.w	r4, #4294967295
 8009d80:	4620      	mov	r0, r4
 8009d82:	bd70      	pop	{r4, r5, r6, pc}
 8009d84:	200046e8 	.word	0x200046e8

08009d88 <_malloc_r>:
 8009d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d8c:	1ccd      	adds	r5, r1, #3
 8009d8e:	f025 0503 	bic.w	r5, r5, #3
 8009d92:	3508      	adds	r5, #8
 8009d94:	2d0c      	cmp	r5, #12
 8009d96:	bf38      	it	cc
 8009d98:	250c      	movcc	r5, #12
 8009d9a:	2d00      	cmp	r5, #0
 8009d9c:	4607      	mov	r7, r0
 8009d9e:	db01      	blt.n	8009da4 <_malloc_r+0x1c>
 8009da0:	42a9      	cmp	r1, r5
 8009da2:	d905      	bls.n	8009db0 <_malloc_r+0x28>
 8009da4:	230c      	movs	r3, #12
 8009da6:	603b      	str	r3, [r7, #0]
 8009da8:	2600      	movs	r6, #0
 8009daa:	4630      	mov	r0, r6
 8009dac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009db0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009e84 <_malloc_r+0xfc>
 8009db4:	f000 f868 	bl	8009e88 <__malloc_lock>
 8009db8:	f8d8 3000 	ldr.w	r3, [r8]
 8009dbc:	461c      	mov	r4, r3
 8009dbe:	bb5c      	cbnz	r4, 8009e18 <_malloc_r+0x90>
 8009dc0:	4629      	mov	r1, r5
 8009dc2:	4638      	mov	r0, r7
 8009dc4:	f7ff ffc0 	bl	8009d48 <sbrk_aligned>
 8009dc8:	1c43      	adds	r3, r0, #1
 8009dca:	4604      	mov	r4, r0
 8009dcc:	d155      	bne.n	8009e7a <_malloc_r+0xf2>
 8009dce:	f8d8 4000 	ldr.w	r4, [r8]
 8009dd2:	4626      	mov	r6, r4
 8009dd4:	2e00      	cmp	r6, #0
 8009dd6:	d145      	bne.n	8009e64 <_malloc_r+0xdc>
 8009dd8:	2c00      	cmp	r4, #0
 8009dda:	d048      	beq.n	8009e6e <_malloc_r+0xe6>
 8009ddc:	6823      	ldr	r3, [r4, #0]
 8009dde:	4631      	mov	r1, r6
 8009de0:	4638      	mov	r0, r7
 8009de2:	eb04 0903 	add.w	r9, r4, r3
 8009de6:	f000 fc73 	bl	800a6d0 <_sbrk_r>
 8009dea:	4581      	cmp	r9, r0
 8009dec:	d13f      	bne.n	8009e6e <_malloc_r+0xe6>
 8009dee:	6821      	ldr	r1, [r4, #0]
 8009df0:	1a6d      	subs	r5, r5, r1
 8009df2:	4629      	mov	r1, r5
 8009df4:	4638      	mov	r0, r7
 8009df6:	f7ff ffa7 	bl	8009d48 <sbrk_aligned>
 8009dfa:	3001      	adds	r0, #1
 8009dfc:	d037      	beq.n	8009e6e <_malloc_r+0xe6>
 8009dfe:	6823      	ldr	r3, [r4, #0]
 8009e00:	442b      	add	r3, r5
 8009e02:	6023      	str	r3, [r4, #0]
 8009e04:	f8d8 3000 	ldr.w	r3, [r8]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d038      	beq.n	8009e7e <_malloc_r+0xf6>
 8009e0c:	685a      	ldr	r2, [r3, #4]
 8009e0e:	42a2      	cmp	r2, r4
 8009e10:	d12b      	bne.n	8009e6a <_malloc_r+0xe2>
 8009e12:	2200      	movs	r2, #0
 8009e14:	605a      	str	r2, [r3, #4]
 8009e16:	e00f      	b.n	8009e38 <_malloc_r+0xb0>
 8009e18:	6822      	ldr	r2, [r4, #0]
 8009e1a:	1b52      	subs	r2, r2, r5
 8009e1c:	d41f      	bmi.n	8009e5e <_malloc_r+0xd6>
 8009e1e:	2a0b      	cmp	r2, #11
 8009e20:	d917      	bls.n	8009e52 <_malloc_r+0xca>
 8009e22:	1961      	adds	r1, r4, r5
 8009e24:	42a3      	cmp	r3, r4
 8009e26:	6025      	str	r5, [r4, #0]
 8009e28:	bf18      	it	ne
 8009e2a:	6059      	strne	r1, [r3, #4]
 8009e2c:	6863      	ldr	r3, [r4, #4]
 8009e2e:	bf08      	it	eq
 8009e30:	f8c8 1000 	streq.w	r1, [r8]
 8009e34:	5162      	str	r2, [r4, r5]
 8009e36:	604b      	str	r3, [r1, #4]
 8009e38:	4638      	mov	r0, r7
 8009e3a:	f104 060b 	add.w	r6, r4, #11
 8009e3e:	f000 f829 	bl	8009e94 <__malloc_unlock>
 8009e42:	f026 0607 	bic.w	r6, r6, #7
 8009e46:	1d23      	adds	r3, r4, #4
 8009e48:	1af2      	subs	r2, r6, r3
 8009e4a:	d0ae      	beq.n	8009daa <_malloc_r+0x22>
 8009e4c:	1b9b      	subs	r3, r3, r6
 8009e4e:	50a3      	str	r3, [r4, r2]
 8009e50:	e7ab      	b.n	8009daa <_malloc_r+0x22>
 8009e52:	42a3      	cmp	r3, r4
 8009e54:	6862      	ldr	r2, [r4, #4]
 8009e56:	d1dd      	bne.n	8009e14 <_malloc_r+0x8c>
 8009e58:	f8c8 2000 	str.w	r2, [r8]
 8009e5c:	e7ec      	b.n	8009e38 <_malloc_r+0xb0>
 8009e5e:	4623      	mov	r3, r4
 8009e60:	6864      	ldr	r4, [r4, #4]
 8009e62:	e7ac      	b.n	8009dbe <_malloc_r+0x36>
 8009e64:	4634      	mov	r4, r6
 8009e66:	6876      	ldr	r6, [r6, #4]
 8009e68:	e7b4      	b.n	8009dd4 <_malloc_r+0x4c>
 8009e6a:	4613      	mov	r3, r2
 8009e6c:	e7cc      	b.n	8009e08 <_malloc_r+0x80>
 8009e6e:	230c      	movs	r3, #12
 8009e70:	603b      	str	r3, [r7, #0]
 8009e72:	4638      	mov	r0, r7
 8009e74:	f000 f80e 	bl	8009e94 <__malloc_unlock>
 8009e78:	e797      	b.n	8009daa <_malloc_r+0x22>
 8009e7a:	6025      	str	r5, [r4, #0]
 8009e7c:	e7dc      	b.n	8009e38 <_malloc_r+0xb0>
 8009e7e:	605b      	str	r3, [r3, #4]
 8009e80:	deff      	udf	#255	; 0xff
 8009e82:	bf00      	nop
 8009e84:	200046e4 	.word	0x200046e4

08009e88 <__malloc_lock>:
 8009e88:	4801      	ldr	r0, [pc, #4]	; (8009e90 <__malloc_lock+0x8>)
 8009e8a:	f7ff bf0e 	b.w	8009caa <__retarget_lock_acquire_recursive>
 8009e8e:	bf00      	nop
 8009e90:	200046e0 	.word	0x200046e0

08009e94 <__malloc_unlock>:
 8009e94:	4801      	ldr	r0, [pc, #4]	; (8009e9c <__malloc_unlock+0x8>)
 8009e96:	f7ff bf09 	b.w	8009cac <__retarget_lock_release_recursive>
 8009e9a:	bf00      	nop
 8009e9c:	200046e0 	.word	0x200046e0

08009ea0 <__sfputc_r>:
 8009ea0:	6893      	ldr	r3, [r2, #8]
 8009ea2:	3b01      	subs	r3, #1
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	b410      	push	{r4}
 8009ea8:	6093      	str	r3, [r2, #8]
 8009eaa:	da08      	bge.n	8009ebe <__sfputc_r+0x1e>
 8009eac:	6994      	ldr	r4, [r2, #24]
 8009eae:	42a3      	cmp	r3, r4
 8009eb0:	db01      	blt.n	8009eb6 <__sfputc_r+0x16>
 8009eb2:	290a      	cmp	r1, #10
 8009eb4:	d103      	bne.n	8009ebe <__sfputc_r+0x1e>
 8009eb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009eba:	f000 bb73 	b.w	800a5a4 <__swbuf_r>
 8009ebe:	6813      	ldr	r3, [r2, #0]
 8009ec0:	1c58      	adds	r0, r3, #1
 8009ec2:	6010      	str	r0, [r2, #0]
 8009ec4:	7019      	strb	r1, [r3, #0]
 8009ec6:	4608      	mov	r0, r1
 8009ec8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ecc:	4770      	bx	lr

08009ece <__sfputs_r>:
 8009ece:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ed0:	4606      	mov	r6, r0
 8009ed2:	460f      	mov	r7, r1
 8009ed4:	4614      	mov	r4, r2
 8009ed6:	18d5      	adds	r5, r2, r3
 8009ed8:	42ac      	cmp	r4, r5
 8009eda:	d101      	bne.n	8009ee0 <__sfputs_r+0x12>
 8009edc:	2000      	movs	r0, #0
 8009ede:	e007      	b.n	8009ef0 <__sfputs_r+0x22>
 8009ee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ee4:	463a      	mov	r2, r7
 8009ee6:	4630      	mov	r0, r6
 8009ee8:	f7ff ffda 	bl	8009ea0 <__sfputc_r>
 8009eec:	1c43      	adds	r3, r0, #1
 8009eee:	d1f3      	bne.n	8009ed8 <__sfputs_r+0xa>
 8009ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009ef4 <_vfiprintf_r>:
 8009ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ef8:	460d      	mov	r5, r1
 8009efa:	b09d      	sub	sp, #116	; 0x74
 8009efc:	4614      	mov	r4, r2
 8009efe:	4698      	mov	r8, r3
 8009f00:	4606      	mov	r6, r0
 8009f02:	b118      	cbz	r0, 8009f0c <_vfiprintf_r+0x18>
 8009f04:	6a03      	ldr	r3, [r0, #32]
 8009f06:	b90b      	cbnz	r3, 8009f0c <_vfiprintf_r+0x18>
 8009f08:	f7ff fd74 	bl	80099f4 <__sinit>
 8009f0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f0e:	07d9      	lsls	r1, r3, #31
 8009f10:	d405      	bmi.n	8009f1e <_vfiprintf_r+0x2a>
 8009f12:	89ab      	ldrh	r3, [r5, #12]
 8009f14:	059a      	lsls	r2, r3, #22
 8009f16:	d402      	bmi.n	8009f1e <_vfiprintf_r+0x2a>
 8009f18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f1a:	f7ff fec6 	bl	8009caa <__retarget_lock_acquire_recursive>
 8009f1e:	89ab      	ldrh	r3, [r5, #12]
 8009f20:	071b      	lsls	r3, r3, #28
 8009f22:	d501      	bpl.n	8009f28 <_vfiprintf_r+0x34>
 8009f24:	692b      	ldr	r3, [r5, #16]
 8009f26:	b99b      	cbnz	r3, 8009f50 <_vfiprintf_r+0x5c>
 8009f28:	4629      	mov	r1, r5
 8009f2a:	4630      	mov	r0, r6
 8009f2c:	f000 fb78 	bl	800a620 <__swsetup_r>
 8009f30:	b170      	cbz	r0, 8009f50 <_vfiprintf_r+0x5c>
 8009f32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f34:	07dc      	lsls	r4, r3, #31
 8009f36:	d504      	bpl.n	8009f42 <_vfiprintf_r+0x4e>
 8009f38:	f04f 30ff 	mov.w	r0, #4294967295
 8009f3c:	b01d      	add	sp, #116	; 0x74
 8009f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f42:	89ab      	ldrh	r3, [r5, #12]
 8009f44:	0598      	lsls	r0, r3, #22
 8009f46:	d4f7      	bmi.n	8009f38 <_vfiprintf_r+0x44>
 8009f48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f4a:	f7ff feaf 	bl	8009cac <__retarget_lock_release_recursive>
 8009f4e:	e7f3      	b.n	8009f38 <_vfiprintf_r+0x44>
 8009f50:	2300      	movs	r3, #0
 8009f52:	9309      	str	r3, [sp, #36]	; 0x24
 8009f54:	2320      	movs	r3, #32
 8009f56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f5e:	2330      	movs	r3, #48	; 0x30
 8009f60:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a114 <_vfiprintf_r+0x220>
 8009f64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f68:	f04f 0901 	mov.w	r9, #1
 8009f6c:	4623      	mov	r3, r4
 8009f6e:	469a      	mov	sl, r3
 8009f70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f74:	b10a      	cbz	r2, 8009f7a <_vfiprintf_r+0x86>
 8009f76:	2a25      	cmp	r2, #37	; 0x25
 8009f78:	d1f9      	bne.n	8009f6e <_vfiprintf_r+0x7a>
 8009f7a:	ebba 0b04 	subs.w	fp, sl, r4
 8009f7e:	d00b      	beq.n	8009f98 <_vfiprintf_r+0xa4>
 8009f80:	465b      	mov	r3, fp
 8009f82:	4622      	mov	r2, r4
 8009f84:	4629      	mov	r1, r5
 8009f86:	4630      	mov	r0, r6
 8009f88:	f7ff ffa1 	bl	8009ece <__sfputs_r>
 8009f8c:	3001      	adds	r0, #1
 8009f8e:	f000 80a9 	beq.w	800a0e4 <_vfiprintf_r+0x1f0>
 8009f92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f94:	445a      	add	r2, fp
 8009f96:	9209      	str	r2, [sp, #36]	; 0x24
 8009f98:	f89a 3000 	ldrb.w	r3, [sl]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	f000 80a1 	beq.w	800a0e4 <_vfiprintf_r+0x1f0>
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8009fa8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fac:	f10a 0a01 	add.w	sl, sl, #1
 8009fb0:	9304      	str	r3, [sp, #16]
 8009fb2:	9307      	str	r3, [sp, #28]
 8009fb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009fb8:	931a      	str	r3, [sp, #104]	; 0x68
 8009fba:	4654      	mov	r4, sl
 8009fbc:	2205      	movs	r2, #5
 8009fbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fc2:	4854      	ldr	r0, [pc, #336]	; (800a114 <_vfiprintf_r+0x220>)
 8009fc4:	f7f6 f914 	bl	80001f0 <memchr>
 8009fc8:	9a04      	ldr	r2, [sp, #16]
 8009fca:	b9d8      	cbnz	r0, 800a004 <_vfiprintf_r+0x110>
 8009fcc:	06d1      	lsls	r1, r2, #27
 8009fce:	bf44      	itt	mi
 8009fd0:	2320      	movmi	r3, #32
 8009fd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fd6:	0713      	lsls	r3, r2, #28
 8009fd8:	bf44      	itt	mi
 8009fda:	232b      	movmi	r3, #43	; 0x2b
 8009fdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fe0:	f89a 3000 	ldrb.w	r3, [sl]
 8009fe4:	2b2a      	cmp	r3, #42	; 0x2a
 8009fe6:	d015      	beq.n	800a014 <_vfiprintf_r+0x120>
 8009fe8:	9a07      	ldr	r2, [sp, #28]
 8009fea:	4654      	mov	r4, sl
 8009fec:	2000      	movs	r0, #0
 8009fee:	f04f 0c0a 	mov.w	ip, #10
 8009ff2:	4621      	mov	r1, r4
 8009ff4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ff8:	3b30      	subs	r3, #48	; 0x30
 8009ffa:	2b09      	cmp	r3, #9
 8009ffc:	d94d      	bls.n	800a09a <_vfiprintf_r+0x1a6>
 8009ffe:	b1b0      	cbz	r0, 800a02e <_vfiprintf_r+0x13a>
 800a000:	9207      	str	r2, [sp, #28]
 800a002:	e014      	b.n	800a02e <_vfiprintf_r+0x13a>
 800a004:	eba0 0308 	sub.w	r3, r0, r8
 800a008:	fa09 f303 	lsl.w	r3, r9, r3
 800a00c:	4313      	orrs	r3, r2
 800a00e:	9304      	str	r3, [sp, #16]
 800a010:	46a2      	mov	sl, r4
 800a012:	e7d2      	b.n	8009fba <_vfiprintf_r+0xc6>
 800a014:	9b03      	ldr	r3, [sp, #12]
 800a016:	1d19      	adds	r1, r3, #4
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	9103      	str	r1, [sp, #12]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	bfbb      	ittet	lt
 800a020:	425b      	neglt	r3, r3
 800a022:	f042 0202 	orrlt.w	r2, r2, #2
 800a026:	9307      	strge	r3, [sp, #28]
 800a028:	9307      	strlt	r3, [sp, #28]
 800a02a:	bfb8      	it	lt
 800a02c:	9204      	strlt	r2, [sp, #16]
 800a02e:	7823      	ldrb	r3, [r4, #0]
 800a030:	2b2e      	cmp	r3, #46	; 0x2e
 800a032:	d10c      	bne.n	800a04e <_vfiprintf_r+0x15a>
 800a034:	7863      	ldrb	r3, [r4, #1]
 800a036:	2b2a      	cmp	r3, #42	; 0x2a
 800a038:	d134      	bne.n	800a0a4 <_vfiprintf_r+0x1b0>
 800a03a:	9b03      	ldr	r3, [sp, #12]
 800a03c:	1d1a      	adds	r2, r3, #4
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	9203      	str	r2, [sp, #12]
 800a042:	2b00      	cmp	r3, #0
 800a044:	bfb8      	it	lt
 800a046:	f04f 33ff 	movlt.w	r3, #4294967295
 800a04a:	3402      	adds	r4, #2
 800a04c:	9305      	str	r3, [sp, #20]
 800a04e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a124 <_vfiprintf_r+0x230>
 800a052:	7821      	ldrb	r1, [r4, #0]
 800a054:	2203      	movs	r2, #3
 800a056:	4650      	mov	r0, sl
 800a058:	f7f6 f8ca 	bl	80001f0 <memchr>
 800a05c:	b138      	cbz	r0, 800a06e <_vfiprintf_r+0x17a>
 800a05e:	9b04      	ldr	r3, [sp, #16]
 800a060:	eba0 000a 	sub.w	r0, r0, sl
 800a064:	2240      	movs	r2, #64	; 0x40
 800a066:	4082      	lsls	r2, r0
 800a068:	4313      	orrs	r3, r2
 800a06a:	3401      	adds	r4, #1
 800a06c:	9304      	str	r3, [sp, #16]
 800a06e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a072:	4829      	ldr	r0, [pc, #164]	; (800a118 <_vfiprintf_r+0x224>)
 800a074:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a078:	2206      	movs	r2, #6
 800a07a:	f7f6 f8b9 	bl	80001f0 <memchr>
 800a07e:	2800      	cmp	r0, #0
 800a080:	d03f      	beq.n	800a102 <_vfiprintf_r+0x20e>
 800a082:	4b26      	ldr	r3, [pc, #152]	; (800a11c <_vfiprintf_r+0x228>)
 800a084:	bb1b      	cbnz	r3, 800a0ce <_vfiprintf_r+0x1da>
 800a086:	9b03      	ldr	r3, [sp, #12]
 800a088:	3307      	adds	r3, #7
 800a08a:	f023 0307 	bic.w	r3, r3, #7
 800a08e:	3308      	adds	r3, #8
 800a090:	9303      	str	r3, [sp, #12]
 800a092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a094:	443b      	add	r3, r7
 800a096:	9309      	str	r3, [sp, #36]	; 0x24
 800a098:	e768      	b.n	8009f6c <_vfiprintf_r+0x78>
 800a09a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a09e:	460c      	mov	r4, r1
 800a0a0:	2001      	movs	r0, #1
 800a0a2:	e7a6      	b.n	8009ff2 <_vfiprintf_r+0xfe>
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	3401      	adds	r4, #1
 800a0a8:	9305      	str	r3, [sp, #20]
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	f04f 0c0a 	mov.w	ip, #10
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0b6:	3a30      	subs	r2, #48	; 0x30
 800a0b8:	2a09      	cmp	r2, #9
 800a0ba:	d903      	bls.n	800a0c4 <_vfiprintf_r+0x1d0>
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d0c6      	beq.n	800a04e <_vfiprintf_r+0x15a>
 800a0c0:	9105      	str	r1, [sp, #20]
 800a0c2:	e7c4      	b.n	800a04e <_vfiprintf_r+0x15a>
 800a0c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0c8:	4604      	mov	r4, r0
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	e7f0      	b.n	800a0b0 <_vfiprintf_r+0x1bc>
 800a0ce:	ab03      	add	r3, sp, #12
 800a0d0:	9300      	str	r3, [sp, #0]
 800a0d2:	462a      	mov	r2, r5
 800a0d4:	4b12      	ldr	r3, [pc, #72]	; (800a120 <_vfiprintf_r+0x22c>)
 800a0d6:	a904      	add	r1, sp, #16
 800a0d8:	4630      	mov	r0, r6
 800a0da:	f3af 8000 	nop.w
 800a0de:	4607      	mov	r7, r0
 800a0e0:	1c78      	adds	r0, r7, #1
 800a0e2:	d1d6      	bne.n	800a092 <_vfiprintf_r+0x19e>
 800a0e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0e6:	07d9      	lsls	r1, r3, #31
 800a0e8:	d405      	bmi.n	800a0f6 <_vfiprintf_r+0x202>
 800a0ea:	89ab      	ldrh	r3, [r5, #12]
 800a0ec:	059a      	lsls	r2, r3, #22
 800a0ee:	d402      	bmi.n	800a0f6 <_vfiprintf_r+0x202>
 800a0f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0f2:	f7ff fddb 	bl	8009cac <__retarget_lock_release_recursive>
 800a0f6:	89ab      	ldrh	r3, [r5, #12]
 800a0f8:	065b      	lsls	r3, r3, #25
 800a0fa:	f53f af1d 	bmi.w	8009f38 <_vfiprintf_r+0x44>
 800a0fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a100:	e71c      	b.n	8009f3c <_vfiprintf_r+0x48>
 800a102:	ab03      	add	r3, sp, #12
 800a104:	9300      	str	r3, [sp, #0]
 800a106:	462a      	mov	r2, r5
 800a108:	4b05      	ldr	r3, [pc, #20]	; (800a120 <_vfiprintf_r+0x22c>)
 800a10a:	a904      	add	r1, sp, #16
 800a10c:	4630      	mov	r0, r6
 800a10e:	f000 f879 	bl	800a204 <_printf_i>
 800a112:	e7e4      	b.n	800a0de <_vfiprintf_r+0x1ea>
 800a114:	0800a908 	.word	0x0800a908
 800a118:	0800a912 	.word	0x0800a912
 800a11c:	00000000 	.word	0x00000000
 800a120:	08009ecf 	.word	0x08009ecf
 800a124:	0800a90e 	.word	0x0800a90e

0800a128 <_printf_common>:
 800a128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a12c:	4616      	mov	r6, r2
 800a12e:	4699      	mov	r9, r3
 800a130:	688a      	ldr	r2, [r1, #8]
 800a132:	690b      	ldr	r3, [r1, #16]
 800a134:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a138:	4293      	cmp	r3, r2
 800a13a:	bfb8      	it	lt
 800a13c:	4613      	movlt	r3, r2
 800a13e:	6033      	str	r3, [r6, #0]
 800a140:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a144:	4607      	mov	r7, r0
 800a146:	460c      	mov	r4, r1
 800a148:	b10a      	cbz	r2, 800a14e <_printf_common+0x26>
 800a14a:	3301      	adds	r3, #1
 800a14c:	6033      	str	r3, [r6, #0]
 800a14e:	6823      	ldr	r3, [r4, #0]
 800a150:	0699      	lsls	r1, r3, #26
 800a152:	bf42      	ittt	mi
 800a154:	6833      	ldrmi	r3, [r6, #0]
 800a156:	3302      	addmi	r3, #2
 800a158:	6033      	strmi	r3, [r6, #0]
 800a15a:	6825      	ldr	r5, [r4, #0]
 800a15c:	f015 0506 	ands.w	r5, r5, #6
 800a160:	d106      	bne.n	800a170 <_printf_common+0x48>
 800a162:	f104 0a19 	add.w	sl, r4, #25
 800a166:	68e3      	ldr	r3, [r4, #12]
 800a168:	6832      	ldr	r2, [r6, #0]
 800a16a:	1a9b      	subs	r3, r3, r2
 800a16c:	42ab      	cmp	r3, r5
 800a16e:	dc26      	bgt.n	800a1be <_printf_common+0x96>
 800a170:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a174:	1e13      	subs	r3, r2, #0
 800a176:	6822      	ldr	r2, [r4, #0]
 800a178:	bf18      	it	ne
 800a17a:	2301      	movne	r3, #1
 800a17c:	0692      	lsls	r2, r2, #26
 800a17e:	d42b      	bmi.n	800a1d8 <_printf_common+0xb0>
 800a180:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a184:	4649      	mov	r1, r9
 800a186:	4638      	mov	r0, r7
 800a188:	47c0      	blx	r8
 800a18a:	3001      	adds	r0, #1
 800a18c:	d01e      	beq.n	800a1cc <_printf_common+0xa4>
 800a18e:	6823      	ldr	r3, [r4, #0]
 800a190:	6922      	ldr	r2, [r4, #16]
 800a192:	f003 0306 	and.w	r3, r3, #6
 800a196:	2b04      	cmp	r3, #4
 800a198:	bf02      	ittt	eq
 800a19a:	68e5      	ldreq	r5, [r4, #12]
 800a19c:	6833      	ldreq	r3, [r6, #0]
 800a19e:	1aed      	subeq	r5, r5, r3
 800a1a0:	68a3      	ldr	r3, [r4, #8]
 800a1a2:	bf0c      	ite	eq
 800a1a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1a8:	2500      	movne	r5, #0
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	bfc4      	itt	gt
 800a1ae:	1a9b      	subgt	r3, r3, r2
 800a1b0:	18ed      	addgt	r5, r5, r3
 800a1b2:	2600      	movs	r6, #0
 800a1b4:	341a      	adds	r4, #26
 800a1b6:	42b5      	cmp	r5, r6
 800a1b8:	d11a      	bne.n	800a1f0 <_printf_common+0xc8>
 800a1ba:	2000      	movs	r0, #0
 800a1bc:	e008      	b.n	800a1d0 <_printf_common+0xa8>
 800a1be:	2301      	movs	r3, #1
 800a1c0:	4652      	mov	r2, sl
 800a1c2:	4649      	mov	r1, r9
 800a1c4:	4638      	mov	r0, r7
 800a1c6:	47c0      	blx	r8
 800a1c8:	3001      	adds	r0, #1
 800a1ca:	d103      	bne.n	800a1d4 <_printf_common+0xac>
 800a1cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a1d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1d4:	3501      	adds	r5, #1
 800a1d6:	e7c6      	b.n	800a166 <_printf_common+0x3e>
 800a1d8:	18e1      	adds	r1, r4, r3
 800a1da:	1c5a      	adds	r2, r3, #1
 800a1dc:	2030      	movs	r0, #48	; 0x30
 800a1de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a1e2:	4422      	add	r2, r4
 800a1e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a1e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a1ec:	3302      	adds	r3, #2
 800a1ee:	e7c7      	b.n	800a180 <_printf_common+0x58>
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	4622      	mov	r2, r4
 800a1f4:	4649      	mov	r1, r9
 800a1f6:	4638      	mov	r0, r7
 800a1f8:	47c0      	blx	r8
 800a1fa:	3001      	adds	r0, #1
 800a1fc:	d0e6      	beq.n	800a1cc <_printf_common+0xa4>
 800a1fe:	3601      	adds	r6, #1
 800a200:	e7d9      	b.n	800a1b6 <_printf_common+0x8e>
	...

0800a204 <_printf_i>:
 800a204:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a208:	7e0f      	ldrb	r7, [r1, #24]
 800a20a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a20c:	2f78      	cmp	r7, #120	; 0x78
 800a20e:	4691      	mov	r9, r2
 800a210:	4680      	mov	r8, r0
 800a212:	460c      	mov	r4, r1
 800a214:	469a      	mov	sl, r3
 800a216:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a21a:	d807      	bhi.n	800a22c <_printf_i+0x28>
 800a21c:	2f62      	cmp	r7, #98	; 0x62
 800a21e:	d80a      	bhi.n	800a236 <_printf_i+0x32>
 800a220:	2f00      	cmp	r7, #0
 800a222:	f000 80d4 	beq.w	800a3ce <_printf_i+0x1ca>
 800a226:	2f58      	cmp	r7, #88	; 0x58
 800a228:	f000 80c0 	beq.w	800a3ac <_printf_i+0x1a8>
 800a22c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a230:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a234:	e03a      	b.n	800a2ac <_printf_i+0xa8>
 800a236:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a23a:	2b15      	cmp	r3, #21
 800a23c:	d8f6      	bhi.n	800a22c <_printf_i+0x28>
 800a23e:	a101      	add	r1, pc, #4	; (adr r1, 800a244 <_printf_i+0x40>)
 800a240:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a244:	0800a29d 	.word	0x0800a29d
 800a248:	0800a2b1 	.word	0x0800a2b1
 800a24c:	0800a22d 	.word	0x0800a22d
 800a250:	0800a22d 	.word	0x0800a22d
 800a254:	0800a22d 	.word	0x0800a22d
 800a258:	0800a22d 	.word	0x0800a22d
 800a25c:	0800a2b1 	.word	0x0800a2b1
 800a260:	0800a22d 	.word	0x0800a22d
 800a264:	0800a22d 	.word	0x0800a22d
 800a268:	0800a22d 	.word	0x0800a22d
 800a26c:	0800a22d 	.word	0x0800a22d
 800a270:	0800a3b5 	.word	0x0800a3b5
 800a274:	0800a2dd 	.word	0x0800a2dd
 800a278:	0800a36f 	.word	0x0800a36f
 800a27c:	0800a22d 	.word	0x0800a22d
 800a280:	0800a22d 	.word	0x0800a22d
 800a284:	0800a3d7 	.word	0x0800a3d7
 800a288:	0800a22d 	.word	0x0800a22d
 800a28c:	0800a2dd 	.word	0x0800a2dd
 800a290:	0800a22d 	.word	0x0800a22d
 800a294:	0800a22d 	.word	0x0800a22d
 800a298:	0800a377 	.word	0x0800a377
 800a29c:	682b      	ldr	r3, [r5, #0]
 800a29e:	1d1a      	adds	r2, r3, #4
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	602a      	str	r2, [r5, #0]
 800a2a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	e09f      	b.n	800a3f0 <_printf_i+0x1ec>
 800a2b0:	6820      	ldr	r0, [r4, #0]
 800a2b2:	682b      	ldr	r3, [r5, #0]
 800a2b4:	0607      	lsls	r7, r0, #24
 800a2b6:	f103 0104 	add.w	r1, r3, #4
 800a2ba:	6029      	str	r1, [r5, #0]
 800a2bc:	d501      	bpl.n	800a2c2 <_printf_i+0xbe>
 800a2be:	681e      	ldr	r6, [r3, #0]
 800a2c0:	e003      	b.n	800a2ca <_printf_i+0xc6>
 800a2c2:	0646      	lsls	r6, r0, #25
 800a2c4:	d5fb      	bpl.n	800a2be <_printf_i+0xba>
 800a2c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a2ca:	2e00      	cmp	r6, #0
 800a2cc:	da03      	bge.n	800a2d6 <_printf_i+0xd2>
 800a2ce:	232d      	movs	r3, #45	; 0x2d
 800a2d0:	4276      	negs	r6, r6
 800a2d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2d6:	485a      	ldr	r0, [pc, #360]	; (800a440 <_printf_i+0x23c>)
 800a2d8:	230a      	movs	r3, #10
 800a2da:	e012      	b.n	800a302 <_printf_i+0xfe>
 800a2dc:	682b      	ldr	r3, [r5, #0]
 800a2de:	6820      	ldr	r0, [r4, #0]
 800a2e0:	1d19      	adds	r1, r3, #4
 800a2e2:	6029      	str	r1, [r5, #0]
 800a2e4:	0605      	lsls	r5, r0, #24
 800a2e6:	d501      	bpl.n	800a2ec <_printf_i+0xe8>
 800a2e8:	681e      	ldr	r6, [r3, #0]
 800a2ea:	e002      	b.n	800a2f2 <_printf_i+0xee>
 800a2ec:	0641      	lsls	r1, r0, #25
 800a2ee:	d5fb      	bpl.n	800a2e8 <_printf_i+0xe4>
 800a2f0:	881e      	ldrh	r6, [r3, #0]
 800a2f2:	4853      	ldr	r0, [pc, #332]	; (800a440 <_printf_i+0x23c>)
 800a2f4:	2f6f      	cmp	r7, #111	; 0x6f
 800a2f6:	bf0c      	ite	eq
 800a2f8:	2308      	moveq	r3, #8
 800a2fa:	230a      	movne	r3, #10
 800a2fc:	2100      	movs	r1, #0
 800a2fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a302:	6865      	ldr	r5, [r4, #4]
 800a304:	60a5      	str	r5, [r4, #8]
 800a306:	2d00      	cmp	r5, #0
 800a308:	bfa2      	ittt	ge
 800a30a:	6821      	ldrge	r1, [r4, #0]
 800a30c:	f021 0104 	bicge.w	r1, r1, #4
 800a310:	6021      	strge	r1, [r4, #0]
 800a312:	b90e      	cbnz	r6, 800a318 <_printf_i+0x114>
 800a314:	2d00      	cmp	r5, #0
 800a316:	d04b      	beq.n	800a3b0 <_printf_i+0x1ac>
 800a318:	4615      	mov	r5, r2
 800a31a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a31e:	fb03 6711 	mls	r7, r3, r1, r6
 800a322:	5dc7      	ldrb	r7, [r0, r7]
 800a324:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a328:	4637      	mov	r7, r6
 800a32a:	42bb      	cmp	r3, r7
 800a32c:	460e      	mov	r6, r1
 800a32e:	d9f4      	bls.n	800a31a <_printf_i+0x116>
 800a330:	2b08      	cmp	r3, #8
 800a332:	d10b      	bne.n	800a34c <_printf_i+0x148>
 800a334:	6823      	ldr	r3, [r4, #0]
 800a336:	07de      	lsls	r6, r3, #31
 800a338:	d508      	bpl.n	800a34c <_printf_i+0x148>
 800a33a:	6923      	ldr	r3, [r4, #16]
 800a33c:	6861      	ldr	r1, [r4, #4]
 800a33e:	4299      	cmp	r1, r3
 800a340:	bfde      	ittt	le
 800a342:	2330      	movle	r3, #48	; 0x30
 800a344:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a348:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a34c:	1b52      	subs	r2, r2, r5
 800a34e:	6122      	str	r2, [r4, #16]
 800a350:	f8cd a000 	str.w	sl, [sp]
 800a354:	464b      	mov	r3, r9
 800a356:	aa03      	add	r2, sp, #12
 800a358:	4621      	mov	r1, r4
 800a35a:	4640      	mov	r0, r8
 800a35c:	f7ff fee4 	bl	800a128 <_printf_common>
 800a360:	3001      	adds	r0, #1
 800a362:	d14a      	bne.n	800a3fa <_printf_i+0x1f6>
 800a364:	f04f 30ff 	mov.w	r0, #4294967295
 800a368:	b004      	add	sp, #16
 800a36a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a36e:	6823      	ldr	r3, [r4, #0]
 800a370:	f043 0320 	orr.w	r3, r3, #32
 800a374:	6023      	str	r3, [r4, #0]
 800a376:	4833      	ldr	r0, [pc, #204]	; (800a444 <_printf_i+0x240>)
 800a378:	2778      	movs	r7, #120	; 0x78
 800a37a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a37e:	6823      	ldr	r3, [r4, #0]
 800a380:	6829      	ldr	r1, [r5, #0]
 800a382:	061f      	lsls	r7, r3, #24
 800a384:	f851 6b04 	ldr.w	r6, [r1], #4
 800a388:	d402      	bmi.n	800a390 <_printf_i+0x18c>
 800a38a:	065f      	lsls	r7, r3, #25
 800a38c:	bf48      	it	mi
 800a38e:	b2b6      	uxthmi	r6, r6
 800a390:	07df      	lsls	r7, r3, #31
 800a392:	bf48      	it	mi
 800a394:	f043 0320 	orrmi.w	r3, r3, #32
 800a398:	6029      	str	r1, [r5, #0]
 800a39a:	bf48      	it	mi
 800a39c:	6023      	strmi	r3, [r4, #0]
 800a39e:	b91e      	cbnz	r6, 800a3a8 <_printf_i+0x1a4>
 800a3a0:	6823      	ldr	r3, [r4, #0]
 800a3a2:	f023 0320 	bic.w	r3, r3, #32
 800a3a6:	6023      	str	r3, [r4, #0]
 800a3a8:	2310      	movs	r3, #16
 800a3aa:	e7a7      	b.n	800a2fc <_printf_i+0xf8>
 800a3ac:	4824      	ldr	r0, [pc, #144]	; (800a440 <_printf_i+0x23c>)
 800a3ae:	e7e4      	b.n	800a37a <_printf_i+0x176>
 800a3b0:	4615      	mov	r5, r2
 800a3b2:	e7bd      	b.n	800a330 <_printf_i+0x12c>
 800a3b4:	682b      	ldr	r3, [r5, #0]
 800a3b6:	6826      	ldr	r6, [r4, #0]
 800a3b8:	6961      	ldr	r1, [r4, #20]
 800a3ba:	1d18      	adds	r0, r3, #4
 800a3bc:	6028      	str	r0, [r5, #0]
 800a3be:	0635      	lsls	r5, r6, #24
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	d501      	bpl.n	800a3c8 <_printf_i+0x1c4>
 800a3c4:	6019      	str	r1, [r3, #0]
 800a3c6:	e002      	b.n	800a3ce <_printf_i+0x1ca>
 800a3c8:	0670      	lsls	r0, r6, #25
 800a3ca:	d5fb      	bpl.n	800a3c4 <_printf_i+0x1c0>
 800a3cc:	8019      	strh	r1, [r3, #0]
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	6123      	str	r3, [r4, #16]
 800a3d2:	4615      	mov	r5, r2
 800a3d4:	e7bc      	b.n	800a350 <_printf_i+0x14c>
 800a3d6:	682b      	ldr	r3, [r5, #0]
 800a3d8:	1d1a      	adds	r2, r3, #4
 800a3da:	602a      	str	r2, [r5, #0]
 800a3dc:	681d      	ldr	r5, [r3, #0]
 800a3de:	6862      	ldr	r2, [r4, #4]
 800a3e0:	2100      	movs	r1, #0
 800a3e2:	4628      	mov	r0, r5
 800a3e4:	f7f5 ff04 	bl	80001f0 <memchr>
 800a3e8:	b108      	cbz	r0, 800a3ee <_printf_i+0x1ea>
 800a3ea:	1b40      	subs	r0, r0, r5
 800a3ec:	6060      	str	r0, [r4, #4]
 800a3ee:	6863      	ldr	r3, [r4, #4]
 800a3f0:	6123      	str	r3, [r4, #16]
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3f8:	e7aa      	b.n	800a350 <_printf_i+0x14c>
 800a3fa:	6923      	ldr	r3, [r4, #16]
 800a3fc:	462a      	mov	r2, r5
 800a3fe:	4649      	mov	r1, r9
 800a400:	4640      	mov	r0, r8
 800a402:	47d0      	blx	sl
 800a404:	3001      	adds	r0, #1
 800a406:	d0ad      	beq.n	800a364 <_printf_i+0x160>
 800a408:	6823      	ldr	r3, [r4, #0]
 800a40a:	079b      	lsls	r3, r3, #30
 800a40c:	d413      	bmi.n	800a436 <_printf_i+0x232>
 800a40e:	68e0      	ldr	r0, [r4, #12]
 800a410:	9b03      	ldr	r3, [sp, #12]
 800a412:	4298      	cmp	r0, r3
 800a414:	bfb8      	it	lt
 800a416:	4618      	movlt	r0, r3
 800a418:	e7a6      	b.n	800a368 <_printf_i+0x164>
 800a41a:	2301      	movs	r3, #1
 800a41c:	4632      	mov	r2, r6
 800a41e:	4649      	mov	r1, r9
 800a420:	4640      	mov	r0, r8
 800a422:	47d0      	blx	sl
 800a424:	3001      	adds	r0, #1
 800a426:	d09d      	beq.n	800a364 <_printf_i+0x160>
 800a428:	3501      	adds	r5, #1
 800a42a:	68e3      	ldr	r3, [r4, #12]
 800a42c:	9903      	ldr	r1, [sp, #12]
 800a42e:	1a5b      	subs	r3, r3, r1
 800a430:	42ab      	cmp	r3, r5
 800a432:	dcf2      	bgt.n	800a41a <_printf_i+0x216>
 800a434:	e7eb      	b.n	800a40e <_printf_i+0x20a>
 800a436:	2500      	movs	r5, #0
 800a438:	f104 0619 	add.w	r6, r4, #25
 800a43c:	e7f5      	b.n	800a42a <_printf_i+0x226>
 800a43e:	bf00      	nop
 800a440:	0800a919 	.word	0x0800a919
 800a444:	0800a92a 	.word	0x0800a92a

0800a448 <__sflush_r>:
 800a448:	898a      	ldrh	r2, [r1, #12]
 800a44a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a44e:	4605      	mov	r5, r0
 800a450:	0710      	lsls	r0, r2, #28
 800a452:	460c      	mov	r4, r1
 800a454:	d458      	bmi.n	800a508 <__sflush_r+0xc0>
 800a456:	684b      	ldr	r3, [r1, #4]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	dc05      	bgt.n	800a468 <__sflush_r+0x20>
 800a45c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a45e:	2b00      	cmp	r3, #0
 800a460:	dc02      	bgt.n	800a468 <__sflush_r+0x20>
 800a462:	2000      	movs	r0, #0
 800a464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a468:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a46a:	2e00      	cmp	r6, #0
 800a46c:	d0f9      	beq.n	800a462 <__sflush_r+0x1a>
 800a46e:	2300      	movs	r3, #0
 800a470:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a474:	682f      	ldr	r7, [r5, #0]
 800a476:	6a21      	ldr	r1, [r4, #32]
 800a478:	602b      	str	r3, [r5, #0]
 800a47a:	d032      	beq.n	800a4e2 <__sflush_r+0x9a>
 800a47c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a47e:	89a3      	ldrh	r3, [r4, #12]
 800a480:	075a      	lsls	r2, r3, #29
 800a482:	d505      	bpl.n	800a490 <__sflush_r+0x48>
 800a484:	6863      	ldr	r3, [r4, #4]
 800a486:	1ac0      	subs	r0, r0, r3
 800a488:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a48a:	b10b      	cbz	r3, 800a490 <__sflush_r+0x48>
 800a48c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a48e:	1ac0      	subs	r0, r0, r3
 800a490:	2300      	movs	r3, #0
 800a492:	4602      	mov	r2, r0
 800a494:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a496:	6a21      	ldr	r1, [r4, #32]
 800a498:	4628      	mov	r0, r5
 800a49a:	47b0      	blx	r6
 800a49c:	1c43      	adds	r3, r0, #1
 800a49e:	89a3      	ldrh	r3, [r4, #12]
 800a4a0:	d106      	bne.n	800a4b0 <__sflush_r+0x68>
 800a4a2:	6829      	ldr	r1, [r5, #0]
 800a4a4:	291d      	cmp	r1, #29
 800a4a6:	d82b      	bhi.n	800a500 <__sflush_r+0xb8>
 800a4a8:	4a29      	ldr	r2, [pc, #164]	; (800a550 <__sflush_r+0x108>)
 800a4aa:	410a      	asrs	r2, r1
 800a4ac:	07d6      	lsls	r6, r2, #31
 800a4ae:	d427      	bmi.n	800a500 <__sflush_r+0xb8>
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	6062      	str	r2, [r4, #4]
 800a4b4:	04d9      	lsls	r1, r3, #19
 800a4b6:	6922      	ldr	r2, [r4, #16]
 800a4b8:	6022      	str	r2, [r4, #0]
 800a4ba:	d504      	bpl.n	800a4c6 <__sflush_r+0x7e>
 800a4bc:	1c42      	adds	r2, r0, #1
 800a4be:	d101      	bne.n	800a4c4 <__sflush_r+0x7c>
 800a4c0:	682b      	ldr	r3, [r5, #0]
 800a4c2:	b903      	cbnz	r3, 800a4c6 <__sflush_r+0x7e>
 800a4c4:	6560      	str	r0, [r4, #84]	; 0x54
 800a4c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4c8:	602f      	str	r7, [r5, #0]
 800a4ca:	2900      	cmp	r1, #0
 800a4cc:	d0c9      	beq.n	800a462 <__sflush_r+0x1a>
 800a4ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4d2:	4299      	cmp	r1, r3
 800a4d4:	d002      	beq.n	800a4dc <__sflush_r+0x94>
 800a4d6:	4628      	mov	r0, r5
 800a4d8:	f7ff fbea 	bl	8009cb0 <_free_r>
 800a4dc:	2000      	movs	r0, #0
 800a4de:	6360      	str	r0, [r4, #52]	; 0x34
 800a4e0:	e7c0      	b.n	800a464 <__sflush_r+0x1c>
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	4628      	mov	r0, r5
 800a4e6:	47b0      	blx	r6
 800a4e8:	1c41      	adds	r1, r0, #1
 800a4ea:	d1c8      	bne.n	800a47e <__sflush_r+0x36>
 800a4ec:	682b      	ldr	r3, [r5, #0]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d0c5      	beq.n	800a47e <__sflush_r+0x36>
 800a4f2:	2b1d      	cmp	r3, #29
 800a4f4:	d001      	beq.n	800a4fa <__sflush_r+0xb2>
 800a4f6:	2b16      	cmp	r3, #22
 800a4f8:	d101      	bne.n	800a4fe <__sflush_r+0xb6>
 800a4fa:	602f      	str	r7, [r5, #0]
 800a4fc:	e7b1      	b.n	800a462 <__sflush_r+0x1a>
 800a4fe:	89a3      	ldrh	r3, [r4, #12]
 800a500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a504:	81a3      	strh	r3, [r4, #12]
 800a506:	e7ad      	b.n	800a464 <__sflush_r+0x1c>
 800a508:	690f      	ldr	r7, [r1, #16]
 800a50a:	2f00      	cmp	r7, #0
 800a50c:	d0a9      	beq.n	800a462 <__sflush_r+0x1a>
 800a50e:	0793      	lsls	r3, r2, #30
 800a510:	680e      	ldr	r6, [r1, #0]
 800a512:	bf08      	it	eq
 800a514:	694b      	ldreq	r3, [r1, #20]
 800a516:	600f      	str	r7, [r1, #0]
 800a518:	bf18      	it	ne
 800a51a:	2300      	movne	r3, #0
 800a51c:	eba6 0807 	sub.w	r8, r6, r7
 800a520:	608b      	str	r3, [r1, #8]
 800a522:	f1b8 0f00 	cmp.w	r8, #0
 800a526:	dd9c      	ble.n	800a462 <__sflush_r+0x1a>
 800a528:	6a21      	ldr	r1, [r4, #32]
 800a52a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a52c:	4643      	mov	r3, r8
 800a52e:	463a      	mov	r2, r7
 800a530:	4628      	mov	r0, r5
 800a532:	47b0      	blx	r6
 800a534:	2800      	cmp	r0, #0
 800a536:	dc06      	bgt.n	800a546 <__sflush_r+0xfe>
 800a538:	89a3      	ldrh	r3, [r4, #12]
 800a53a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a53e:	81a3      	strh	r3, [r4, #12]
 800a540:	f04f 30ff 	mov.w	r0, #4294967295
 800a544:	e78e      	b.n	800a464 <__sflush_r+0x1c>
 800a546:	4407      	add	r7, r0
 800a548:	eba8 0800 	sub.w	r8, r8, r0
 800a54c:	e7e9      	b.n	800a522 <__sflush_r+0xda>
 800a54e:	bf00      	nop
 800a550:	dfbffffe 	.word	0xdfbffffe

0800a554 <_fflush_r>:
 800a554:	b538      	push	{r3, r4, r5, lr}
 800a556:	690b      	ldr	r3, [r1, #16]
 800a558:	4605      	mov	r5, r0
 800a55a:	460c      	mov	r4, r1
 800a55c:	b913      	cbnz	r3, 800a564 <_fflush_r+0x10>
 800a55e:	2500      	movs	r5, #0
 800a560:	4628      	mov	r0, r5
 800a562:	bd38      	pop	{r3, r4, r5, pc}
 800a564:	b118      	cbz	r0, 800a56e <_fflush_r+0x1a>
 800a566:	6a03      	ldr	r3, [r0, #32]
 800a568:	b90b      	cbnz	r3, 800a56e <_fflush_r+0x1a>
 800a56a:	f7ff fa43 	bl	80099f4 <__sinit>
 800a56e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d0f3      	beq.n	800a55e <_fflush_r+0xa>
 800a576:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a578:	07d0      	lsls	r0, r2, #31
 800a57a:	d404      	bmi.n	800a586 <_fflush_r+0x32>
 800a57c:	0599      	lsls	r1, r3, #22
 800a57e:	d402      	bmi.n	800a586 <_fflush_r+0x32>
 800a580:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a582:	f7ff fb92 	bl	8009caa <__retarget_lock_acquire_recursive>
 800a586:	4628      	mov	r0, r5
 800a588:	4621      	mov	r1, r4
 800a58a:	f7ff ff5d 	bl	800a448 <__sflush_r>
 800a58e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a590:	07da      	lsls	r2, r3, #31
 800a592:	4605      	mov	r5, r0
 800a594:	d4e4      	bmi.n	800a560 <_fflush_r+0xc>
 800a596:	89a3      	ldrh	r3, [r4, #12]
 800a598:	059b      	lsls	r3, r3, #22
 800a59a:	d4e1      	bmi.n	800a560 <_fflush_r+0xc>
 800a59c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a59e:	f7ff fb85 	bl	8009cac <__retarget_lock_release_recursive>
 800a5a2:	e7dd      	b.n	800a560 <_fflush_r+0xc>

0800a5a4 <__swbuf_r>:
 800a5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5a6:	460e      	mov	r6, r1
 800a5a8:	4614      	mov	r4, r2
 800a5aa:	4605      	mov	r5, r0
 800a5ac:	b118      	cbz	r0, 800a5b6 <__swbuf_r+0x12>
 800a5ae:	6a03      	ldr	r3, [r0, #32]
 800a5b0:	b90b      	cbnz	r3, 800a5b6 <__swbuf_r+0x12>
 800a5b2:	f7ff fa1f 	bl	80099f4 <__sinit>
 800a5b6:	69a3      	ldr	r3, [r4, #24]
 800a5b8:	60a3      	str	r3, [r4, #8]
 800a5ba:	89a3      	ldrh	r3, [r4, #12]
 800a5bc:	071a      	lsls	r2, r3, #28
 800a5be:	d525      	bpl.n	800a60c <__swbuf_r+0x68>
 800a5c0:	6923      	ldr	r3, [r4, #16]
 800a5c2:	b31b      	cbz	r3, 800a60c <__swbuf_r+0x68>
 800a5c4:	6823      	ldr	r3, [r4, #0]
 800a5c6:	6922      	ldr	r2, [r4, #16]
 800a5c8:	1a98      	subs	r0, r3, r2
 800a5ca:	6963      	ldr	r3, [r4, #20]
 800a5cc:	b2f6      	uxtb	r6, r6
 800a5ce:	4283      	cmp	r3, r0
 800a5d0:	4637      	mov	r7, r6
 800a5d2:	dc04      	bgt.n	800a5de <__swbuf_r+0x3a>
 800a5d4:	4621      	mov	r1, r4
 800a5d6:	4628      	mov	r0, r5
 800a5d8:	f7ff ffbc 	bl	800a554 <_fflush_r>
 800a5dc:	b9e0      	cbnz	r0, 800a618 <__swbuf_r+0x74>
 800a5de:	68a3      	ldr	r3, [r4, #8]
 800a5e0:	3b01      	subs	r3, #1
 800a5e2:	60a3      	str	r3, [r4, #8]
 800a5e4:	6823      	ldr	r3, [r4, #0]
 800a5e6:	1c5a      	adds	r2, r3, #1
 800a5e8:	6022      	str	r2, [r4, #0]
 800a5ea:	701e      	strb	r6, [r3, #0]
 800a5ec:	6962      	ldr	r2, [r4, #20]
 800a5ee:	1c43      	adds	r3, r0, #1
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d004      	beq.n	800a5fe <__swbuf_r+0x5a>
 800a5f4:	89a3      	ldrh	r3, [r4, #12]
 800a5f6:	07db      	lsls	r3, r3, #31
 800a5f8:	d506      	bpl.n	800a608 <__swbuf_r+0x64>
 800a5fa:	2e0a      	cmp	r6, #10
 800a5fc:	d104      	bne.n	800a608 <__swbuf_r+0x64>
 800a5fe:	4621      	mov	r1, r4
 800a600:	4628      	mov	r0, r5
 800a602:	f7ff ffa7 	bl	800a554 <_fflush_r>
 800a606:	b938      	cbnz	r0, 800a618 <__swbuf_r+0x74>
 800a608:	4638      	mov	r0, r7
 800a60a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a60c:	4621      	mov	r1, r4
 800a60e:	4628      	mov	r0, r5
 800a610:	f000 f806 	bl	800a620 <__swsetup_r>
 800a614:	2800      	cmp	r0, #0
 800a616:	d0d5      	beq.n	800a5c4 <__swbuf_r+0x20>
 800a618:	f04f 37ff 	mov.w	r7, #4294967295
 800a61c:	e7f4      	b.n	800a608 <__swbuf_r+0x64>
	...

0800a620 <__swsetup_r>:
 800a620:	b538      	push	{r3, r4, r5, lr}
 800a622:	4b2a      	ldr	r3, [pc, #168]	; (800a6cc <__swsetup_r+0xac>)
 800a624:	4605      	mov	r5, r0
 800a626:	6818      	ldr	r0, [r3, #0]
 800a628:	460c      	mov	r4, r1
 800a62a:	b118      	cbz	r0, 800a634 <__swsetup_r+0x14>
 800a62c:	6a03      	ldr	r3, [r0, #32]
 800a62e:	b90b      	cbnz	r3, 800a634 <__swsetup_r+0x14>
 800a630:	f7ff f9e0 	bl	80099f4 <__sinit>
 800a634:	89a3      	ldrh	r3, [r4, #12]
 800a636:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a63a:	0718      	lsls	r0, r3, #28
 800a63c:	d422      	bmi.n	800a684 <__swsetup_r+0x64>
 800a63e:	06d9      	lsls	r1, r3, #27
 800a640:	d407      	bmi.n	800a652 <__swsetup_r+0x32>
 800a642:	2309      	movs	r3, #9
 800a644:	602b      	str	r3, [r5, #0]
 800a646:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a64a:	81a3      	strh	r3, [r4, #12]
 800a64c:	f04f 30ff 	mov.w	r0, #4294967295
 800a650:	e034      	b.n	800a6bc <__swsetup_r+0x9c>
 800a652:	0758      	lsls	r0, r3, #29
 800a654:	d512      	bpl.n	800a67c <__swsetup_r+0x5c>
 800a656:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a658:	b141      	cbz	r1, 800a66c <__swsetup_r+0x4c>
 800a65a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a65e:	4299      	cmp	r1, r3
 800a660:	d002      	beq.n	800a668 <__swsetup_r+0x48>
 800a662:	4628      	mov	r0, r5
 800a664:	f7ff fb24 	bl	8009cb0 <_free_r>
 800a668:	2300      	movs	r3, #0
 800a66a:	6363      	str	r3, [r4, #52]	; 0x34
 800a66c:	89a3      	ldrh	r3, [r4, #12]
 800a66e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a672:	81a3      	strh	r3, [r4, #12]
 800a674:	2300      	movs	r3, #0
 800a676:	6063      	str	r3, [r4, #4]
 800a678:	6923      	ldr	r3, [r4, #16]
 800a67a:	6023      	str	r3, [r4, #0]
 800a67c:	89a3      	ldrh	r3, [r4, #12]
 800a67e:	f043 0308 	orr.w	r3, r3, #8
 800a682:	81a3      	strh	r3, [r4, #12]
 800a684:	6923      	ldr	r3, [r4, #16]
 800a686:	b94b      	cbnz	r3, 800a69c <__swsetup_r+0x7c>
 800a688:	89a3      	ldrh	r3, [r4, #12]
 800a68a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a68e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a692:	d003      	beq.n	800a69c <__swsetup_r+0x7c>
 800a694:	4621      	mov	r1, r4
 800a696:	4628      	mov	r0, r5
 800a698:	f000 f850 	bl	800a73c <__smakebuf_r>
 800a69c:	89a0      	ldrh	r0, [r4, #12]
 800a69e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6a2:	f010 0301 	ands.w	r3, r0, #1
 800a6a6:	d00a      	beq.n	800a6be <__swsetup_r+0x9e>
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	60a3      	str	r3, [r4, #8]
 800a6ac:	6963      	ldr	r3, [r4, #20]
 800a6ae:	425b      	negs	r3, r3
 800a6b0:	61a3      	str	r3, [r4, #24]
 800a6b2:	6923      	ldr	r3, [r4, #16]
 800a6b4:	b943      	cbnz	r3, 800a6c8 <__swsetup_r+0xa8>
 800a6b6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a6ba:	d1c4      	bne.n	800a646 <__swsetup_r+0x26>
 800a6bc:	bd38      	pop	{r3, r4, r5, pc}
 800a6be:	0781      	lsls	r1, r0, #30
 800a6c0:	bf58      	it	pl
 800a6c2:	6963      	ldrpl	r3, [r4, #20]
 800a6c4:	60a3      	str	r3, [r4, #8]
 800a6c6:	e7f4      	b.n	800a6b2 <__swsetup_r+0x92>
 800a6c8:	2000      	movs	r0, #0
 800a6ca:	e7f7      	b.n	800a6bc <__swsetup_r+0x9c>
 800a6cc:	20000184 	.word	0x20000184

0800a6d0 <_sbrk_r>:
 800a6d0:	b538      	push	{r3, r4, r5, lr}
 800a6d2:	4d06      	ldr	r5, [pc, #24]	; (800a6ec <_sbrk_r+0x1c>)
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	4604      	mov	r4, r0
 800a6d8:	4608      	mov	r0, r1
 800a6da:	602b      	str	r3, [r5, #0]
 800a6dc:	f7f9 ff72 	bl	80045c4 <_sbrk>
 800a6e0:	1c43      	adds	r3, r0, #1
 800a6e2:	d102      	bne.n	800a6ea <_sbrk_r+0x1a>
 800a6e4:	682b      	ldr	r3, [r5, #0]
 800a6e6:	b103      	cbz	r3, 800a6ea <_sbrk_r+0x1a>
 800a6e8:	6023      	str	r3, [r4, #0]
 800a6ea:	bd38      	pop	{r3, r4, r5, pc}
 800a6ec:	200046dc 	.word	0x200046dc

0800a6f0 <__swhatbuf_r>:
 800a6f0:	b570      	push	{r4, r5, r6, lr}
 800a6f2:	460c      	mov	r4, r1
 800a6f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6f8:	2900      	cmp	r1, #0
 800a6fa:	b096      	sub	sp, #88	; 0x58
 800a6fc:	4615      	mov	r5, r2
 800a6fe:	461e      	mov	r6, r3
 800a700:	da0d      	bge.n	800a71e <__swhatbuf_r+0x2e>
 800a702:	89a3      	ldrh	r3, [r4, #12]
 800a704:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a708:	f04f 0100 	mov.w	r1, #0
 800a70c:	bf0c      	ite	eq
 800a70e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a712:	2340      	movne	r3, #64	; 0x40
 800a714:	2000      	movs	r0, #0
 800a716:	6031      	str	r1, [r6, #0]
 800a718:	602b      	str	r3, [r5, #0]
 800a71a:	b016      	add	sp, #88	; 0x58
 800a71c:	bd70      	pop	{r4, r5, r6, pc}
 800a71e:	466a      	mov	r2, sp
 800a720:	f000 f848 	bl	800a7b4 <_fstat_r>
 800a724:	2800      	cmp	r0, #0
 800a726:	dbec      	blt.n	800a702 <__swhatbuf_r+0x12>
 800a728:	9901      	ldr	r1, [sp, #4]
 800a72a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a72e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a732:	4259      	negs	r1, r3
 800a734:	4159      	adcs	r1, r3
 800a736:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a73a:	e7eb      	b.n	800a714 <__swhatbuf_r+0x24>

0800a73c <__smakebuf_r>:
 800a73c:	898b      	ldrh	r3, [r1, #12]
 800a73e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a740:	079d      	lsls	r5, r3, #30
 800a742:	4606      	mov	r6, r0
 800a744:	460c      	mov	r4, r1
 800a746:	d507      	bpl.n	800a758 <__smakebuf_r+0x1c>
 800a748:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a74c:	6023      	str	r3, [r4, #0]
 800a74e:	6123      	str	r3, [r4, #16]
 800a750:	2301      	movs	r3, #1
 800a752:	6163      	str	r3, [r4, #20]
 800a754:	b002      	add	sp, #8
 800a756:	bd70      	pop	{r4, r5, r6, pc}
 800a758:	ab01      	add	r3, sp, #4
 800a75a:	466a      	mov	r2, sp
 800a75c:	f7ff ffc8 	bl	800a6f0 <__swhatbuf_r>
 800a760:	9900      	ldr	r1, [sp, #0]
 800a762:	4605      	mov	r5, r0
 800a764:	4630      	mov	r0, r6
 800a766:	f7ff fb0f 	bl	8009d88 <_malloc_r>
 800a76a:	b948      	cbnz	r0, 800a780 <__smakebuf_r+0x44>
 800a76c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a770:	059a      	lsls	r2, r3, #22
 800a772:	d4ef      	bmi.n	800a754 <__smakebuf_r+0x18>
 800a774:	f023 0303 	bic.w	r3, r3, #3
 800a778:	f043 0302 	orr.w	r3, r3, #2
 800a77c:	81a3      	strh	r3, [r4, #12]
 800a77e:	e7e3      	b.n	800a748 <__smakebuf_r+0xc>
 800a780:	89a3      	ldrh	r3, [r4, #12]
 800a782:	6020      	str	r0, [r4, #0]
 800a784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a788:	81a3      	strh	r3, [r4, #12]
 800a78a:	9b00      	ldr	r3, [sp, #0]
 800a78c:	6163      	str	r3, [r4, #20]
 800a78e:	9b01      	ldr	r3, [sp, #4]
 800a790:	6120      	str	r0, [r4, #16]
 800a792:	b15b      	cbz	r3, 800a7ac <__smakebuf_r+0x70>
 800a794:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a798:	4630      	mov	r0, r6
 800a79a:	f000 f81d 	bl	800a7d8 <_isatty_r>
 800a79e:	b128      	cbz	r0, 800a7ac <__smakebuf_r+0x70>
 800a7a0:	89a3      	ldrh	r3, [r4, #12]
 800a7a2:	f023 0303 	bic.w	r3, r3, #3
 800a7a6:	f043 0301 	orr.w	r3, r3, #1
 800a7aa:	81a3      	strh	r3, [r4, #12]
 800a7ac:	89a3      	ldrh	r3, [r4, #12]
 800a7ae:	431d      	orrs	r5, r3
 800a7b0:	81a5      	strh	r5, [r4, #12]
 800a7b2:	e7cf      	b.n	800a754 <__smakebuf_r+0x18>

0800a7b4 <_fstat_r>:
 800a7b4:	b538      	push	{r3, r4, r5, lr}
 800a7b6:	4d07      	ldr	r5, [pc, #28]	; (800a7d4 <_fstat_r+0x20>)
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	4604      	mov	r4, r0
 800a7bc:	4608      	mov	r0, r1
 800a7be:	4611      	mov	r1, r2
 800a7c0:	602b      	str	r3, [r5, #0]
 800a7c2:	f7f9 fed6 	bl	8004572 <_fstat>
 800a7c6:	1c43      	adds	r3, r0, #1
 800a7c8:	d102      	bne.n	800a7d0 <_fstat_r+0x1c>
 800a7ca:	682b      	ldr	r3, [r5, #0]
 800a7cc:	b103      	cbz	r3, 800a7d0 <_fstat_r+0x1c>
 800a7ce:	6023      	str	r3, [r4, #0]
 800a7d0:	bd38      	pop	{r3, r4, r5, pc}
 800a7d2:	bf00      	nop
 800a7d4:	200046dc 	.word	0x200046dc

0800a7d8 <_isatty_r>:
 800a7d8:	b538      	push	{r3, r4, r5, lr}
 800a7da:	4d06      	ldr	r5, [pc, #24]	; (800a7f4 <_isatty_r+0x1c>)
 800a7dc:	2300      	movs	r3, #0
 800a7de:	4604      	mov	r4, r0
 800a7e0:	4608      	mov	r0, r1
 800a7e2:	602b      	str	r3, [r5, #0]
 800a7e4:	f7f9 fed5 	bl	8004592 <_isatty>
 800a7e8:	1c43      	adds	r3, r0, #1
 800a7ea:	d102      	bne.n	800a7f2 <_isatty_r+0x1a>
 800a7ec:	682b      	ldr	r3, [r5, #0]
 800a7ee:	b103      	cbz	r3, 800a7f2 <_isatty_r+0x1a>
 800a7f0:	6023      	str	r3, [r4, #0]
 800a7f2:	bd38      	pop	{r3, r4, r5, pc}
 800a7f4:	200046dc 	.word	0x200046dc

0800a7f8 <_init>:
 800a7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7fa:	bf00      	nop
 800a7fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7fe:	bc08      	pop	{r3}
 800a800:	469e      	mov	lr, r3
 800a802:	4770      	bx	lr

0800a804 <_fini>:
 800a804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a806:	bf00      	nop
 800a808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a80a:	bc08      	pop	{r3}
 800a80c:	469e      	mov	lr, r3
 800a80e:	4770      	bx	lr
